{
  "address": "0x0a97B1F02bfC04DFb6615d546Eb3A083308e7f10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "AccessManagerAlreadyScheduled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessManagerBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "AccessManagerExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "name": "AccessManagerInvalidInitialAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccessManagerLockedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "AccessManagerLockedRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "AccessManagerNotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        }
      ],
      "name": "AccessManagerNotScheduled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgsender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "AccessManagerUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "AccessManagerUnauthorizedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgsender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "AccessManagerUnauthorizedCancel",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AccessManagerUnauthorizedConsume",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "CannotRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "CannotTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyNewToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "EnumerableMapNonexistentKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectPosition",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "NotOwned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "TooBigRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnsufficientManagerBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BoughtTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "OperationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "OperationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OperationScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "admin",
          "type": "uint64"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "since",
          "type": "uint48"
        }
      ],
      "name": "RoleGrantDelayChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "since",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newMember",
          "type": "bool"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "guardian",
          "type": "uint64"
        }
      ],
      "name": "RoleGuardianChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "RoleLabel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "since",
          "type": "uint48"
        }
      ],
      "name": "TargetAdminDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        }
      ],
      "name": "TargetClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "TargetFunctionRoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_ROLE",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratePos",
          "type": "uint256"
        }
      ],
      "name": "at",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "canCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "immediate",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "consumeScheduledOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "defineToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "freeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccess",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "since",
          "type": "uint48"
        },
        {
          "internalType": "uint32",
          "name": "currentDelay",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "pendingDelay",
          "type": "uint32"
        },
        {
          "internalType": "uint48",
          "name": "effect",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getResultAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "getRoleGrantDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "getRoleGuardian",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "getTargetAdminDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "getTargetFunctionRole",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "executionDelay",
          "type": "uint32"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "hasRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isMember",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "executionDelay",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isTargetClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "labelRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSetback",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint48",
          "name": "when",
          "type": "uint48"
        }
      ],
      "name": "schedule",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "name": "setBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "newDelay",
          "type": "uint32"
        }
      ],
      "name": "setGrantDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "admin",
          "type": "uint64"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "guardian",
          "type": "uint64"
        }
      ],
      "name": "setRoleGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newDelay",
          "type": "uint32"
        }
      ],
      "name": "setTargetAdminDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        }
      ],
      "name": "setTargetClosed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "uint64",
          "name": "roleId",
          "type": "uint64"
        }
      ],
      "name": "setTargetFunctionRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "transferAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "updateAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x369e289b1e8f8e4940def9becc22c363da3481086335df0bf5878175992cc622",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x9Cb1bd9c6968425F674688697882d6d09C7edF28",
    "contractAddress": null,
    "transactionIndex": 54,
    "gasUsed": "3821789",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000040800400000000000000000000000000000000008000000000000000000000000000000020000000000000000402000000000000000000000000008000000000000000000000000000000000000000100000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x69a93cac77d0e982875ffa49a9e14d0f57df32a2f16630926998aa2a5808fcb0",
    "transactionHash": "0x369e289b1e8f8e4940def9becc22c363da3481086335df0bf5878175992cc622",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 4974318,
        "transactionHash": "0x369e289b1e8f8e4940def9becc22c363da3481086335df0bf5878175992cc622",
        "address": "0x0a97B1F02bfC04DFb6615d546Eb3A083308e7f10",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009cb1bd9c6968425f674688697882d6d09c7edf28"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x69a93cac77d0e982875ffa49a9e14d0f57df32a2f16630926998aa2a5808fcb0"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 4974318,
        "transactionHash": "0x369e289b1e8f8e4940def9becc22c363da3481086335df0bf5878175992cc622",
        "address": "0x0a97B1F02bfC04DFb6615d546Eb3A083308e7f10",
        "topics": [
          "0xf98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009cb1bd9c6968425f674688697882d6d09c7edf28"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000658d910c0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 132,
        "blockHash": "0x69a93cac77d0e982875ffa49a9e14d0f57df32a2f16630926998aa2a5808fcb0"
      }
    ],
    "blockNumber": 4974318,
    "cumulativeGasUsed": "10836503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Cb1bd9c6968425F674688697882d6d09C7edF28",
    "0x9f76A75005f023FF8aA29c310FeaDF31A8118230",
    20
  ],
  "numDeployments": 9,
  "solcInputHash": "5969c7a709f83b433de12a2facd197c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManagerBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"AccessManagerInvalidInitialAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessManagerLockedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerLockedRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCancel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AccessManagerUnauthorizedConsume\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CannotRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CannotTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyNewToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPosition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"NotOwned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TooBigRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsufficientManagerBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"RoleGrantDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMember\",\"type\":\"bool\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"RoleGuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RoleLabel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"TargetAdminDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"TargetClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"TargetFunctionRoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratePos\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"immediate\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"consumeScheduledOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"defineToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"currentDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pendingDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"effect\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getResultAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGrantDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGuardian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getTargetAdminDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getTargetFunctionRole\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"hasRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isTargetClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSetback\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"when\",\"type\":\"uint48\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setGrantDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"setRoleGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setTargetAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setTargetClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"setTargetFunctionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"transferAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ilya A. Shlyakhovoy\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"OperationCanceled(bytes32,uint32)\":{\"details\":\"A scheduled operation was canceled.\"},\"OperationExecuted(bytes32,uint32)\":{\"details\":\"A scheduled operation was executed.\"},\"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)\":{\"details\":\"A delayed operation was scheduled.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(uint64,uint64)\":{\"details\":\"Role acting as admin over a given `roleId` is updated.\"},\"RoleGrantDelayChanged(uint64,uint32,uint48)\":{\"details\":\"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\"},\"RoleGranted(uint64,address,uint32,uint48,bool)\":{\"details\":\"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated.\"},\"RoleGuardianChanged(uint64,uint64)\":{\"details\":\"Role acting as guardian over a given `roleId` is updated.\"},\"RoleLabel(uint64,string)\":{\"details\":\"Informational labelling for a roleId.\"},\"RoleRevoked(uint64,address)\":{\"details\":\"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\"},\"TargetAdminDelayUpdated(address,uint32,uint48)\":{\"details\":\"Admin delay for a given `target` will be updated to `delay` when `since` is reached.\"},\"TargetClosed(address,bool)\":{\"details\":\"Target mode is updated (true = closed, false = open).\"},\"TargetFunctionRoleUpdated(address,bytes4,uint64)\":{\"details\":\"Role required to invoke `selector` on `target` is updated to `roleId`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead.\"},\"cancel(address,address,bytes)\":{\"details\":\"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event.\"},\"consumeScheduledOp(address,bytes)\":{\"details\":\"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event.\"},\"execute(address,bytes)\":{\"details\":\"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed.\"},\"expiration()\":{\"details\":\"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage.\"},\"getAccess(uint64,address)\":{\"details\":\"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\"},\"getNonce(bytes32)\":{\"details\":\"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled.\"},\"getRoleAdmin(uint64)\":{\"details\":\"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role.\"},\"getRoleGrantDelay(uint64)\":{\"details\":\"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\"},\"getRoleGuardian(uint64)\":{\"details\":\"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role.\"},\"getSchedule(bytes32)\":{\"details\":\"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled.\"},\"getTargetAdminDelay(address)\":{\"details\":\"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\"},\"getTargetFunctionRole(address,bytes4)\":{\"details\":\"Get the role required to call a function.\"},\"grantRole(uint64,address,uint32)\":{\"details\":\"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event.\"},\"hasRole(uint64,address)\":{\"details\":\"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details.\"},\"hashOperation(address,address,bytes)\":{\"details\":\"Hashing function for delayed operations.\"},\"isTargetClosed(address)\":{\"details\":\"Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\"},\"labelRole(uint64,string)\":{\"details\":\"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event.\"},\"minSetback()\":{\"details\":\"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(uint64,address)\":{\"details\":\"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role.\"},\"revokeRole(uint64,address)\":{\"details\":\"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role.\"},\"schedule(address,bytes,uint48)\":{\"details\":\"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding.\"},\"setGrantDelay(uint64,uint32)\":{\"details\":\"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event.\"},\"setRate(address,uint256)\":{\"params\":{\"currency\":\"the address of the currency token\",\"rate\":\"the exchange rate to token\"}},\"setRoleAdmin(uint64,uint64)\":{\"details\":\"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event\"},\"setRoleGuardian(uint64,uint64)\":{\"details\":\"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event\"},\"setTargetAdminDelay(address,uint32)\":{\"details\":\"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event.\"},\"setTargetClosed(address,bool)\":{\"details\":\"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event.\"},\"setTargetFunctionRole(address,bytes4[],uint64)\":{\"details\":\"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAuthority(address,address)\":{\"details\":\"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin\"}},\"title\":\"PresaleManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRate(address,uint256)\":{\"notice\":\"Define or change new allowed currency with rate. Rate cannot be more than 100  tokens for the 1 currency unit. Rate is nominated in token decimals\"}},\"notice\":\"The simple Manager contract for presale phase during the mature Manager contract in development Only confirms execution of token functions if owner called it and receives the funds in the stablecoins\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/management/PresaleManager.sol\":\"PresaleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Multicall} from \\\"../../utils/Multicall.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev AccessManager is a central contract to store the permissions of a system.\\n *\\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\\n * effectively restricted.\\n *\\n * The restriction rules for such functions are defined in terms of \\\"roles\\\" identified by an `uint64` and scoped\\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\\n *\\n * For each target contract, admins can configure the following without any delay:\\n *\\n * * The target's {AccessManaged-authority} via {updateAuthority}.\\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\\n *\\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\\n * Additionally, each role has the following configuration options restricted to this manager's admins:\\n *\\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\\n * * A delay of any target's admin action via {setTargetAdminDelay}.\\n * * A role label for discoverability purposes with {labelRole}.\\n *\\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\\n * restricted to each role's admin (see {getRoleAdmin}).\\n *\\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\\n *\\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\\n * the return data are a boolean as expected by that interface.\\n *\\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\\n * will be {AccessManager} itself.\\n *\\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\\n * mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\\n * {{AccessControl-renounceRole}}.\\n */\\ncontract AccessManager is Context, Multicall, IAccessManager {\\n    using Time for *;\\n\\n    // Structure that stores the details for a target contract.\\n    struct TargetConfig {\\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\\n        Time.Delay adminDelay;\\n        bool closed;\\n    }\\n\\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\\n    struct Access {\\n        // Timepoint at which the user gets the permission.\\n        // If this is either 0 or in the future, then the role permission is not available.\\n        uint48 since;\\n        // Delay for execution. Only applies to restricted() / execute() calls.\\n        Time.Delay delay;\\n    }\\n\\n    // Structure that stores the details of a role.\\n    struct Role {\\n        // Members of the role.\\n        mapping(address user => Access access) members;\\n        // Admin who can grant or revoke permissions.\\n        uint64 admin;\\n        // Guardian who can cancel operations targeting functions that need this role.\\n        uint64 guardian;\\n        // Delay in which the role takes effect after being granted.\\n        Time.Delay grantDelay;\\n    }\\n\\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\\n    struct Schedule {\\n        // Moment at which the operation can be executed.\\n        uint48 timepoint;\\n        // Operation nonce to allow third-party contracts to identify the operation.\\n        uint32 nonce;\\n    }\\n\\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\\n\\n    mapping(address target => TargetConfig mode) private _targets;\\n    mapping(uint64 roleId => Role) private _roles;\\n    mapping(bytes32 operationId => Schedule) private _schedules;\\n\\n    // Used to identify operations that are currently being executed via {execute}.\\n    // This should be transient storage when supported by the EVM.\\n    bytes32 private _executionId;\\n\\n    /**\\n     * @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\\n     * {_getAdminRestrictions}.\\n     */\\n    modifier onlyAuthorized() {\\n        _checkAuthorized();\\n        _;\\n    }\\n\\n    constructor(address initialAdmin) {\\n        if (initialAdmin == address(0)) {\\n            revert AccessManagerInvalidInitialAdmin(address(0));\\n        }\\n\\n        // admin is active immediately and without any execution delay.\\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\\n    }\\n\\n    // =================================================== GETTERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) public view virtual returns (bool immediate, uint32 delay) {\\n        if (isTargetClosed(target)) {\\n            return (false, 0);\\n        } else if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(target, selector), 0);\\n        } else {\\n            uint64 roleId = getTargetFunctionRole(target, selector);\\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function expiration() public view virtual returns (uint32) {\\n        return 1 weeks;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function minSetback() public view virtual returns (uint32) {\\n        return 5 days;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function isTargetClosed(address target) public view virtual returns (bool) {\\n        return _targets[target].closed;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\\n        return _targets[target].allowedRoles[selector];\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\\n        return _targets[target].adminDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].admin;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].guardian;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\\n        return _roles[roleId].grantDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\\n        Access storage access = _roles[roleId].members[account];\\n\\n        since = access.since;\\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\\n\\n        return (since, currentDelay, pendingDelay, effect);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hasRole(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\\n        if (roleId == PUBLIC_ROLE) {\\n            return (true, 0);\\n        } else {\\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\\n        }\\n    }\\n\\n    // =============================================== ROLE MANAGEMENT ===============================================\\n    /// @inheritdoc IAccessManager\\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n        emit RoleLabel(roleId, label);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\\n        _revokeRole(roleId, account);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessManagerBadConfirmation();\\n        }\\n        _revokeRole(roleId, callerConfirmation);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\\n        _setRoleAdmin(roleId, admin);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\\n        _setRoleGuardian(roleId, guardian);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\\n        _setGrantDelay(roleId, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function _grantRole(\\n        uint64 roleId,\\n        address account,\\n        uint32 grantDelay,\\n        uint32 executionDelay\\n    ) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        bool newMember = _roles[roleId].members[account].since == 0;\\n        uint48 since;\\n\\n        if (newMember) {\\n            since = Time.timestamp() + grantDelay;\\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\\n        } else {\\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\\n            // any change to the execution delay within the duration of the role admin delay.\\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\\n                executionDelay,\\n                0\\n            );\\n        }\\n\\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\\n        return newMember;\\n    }\\n\\n    /**\\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\\n     * Returns true if the role was previously granted.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        if (_roles[roleId].members[account].since == 0) {\\n            return false;\\n        }\\n\\n        delete _roles[roleId].members[account];\\n\\n        emit RoleRevoked(roleId, account);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleAdmin} without access control.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to set grant or revoke such role.\\n     */\\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].admin = admin;\\n\\n        emit RoleAdminChanged(roleId, admin);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleGuardian} without access control.\\n     *\\n     * Emits a {RoleGuardianChanged} event.\\n     *\\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to cancel any scheduled operation for such role.\\n     */\\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].guardian = guardian;\\n\\n        emit RoleGuardianChanged(roleId, guardian);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setGrantDelay} without access control.\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        uint48 effect;\\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\\n\\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\\n    }\\n\\n    // ============================================= FUNCTION MANAGEMENT ==============================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetFunctionRole(\\n        address target,\\n        bytes4[] calldata selectors,\\n        uint64 roleId\\n    ) public virtual onlyAuthorized {\\n        for (uint256 i = 0; i < selectors.length; ++i) {\\n            _setTargetFunctionRole(target, selectors[i], roleId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetFunctionRole} without access control.\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event.\\n     */\\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\\n        _targets[target].allowedRoles[selector] = roleId;\\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\\n        _setTargetAdminDelay(target, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetAdminDelay} without access control.\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\\n        uint48 effect;\\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\\n\\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\\n    }\\n\\n    // =============================================== MODE MANAGEMENT ================================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\\n        _setTargetClosed(target, closed);\\n    }\\n\\n    /**\\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function _setTargetClosed(address target, bool closed) internal virtual {\\n        if (target == address(this)) {\\n            revert AccessManagerLockedAccount(target);\\n        }\\n        _targets[target].closed = closed;\\n        emit TargetClosed(target, closed);\\n    }\\n\\n    // ============================================== DELAYED OPERATIONS ==============================================\\n    /// @inheritdoc IAccessManager\\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\\n        uint48 timepoint = _schedules[id].timepoint;\\n        return _isExpired(timepoint) ? 0 : timepoint;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\\n        return _schedules[id].nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        uint48 minWhen = Time.timestamp() + setback;\\n\\n        // if call with delay is not authorized, or if requested timing is too soon\\n        if (setback == 0 || (when > 0 && when < minWhen)) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        // Reuse variable due to stack too deep\\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\\n\\n        // If caller is authorised, schedule operation\\n        operationId = hashOperation(caller, target, data);\\n\\n        _checkNotScheduled(operationId);\\n\\n        unchecked {\\n            // It's not feasible to overflow the nonce in less than 1000 years\\n            nonce = _schedules[operationId].nonce + 1;\\n        }\\n        _schedules[operationId].timepoint = when;\\n        _schedules[operationId].nonce = nonce;\\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\\n\\n        // Using named return values because otherwise we get stack too deep\\n    }\\n\\n    /**\\n     * @dev Reverts if the operation is currently scheduled and has not expired.\\n     * (Note: This function was introduced due to stack too deep errors in schedule.)\\n     */\\n    function _checkNotScheduled(bytes32 operationId) private view {\\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\\n            revert AccessManagerAlreadyScheduled(operationId);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        // If caller is not authorised, revert\\n        if (!immediate && setback == 0) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        uint32 nonce;\\n\\n        // If caller is authorised, check operation was scheduled early enough\\n        // Consume an available schedule even if there is no currently enforced delay\\n        if (setback != 0 || getSchedule(operationId) != 0) {\\n            nonce = _consumeScheduledOp(operationId);\\n        }\\n\\n        // Mark the target and selector as authorised\\n        bytes32 executionIdBefore = _executionId;\\n        _executionId = _hashExecutionId(target, _checkSelector(data));\\n\\n        // Perform call\\n        Address.functionCallWithValue(target, data, msg.value);\\n\\n        // Reset execute identifier\\n        _executionId = executionIdBefore;\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\\n        address msgsender = _msgSender();\\n        bytes4 selector = _checkSelector(data);\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        if (_schedules[operationId].timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (caller != msgsender) {\\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\\n            if (!isAdmin && !isGuardian) {\\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\\n            }\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        uint32 nonce = _schedules[operationId].nonce;\\n        emit OperationCanceled(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\\n        address target = _msgSender();\\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\\n            revert AccessManagerUnauthorizedConsume(target);\\n        }\\n        _consumeScheduledOp(hashOperation(caller, target, data));\\n    }\\n\\n    /**\\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\\n     *\\n     * Returns the nonce of the scheduled operation that is consumed.\\n     */\\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\\n        uint48 timepoint = _schedules[operationId].timepoint;\\n        uint32 nonce = _schedules[operationId].nonce;\\n\\n        if (timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (timepoint > Time.timestamp()) {\\n            revert AccessManagerNotReady(operationId);\\n        } else if (_isExpired(timepoint)) {\\n            revert AccessManagerExpired(operationId);\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        emit OperationExecuted(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\\n        return keccak256(abi.encode(caller, target, data));\\n    }\\n\\n    // ==================================================== OTHERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\\n        IAccessManaged(target).setAuthority(newAuthority);\\n    }\\n\\n    // ================================================= ADMIN LOGIC ==================================================\\n    /**\\n     * @dev Check if the current call is authorized according to admin logic.\\n     */\\n    function _checkAuthorized() private {\\n        address caller = _msgSender();\\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\\n        if (!immediate) {\\n            if (delay == 0) {\\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\\n            } else {\\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\\n     *\\n     * Returns:\\n     * - bool restricted: does this data match a restricted operation\\n     * - uint64: which role is this operation restricted to\\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\\n     */\\n    function _getAdminRestrictions(\\n        bytes calldata data\\n    ) private view returns (bool restricted, uint64 roleAdminId, uint32 executionDelay) {\\n        if (data.length < 4) {\\n            return (false, 0, 0);\\n        }\\n\\n        bytes4 selector = _checkSelector(data);\\n\\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\\n        if (\\n            selector == this.labelRole.selector ||\\n            selector == this.setRoleAdmin.selector ||\\n            selector == this.setRoleGuardian.selector ||\\n            selector == this.setGrantDelay.selector ||\\n            selector == this.setTargetAdminDelay.selector\\n        ) {\\n            return (true, ADMIN_ROLE, 0);\\n        }\\n\\n        // Restricted to ADMIN with the admin delay corresponding to the target\\n        if (\\n            selector == this.updateAuthority.selector ||\\n            selector == this.setTargetClosed.selector ||\\n            selector == this.setTargetFunctionRole.selector\\n        ) {\\n            // First argument is a target.\\n            address target = abi.decode(data[0x04:0x24], (address));\\n            uint32 delay = getTargetAdminDelay(target);\\n            return (true, ADMIN_ROLE, delay);\\n        }\\n\\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\\n            // First argument is a roleId.\\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\\n            return (true, getRoleAdmin(roleId), 0);\\n        }\\n\\n        return (false, 0, 0);\\n    }\\n\\n    // =================================================== HELPERS ====================================================\\n    /**\\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\\n     * when the target is this contract.\\n     *\\n     * Returns:\\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\\n     * - uint32 delay: the execution delay\\n     */\\n    function _canCallExtended(\\n        address caller,\\n        address target,\\n        bytes calldata data\\n    ) private view returns (bool immediate, uint32 delay) {\\n        if (target == address(this)) {\\n            return _canCallSelf(caller, data);\\n        } else {\\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\\n        }\\n    }\\n\\n    /**\\n     * @dev A version of {canCall} that checks for admin restrictions in this contract.\\n     */\\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\\n        if (data.length < 4) {\\n            return (false, 0);\\n        }\\n\\n        if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\\n        }\\n\\n        (bool enabled, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\\n        if (!enabled) {\\n            return (false, 0);\\n        }\\n\\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\\n        if (!inRole) {\\n            return (false, 0);\\n        }\\n\\n        // downcast is safe because both options are uint32\\n        delay = uint32(Math.max(operationDelay, executionDelay));\\n        return (delay == 0, delay);\\n    }\\n\\n    /**\\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\\n     */\\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\\n        return _executionId == _hashExecutionId(target, selector);\\n    }\\n\\n    /**\\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\\n     */\\n    function _isExpired(uint48 timepoint) private view returns (bool) {\\n        return timepoint + expiration() <= Time.timestamp();\\n    }\\n\\n    /**\\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\\n     */\\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\\n        return bytes4(data[0:4]);\\n    }\\n\\n    /**\\n     * @dev Hashing function for execute protection\\n     */\\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\\n        return keccak256(abi.encode(target, selector));\\n    }\\n}\\n\",\"keccak256\":\"0x400d1683c04190b85f1dcaeb05d9206fe9fdbafbb3c7a75b18bfe1d84038a876\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"contracts/management/PresaleManager.sol\":{\"content\":\"// SPDX-License-Identifier: Private\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/manager/AccessManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\\\";\\nimport \\\"contracts/tokens/IFreezable.sol\\\"; \\n\\n/**\\n * @title PresaleManager\\n * @author Ilya A. Shlyakhovoy\\n * @notice The simple Manager contract for presale phase during the\\n * mature Manager contract in development\\n * Only confirms execution of token functions if owner called it and\\n * receives the funds in the stablecoins\\n */\\n\\ncontract PresaleManager is Ownable, AccessManager, Pausable {\\n    uint256 public immutable SALT ;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    error EmptyToken();\\n    error EmptyCurrency();\\n    error EmptyRate();\\n    error TooBigRate(uint256 rate);\\n    error EmptyValue();\\n    error CannotRedeem(address currency);\\n    error CannotTransfer(address currency);\\n    error NotOwned(address target);\\n    error EmptyNewToken();\\n    error IncorrectPosition();\\n    error UnsufficientBalance(address buyer, address currency, uint256 balance,  uint256 amount);\\n    error UnsufficientManagerBalance(uint256 amount);\\n\\n    event BoughtTokens(\\n        address indexed sender,\\n        address indexed currency,\\n        uint256 indexed value,\\n        uint256 amount\\n    );\\n    // address owner;\\n    address tokenContract;\\n    uint256 bonusPercent;\\n    EnumerableMap.AddressToUintMap private currencies;\\n\\n    constructor(\\n        address initialOwner,\\n        address token,\\n        uint256 bonus\\n    ) Ownable(initialOwner) AccessManager(initialOwner) {\\n        bonusPercent = 100 + bonus;\\n        tokenContract = token;\\n        SALT = 1544799;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function freeze(address target) external onlyOwner {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IFreezable(tokenContract).freeze(target);\\n    }\\n\\n    function unfreeze(address target) external onlyOwner {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IFreezable(tokenContract).unfreeze(target);\\n    }\\n\\n    function defineToken(address _token) external onlyOwner whenPaused {\\n        if (_token == address(0)) revert EmptyToken();\\n        tokenContract = _token;\\n    }\\n\\n    function getToken() external view returns (address) {\\n        return tokenContract;\\n    }\\n\\n    /**\\n     * Define or change new allowed currency with rate. Rate cannot be more than 100\\n     *  tokens for the 1 currency unit. Rate is nominated in token decimals\\n     *\\n     * @param currency  the address of the currency token\\n     * @param rate the exchange rate to token\\n     */\\n\\n    function setRate(\\n        address currency,\\n        uint256 rate\\n    ) external onlyOwner whenPaused returns (bool) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (rate == 0) revert EmptyRate();\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        if (\\n            rate > uint256(10 ** (IERC20Metadata(tokenContract).decimals() + 2))\\n        ) revert TooBigRate(rate);\\n        return currencies.set(currency, rate);\\n    }\\n\\n    function getRate(address currency) external view returns (uint256) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (!currencies.contains(currency)) return 0;\\n        return currencies.get(currency);\\n    }\\n\\n    function at(uint256 ratePos) external view returns (address, uint256) {\\n        if (ratePos >= currencies.length()) revert IncorrectPosition();\\n        return currencies.at(ratePos);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return currencies.length();\\n    }\\n\\n    function hasRate(\\n        address currency\\n    ) external view whenNotPaused returns (bool) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        return currencies.contains(currency);\\n    }\\n\\n    function setBonus(uint256 bonus) external onlyOwner whenPaused {\\n        bonusPercent = 100 + bonus;\\n    }\\n\\n    function getBonus() external view returns (uint256) {\\n        return bonusPercent - 100;\\n    }\\n    \\n\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) public view virtual override returns (bool immediate, uint32 delay) {\\n        if (caller == owner()) return (true, 0);\\n        (bool found,  ) = hasRole(ADMIN_ROLE, caller);\\n        return (found, 0);\\n    }\\n\\n    function getResultAmount(\\n        address currency,\\n        uint256 value\\n    ) external view returns (uint256) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (value == 0) revert EmptyValue();\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        // get the source decimals and add 2 because it will be multiplied by bonus percentage\\n        uint256 decimals = IERC20Metadata(currency).decimals() + 2;\\n        uint256 rate = this.getRate(currency);\\n        return (rate * value * bonusPercent) / (10 ** decimals);\\n    }\\n\\n    function buy(address currency, uint256 value) external whenNotPaused returns (bool) {\\n        uint256 amount = this.getResultAmount(currency, value);\\n        uint256 buyerBalance  = IERC20(currency).balanceOf(msg.sender);\\n        uint256 managerBalance  = IERC20(tokenContract).balanceOf(address(this));\\n        if ( buyerBalance < value)\\n            revert UnsufficientBalance(msg.sender, currency, buyerBalance, value);\\n        if ( managerBalance < amount)\\n            revert UnsufficientManagerBalance(amount);\\n        if (!IERC20(currency).transferFrom(msg.sender, address(this), value))\\n            return false;\\n        bool transferred = IERC20(tokenContract).transfer(msg.sender, amount);\\n        if (transferred) emit BoughtTokens(msg.sender, currency, value, amount);\\n        return transferred;\\n    }\\n\\n    function balanceOf(address currency) external view returns (uint256) {\\n        if (!this.hasRate(currency)) return 0;\\n        return IERC20(currency).balanceOf(address(this));\\n    }\\n\\n    function redeem(address currency, address _to) external onlyOwner whenPaused {\\n        if (\\n            !IERC20(currency).transfer(\\n                _to,\\n                IERC20(currency).balanceOf(address(this))\\n            )\\n        ) revert CannotRedeem(currency);\\n    }\\n\\n    function transferAuthority(\\n        address newAuthority\\n    ) external onlyOwner whenPaused {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\\n    }\\n\\n    function destroy(\\n        address payable _to,\\n        address newAuthority\\n    ) external onlyOwner whenPaused {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\\n        if (\\n            !IERC20(tokenContract).transfer(\\n                newAuthority,\\n                IERC20(tokenContract).balanceOf(address(this))\\n            )\\n        ) revert CannotTransfer(tokenContract);\\n\\n        uint256 i;\\n        uint256 balance;\\n        for (i = 0; i < currencies.length(); i++) {\\n            (address currency, ) = currencies.at(i);\\n            balance = IERC20(currency).balanceOf(address(this));\\n            if (balance > 0 && !IERC20(currency).transfer(_to, balance))\\n                revert CannotTransfer(currency);\\n        }\\n        selfdestruct(_to);\\n    }\\n}\\n\",\"keccak256\":\"0xe13030a083b811c950dd137a27216d9b25a47c062f1c0d065104e7fd7233717a\",\"license\":\"Private\"},\"contracts/tokens/IFreezable.sol\":{\"content\":\"// SPDX-License-Identifier: Private\\npragma solidity ^0.8.20;\\n\\ninterface IFreezable {\\n    /**\\n     * @dev Indicates an error when freezed address called function\\n     * @param account Address who calls\\n     */\\n    error EnforcedFreeze(address account);\\n\\n    /**\\n     * @dev The operation failed because the address is not freezed.\\n     */\\n    error ExpectedFreeze(address account);\\n\\n    /**\\n     * @dev Emitted when the freeze is triggered by `account`.\\n     */\\n    event Freezed(address indexed account);\\n\\n    /**\\n     * @dev Emitted when the freeze is lifted by `account`.\\n     */\\n    event Unfreezed(address indexed account);\\n\\n    /**\\n     * @dev Returns true if the address is freezed, and false otherwise.\\n     *\\n     * Requirements:\\n     *\\n     *  @param target The verified address\\n     */\\n    function freezed(address target) external view returns (bool);\\n\\n    function freeze(address target) external;\\n\\n    function unfreeze(address target) external;\\n}\\n\",\"keccak256\":\"0x1ae56cdb5ec2d0c8b3144a73533ce6c954a69673295da6201b2f85bc06eee925\",\"license\":\"Private\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200483a3803806200483a833981016040819052620000349162000581565b82806001600160a01b0381166200006657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200007181620000fe565b506001600160a01b0381166200009e57604051630409d6d160e11b8152600060048201526024016200005d565b620000ad60008281806200014e565b50506005805460ff19169055620000c6816064620005d8565b60065550600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055506217925f60805262000637565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006002600160401b03196001600160401b038616016200018e5760405163061c6a4360e21b81526001600160401b03861660048201526024016200005d565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156200028d5763ffffffff8516620001dd620003a5565b620001e99190620005ee565b905060405180604001604052808265ffffffffffff1681526020016200021b8663ffffffff16620003b760201b60201c565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c16845282529091208351815494909201519092166601000000000000026001600160a01b031990931665ffffffffffff9091161791909117905562000337565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054620002dc9166010000000000009091046001600160701b0316908690620003c0565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316660100000000000002600160301b600160a01b03199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000620003b24262000475565b905090565b63ffffffff1690565b60008080620003d86001600160701b038716620004ae565b905060006200041b8563ffffffff168763ffffffff168463ffffffff1611620004035760006200040f565b6200040f888562000617565b63ffffffff16620004cf565b905063ffffffff81166200042e620003a5565b6200043a9190620005ee565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b600065ffffffffffff821115620004aa576040516306dfcc6560e41b815260306004820152602481018390526044016200005d565b5090565b600080620004c56001600160701b038416620004eb565b5090949350505050565b6000818311620004e05781620004e2565b825b90505b92915050565b600080806200050484620004fe620003a5565b62000511565b9250925092509193909250565b600080806001600160501b03602086901c166001600160701b03861665ffffffffffff604088901c81169087168111156200054f5782828262000554565b816000805b9550955095505050509250925092565b80516001600160a01b03811681146200057c57600080fd5b919050565b6000806000606084860312156200059757600080fd5b620005a28462000564565b9250620005b26020850162000564565b9150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115620004e557620004e5620005c2565b65ffffffffffff818116838216019080821115620006105762000610620005c2565b5092915050565b63ffffffff828116828216039080821115620006105762000610620005c2565b6080516141e7620006536000396000610a2501526141e76000f3fe60806040526004361061036b5760003560e01c8063715018a6116101c6578063b7d2b162116100f7578063d6bb62c611610095578063e0886f901161006f578063e0886f9014610b3d578063f2fde38b14610b7c578063f801a69814610b9c578063fe0776f514610bd657600080fd5b8063d6bb62c614610add578063da2b122414610afd578063e0781b7a14610b1d57600080fd5b8063cc1b6c81116100d1578063cc1b6c8114610a67578063cce7ec1314610a7d578063d1f856ee14610a9d578063d22b598914610abd57600080fd5b8063b7d2b162146109f3578063ba9a91a514610a13578063bba06f2714610a4757600080fd5b806394c7d7ee11610164578063a7cd24481161013e578063a7cd24481461094a578063abd9bd2a1461096a578063ac9650d81461098a578063b7009613146109b757600080fd5b806394c7d7ee146108bb578063a166aa89146108db578063a64d95ce1461092a57600080fd5b8063853551b8116101a0578063853551b8146108485780638bdff161146108685780638d1fdf2f1461087d5780638da5cb5b1461089d57600080fd5b8063715018a61461080957806375b238fc1461081e5780638456cb591461083357600080fd5b806337cef791116102a05780634c1da1e21161023e5780635c975abb116102185780635c975abb1461075957806362b40f9f146107715780636d5115bd1461079157806370a08231146107e957600080fd5b80634c1da1e2146106dd57806352962952146106fd578063530dd4561461071d57600080fd5b80633f4ba83a1161027a5780633f4ba83a146106555780634136a33c1461066a57806345c8b1a6146106a75780634665096d146106c757600080fd5b806337cef791146105e35780633adc277a146106035780633ca7c02a1461063a57600080fd5b80631f7b6d321161030d5780632bdb7097116102e75780632bdb7097146105195780633078db6c146105495780633078f1141461056957806330cae187146105c357600080fd5b80631f7b6d321461049f57806321df0da7146104c257806325c471a0146104f957600080fd5b806312be87271161034957806312be872714610417578063167bd3951461044c57806318ff183c1461046c5780631cff79cd1461048c57600080fd5b806308d6122d146103705780630b0a93ba146103925780630b98f975146103f7575b600080fd5b34801561037c57600080fd5b5061039061038b366004613862565b610bf6565b005b34801561039e57600080fd5b506103da6103ad3660046138c8565b6001600160401b039081166000908152600260205260409020600101546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561040357600080fd5b506103906104123660046138e3565b610c51565b34801561042357600080fd5b506104376104323660046138c8565b610c72565b60405163ffffffff90911681526020016103ee565b34801561045857600080fd5b5061039061046736600461390a565b610cad565b34801561047857600080fd5b50610390610487366004613943565b610cc3565b61043761049a3660046139b2565b610d2a565b3480156104ab57600080fd5b506104b4610e97565b6040519081526020016103ee565b3480156104ce57600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b0390911681526020016103ee565b34801561050557600080fd5b50610390610514366004613a1a565b610ea8565b34801561052557600080fd5b50610539610534366004613a5f565b610eca565b60405190151581526020016103ee565b34801561055557600080fd5b50610390610564366004613a8b565b61100e565b34801561057557600080fd5b50610589610584366004613aa8565b6110ae565b6040516103ee949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b3480156105cf57600080fd5b506103906105de366004613ac4565b611116565b3480156105ef57600080fd5b506104b46105fe366004613a8b565b611128565b34801561060f57600080fd5b5061062361061e3660046138e3565b611173565b60405165ffffffffffff90911681526020016103ee565b34801561064657600080fd5b506103da6001600160401b0381565b34801561066157600080fd5b506103906111a6565b34801561067657600080fd5b506104376106853660046138e3565b6000908152600360205260409020546601000000000000900463ffffffff1690565b3480156106b357600080fd5b506103906106c2366004613a8b565b6111b8565b3480156106d357600080fd5b5062093a80610437565b3480156106e957600080fd5b506104376106f8366004613a8b565b611226565b34801561070957600080fd5b50610390610718366004613ac4565b611254565b34801561072957600080fd5b506103da6107383660046138c8565b6001600160401b039081166000908152600260205260409020600101541690565b34801561076557600080fd5b5060055460ff16610539565b34801561077d57600080fd5b5061039061078c366004613943565b611266565b34801561079d57600080fd5b506103da6107ac366004613b0d565b6001600160a01b03821660009081526001602090815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b3480156107f557600080fd5b506104b4610804366004613a8b565b61157a565b34801561081557600080fd5b50610390611659565b34801561082a57600080fd5b506103da600081565b34801561083f57600080fd5b5061039061166b565b34801561085457600080fd5b50610390610863366004613b3b565b61167b565b34801561087457600080fd5b506104b4611712565b34801561088957600080fd5b50610390610898366004613a8b565b611723565b3480156108a957600080fd5b506000546001600160a01b03166104e1565b3480156108c757600080fd5b506103906108d63660046139b2565b611791565b3480156108e757600080fd5b506105396108f6366004613a8b565b6001600160a01b0316600090815260016020819052604090912001546e010000000000000000000000000000900460ff1690565b34801561093657600080fd5b50610390610945366004613b59565b61183d565b34801561095657600080fd5b506104b4610965366004613a5f565b61184f565b34801561097657600080fd5b506104b4610985366004613b83565b6119e0565b34801561099657600080fd5b506109aa6109a5366004613be7565b611a19565b6040516103ee9190613c4c565b3480156109c357600080fd5b506109d76109d2366004613cc6565b611b0b565b60408051921515835263ffffffff9091166020830152016103ee565b3480156109ff57600080fd5b50610390610a0e366004613aa8565b611b62565b348015610a1f57600080fd5b506104b47f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5357600080fd5b50610390610a62366004613943565b611b79565b348015610a7357600080fd5b5062069780610437565b348015610a8957600080fd5b50610539610a98366004613a5f565b611c92565b348015610aa957600080fd5b506109d7610ab8366004613aa8565b611fbb565b348015610ac957600080fd5b50610390610ad8366004613d11565b612038565b348015610ae957600080fd5b50610437610af8366004613b83565b61204a565b348015610b0957600080fd5b50610390610b18366004613a8b565b6121db565b348015610b2957600080fd5b50610539610b38366004613a8b565b612251565b348015610b4957600080fd5b50610b5d610b583660046138e3565b612292565b604080516001600160a01b0390931683526020830191909152016103ee565b348015610b8857600080fd5b50610390610b97366004613a8b565b6122d2565b348015610ba857600080fd5b50610bbc610bb7366004613d2f565b612310565b6040805192835263ffffffff9091166020830152016103ee565b348015610be257600080fd5b50610390610bf1366004613aa8565b612458565b610bfe612481565b60005b82811015610c4a57610c3a85858584818110610c1f57610c1f613da1565b9050602002016020810190610c349190613db7565b846124fc565b610c4381613dea565b9050610c01565b5050505050565b610c59612580565b610c616125ad565b610c6c816064613e03565b60065550565b6001600160401b038116600090815260026020526040812060010154610ca790600160801b90046001600160701b03166125d0565b92915050565b610cb5612481565b610cbf82826125ef565b5050565b610ccb612481565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505050565b6000338180610d3b838888886126ab565b9150915081158015610d51575063ffffffff8116155b15610da4578287610d6288886126fe565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b6000610db2848989896119e0565b9050600063ffffffff8316151580610dd95750610dce82611173565b65ffffffffffff1615155b15610dea57610de782612716565b90505b600454610e3d8a610dfb8b8b6126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b600481905550610e858a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250612819915050565b506004559450505050505b9392505050565b6000610ea360076128ac565b905090565b610eb0612481565b610ec48383610ebe86610c72565b846128b7565b50505050565b6000610ed4612580565b610edc6125ad565b6001600160a01b038316610f0357604051630560d24960e11b815260040160405180910390fd5b81600003610f245760405163783bc40960e01b815260040160405180910390fd5b60055461010090046001600160a01b0316610f525760405163066f53b160e01b815260040160405180910390fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613e16565b610fd4906002613e39565b610fdf90600a613f36565b82111561100257604051630164b7c960e61b815260048101839052602401610d9b565b610e9060078484612b23565b611016612580565b61101e6125ad565b60055461010090046001600160a01b031661104c5760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b906024015b600060405180830381600087803b15801561109a57600080fd5b505af1158015610c4a573d6000803e3d6000fd5b6001600160401b03821660009081526002602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061110890660100000000000090046001600160701b0316612b41565b969991985096509350505050565b61111e612481565b610cbf8282612b64565b60006001600160a01b03821661115157604051630560d24960e11b815260040160405180910390fd5b61115c600783612c06565b61116857506000919050565b610ca7600783612c1b565b60008181526003602052604081205465ffffffffffff1661119381612c30565b61119d5780610e90565b60009392505050565b6111ae612580565b6111b6612c5f565b565b6111c0612580565b60055461010090046001600160a01b03166111ee5760405163066f53b160e01b815260040160405180910390fd5b6005546040516322e458d360e11b81526001600160a01b038381166004830152610100909204909116906345c8b1a690602401611080565b6001600160a01b038116600090815260016020819052604082200154610ca7906001600160701b03166125d0565b61125c612481565b610cbf8282612cb1565b61126e612580565b6112766125ad565b60055461010090046001600160a01b03166112a45760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b90602401600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b50506005546040516370a0823160e01b81523060048201526101009091046001600160a01b0316925063a9059cbb9150839083906370a0823190602401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190613f5e565b6114225760055460405163bbea11c960e01b81526101009091046001600160a01b03166004820152602401610d9b565b6000805b61143060076128ac565b82101561156e576000611444600784612d66565b506040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613f45565b9150600082118015611532575060405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613f5e565b155b1561155b5760405163bbea11c960e01b81526001600160a01b0382166004820152602401610d9b565b508161156681613dea565b925050611426565b836001600160a01b0316ff5b60405163703c0dbd60e11b81526001600160a01b0382166004820152600090309063e0781b7a90602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613f5e565b6115f157506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190613f45565b611661612580565b6111b66000612d82565b611673612580565b6111b6612ddf565b611683612481565b6001600160401b03831615806116a157506001600160401b03838116145b156116ca5760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051611705929190613fa4565b60405180910390a2505050565b60006064600654610ea39190613fb8565b61172b612580565b60055461010090046001600160a01b03166117595760405163066f53b160e01b815260040160405180910390fd5b600554604051638d1fdf2f60e01b81526001600160a01b03838116600483015261010090920490911690638d1fdf2f90602401611080565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613fcb565b6001600160e01b0319161461182957604051630641fee960e31b81526001600160a01b0382166004820152602401610d9b565b610c4a611838858386866119e0565b612716565b611845612481565b610cbf8282612e1c565b60006001600160a01b03831661187857604051630560d24960e11b815260040160405180910390fd5b8160000361189957604051631208b21b60e01b815260040160405180910390fd5b60055461010090046001600160a01b03166118c75760405163066f53b160e01b815260040160405180910390fd5b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613e16565b611936906002613e39565b6040516337cef79160e01b81526001600160a01b038616600482015260ff91909116915060009030906337cef79190602401602060405180830381865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190613f45565b90506119b682600a613fe8565b6006546119c38684613ff4565b6119cd9190613ff4565b6119d7919061400b565b95945050505050565b6000848484846040516020016119f9949392919061402d565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115611a4357611a43614084565b604051908082528060200260200182016040528015611a7657816020015b6060815260200190600190039081611a615790505b50915060005b83811015611b0357611ad330868684818110611a9a57611a9a613da1565b9050602002810190611aac919061409a565b85604051602001611abf939291906140e0565b604051602081830303815290604052612f3b565b838281518110611ae557611ae5613da1565b60200260200101819052508080611afb90613dea565b915050611a7c565b505092915050565b600080611b206000546001600160a01b031690565b6001600160a01b0316856001600160a01b031603611b445750600190506000611b5a565b6000611b51600087611fbb565b50925060009150505b935093915050565b611b6a612481565b611b748282612fa8565b505050565b611b81612580565b611b896125ad565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613f5e565b610cbf57604051635d3f476b60e01b81526001600160a01b0383166004820152602401610d9b565b6000611c9c6130a2565b6040516314f9a48960e31b81526001600160a01b038416600482015260248101839052600090309063a7cd244890604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190613f45565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190613f45565b6005546040516370a0823160e01b81523060048201529192506000916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613f45565b905084821015611e34576040516321d6041b60e01b81523360048201526001600160a01b03871660248201526044810183905260648101869052608401610d9b565b82811015611e585760405163705adf1f60e11b815260048101849052602401610d9b565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af1158015611eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecf9190613f5e565b611edf5760009350505050610ca7565b60055460405163a9059cbb60e01b81523360048201526024810185905260009161010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190613f5e565b90508015611fb15785876001600160a01b0316336001600160a01b03167f314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda87604051611fa891815260200190565b60405180910390a45b9695505050505050565b60008067fffffffffffffffe196001600160401b03851601611fe35750600190506000612031565b600080611ff086866110ae565b5050915091508165ffffffffffff1660001415801561202657506120126130c6565b65ffffffffffff168265ffffffffffff1611155b935091506120319050565b9250929050565b612040612481565b610cbf82826130d1565b6000338161205885856126fe565b90506000612068888888886119e0565b60008181526003602052604081205491925065ffffffffffff90911690036120a65760405163060a299b60e41b815260048101829052602401610d9b565b826001600160a01b0316886001600160a01b0316146121765760006120cc600085611fbb565b506001600160a01b03891660009081526001602090815260408083206001600160e01b0319881684529091528120549192509061211b90612115906001600160401b03166103ad565b86611fbb565b5090508115801561212a575080155b1561217357604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610d9b565b50505b600081815260036020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b6121e3612580565b6121eb6125ad565b6001600160a01b0381166122125760405163066f53b160e01b815260040160405180910390fd5b600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600061225b6130a2565b6001600160a01b03821661228257604051630560d24960e11b815260040160405180910390fd5b610ca7600783612c06565b919050565b60008061229f60076128ac565b83106122be5760405163188da0b360e21b815260040160405180910390fd5b6122c9600784612d66565b91509150915091565b6122da612580565b6001600160a01b03811661230457604051631e4fbdf760e01b815260006004820152602401610d9b565b61230d81612d82565b50565b6000803381612321828989896126ab565b91505060008163ffffffff166123356130c6565b61233f9190614107565b905063ffffffff82161580612376575060008665ffffffffffff1611801561237657508065ffffffffffff168665ffffffffffff16105b15612387578289610d628a8a6126fe565b6123a18665ffffffffffff168265ffffffffffff16613190565b95506123af838a8a8a6119e0565b94506123ba856131a6565b60008581526003602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490612444908a9088908f908f908f9061412d565b60405180910390a350505094509492505050565b6001600160a01b0381163314611b6a57604051635f159e6360e01b815260040160405180910390fd5b336000806124908382366131f3565b9150915081611b74578063ffffffff166000036124ec5760006124b381366132f7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610d9b565b610ec461183884306000366119e0565b6001600160a01b03831660008181526001602090815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b6000546001600160a01b031633146111b65760405163118cdaa760e01b8152336004820152602401610d9b565b60055460ff166111b657604051638dfc202b60e01b815260040160405180910390fd5b6000806125e5836001600160701b0316612b41565b5090949350505050565b306001600160a01b0383160361262357604051630b40d17960e31b81526001600160a01b0383166004820152602401610d9b565b6001600160a01b0382166000818152600160208190526040918290200180548415156e010000000000000000000000000000026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061269f90841515815260200190565b60405180910390a25050565b600080306001600160a01b038616036126d2576126c98685856131f3565b915091506126f5565b600483106126ee576126e986866109d287876126fe565b6126c9565b5060009050805b94509492505050565b600061270d600482848661405a565b610e9091614173565b60008181526003602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036127625760405163060a299b60e41b815260048101859052602401610d9b565b61276a6130c6565b65ffffffffffff168265ffffffffffff16111561279d57604051630c65b5bd60e11b815260048101859052602401610d9b565b6127a682612c30565b156127c757604051631e2975b960e21b815260048101859052602401610d9b565b600084815260036020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561283e5760405163cd78605960e01b8152306004820152602401610d9b565b600080856001600160a01b0316848660405161285a91906141a1565b60006040518083038185875af1925050503d8060008114612897576040519150601f19603f3d011682016040523d82523d6000602084013e61289c565b606091505b5091509150611fb18683836134df565b6000610ca78261353b565b600067fffffffffffffffe196001600160401b038616016128f65760405163061c6a4360e21b81526001600160401b0386166004820152602401610d9b565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156129f8578463ffffffff166129426130c6565b61294c9190614107565b905060405180604001604052808265ffffffffffff16815260200161297a8663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff90911617919091179055612ab5565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054612a459166010000000000009091046001600160701b0316908690613546565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000612b39846001600160a01b038516846135f0565b949350505050565b6000806000612b5784612b526130c6565b61360d565b9250925092509193909250565b6001600160401b0382161580612b8257506001600160401b03828116145b15612bab5760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b03828116600081815260026020526040808220600101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000610e90836001600160a01b038416613661565b6000610e90836001600160a01b03841661366d565b6000612c3a6130c6565b65ffffffffffff16612c4f62093a8084614107565b65ffffffffffff16111592915050565b612c676125ad565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160401b0382161580612ccf57506001600160401b03828116145b15612cf85760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b0382811660008181526002602052604080822060010180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b6000808080612d7586866136b4565b9097909650945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612de76130a2565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c943390565b67fffffffffffffffe196001600160401b03831601612e595760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b038216600090815260026020526040812060010154612e9390600160801b90046001600160701b03168362069780613546565b6001600160401b0385166000818152600260205260409081902060010180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890611705908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051612f5891906141a1565b600060405180830381855af49150503d8060008114612f93576040519150601f19603f3d011682016040523d82523d6000602084013e612f98565b606091505b50915091506119d78583836134df565b600067fffffffffffffffe196001600160401b03841601612fe75760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b6001600160401b03831660009081526002602090815260408083206001600160a01b038616845290915281205465ffffffffffff16900361302a57506000610ca7565b6001600160401b03831660008181526002602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b60055460ff16156111b65760405163d93c066560e01b815260040160405180910390fd5b6000610ea3426136df565b6001600160a01b038216600090815260016020819052604082200154613104906001600160701b03168362069780613546565b6001600160a01b03851660008181526001602081815260409283902090910180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101611705565b600081831161319f5781610e90565b5090919050565b60008181526003602052604090205465ffffffffffff1680158015906131d257506131d081612c30565b155b15610cbf5760405163813e945960e01b815260048101839052602401610d9b565b600080600483101561320a57506000905080611b5a565b306001600160a01b038616036132795761326e3061322886866126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206004541490565b600091509150611b5a565b600080600061328887876132f7565b925092509250826132a25760008094509450505050611b5a565b6000806132af848b611fbb565b91509150816132c957600080965096505050505050611b5a565b6132df8363ffffffff168263ffffffff16613190565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015613312575060009150819050806134d8565b600061331e86866126fe565b90506001600160e01b031981166310a6aa3760e31b148061334f57506001600160e01b031981166330cae18760e01b145b8061336a57506001600160e01b0319811663294b14a960e11b145b8061338557506001600160e01b03198116635326cae760e11b145b806133a057506001600160e01b0319811663d22b598960e01b145b156133b6576001600080935093509350506134d8565b6001600160e01b0319811663063fc60f60e21b14806133e557506001600160e01b0319811663167bd39560e01b145b8061340057506001600160e01b031981166308d6122d60e01b145b1561344257600061341560246004888a61405a565b8101906134229190613a8b565b9050600061342f82611226565b600196506000955093506134d892505050565b6001600160e01b0319811663012e238d60e51b148061347157506001600160e01b03198116635be958b160e11b145b156134cb57600061348660246004888a61405a565b81019061349391906138c8565b905060016134bc826001600160401b039081166000908152600260205260409020600101541690565b600094509450945050506134d8565b6000806000935093509350505b9250925092565b6060826134f4576134ef82613716565b610e90565b815115801561350b57506001600160a01b0384163b155b1561353457604051639996b31560e01b81526001600160a01b0385166004820152602401610d9b565b5080610e90565b6000610ca78261373f565b600080600061355d866001600160701b03166125d0565b9050600061359a8563ffffffff168763ffffffff168463ffffffff161161358557600061358f565b61358f88856141bd565b63ffffffff16613190565b90508063ffffffff166135ab6130c6565b6135b59190614107565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b60008281526002840160205260408120829055612b398484613749565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c811690871681111561364c57828282613651565b816000805b9550955095505050509250925092565b6000610e908383613755565b60008181526002830160205260408120548015801561369357506136918484613661565b155b15610e905760405163015ab34360e11b815260048101849052602401610d9b565b600080806136c2858561376d565b600081815260029690960160205260409095205494959350505050565b600065ffffffffffff821115613712576040516306dfcc6560e41b81526030600482015260248101839052604401610d9b565b5090565b8051156137265780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000610ca7825490565b6000610e908383613779565b60008181526001830160205260408120541515610e90565b6000610e9083836137c8565b60008181526001830160205260408120546137c057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca7565b506000610ca7565b60008260000182815481106137df576137df613da1565b9060005260206000200154905092915050565b6001600160a01b038116811461230d57600080fd5b60008083601f84011261381957600080fd5b5081356001600160401b0381111561383057600080fd5b6020830191508360208260051b850101111561203157600080fd5b80356001600160401b038116811461228d57600080fd5b6000806000806060858703121561387857600080fd5b8435613883816137f2565b935060208501356001600160401b0381111561389e57600080fd5b6138aa87828801613807565b90945092506138bd90506040860161384b565b905092959194509250565b6000602082840312156138da57600080fd5b610e908261384b565b6000602082840312156138f557600080fd5b5035919050565b801515811461230d57600080fd5b6000806040838503121561391d57600080fd5b8235613928816137f2565b91506020830135613938816138fc565b809150509250929050565b6000806040838503121561395657600080fd5b8235613961816137f2565b91506020830135613938816137f2565b60008083601f84011261398357600080fd5b5081356001600160401b0381111561399a57600080fd5b60208301915083602082850101111561203157600080fd5b6000806000604084860312156139c757600080fd5b83356139d2816137f2565b925060208401356001600160401b038111156139ed57600080fd5b6139f986828701613971565b9497909650939450505050565b803563ffffffff8116811461228d57600080fd5b600080600060608486031215613a2f57600080fd5b613a388461384b565b92506020840135613a48816137f2565b9150613a5660408501613a06565b90509250925092565b60008060408385031215613a7257600080fd5b8235613a7d816137f2565b946020939093013593505050565b600060208284031215613a9d57600080fd5b8135610e90816137f2565b60008060408385031215613abb57600080fd5b6139618361384b565b60008060408385031215613ad757600080fd5b613ae08361384b565b9150613aee6020840161384b565b90509250929050565b6001600160e01b03198116811461230d57600080fd5b60008060408385031215613b2057600080fd5b8235613b2b816137f2565b9150602083013561393881613af7565b600080600060408486031215613b5057600080fd5b6139d28461384b565b60008060408385031215613b6c57600080fd5b613b758361384b565b9150613aee60208401613a06565b60008060008060608587031215613b9957600080fd5b8435613ba4816137f2565b93506020850135613bb4816137f2565b925060408501356001600160401b03811115613bcf57600080fd5b613bdb87828801613971565b95989497509550505050565b60008060208385031215613bfa57600080fd5b82356001600160401b03811115613c1057600080fd5b613c1c85828601613807565b90969095509350505050565b60005b83811015613c43578181015183820152602001613c2b565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613cb957878503603f1901845281518051808752613c9a818989018a8501613c28565b601f01601f191695909501860194509285019290850190600101613c73565b5092979650505050505050565b600080600060608486031215613cdb57600080fd5b8335613ce6816137f2565b92506020840135613cf6816137f2565b91506040840135613d0681613af7565b809150509250925092565b60008060408385031215613d2457600080fd5b8235613b75816137f2565b60008060008060608587031215613d4557600080fd5b8435613d50816137f2565b935060208501356001600160401b03811115613d6b57600080fd5b613d7787828801613971565b909450925050604085013565ffffffffffff81168114613d9657600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613dc957600080fd5b8135610e9081613af7565b634e487b7160e01b600052601160045260246000fd5b600060018201613dfc57613dfc613dd4565b5060010190565b80820180821115610ca757610ca7613dd4565b600060208284031215613e2857600080fd5b815160ff81168114610e9057600080fd5b60ff8181168382160190811115610ca757610ca7613dd4565b600181815b80851115613e8d578160001904821115613e7357613e73613dd4565b80851615613e8057918102915b93841c9390800290613e57565b509250929050565b600082613ea457506001610ca7565b81613eb157506000610ca7565b8160018114613ec75760028114613ed157613eed565b6001915050610ca7565b60ff841115613ee257613ee2613dd4565b50506001821b610ca7565b5060208310610133831016604e8410600b8410161715613f10575081810a610ca7565b613f1a8383613e52565b8060001904821115613f2e57613f2e613dd4565b029392505050565b6000610e9060ff841683613e95565b600060208284031215613f5757600080fd5b5051919050565b600060208284031215613f7057600080fd5b8151610e90816138fc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000612b39602083018486613f7b565b81810381811115610ca757610ca7613dd4565b600060208284031215613fdd57600080fd5b8151610e9081613af7565b6000610e908383613e95565b8082028115828204841417610ca757610ca7613dd4565b60008261402857634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03808716835280861660208401525060606040830152611fb1606083018486613f7b565b6000808585111561406a57600080fd5b8386111561407757600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126140b157600080fd5b8301803591506001600160401b038211156140cb57600080fd5b60200191503681900382131561203157600080fd5b8284823760008382016000815283516140fd818360208801613c28565b0195945050505050565b65ffffffffffff81811683821601908082111561412657614126613dd4565b5092915050565b65ffffffffffff8616815260006001600160a01b03808716602084015280861660408401525060806060830152614168608083018486613f7b565b979650505050505050565b6001600160e01b03198135818116916004851015611b035760049490940360031b84901b1690921692915050565b600082516141b3818460208701613c28565b9190910192915050565b63ffffffff82811682821603908082111561412657614126613dd456fea164736f6c6343000814000a",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c8063715018a6116101c6578063b7d2b162116100f7578063d6bb62c611610095578063e0886f901161006f578063e0886f9014610b3d578063f2fde38b14610b7c578063f801a69814610b9c578063fe0776f514610bd657600080fd5b8063d6bb62c614610add578063da2b122414610afd578063e0781b7a14610b1d57600080fd5b8063cc1b6c81116100d1578063cc1b6c8114610a67578063cce7ec1314610a7d578063d1f856ee14610a9d578063d22b598914610abd57600080fd5b8063b7d2b162146109f3578063ba9a91a514610a13578063bba06f2714610a4757600080fd5b806394c7d7ee11610164578063a7cd24481161013e578063a7cd24481461094a578063abd9bd2a1461096a578063ac9650d81461098a578063b7009613146109b757600080fd5b806394c7d7ee146108bb578063a166aa89146108db578063a64d95ce1461092a57600080fd5b8063853551b8116101a0578063853551b8146108485780638bdff161146108685780638d1fdf2f1461087d5780638da5cb5b1461089d57600080fd5b8063715018a61461080957806375b238fc1461081e5780638456cb591461083357600080fd5b806337cef791116102a05780634c1da1e21161023e5780635c975abb116102185780635c975abb1461075957806362b40f9f146107715780636d5115bd1461079157806370a08231146107e957600080fd5b80634c1da1e2146106dd57806352962952146106fd578063530dd4561461071d57600080fd5b80633f4ba83a1161027a5780633f4ba83a146106555780634136a33c1461066a57806345c8b1a6146106a75780634665096d146106c757600080fd5b806337cef791146105e35780633adc277a146106035780633ca7c02a1461063a57600080fd5b80631f7b6d321161030d5780632bdb7097116102e75780632bdb7097146105195780633078db6c146105495780633078f1141461056957806330cae187146105c357600080fd5b80631f7b6d321461049f57806321df0da7146104c257806325c471a0146104f957600080fd5b806312be87271161034957806312be872714610417578063167bd3951461044c57806318ff183c1461046c5780631cff79cd1461048c57600080fd5b806308d6122d146103705780630b0a93ba146103925780630b98f975146103f7575b600080fd5b34801561037c57600080fd5b5061039061038b366004613862565b610bf6565b005b34801561039e57600080fd5b506103da6103ad3660046138c8565b6001600160401b039081166000908152600260205260409020600101546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561040357600080fd5b506103906104123660046138e3565b610c51565b34801561042357600080fd5b506104376104323660046138c8565b610c72565b60405163ffffffff90911681526020016103ee565b34801561045857600080fd5b5061039061046736600461390a565b610cad565b34801561047857600080fd5b50610390610487366004613943565b610cc3565b61043761049a3660046139b2565b610d2a565b3480156104ab57600080fd5b506104b4610e97565b6040519081526020016103ee565b3480156104ce57600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b0390911681526020016103ee565b34801561050557600080fd5b50610390610514366004613a1a565b610ea8565b34801561052557600080fd5b50610539610534366004613a5f565b610eca565b60405190151581526020016103ee565b34801561055557600080fd5b50610390610564366004613a8b565b61100e565b34801561057557600080fd5b50610589610584366004613aa8565b6110ae565b6040516103ee949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b3480156105cf57600080fd5b506103906105de366004613ac4565b611116565b3480156105ef57600080fd5b506104b46105fe366004613a8b565b611128565b34801561060f57600080fd5b5061062361061e3660046138e3565b611173565b60405165ffffffffffff90911681526020016103ee565b34801561064657600080fd5b506103da6001600160401b0381565b34801561066157600080fd5b506103906111a6565b34801561067657600080fd5b506104376106853660046138e3565b6000908152600360205260409020546601000000000000900463ffffffff1690565b3480156106b357600080fd5b506103906106c2366004613a8b565b6111b8565b3480156106d357600080fd5b5062093a80610437565b3480156106e957600080fd5b506104376106f8366004613a8b565b611226565b34801561070957600080fd5b50610390610718366004613ac4565b611254565b34801561072957600080fd5b506103da6107383660046138c8565b6001600160401b039081166000908152600260205260409020600101541690565b34801561076557600080fd5b5060055460ff16610539565b34801561077d57600080fd5b5061039061078c366004613943565b611266565b34801561079d57600080fd5b506103da6107ac366004613b0d565b6001600160a01b03821660009081526001602090815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b3480156107f557600080fd5b506104b4610804366004613a8b565b61157a565b34801561081557600080fd5b50610390611659565b34801561082a57600080fd5b506103da600081565b34801561083f57600080fd5b5061039061166b565b34801561085457600080fd5b50610390610863366004613b3b565b61167b565b34801561087457600080fd5b506104b4611712565b34801561088957600080fd5b50610390610898366004613a8b565b611723565b3480156108a957600080fd5b506000546001600160a01b03166104e1565b3480156108c757600080fd5b506103906108d63660046139b2565b611791565b3480156108e757600080fd5b506105396108f6366004613a8b565b6001600160a01b0316600090815260016020819052604090912001546e010000000000000000000000000000900460ff1690565b34801561093657600080fd5b50610390610945366004613b59565b61183d565b34801561095657600080fd5b506104b4610965366004613a5f565b61184f565b34801561097657600080fd5b506104b4610985366004613b83565b6119e0565b34801561099657600080fd5b506109aa6109a5366004613be7565b611a19565b6040516103ee9190613c4c565b3480156109c357600080fd5b506109d76109d2366004613cc6565b611b0b565b60408051921515835263ffffffff9091166020830152016103ee565b3480156109ff57600080fd5b50610390610a0e366004613aa8565b611b62565b348015610a1f57600080fd5b506104b47f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5357600080fd5b50610390610a62366004613943565b611b79565b348015610a7357600080fd5b5062069780610437565b348015610a8957600080fd5b50610539610a98366004613a5f565b611c92565b348015610aa957600080fd5b506109d7610ab8366004613aa8565b611fbb565b348015610ac957600080fd5b50610390610ad8366004613d11565b612038565b348015610ae957600080fd5b50610437610af8366004613b83565b61204a565b348015610b0957600080fd5b50610390610b18366004613a8b565b6121db565b348015610b2957600080fd5b50610539610b38366004613a8b565b612251565b348015610b4957600080fd5b50610b5d610b583660046138e3565b612292565b604080516001600160a01b0390931683526020830191909152016103ee565b348015610b8857600080fd5b50610390610b97366004613a8b565b6122d2565b348015610ba857600080fd5b50610bbc610bb7366004613d2f565b612310565b6040805192835263ffffffff9091166020830152016103ee565b348015610be257600080fd5b50610390610bf1366004613aa8565b612458565b610bfe612481565b60005b82811015610c4a57610c3a85858584818110610c1f57610c1f613da1565b9050602002016020810190610c349190613db7565b846124fc565b610c4381613dea565b9050610c01565b5050505050565b610c59612580565b610c616125ad565b610c6c816064613e03565b60065550565b6001600160401b038116600090815260026020526040812060010154610ca790600160801b90046001600160701b03166125d0565b92915050565b610cb5612481565b610cbf82826125ef565b5050565b610ccb612481565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505050565b6000338180610d3b838888886126ab565b9150915081158015610d51575063ffffffff8116155b15610da4578287610d6288886126fe565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b6000610db2848989896119e0565b9050600063ffffffff8316151580610dd95750610dce82611173565b65ffffffffffff1615155b15610dea57610de782612716565b90505b600454610e3d8a610dfb8b8b6126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b600481905550610e858a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250612819915050565b506004559450505050505b9392505050565b6000610ea360076128ac565b905090565b610eb0612481565b610ec48383610ebe86610c72565b846128b7565b50505050565b6000610ed4612580565b610edc6125ad565b6001600160a01b038316610f0357604051630560d24960e11b815260040160405180910390fd5b81600003610f245760405163783bc40960e01b815260040160405180910390fd5b60055461010090046001600160a01b0316610f525760405163066f53b160e01b815260040160405180910390fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613e16565b610fd4906002613e39565b610fdf90600a613f36565b82111561100257604051630164b7c960e61b815260048101839052602401610d9b565b610e9060078484612b23565b611016612580565b61101e6125ad565b60055461010090046001600160a01b031661104c5760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b906024015b600060405180830381600087803b15801561109a57600080fd5b505af1158015610c4a573d6000803e3d6000fd5b6001600160401b03821660009081526002602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061110890660100000000000090046001600160701b0316612b41565b969991985096509350505050565b61111e612481565b610cbf8282612b64565b60006001600160a01b03821661115157604051630560d24960e11b815260040160405180910390fd5b61115c600783612c06565b61116857506000919050565b610ca7600783612c1b565b60008181526003602052604081205465ffffffffffff1661119381612c30565b61119d5780610e90565b60009392505050565b6111ae612580565b6111b6612c5f565b565b6111c0612580565b60055461010090046001600160a01b03166111ee5760405163066f53b160e01b815260040160405180910390fd5b6005546040516322e458d360e11b81526001600160a01b038381166004830152610100909204909116906345c8b1a690602401611080565b6001600160a01b038116600090815260016020819052604082200154610ca7906001600160701b03166125d0565b61125c612481565b610cbf8282612cb1565b61126e612580565b6112766125ad565b60055461010090046001600160a01b03166112a45760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b90602401600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b50506005546040516370a0823160e01b81523060048201526101009091046001600160a01b0316925063a9059cbb9150839083906370a0823190602401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190613f5e565b6114225760055460405163bbea11c960e01b81526101009091046001600160a01b03166004820152602401610d9b565b6000805b61143060076128ac565b82101561156e576000611444600784612d66565b506040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613f45565b9150600082118015611532575060405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613f5e565b155b1561155b5760405163bbea11c960e01b81526001600160a01b0382166004820152602401610d9b565b508161156681613dea565b925050611426565b836001600160a01b0316ff5b60405163703c0dbd60e11b81526001600160a01b0382166004820152600090309063e0781b7a90602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613f5e565b6115f157506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190613f45565b611661612580565b6111b66000612d82565b611673612580565b6111b6612ddf565b611683612481565b6001600160401b03831615806116a157506001600160401b03838116145b156116ca5760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051611705929190613fa4565b60405180910390a2505050565b60006064600654610ea39190613fb8565b61172b612580565b60055461010090046001600160a01b03166117595760405163066f53b160e01b815260040160405180910390fd5b600554604051638d1fdf2f60e01b81526001600160a01b03838116600483015261010090920490911690638d1fdf2f90602401611080565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613fcb565b6001600160e01b0319161461182957604051630641fee960e31b81526001600160a01b0382166004820152602401610d9b565b610c4a611838858386866119e0565b612716565b611845612481565b610cbf8282612e1c565b60006001600160a01b03831661187857604051630560d24960e11b815260040160405180910390fd5b8160000361189957604051631208b21b60e01b815260040160405180910390fd5b60055461010090046001600160a01b03166118c75760405163066f53b160e01b815260040160405180910390fd5b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613e16565b611936906002613e39565b6040516337cef79160e01b81526001600160a01b038616600482015260ff91909116915060009030906337cef79190602401602060405180830381865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190613f45565b90506119b682600a613fe8565b6006546119c38684613ff4565b6119cd9190613ff4565b6119d7919061400b565b95945050505050565b6000848484846040516020016119f9949392919061402d565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115611a4357611a43614084565b604051908082528060200260200182016040528015611a7657816020015b6060815260200190600190039081611a615790505b50915060005b83811015611b0357611ad330868684818110611a9a57611a9a613da1565b9050602002810190611aac919061409a565b85604051602001611abf939291906140e0565b604051602081830303815290604052612f3b565b838281518110611ae557611ae5613da1565b60200260200101819052508080611afb90613dea565b915050611a7c565b505092915050565b600080611b206000546001600160a01b031690565b6001600160a01b0316856001600160a01b031603611b445750600190506000611b5a565b6000611b51600087611fbb565b50925060009150505b935093915050565b611b6a612481565b611b748282612fa8565b505050565b611b81612580565b611b896125ad565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613f5e565b610cbf57604051635d3f476b60e01b81526001600160a01b0383166004820152602401610d9b565b6000611c9c6130a2565b6040516314f9a48960e31b81526001600160a01b038416600482015260248101839052600090309063a7cd244890604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190613f45565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190613f45565b6005546040516370a0823160e01b81523060048201529192506000916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613f45565b905084821015611e34576040516321d6041b60e01b81523360048201526001600160a01b03871660248201526044810183905260648101869052608401610d9b565b82811015611e585760405163705adf1f60e11b815260048101849052602401610d9b565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af1158015611eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecf9190613f5e565b611edf5760009350505050610ca7565b60055460405163a9059cbb60e01b81523360048201526024810185905260009161010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190613f5e565b90508015611fb15785876001600160a01b0316336001600160a01b03167f314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda87604051611fa891815260200190565b60405180910390a45b9695505050505050565b60008067fffffffffffffffe196001600160401b03851601611fe35750600190506000612031565b600080611ff086866110ae565b5050915091508165ffffffffffff1660001415801561202657506120126130c6565b65ffffffffffff168265ffffffffffff1611155b935091506120319050565b9250929050565b612040612481565b610cbf82826130d1565b6000338161205885856126fe565b90506000612068888888886119e0565b60008181526003602052604081205491925065ffffffffffff90911690036120a65760405163060a299b60e41b815260048101829052602401610d9b565b826001600160a01b0316886001600160a01b0316146121765760006120cc600085611fbb565b506001600160a01b03891660009081526001602090815260408083206001600160e01b0319881684529091528120549192509061211b90612115906001600160401b03166103ad565b86611fbb565b5090508115801561212a575080155b1561217357604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610d9b565b50505b600081815260036020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b6121e3612580565b6121eb6125ad565b6001600160a01b0381166122125760405163066f53b160e01b815260040160405180910390fd5b600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600061225b6130a2565b6001600160a01b03821661228257604051630560d24960e11b815260040160405180910390fd5b610ca7600783612c06565b919050565b60008061229f60076128ac565b83106122be5760405163188da0b360e21b815260040160405180910390fd5b6122c9600784612d66565b91509150915091565b6122da612580565b6001600160a01b03811661230457604051631e4fbdf760e01b815260006004820152602401610d9b565b61230d81612d82565b50565b6000803381612321828989896126ab565b91505060008163ffffffff166123356130c6565b61233f9190614107565b905063ffffffff82161580612376575060008665ffffffffffff1611801561237657508065ffffffffffff168665ffffffffffff16105b15612387578289610d628a8a6126fe565b6123a18665ffffffffffff168265ffffffffffff16613190565b95506123af838a8a8a6119e0565b94506123ba856131a6565b60008581526003602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490612444908a9088908f908f908f9061412d565b60405180910390a350505094509492505050565b6001600160a01b0381163314611b6a57604051635f159e6360e01b815260040160405180910390fd5b336000806124908382366131f3565b9150915081611b74578063ffffffff166000036124ec5760006124b381366132f7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610d9b565b610ec461183884306000366119e0565b6001600160a01b03831660008181526001602090815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b6000546001600160a01b031633146111b65760405163118cdaa760e01b8152336004820152602401610d9b565b60055460ff166111b657604051638dfc202b60e01b815260040160405180910390fd5b6000806125e5836001600160701b0316612b41565b5090949350505050565b306001600160a01b0383160361262357604051630b40d17960e31b81526001600160a01b0383166004820152602401610d9b565b6001600160a01b0382166000818152600160208190526040918290200180548415156e010000000000000000000000000000026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061269f90841515815260200190565b60405180910390a25050565b600080306001600160a01b038616036126d2576126c98685856131f3565b915091506126f5565b600483106126ee576126e986866109d287876126fe565b6126c9565b5060009050805b94509492505050565b600061270d600482848661405a565b610e9091614173565b60008181526003602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036127625760405163060a299b60e41b815260048101859052602401610d9b565b61276a6130c6565b65ffffffffffff168265ffffffffffff16111561279d57604051630c65b5bd60e11b815260048101859052602401610d9b565b6127a682612c30565b156127c757604051631e2975b960e21b815260048101859052602401610d9b565b600084815260036020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561283e5760405163cd78605960e01b8152306004820152602401610d9b565b600080856001600160a01b0316848660405161285a91906141a1565b60006040518083038185875af1925050503d8060008114612897576040519150601f19603f3d011682016040523d82523d6000602084013e61289c565b606091505b5091509150611fb18683836134df565b6000610ca78261353b565b600067fffffffffffffffe196001600160401b038616016128f65760405163061c6a4360e21b81526001600160401b0386166004820152602401610d9b565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156129f8578463ffffffff166129426130c6565b61294c9190614107565b905060405180604001604052808265ffffffffffff16815260200161297a8663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff90911617919091179055612ab5565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054612a459166010000000000009091046001600160701b0316908690613546565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000612b39846001600160a01b038516846135f0565b949350505050565b6000806000612b5784612b526130c6565b61360d565b9250925092509193909250565b6001600160401b0382161580612b8257506001600160401b03828116145b15612bab5760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b03828116600081815260026020526040808220600101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000610e90836001600160a01b038416613661565b6000610e90836001600160a01b03841661366d565b6000612c3a6130c6565b65ffffffffffff16612c4f62093a8084614107565b65ffffffffffff16111592915050565b612c676125ad565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160401b0382161580612ccf57506001600160401b03828116145b15612cf85760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b0382811660008181526002602052604080822060010180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b6000808080612d7586866136b4565b9097909650945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612de76130a2565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c943390565b67fffffffffffffffe196001600160401b03831601612e595760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b038216600090815260026020526040812060010154612e9390600160801b90046001600160701b03168362069780613546565b6001600160401b0385166000818152600260205260409081902060010180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890611705908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051612f5891906141a1565b600060405180830381855af49150503d8060008114612f93576040519150601f19603f3d011682016040523d82523d6000602084013e612f98565b606091505b50915091506119d78583836134df565b600067fffffffffffffffe196001600160401b03841601612fe75760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b6001600160401b03831660009081526002602090815260408083206001600160a01b038616845290915281205465ffffffffffff16900361302a57506000610ca7565b6001600160401b03831660008181526002602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b60055460ff16156111b65760405163d93c066560e01b815260040160405180910390fd5b6000610ea3426136df565b6001600160a01b038216600090815260016020819052604082200154613104906001600160701b03168362069780613546565b6001600160a01b03851660008181526001602081815260409283902090910180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101611705565b600081831161319f5781610e90565b5090919050565b60008181526003602052604090205465ffffffffffff1680158015906131d257506131d081612c30565b155b15610cbf5760405163813e945960e01b815260048101839052602401610d9b565b600080600483101561320a57506000905080611b5a565b306001600160a01b038616036132795761326e3061322886866126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206004541490565b600091509150611b5a565b600080600061328887876132f7565b925092509250826132a25760008094509450505050611b5a565b6000806132af848b611fbb565b91509150816132c957600080965096505050505050611b5a565b6132df8363ffffffff168263ffffffff16613190565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015613312575060009150819050806134d8565b600061331e86866126fe565b90506001600160e01b031981166310a6aa3760e31b148061334f57506001600160e01b031981166330cae18760e01b145b8061336a57506001600160e01b0319811663294b14a960e11b145b8061338557506001600160e01b03198116635326cae760e11b145b806133a057506001600160e01b0319811663d22b598960e01b145b156133b6576001600080935093509350506134d8565b6001600160e01b0319811663063fc60f60e21b14806133e557506001600160e01b0319811663167bd39560e01b145b8061340057506001600160e01b031981166308d6122d60e01b145b1561344257600061341560246004888a61405a565b8101906134229190613a8b565b9050600061342f82611226565b600196506000955093506134d892505050565b6001600160e01b0319811663012e238d60e51b148061347157506001600160e01b03198116635be958b160e11b145b156134cb57600061348660246004888a61405a565b81019061349391906138c8565b905060016134bc826001600160401b039081166000908152600260205260409020600101541690565b600094509450945050506134d8565b6000806000935093509350505b9250925092565b6060826134f4576134ef82613716565b610e90565b815115801561350b57506001600160a01b0384163b155b1561353457604051639996b31560e01b81526001600160a01b0385166004820152602401610d9b565b5080610e90565b6000610ca78261373f565b600080600061355d866001600160701b03166125d0565b9050600061359a8563ffffffff168763ffffffff168463ffffffff161161358557600061358f565b61358f88856141bd565b63ffffffff16613190565b90508063ffffffff166135ab6130c6565b6135b59190614107565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b60008281526002840160205260408120829055612b398484613749565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c811690871681111561364c57828282613651565b816000805b9550955095505050509250925092565b6000610e908383613755565b60008181526002830160205260408120548015801561369357506136918484613661565b155b15610e905760405163015ab34360e11b815260048101849052602401610d9b565b600080806136c2858561376d565b600081815260029690960160205260409095205494959350505050565b600065ffffffffffff821115613712576040516306dfcc6560e41b81526030600482015260248101839052604401610d9b565b5090565b8051156137265780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000610ca7825490565b6000610e908383613779565b60008181526001830160205260408120541515610e90565b6000610e9083836137c8565b60008181526001830160205260408120546137c057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca7565b506000610ca7565b60008260000182815481106137df576137df613da1565b9060005260206000200154905092915050565b6001600160a01b038116811461230d57600080fd5b60008083601f84011261381957600080fd5b5081356001600160401b0381111561383057600080fd5b6020830191508360208260051b850101111561203157600080fd5b80356001600160401b038116811461228d57600080fd5b6000806000806060858703121561387857600080fd5b8435613883816137f2565b935060208501356001600160401b0381111561389e57600080fd5b6138aa87828801613807565b90945092506138bd90506040860161384b565b905092959194509250565b6000602082840312156138da57600080fd5b610e908261384b565b6000602082840312156138f557600080fd5b5035919050565b801515811461230d57600080fd5b6000806040838503121561391d57600080fd5b8235613928816137f2565b91506020830135613938816138fc565b809150509250929050565b6000806040838503121561395657600080fd5b8235613961816137f2565b91506020830135613938816137f2565b60008083601f84011261398357600080fd5b5081356001600160401b0381111561399a57600080fd5b60208301915083602082850101111561203157600080fd5b6000806000604084860312156139c757600080fd5b83356139d2816137f2565b925060208401356001600160401b038111156139ed57600080fd5b6139f986828701613971565b9497909650939450505050565b803563ffffffff8116811461228d57600080fd5b600080600060608486031215613a2f57600080fd5b613a388461384b565b92506020840135613a48816137f2565b9150613a5660408501613a06565b90509250925092565b60008060408385031215613a7257600080fd5b8235613a7d816137f2565b946020939093013593505050565b600060208284031215613a9d57600080fd5b8135610e90816137f2565b60008060408385031215613abb57600080fd5b6139618361384b565b60008060408385031215613ad757600080fd5b613ae08361384b565b9150613aee6020840161384b565b90509250929050565b6001600160e01b03198116811461230d57600080fd5b60008060408385031215613b2057600080fd5b8235613b2b816137f2565b9150602083013561393881613af7565b600080600060408486031215613b5057600080fd5b6139d28461384b565b60008060408385031215613b6c57600080fd5b613b758361384b565b9150613aee60208401613a06565b60008060008060608587031215613b9957600080fd5b8435613ba4816137f2565b93506020850135613bb4816137f2565b925060408501356001600160401b03811115613bcf57600080fd5b613bdb87828801613971565b95989497509550505050565b60008060208385031215613bfa57600080fd5b82356001600160401b03811115613c1057600080fd5b613c1c85828601613807565b90969095509350505050565b60005b83811015613c43578181015183820152602001613c2b565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613cb957878503603f1901845281518051808752613c9a818989018a8501613c28565b601f01601f191695909501860194509285019290850190600101613c73565b5092979650505050505050565b600080600060608486031215613cdb57600080fd5b8335613ce6816137f2565b92506020840135613cf6816137f2565b91506040840135613d0681613af7565b809150509250925092565b60008060408385031215613d2457600080fd5b8235613b75816137f2565b60008060008060608587031215613d4557600080fd5b8435613d50816137f2565b935060208501356001600160401b03811115613d6b57600080fd5b613d7787828801613971565b909450925050604085013565ffffffffffff81168114613d9657600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613dc957600080fd5b8135610e9081613af7565b634e487b7160e01b600052601160045260246000fd5b600060018201613dfc57613dfc613dd4565b5060010190565b80820180821115610ca757610ca7613dd4565b600060208284031215613e2857600080fd5b815160ff81168114610e9057600080fd5b60ff8181168382160190811115610ca757610ca7613dd4565b600181815b80851115613e8d578160001904821115613e7357613e73613dd4565b80851615613e8057918102915b93841c9390800290613e57565b509250929050565b600082613ea457506001610ca7565b81613eb157506000610ca7565b8160018114613ec75760028114613ed157613eed565b6001915050610ca7565b60ff841115613ee257613ee2613dd4565b50506001821b610ca7565b5060208310610133831016604e8410600b8410161715613f10575081810a610ca7565b613f1a8383613e52565b8060001904821115613f2e57613f2e613dd4565b029392505050565b6000610e9060ff841683613e95565b600060208284031215613f5757600080fd5b5051919050565b600060208284031215613f7057600080fd5b8151610e90816138fc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000612b39602083018486613f7b565b81810381811115610ca757610ca7613dd4565b600060208284031215613fdd57600080fd5b8151610e9081613af7565b6000610e908383613e95565b8082028115828204841417610ca757610ca7613dd4565b60008261402857634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03808716835280861660208401525060606040830152611fb1606083018486613f7b565b6000808585111561406a57600080fd5b8386111561407757600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126140b157600080fd5b8301803591506001600160401b038211156140cb57600080fd5b60200191503681900382131561203157600080fd5b8284823760008382016000815283516140fd818360208801613c28565b0195945050505050565b65ffffffffffff81811683821601908082111561412657614126613dd4565b5092915050565b65ffffffffffff8616815260006001600160a01b03808716602084015280861660408401525060806060830152614168608083018486613f7b565b979650505050505050565b6001600160e01b03198135818116916004851015611b035760049490940360031b84901b1690921692915050565b600082516141b3818460208701613c28565b9190910192915050565b63ffffffff82811682821603908082111561412657614126613dd456fea164736f6c6343000814000a",
  "devdoc": {
    "author": "Ilya A. Shlyakhovoy",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "EnumerableMapNonexistentKey(bytes32)": [
        {
          "details": "Query for a nonexistent map key."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "events": {
      "OperationCanceled(bytes32,uint32)": {
        "details": "A scheduled operation was canceled."
      },
      "OperationExecuted(bytes32,uint32)": {
        "details": "A scheduled operation was executed."
      },
      "OperationScheduled(bytes32,uint32,uint48,address,address,bytes)": {
        "details": "A delayed operation was scheduled."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(uint64,uint64)": {
        "details": "Role acting as admin over a given `roleId` is updated."
      },
      "RoleGrantDelayChanged(uint64,uint32,uint48)": {
        "details": "Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."
      },
      "RoleGranted(uint64,address,uint32,uint48,bool)": {
        "details": "Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated."
      },
      "RoleGuardianChanged(uint64,uint64)": {
        "details": "Role acting as guardian over a given `roleId` is updated."
      },
      "RoleLabel(uint64,string)": {
        "details": "Informational labelling for a roleId."
      },
      "RoleRevoked(uint64,address)": {
        "details": "Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."
      },
      "TargetAdminDelayUpdated(address,uint32,uint48)": {
        "details": "Admin delay for a given `target` will be updated to `delay` when `since` is reached."
      },
      "TargetClosed(address,bool)": {
        "details": "Target mode is updated (true = closed, false = open)."
      },
      "TargetFunctionRoleUpdated(address,bytes4,uint64)": {
        "details": "Role required to invoke `selector` on `target` is updated to `roleId`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "canCall(address,address,bytes4)": {
        "details": "Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead."
      },
      "cancel(address,address,bytes)": {
        "details": "Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event."
      },
      "consumeScheduledOp(address,bytes)": {
        "details": "Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event."
      },
      "execute(address,bytes)": {
        "details": "Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed."
      },
      "expiration()": {
        "details": "Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage."
      },
      "getAccess(uint64,address)": {
        "details": "Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."
      },
      "getNonce(bytes32)": {
        "details": "Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled."
      },
      "getRoleAdmin(uint64)": {
        "details": "Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role."
      },
      "getRoleGrantDelay(uint64)": {
        "details": "Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."
      },
      "getRoleGuardian(uint64)": {
        "details": "Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role."
      },
      "getSchedule(bytes32)": {
        "details": "Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled."
      },
      "getTargetAdminDelay(address)": {
        "details": "Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."
      },
      "getTargetFunctionRole(address,bytes4)": {
        "details": "Get the role required to call a function."
      },
      "grantRole(uint64,address,uint32)": {
        "details": "Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event."
      },
      "hasRole(uint64,address)": {
        "details": "Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details."
      },
      "hashOperation(address,address,bytes)": {
        "details": "Hashing function for delayed operations."
      },
      "isTargetClosed(address)": {
        "details": "Get whether the contract is closed disabling any access. Otherwise role permissions are applied."
      },
      "labelRole(uint64,string)": {
        "details": "Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event."
      },
      "minSetback()": {
        "details": "Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days."
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(uint64,address)": {
        "details": "Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role."
      },
      "revokeRole(uint64,address)": {
        "details": "Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role."
      },
      "schedule(address,bytes,uint48)": {
        "details": "Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding."
      },
      "setGrantDelay(uint64,uint32)": {
        "details": "Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event."
      },
      "setRate(address,uint256)": {
        "params": {
          "currency": "the address of the currency token",
          "rate": "the exchange rate to token"
        }
      },
      "setRoleAdmin(uint64,uint64)": {
        "details": "Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event"
      },
      "setRoleGuardian(uint64,uint64)": {
        "details": "Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event"
      },
      "setTargetAdminDelay(address,uint32)": {
        "details": "Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event."
      },
      "setTargetClosed(address,bool)": {
        "details": "Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event."
      },
      "setTargetFunctionRole(address,bytes4[],uint64)": {
        "details": "Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAuthority(address,address)": {
        "details": "Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin"
      }
    },
    "title": "PresaleManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRate(address,uint256)": {
        "notice": "Define or change new allowed currency with rate. Rate cannot be more than 100  tokens for the 1 currency unit. Rate is nominated in token decimals"
      }
    },
    "notice": "The simple Manager contract for presale phase during the mature Manager contract in development Only confirms execution of token functions if owner called it and receives the funds in the stablecoins",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 225,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_targets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(TargetConfig)182_storage)"
      },
      {
        "astId": 230,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_struct(Role)201_storage)"
      },
      {
        "astId": 235,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_schedules",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Schedule)206_storage)"
      },
      {
        "astId": 237,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_executionId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 2994,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7991,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "tokenContract",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7993,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "bonusPercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7996,
        "contract": "contracts/management/PresaleManager.sol:PresaleManager",
        "label": "currencies",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressToUintMap)6591_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Access)188_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccessManager.Access)",
        "numberOfBytes": "32",
        "value": "t_struct(Access)188_storage"
      },
      "t_mapping(t_address,t_struct(TargetConfig)182_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccessManager.TargetConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TargetConfig)182_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Schedule)206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessManager.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)206_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint64,t_struct(Role)201_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct AccessManager.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)201_storage"
      },
      "t_struct(Access)188_storage": {
        "encoding": "inplace",
        "label": "struct AccessManager.Access",
        "members": [
          {
            "astId": 184,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "since",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 187,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "delay",
            "offset": 6,
            "slot": "0",
            "type": "t_userDefinedValueType(Delay)7676"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)6591_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 6590,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)5933_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)7231_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 7230,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7037_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)5933_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 5928,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)7231_storage"
          },
          {
            "astId": 5932,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Role)201_storage": {
        "encoding": "inplace",
        "label": "struct AccessManager.Role",
        "members": [
          {
            "astId": 193,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Access)188_storage)"
          },
          {
            "astId": 195,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "admin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 197,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "guardian",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 200,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "grantDelay",
            "offset": 16,
            "slot": "1",
            "type": "t_userDefinedValueType(Delay)7676"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Schedule)206_storage": {
        "encoding": "inplace",
        "label": "struct AccessManager.Schedule",
        "members": [
          {
            "astId": 203,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "timepoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 205,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "nonce",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)7037_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7032,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7036,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TargetConfig)182_storage": {
        "encoding": "inplace",
        "label": "struct AccessManager.TargetConfig",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "allowedRoles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes4,t_uint64)"
          },
          {
            "astId": 179,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "adminDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(Delay)7676"
          },
          {
            "astId": 181,
            "contract": "contracts/management/PresaleManager.sol:PresaleManager",
            "label": "closed",
            "offset": 14,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(Delay)7676": {
        "encoding": "inplace",
        "label": "Time.Delay",
        "numberOfBytes": "14"
      }
    }
  }
}