{"id":"5f0d68b90e332d1f95acc7b780b4f51e","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/manager/AccessManager.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManager} from \"./IAccessManager.sol\";\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Multicall} from \"../../utils/Multicall.sol\";\nimport {Math} from \"../../utils/math/Math.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\n/**\n * @dev AccessManager is a central contract to store the permissions of a system.\n *\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\n * effectively restricted.\n *\n * The restriction rules for such functions are defined in terms of \"roles\" identified by an `uint64` and scoped\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\n *\n * For each target contract, admins can configure the following without any delay:\n *\n * * The target's {AccessManaged-authority} via {updateAuthority}.\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\n *\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\n * Additionally, each role has the following configuration options restricted to this manager's admins:\n *\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\n * * A delay of any target's admin action via {setTargetAdminDelay}.\n * * A role label for discoverability purposes with {labelRole}.\n *\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\n * restricted to each role's admin (see {getRoleAdmin}).\n *\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\n *\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\n * the return data are a boolean as expected by that interface.\n *\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\n * will be {AccessManager} itself.\n *\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\n * mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\n * {{AccessControl-renounceRole}}.\n */\ncontract AccessManager is Context, Multicall, IAccessManager {\n    using Time for *;\n\n    // Structure that stores the details for a target contract.\n    struct TargetConfig {\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\n        Time.Delay adminDelay;\n        bool closed;\n    }\n\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\n    struct Access {\n        // Timepoint at which the user gets the permission.\n        // If this is either 0 or in the future, then the role permission is not available.\n        uint48 since;\n        // Delay for execution. Only applies to restricted() / execute() calls.\n        Time.Delay delay;\n    }\n\n    // Structure that stores the details of a role.\n    struct Role {\n        // Members of the role.\n        mapping(address user => Access access) members;\n        // Admin who can grant or revoke permissions.\n        uint64 admin;\n        // Guardian who can cancel operations targeting functions that need this role.\n        uint64 guardian;\n        // Delay in which the role takes effect after being granted.\n        Time.Delay grantDelay;\n    }\n\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\n    struct Schedule {\n        // Moment at which the operation can be executed.\n        uint48 timepoint;\n        // Operation nonce to allow third-party contracts to identify the operation.\n        uint32 nonce;\n    }\n\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\n\n    mapping(address target => TargetConfig mode) private _targets;\n    mapping(uint64 roleId => Role) private _roles;\n    mapping(bytes32 operationId => Schedule) private _schedules;\n\n    // Used to identify operations that are currently being executed via {execute}.\n    // This should be transient storage when supported by the EVM.\n    bytes32 private _executionId;\n\n    /**\n     * @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\n     * {_getAdminRestrictions}.\n     */\n    modifier onlyAuthorized() {\n        _checkAuthorized();\n        _;\n    }\n\n    constructor(address initialAdmin) {\n        if (initialAdmin == address(0)) {\n            revert AccessManagerInvalidInitialAdmin(address(0));\n        }\n\n        // admin is active immediately and without any execution delay.\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\n    }\n\n    // =================================================== GETTERS ====================================================\n    /// @inheritdoc IAccessManager\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual returns (bool immediate, uint32 delay) {\n        if (isTargetClosed(target)) {\n            return (false, 0);\n        } else if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(target, selector), 0);\n        } else {\n            uint64 roleId = getTargetFunctionRole(target, selector);\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    function expiration() public view virtual returns (uint32) {\n        return 1 weeks;\n    }\n\n    /// @inheritdoc IAccessManager\n    function minSetback() public view virtual returns (uint32) {\n        return 5 days;\n    }\n\n    /// @inheritdoc IAccessManager\n    function isTargetClosed(address target) public view virtual returns (bool) {\n        return _targets[target].closed;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\n        return _targets[target].allowedRoles[selector];\n    }\n\n    /// @inheritdoc IAccessManager\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\n        return _targets[target].adminDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].admin;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].guardian;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\n        return _roles[roleId].grantDelay.get();\n    }\n\n    /// @inheritdoc IAccessManager\n    function getAccess(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\n        Access storage access = _roles[roleId].members[account];\n\n        since = access.since;\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\n\n        return (since, currentDelay, pendingDelay, effect);\n    }\n\n    /// @inheritdoc IAccessManager\n    function hasRole(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\n        if (roleId == PUBLIC_ROLE) {\n            return (true, 0);\n        } else {\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\n        }\n    }\n\n    // =============================================== ROLE MANAGEMENT ===============================================\n    /// @inheritdoc IAccessManager\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n        emit RoleLabel(roleId, label);\n    }\n\n    /// @inheritdoc IAccessManager\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\n    }\n\n    /// @inheritdoc IAccessManager\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\n        _revokeRole(roleId, account);\n    }\n\n    /// @inheritdoc IAccessManager\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessManagerBadConfirmation();\n        }\n        _revokeRole(roleId, callerConfirmation);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\n        _setRoleAdmin(roleId, admin);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\n        _setRoleGuardian(roleId, guardian);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\n        _setGrantDelay(roleId, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function _grantRole(\n        uint64 roleId,\n        address account,\n        uint32 grantDelay,\n        uint32 executionDelay\n    ) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        bool newMember = _roles[roleId].members[account].since == 0;\n        uint48 since;\n\n        if (newMember) {\n            since = Time.timestamp() + grantDelay;\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\n        } else {\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\n            // any change to the execution delay within the duration of the role admin delay.\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\n                executionDelay,\n                0\n            );\n        }\n\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\n        return newMember;\n    }\n\n    /**\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n     * Returns true if the role was previously granted.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        if (_roles[roleId].members[account].since == 0) {\n            return false;\n        }\n\n        delete _roles[roleId].members[account];\n\n        emit RoleRevoked(roleId, account);\n        return true;\n    }\n\n    /**\n     * @dev Internal version of {setRoleAdmin} without access control.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to set grant or revoke such role.\n     */\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].admin = admin;\n\n        emit RoleAdminChanged(roleId, admin);\n    }\n\n    /**\n     * @dev Internal version of {setRoleGuardian} without access control.\n     *\n     * Emits a {RoleGuardianChanged} event.\n     *\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to cancel any scheduled operation for such role.\n     */\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].guardian = guardian;\n\n        emit RoleGuardianChanged(roleId, guardian);\n    }\n\n    /**\n     * @dev Internal version of {setGrantDelay} without access control.\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        uint48 effect;\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\n\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\n    }\n\n    // ============================================= FUNCTION MANAGEMENT ==============================================\n    /// @inheritdoc IAccessManager\n    function setTargetFunctionRole(\n        address target,\n        bytes4[] calldata selectors,\n        uint64 roleId\n    ) public virtual onlyAuthorized {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setTargetFunctionRole(target, selectors[i], roleId);\n        }\n    }\n\n    /**\n     * @dev Internal version of {setTargetFunctionRole} without access control.\n     *\n     * Emits a {TargetFunctionRoleUpdated} event.\n     */\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\n        _targets[target].allowedRoles[selector] = roleId;\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\n    }\n\n    /// @inheritdoc IAccessManager\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\n        _setTargetAdminDelay(target, newDelay);\n    }\n\n    /**\n     * @dev Internal version of {setTargetAdminDelay} without access control.\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\n        uint48 effect;\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\n\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\n    }\n\n    // =============================================== MODE MANAGEMENT ================================================\n    /// @inheritdoc IAccessManager\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\n        _setTargetClosed(target, closed);\n    }\n\n    /**\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function _setTargetClosed(address target, bool closed) internal virtual {\n        if (target == address(this)) {\n            revert AccessManagerLockedAccount(target);\n        }\n        _targets[target].closed = closed;\n        emit TargetClosed(target, closed);\n    }\n\n    // ============================================== DELAYED OPERATIONS ==============================================\n    /// @inheritdoc IAccessManager\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\n        uint48 timepoint = _schedules[id].timepoint;\n        return _isExpired(timepoint) ? 0 : timepoint;\n    }\n\n    /// @inheritdoc IAccessManager\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\n        return _schedules[id].nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (, uint32 setback) = _canCallExtended(caller, target, data);\n\n        uint48 minWhen = Time.timestamp() + setback;\n\n        // if call with delay is not authorized, or if requested timing is too soon\n        if (setback == 0 || (when > 0 && when < minWhen)) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        // Reuse variable due to stack too deep\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\n\n        // If caller is authorised, schedule operation\n        operationId = hashOperation(caller, target, data);\n\n        _checkNotScheduled(operationId);\n\n        unchecked {\n            // It's not feasible to overflow the nonce in less than 1000 years\n            nonce = _schedules[operationId].nonce + 1;\n        }\n        _schedules[operationId].timepoint = when;\n        _schedules[operationId].nonce = nonce;\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\n\n        // Using named return values because otherwise we get stack too deep\n    }\n\n    /**\n     * @dev Reverts if the operation is currently scheduled and has not expired.\n     * (Note: This function was introduced due to stack too deep errors in schedule.)\n     */\n    function _checkNotScheduled(bytes32 operationId) private view {\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\n            revert AccessManagerAlreadyScheduled(operationId);\n        }\n    }\n\n    /// @inheritdoc IAccessManager\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\n    // slither-disable-next-line reentrancy-no-eth\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\n\n        // If caller is not authorised, revert\n        if (!immediate && setback == 0) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        uint32 nonce;\n\n        // If caller is authorised, check operation was scheduled early enough\n        // Consume an available schedule even if there is no currently enforced delay\n        if (setback != 0 || getSchedule(operationId) != 0) {\n            nonce = _consumeScheduledOp(operationId);\n        }\n\n        // Mark the target and selector as authorised\n        bytes32 executionIdBefore = _executionId;\n        _executionId = _hashExecutionId(target, _checkSelector(data));\n\n        // Perform call\n        Address.functionCallWithValue(target, data, msg.value);\n\n        // Reset execute identifier\n        _executionId = executionIdBefore;\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\n        address msgsender = _msgSender();\n        bytes4 selector = _checkSelector(data);\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        if (_schedules[operationId].timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (caller != msgsender) {\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\n            if (!isAdmin && !isGuardian) {\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\n            }\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        uint32 nonce = _schedules[operationId].nonce;\n        emit OperationCanceled(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\n        address target = _msgSender();\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\n            revert AccessManagerUnauthorizedConsume(target);\n        }\n        _consumeScheduledOp(hashOperation(caller, target, data));\n    }\n\n    /**\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n     *\n     * Returns the nonce of the scheduled operation that is consumed.\n     */\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\n        uint48 timepoint = _schedules[operationId].timepoint;\n        uint32 nonce = _schedules[operationId].nonce;\n\n        if (timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (timepoint > Time.timestamp()) {\n            revert AccessManagerNotReady(operationId);\n        } else if (_isExpired(timepoint)) {\n            revert AccessManagerExpired(operationId);\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        emit OperationExecuted(operationId, nonce);\n\n        return nonce;\n    }\n\n    /// @inheritdoc IAccessManager\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\n        return keccak256(abi.encode(caller, target, data));\n    }\n\n    // ==================================================== OTHERS ====================================================\n    /// @inheritdoc IAccessManager\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\n        IAccessManaged(target).setAuthority(newAuthority);\n    }\n\n    // ================================================= ADMIN LOGIC ==================================================\n    /**\n     * @dev Check if the current call is authorized according to admin logic.\n     */\n    function _checkAuthorized() private {\n        address caller = _msgSender();\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\n        if (!immediate) {\n            if (delay == 0) {\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\n            } else {\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\n            }\n        }\n    }\n\n    /**\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n     *\n     * Returns:\n     * - bool restricted: does this data match a restricted operation\n     * - uint64: which role is this operation restricted to\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\n     */\n    function _getAdminRestrictions(\n        bytes calldata data\n    ) private view returns (bool restricted, uint64 roleAdminId, uint32 executionDelay) {\n        if (data.length < 4) {\n            return (false, 0, 0);\n        }\n\n        bytes4 selector = _checkSelector(data);\n\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\n        if (\n            selector == this.labelRole.selector ||\n            selector == this.setRoleAdmin.selector ||\n            selector == this.setRoleGuardian.selector ||\n            selector == this.setGrantDelay.selector ||\n            selector == this.setTargetAdminDelay.selector\n        ) {\n            return (true, ADMIN_ROLE, 0);\n        }\n\n        // Restricted to ADMIN with the admin delay corresponding to the target\n        if (\n            selector == this.updateAuthority.selector ||\n            selector == this.setTargetClosed.selector ||\n            selector == this.setTargetFunctionRole.selector\n        ) {\n            // First argument is a target.\n            address target = abi.decode(data[0x04:0x24], (address));\n            uint32 delay = getTargetAdminDelay(target);\n            return (true, ADMIN_ROLE, delay);\n        }\n\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\n            // First argument is a roleId.\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\n            return (true, getRoleAdmin(roleId), 0);\n        }\n\n        return (false, 0, 0);\n    }\n\n    // =================================================== HELPERS ====================================================\n    /**\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n     * when the target is this contract.\n     *\n     * Returns:\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\n     * - uint32 delay: the execution delay\n     */\n    function _canCallExtended(\n        address caller,\n        address target,\n        bytes calldata data\n    ) private view returns (bool immediate, uint32 delay) {\n        if (target == address(this)) {\n            return _canCallSelf(caller, data);\n        } else {\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\n        }\n    }\n\n    /**\n     * @dev A version of {canCall} that checks for admin restrictions in this contract.\n     */\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\n        if (data.length < 4) {\n            return (false, 0);\n        }\n\n        if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\n        }\n\n        (bool enabled, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\n        if (!enabled) {\n            return (false, 0);\n        }\n\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\n        if (!inRole) {\n            return (false, 0);\n        }\n\n        // downcast is safe because both options are uint32\n        delay = uint32(Math.max(operationDelay, executionDelay));\n        return (delay == 0, delay);\n    }\n\n    /**\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\n     */\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\n        return _executionId == _hashExecutionId(target, selector);\n    }\n\n    /**\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\n     */\n    function _isExpired(uint48 timepoint) private view returns (bool) {\n        return timepoint + expiration() <= Time.timestamp();\n    }\n\n    /**\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\n     */\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\n        return bytes4(data[0:4]);\n    }\n\n    /**\n     * @dev Hashing function for execute protection\n     */\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\n        return keccak256(abi.encode(target, selector));\n    }\n}\n"},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\n\npragma solidity ^0.8.20;\n\ninterface IAccessManaged {\n    /**\n     * @dev Authority that manages this contract was updated.\n     */\n    event AuthorityUpdated(address authority);\n\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    /**\n     * @dev Returns the current authority.\n     */\n    function authority() external view returns (address);\n\n    /**\n     * @dev Transfers control to a new authority. The caller must be the current authority.\n     */\n    function setAuthority(address) external;\n\n    /**\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n     * attacker controlled calls.\n     */\n    function isConsumingScheduledOp() external view returns (bytes4);\n}\n"},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\ninterface IAccessManager {\n    /**\n     * @dev A delayed operation was scheduled.\n     */\n    event OperationScheduled(\n        bytes32 indexed operationId,\n        uint32 indexed nonce,\n        uint48 schedule,\n        address caller,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @dev A scheduled operation was executed.\n     */\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev A scheduled operation was canceled.\n     */\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev Informational labelling for a roleId.\n     */\n    event RoleLabel(uint64 indexed roleId, string label);\n\n    /**\n     * @dev Emitted when `account` is granted `roleId`.\n     *\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n     * otherwise it indicates the execution delay for this account and roleId is updated.\n     */\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\n\n    /**\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\n     */\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\n\n    /**\n     * @dev Role acting as admin over a given `roleId` is updated.\n     */\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\n\n    /**\n     * @dev Role acting as guardian over a given `roleId` is updated.\n     */\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\n\n    /**\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\n     */\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\n\n    /**\n     * @dev Target mode is updated (true = closed, false = open).\n     */\n    event TargetClosed(address indexed target, bool closed);\n\n    /**\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\n     */\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\n\n    /**\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\n     */\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\n\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\n    error AccessManagerNotScheduled(bytes32 operationId);\n    error AccessManagerNotReady(bytes32 operationId);\n    error AccessManagerExpired(bytes32 operationId);\n    error AccessManagerLockedAccount(address account);\n    error AccessManagerLockedRole(uint64 roleId);\n    error AccessManagerBadConfirmation();\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\n    error AccessManagerUnauthorizedConsume(address target);\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\n\n    /**\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n     * & {execute} workflow.\n     *\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\n     * for future execution.\n     *\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n     * the operation can be executed if and only if delay is greater than 0.\n     *\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n     *\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\n     * {_canCallSelf} function instead.\n     */\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) external view returns (bool allowed, uint32 delay);\n\n    /**\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n     *\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n     * disabling any scheduling usage.\n     */\n    function expiration() external view returns (uint32);\n\n    /**\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\n     * accidental increase). Defaults to 5 days.\n     */\n    function minSetback() external view returns (uint32);\n\n    /**\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\n     */\n    function isTargetClosed(address target) external view returns (bool);\n\n    /**\n     * @dev Get the role required to call a function.\n     */\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\n\n    /**\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\n     */\n    function getTargetAdminDelay(address target) external view returns (uint32);\n\n    /**\n     * @dev Get the id of the role that acts as an admin for the given role.\n     *\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n     * an operation that is restricted to this role.\n     */\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role that acts as a guardian for a given role.\n     *\n     * The guardian permission allows canceling operations that have been scheduled under the role.\n     */\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role current grant delay.\n     *\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\n     */\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\n\n    /**\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\n     * level.\n     *\n     * Returns:\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n     * [1] Current execution delay for the account.\n     * [2] Pending execution delay for the account.\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\n     */\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\n\n    /**\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\n     */\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\n\n    /**\n     * @dev Give a label to a role, for improved role discoverability by UIs.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleLabel} event.\n     */\n    function labelRole(uint64 roleId, string calldata label) external;\n\n    /**\n     * @dev Add `account` to `roleId`, or change its execution delay.\n     *\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n     *\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - granted role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\n\n    /**\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n     * no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - revoked role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function revokeRole(uint64 roleId, address account) external;\n\n    /**\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n     * the role this call has no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\n\n    /**\n     * @dev Change admin role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleAdminChanged} event\n     */\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\n\n    /**\n     * @dev Change guardian role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGuardianChanged} event\n     */\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\n\n    /**\n     * @dev Update the delay for granting a `roleId`.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\n\n    /**\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\n     */\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\n\n    /**\n     * @dev Set the delay for changing the configuration of a given target contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\n\n    /**\n     * @dev Set the closed flag for a contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function setTargetClosed(address target, bool closed) external;\n\n    /**\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\n     */\n    function getSchedule(bytes32 id) external view returns (uint48);\n\n    /**\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n     * been scheduled.\n     */\n    function getNonce(bytes32 id) external view returns (uint32);\n\n    /**\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n     * required for the caller. The special value zero will automatically set the earliest possible time.\n     *\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n     *\n     * Emits a {OperationScheduled} event.\n     *\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n     * contract if it is using standard Solidity ABI encoding.\n     */\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\n\n    /**\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n     * execution delay is 0.\n     *\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n     *\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\n     */\n    function execute(address target, bytes calldata data) external payable returns (uint32);\n\n    /**\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n     * operation that is cancelled.\n     *\n     * Requirements:\n     *\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\n     *\n     * Emits a {OperationCanceled} event.\n     */\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\n\n    /**\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n     *\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n     * with all the verifications that it implies.\n     *\n     * Emit a {OperationExecuted} event.\n     */\n    function consumeScheduledOp(address caller, bytes calldata data) external;\n\n    /**\n     * @dev Hashing function for delayed operations.\n     */\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\n\n    /**\n     * @dev Changes the authority of a target managed by this manager instance.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     */\n    function updateAuthority(address target, address newAuthority) external;\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"},"@openzeppelin/contracts/utils/Multicall.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.20;\n\nimport {EnumerableSet} from \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentKey(bytes32 key);\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 key => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        if (value == 0 && !contains(map, key)) {\n            revert EnumerableMapNonexistentKey(key);\n        }\n        return value;\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/utils/types/Time.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n"},"contracts/management/PresaleManager.sol":{"content":"// SPDX-License-Identifier: Private\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/access/manager/AccessManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport \"@openzeppelin/contracts/access/manager/IAccessManaged.sol\";\nimport \"contracts/tokens/IFreezable.sol\"; \n\n/**\n * @title PresaleManager\n * @author Ilya A. Shlyakhovoy\n * @notice The simple Manager contract for presale phase during the\n * mature Manager contract in development\n * Only confirms execution of token functions if owner called it and\n * receives the funds in the stablecoins\n */\n\ncontract PresaleManager is Ownable, AccessManager, Pausable {\n    uint256 public immutable SALT ;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n    error EmptyToken();\n    error EmptyCurrency();\n    error EmptyRate();\n    error TooBigRate(uint256 rate);\n    error EmptyValue();\n    error CannotRedeem(address currency);\n    error CannotTransfer(address currency);\n    error NotOwned(address target);\n    error EmptyNewToken();\n    error IncorrectPosition();\n    error UnsufficientBalance(address buyer, address currency, uint256 balance,  uint256 amount);\n    error UnsufficientManagerBalance(uint256 amount);\n\n    event BoughtTokens(\n        address indexed sender,\n        address indexed currency,\n        uint256 indexed value,\n        uint256 amount\n    );\n    // address owner;\n    address tokenContract;\n    uint256 bonusPercent;\n    EnumerableMap.AddressToUintMap private currencies;\n\n    constructor(\n        address initialOwner,\n        address token,\n        uint256 bonus\n    ) Ownable(initialOwner) AccessManager(initialOwner) {\n        bonusPercent = 100 + bonus;\n        tokenContract = token;\n        SALT = 1544799;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function freeze(address target) external onlyOwner {\n        if (tokenContract == address(0)) revert EmptyToken();\n        IFreezable(tokenContract).freeze(target);\n    }\n\n    function unfreeze(address target) external onlyOwner {\n        if (tokenContract == address(0)) revert EmptyToken();\n        IFreezable(tokenContract).unfreeze(target);\n    }\n\n    function defineToken(address _token) external onlyOwner whenPaused {\n        if (_token == address(0)) revert EmptyToken();\n        tokenContract = _token;\n    }\n\n    function getToken() external view returns (address) {\n        return tokenContract;\n    }\n\n    /**\n     * Define or change new allowed currency with rate. Rate cannot be more than 100\n     *  tokens for the 1 currency unit. Rate is nominated in token decimals\n     *\n     * @param currency  the address of the currency token\n     * @param rate the exchange rate to token\n     */\n\n    function setRate(\n        address currency,\n        uint256 rate\n    ) external onlyOwner whenPaused returns (bool) {\n        if (currency == address(0)) revert EmptyCurrency();\n        if (rate == 0) revert EmptyRate();\n        if (tokenContract == address(0)) revert EmptyToken();\n        if (\n            rate > uint256(10 ** (IERC20Metadata(tokenContract).decimals() + 2))\n        ) revert TooBigRate(rate);\n        return currencies.set(currency, rate);\n    }\n\n    function getRate(address currency) external view returns (uint256) {\n        if (currency == address(0)) revert EmptyCurrency();\n        if (!currencies.contains(currency)) return 0;\n        return currencies.get(currency);\n    }\n\n    function at(uint256 ratePos) external view returns (address, uint256) {\n        if (ratePos >= currencies.length()) revert IncorrectPosition();\n        return currencies.at(ratePos);\n    }\n\n    function length() external view returns (uint256) {\n        return currencies.length();\n    }\n\n    function hasRate(\n        address currency\n    ) external view whenNotPaused returns (bool) {\n        if (currency == address(0)) revert EmptyCurrency();\n        return currencies.contains(currency);\n    }\n\n    function setBonus(uint256 bonus) external onlyOwner whenPaused {\n        bonusPercent = 100 + bonus;\n    }\n\n    function getBonus() external view returns (uint256) {\n        return bonusPercent - 100;\n    }\n    \n\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual override returns (bool immediate, uint32 delay) {\n        if (caller == owner()) return (true, 0);\n        (bool found,  ) = hasRole(ADMIN_ROLE, caller);\n        return (found, 0);\n    }\n\n    function getResultAmount(\n        address currency,\n        uint256 value\n    ) external view returns (uint256) {\n        if (currency == address(0)) revert EmptyCurrency();\n        if (value == 0) revert EmptyValue();\n        if (tokenContract == address(0)) revert EmptyToken();\n        // get the source decimals and add 2 because it will be multiplied by bonus percentage\n        uint256 decimals = IERC20Metadata(currency).decimals() + 2;\n        uint256 rate = this.getRate(currency);\n        return (rate * value * bonusPercent) / (10 ** decimals);\n    }\n\n    function buy(address currency, uint256 value) external whenNotPaused returns (bool) {\n        uint256 amount = this.getResultAmount(currency, value);\n        uint256 buyerBalance  = IERC20(currency).balanceOf(msg.sender);\n        uint256 managerBalance  = IERC20(tokenContract).balanceOf(address(this));\n        if ( buyerBalance < value)\n            revert UnsufficientBalance(msg.sender, currency, buyerBalance, value);\n        if ( managerBalance < amount)\n            revert UnsufficientManagerBalance(amount);\n        if (!IERC20(currency).transferFrom(msg.sender, address(this), value))\n            return false;\n        bool transferred = IERC20(tokenContract).transfer(msg.sender, amount);\n        if (transferred) emit BoughtTokens(msg.sender, currency, value, amount);\n        return transferred;\n    }\n\n    function balanceOf(address currency) external view returns (uint256) {\n        if (!this.hasRate(currency)) return 0;\n        return IERC20(currency).balanceOf(address(this));\n    }\n\n    function redeem(address currency, address _to) external onlyOwner whenPaused {\n        if (\n            !IERC20(currency).transfer(\n                _to,\n                IERC20(currency).balanceOf(address(this))\n            )\n        ) revert CannotRedeem(currency);\n    }\n\n    function transferAuthority(\n        address newAuthority\n    ) external onlyOwner whenPaused {\n        if (tokenContract == address(0)) revert EmptyToken();\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\n    }\n\n    function destroy(\n        address payable _to,\n        address newAuthority\n    ) external onlyOwner whenPaused {\n        if (tokenContract == address(0)) revert EmptyToken();\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\n        if (\n            !IERC20(tokenContract).transfer(\n                newAuthority,\n                IERC20(tokenContract).balanceOf(address(this))\n            )\n        ) revert CannotTransfer(tokenContract);\n\n        uint256 i;\n        uint256 balance;\n        for (i = 0; i < currencies.length(); i++) {\n            (address currency, ) = currencies.at(i);\n            balance = IERC20(currency).balanceOf(address(this));\n            if (balance > 0 && !IERC20(currency).transfer(_to, balance))\n                revert CannotTransfer(currency);\n        }\n        selfdestruct(_to);\n    }\n}\n"},"contracts/tokens/IFreezable.sol":{"content":"// SPDX-License-Identifier: Private\npragma solidity ^0.8.20;\n\ninterface IFreezable {\n    /**\n     * @dev Indicates an error when freezed address called function\n     * @param account Address who calls\n     */\n    error EnforcedFreeze(address account);\n\n    /**\n     * @dev The operation failed because the address is not freezed.\n     */\n    error ExpectedFreeze(address account);\n\n    /**\n     * @dev Emitted when the freeze is triggered by `account`.\n     */\n    event Freezed(address indexed account);\n\n    /**\n     * @dev Emitted when the freeze is lifted by `account`.\n     */\n    event Unfreezed(address indexed account);\n\n    /**\n     * @dev Returns true if the address is freezed, and false otherwise.\n     *\n     * Requirements:\n     *\n     *  @param target The verified address\n     */\n    function freezed(address target) external view returns (bool);\n\n    function freeze(address target) external;\n\n    function unfreeze(address target) external;\n}\n"}},"settings":{"metadata":{"bytecodeHash":"none","useLiteralContent":true},"optimizer":{"enabled":true,"runs":800},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5159","formattedMessage":"Warning: \"selfdestruct\" has been deprecated. The underlying opcode will eventually undergo breaking changes, and its use is not recommended.\n   --> contracts/management/PresaleManager.sol:218:9:\n    |\n218 |         selfdestruct(_to);\n    |         ^^^^^^^^^^^^\n\n","message":"\"selfdestruct\" has been deprecated. The underlying opcode will eventually undergo breaking changes, and its use is not recommended.","severity":"warning","sourceLocation":{"end":7674,"file":"contracts/management/PresaleManager.sol","start":7662},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/management/PresaleManager.sol:140:9:\n    |\n140 |         address target,\n    |         ^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":4525,"file":"contracts/management/PresaleManager.sol","start":4511},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/management/PresaleManager.sol:141:9:\n    |\n141 |         bytes4 selector\n    |         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":4550,"file":"contracts/management/PresaleManager.sol","start":4535},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[2898],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":2899,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2898,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,2898],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/access/manager/AccessManager.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/AccessManager.sol","exportedSymbols":{"AccessManager":[2033],"Address":[2868],"Context":[2898],"IAccessManaged":[2073],"IAccessManager":[2511],"Math":[4156],"Multicall":[2985],"Time":[7914]},"id":2034,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:1"},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManager.sol","file":"./IAccessManager.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":2512,"src":"142:52:1","symbolAliases":[{"foreign":{"id":150,"name":"IAccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"150:14:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","file":"./IAccessManaged.sol","id":153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":2074,"src":"195:52:1","symbolAliases":[{"foreign":{"id":152,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"203:14:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":2869,"src":"248:48:1","symbolAliases":[{"foreign":{"id":154,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"256:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":2899,"src":"297:48:1","symbolAliases":[{"foreign":{"id":156,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"305:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","file":"../../utils/Multicall.sol","id":159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":2986,"src":"346:52:1","symbolAliases":[{"foreign":{"id":158,"name":"Multicall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"354:9:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../../utils/math/Math.sol","id":161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":4157,"src":"399:47:1","symbolAliases":[{"foreign":{"id":160,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"407:4:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","file":"../../utils/types/Time.sol","id":163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2034,"sourceUnit":7915,"src":"447:48:1","symbolAliases":[{"foreign":{"id":162,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"455:4:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":165,"name":"Context","nameLocations":["3752:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2898,"src":"3752:7:1"},"id":166,"nodeType":"InheritanceSpecifier","src":"3752:7:1"},{"baseName":{"id":167,"name":"Multicall","nameLocations":["3761:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":2985,"src":"3761:9:1"},"id":168,"nodeType":"InheritanceSpecifier","src":"3761:9:1"},{"baseName":{"id":169,"name":"IAccessManager","nameLocations":["3772:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":2511,"src":"3772:14:1"},"id":170,"nodeType":"InheritanceSpecifier","src":"3772:14:1"}],"canonicalName":"AccessManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":164,"nodeType":"StructuredDocumentation","src":"497:3228:1","text":" @dev AccessManager is a central contract to store the permissions of a system.\n A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\n {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\n modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\n effectively restricted.\n The restriction rules for such functions are defined in terms of \"roles\" identified by an `uint64` and scoped\n by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\n configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\n For each target contract, admins can configure the following without any delay:\n * The target's {AccessManaged-authority} via {updateAuthority}.\n * Close or open a target via {setTargetClosed} keeping the permissions intact.\n * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\n By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\n Additionally, each role has the following configuration options restricted to this manager's admins:\n * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\n * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\n * A delay in which a role takes effect after being granted through {setGrantDelay}.\n * A delay of any target's admin action via {setTargetAdminDelay}.\n * A role label for discoverability purposes with {labelRole}.\n Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\n restricted to each role's admin (see {getRoleAdmin}).\n Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\n they will be highly secured (e.g., a multisig or a well-configured DAO).\n NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\n doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\n the return data are a boolean as expected by that interface.\n NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\n {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\n Users will be able to interact with these contracts through the {execute} function, following the access rules\n registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\n will be {AccessManager} itself.\n WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\n mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\n {{AccessControl-renounceRole}}."},"fullyImplemented":true,"id":2033,"linearizedBaseContracts":[2033,2511,2985,2898],"name":"AccessManager","nameLocation":"3735:13:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":172,"libraryName":{"id":171,"name":"Time","nameLocations":["3799:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":7914,"src":"3799:4:1"},"nodeType":"UsingForDirective","src":"3793:17:1"},{"canonicalName":"AccessManager.TargetConfig","id":182,"members":[{"constant":false,"id":176,"mutability":"mutable","name":"allowedRoles","nameLocation":"3952:12:1","nodeType":"VariableDeclaration","scope":182,"src":"3910:54:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_uint64_$","typeString":"mapping(bytes4 => uint64)"},"typeName":{"id":175,"keyName":"selector","keyNameLocation":"3925:8:1","keyType":{"id":173,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3918:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"3910:41:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_uint64_$","typeString":"mapping(bytes4 => uint64)"},"valueName":"roleId","valueNameLocation":"3944:6:1","valueType":{"id":174,"name":"uint64","nodeType":"ElementaryTypeName","src":"3937:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"adminDelay","nameLocation":"3985:10:1","nodeType":"VariableDeclaration","scope":182,"src":"3974:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":178,"nodeType":"UserDefinedTypeName","pathNode":{"id":177,"name":"Time.Delay","nameLocations":["3974:4:1","3979:5:1"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"3974:10:1"},"referencedDeclaration":7676,"src":"3974:10:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"closed","nameLocation":"4010:6:1","nodeType":"VariableDeclaration","scope":182,"src":"4005:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":180,"name":"bool","nodeType":"ElementaryTypeName","src":"4005:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"TargetConfig","nameLocation":"3887:12:1","nodeType":"StructDefinition","scope":2033,"src":"3880:143:1","visibility":"public"},{"canonicalName":"AccessManager.Access","id":188,"members":[{"constant":false,"id":184,"mutability":"mutable","name":"since","nameLocation":"4318:5:1","nodeType":"VariableDeclaration","scope":188,"src":"4311:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":183,"name":"uint48","nodeType":"ElementaryTypeName","src":"4311:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"delay","nameLocation":"4424:5:1","nodeType":"VariableDeclaration","scope":188,"src":"4413:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Time.Delay","nameLocations":["4413:4:1","4418:5:1"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4413:10:1"},"referencedDeclaration":7676,"src":"4413:10:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"name":"Access","nameLocation":"4142:6:1","nodeType":"StructDefinition","scope":2033,"src":"4135:301:1","visibility":"public"},{"canonicalName":"AccessManager.Role","id":201,"members":[{"constant":false,"id":193,"mutability":"mutable","name":"members","nameLocation":"4587:7:1","nodeType":"VariableDeclaration","scope":201,"src":"4548:46:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access)"},"typeName":{"id":192,"keyName":"user","keyNameLocation":"4564:4:1","keyType":{"id":189,"name":"address","nodeType":"ElementaryTypeName","src":"4556:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4548:38:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access)"},"valueName":"access","valueNameLocation":"4579:6:1","valueType":{"id":191,"nodeType":"UserDefinedTypeName","pathNode":{"id":190,"name":"Access","nameLocations":["4572:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":188,"src":"4572:6:1"},"referencedDeclaration":188,"src":"4572:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage_ptr","typeString":"struct AccessManager.Access"}}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"admin","nameLocation":"4665:5:1","nodeType":"VariableDeclaration","scope":201,"src":"4658:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":194,"name":"uint64","nodeType":"ElementaryTypeName","src":"4658:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"guardian","nameLocation":"4774:8:1","nodeType":"VariableDeclaration","scope":201,"src":"4767:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":196,"name":"uint64","nodeType":"ElementaryTypeName","src":"4767:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"grantDelay","nameLocation":"4872:10:1","nodeType":"VariableDeclaration","scope":201,"src":"4861:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":199,"nodeType":"UserDefinedTypeName","pathNode":{"id":198,"name":"Time.Delay","nameLocations":["4861:4:1","4866:5:1"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4861:10:1"},"referencedDeclaration":7676,"src":"4861:10:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"name":"Role","nameLocation":"4501:4:1","nodeType":"StructDefinition","scope":2033,"src":"4494:395:1","visibility":"public"},{"canonicalName":"AccessManager.Schedule","id":206,"members":[{"constant":false,"id":203,"mutability":"mutable","name":"timepoint","nameLocation":"5094:9:1","nodeType":"VariableDeclaration","scope":206,"src":"5087:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":202,"name":"uint48","nodeType":"ElementaryTypeName","src":"5087:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"nonce","nameLocation":"5205:5:1","nodeType":"VariableDeclaration","scope":206,"src":"5198:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":204,"name":"uint32","nodeType":"ElementaryTypeName","src":"5198:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Schedule","nameLocation":"5010:8:1","nodeType":"StructDefinition","scope":2033,"src":"5003:214:1","visibility":"public"},{"constant":true,"functionSelector":"75b238fc","id":213,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"5246:10:1","nodeType":"VariableDeclaration","scope":2033,"src":"5223:52:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":207,"name":"uint64","nodeType":"ElementaryTypeName","src":"5223:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"expression":{"arguments":[{"id":210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5264:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":209,"name":"uint64","nodeType":"ElementaryTypeName","src":"5264:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":208,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5259:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5259:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5272:3:1","memberName":"min","nodeType":"MemberAccess","src":"5259:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"public"},{"constant":true,"functionSelector":"3ca7c02a","id":220,"mutability":"constant","name":"PUBLIC_ROLE","nameLocation":"5309:11:1","nodeType":"VariableDeclaration","scope":2033,"src":"5286:53:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":214,"name":"uint64","nodeType":"ElementaryTypeName","src":"5286:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"expression":{"arguments":[{"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5328:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":216,"name":"uint64","nodeType":"ElementaryTypeName","src":"5328:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":215,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5323:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5323:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5336:3:1","memberName":"max","nodeType":"MemberAccess","src":"5323:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"public"},{"constant":false,"id":225,"mutability":"mutable","name":"_targets","nameLocation":"5410:8:1","nodeType":"VariableDeclaration","scope":2033,"src":"5357:61:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig)"},"typeName":{"id":224,"keyName":"target","keyNameLocation":"5373:6:1","keyType":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"5365:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5357:44:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig)"},"valueName":"mode","valueNameLocation":"5396:4:1","valueType":{"id":223,"nodeType":"UserDefinedTypeName","pathNode":{"id":222,"name":"TargetConfig","nameLocations":["5383:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":182,"src":"5383:12:1"},"referencedDeclaration":182,"src":"5383:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage_ptr","typeString":"struct AccessManager.TargetConfig"}}},"visibility":"private"},{"constant":false,"id":230,"mutability":"mutable","name":"_roles","nameLocation":"5463:6:1","nodeType":"VariableDeclaration","scope":2033,"src":"5424:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role)"},"typeName":{"id":229,"keyName":"roleId","keyNameLocation":"5439:6:1","keyType":{"id":226,"name":"uint64","nodeType":"ElementaryTypeName","src":"5432:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"5424:30:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":228,"nodeType":"UserDefinedTypeName","pathNode":{"id":227,"name":"Role","nameLocations":["5449:4:1"],"nodeType":"IdentifierPath","referencedDeclaration":201,"src":"5449:4:1"},"referencedDeclaration":201,"src":"5449:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage_ptr","typeString":"struct AccessManager.Role"}}},"visibility":"private"},{"constant":false,"id":235,"mutability":"mutable","name":"_schedules","nameLocation":"5524:10:1","nodeType":"VariableDeclaration","scope":2033,"src":"5475:59:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule)"},"typeName":{"id":234,"keyName":"operationId","keyNameLocation":"5491:11:1","keyType":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5483:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"5475:40:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":233,"nodeType":"UserDefinedTypeName","pathNode":{"id":232,"name":"Schedule","nameLocations":["5506:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":206,"src":"5506:8:1"},"referencedDeclaration":206,"src":"5506:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage_ptr","typeString":"struct AccessManager.Schedule"}}},"visibility":"private"},{"constant":false,"id":237,"mutability":"mutable","name":"_executionId","nameLocation":"5708:12:1","nodeType":"VariableDeclaration","scope":2033,"src":"5692:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5692:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":244,"nodeType":"Block","src":"5913:46:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":240,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"5923:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5923:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5923:18:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5951:1:1"}]},"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"5727:155:1","text":" @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\n {_getAdminRestrictions}."},"id":245,"name":"onlyAuthorized","nameLocation":"5896:14:1","nodeType":"ModifierDefinition","parameters":{"id":239,"nodeType":"ParameterList","parameters":[],"src":"5910:2:1"},"src":"5887:72:1","virtual":false,"visibility":"internal"},{"body":{"id":272,"nodeType":"Block","src":"5999:249:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":250,"name":"initialAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"6013:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6037:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6029:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"6029:7:1","typeDescriptions":{}}},"id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6029:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6013:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":264,"nodeType":"IfStatement","src":"6009:108:1","trueBody":{"id":263,"nodeType":"Block","src":"6041:76:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6103:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6095:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"6095:7:1","typeDescriptions":{}}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6095:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":256,"name":"AccessManagerInvalidInitialAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"6062:32:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6062:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":262,"nodeType":"RevertStatement","src":"6055:51:1"}]}},{"expression":{"arguments":[{"id":266,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"6210:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":267,"name":"initialAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"6222:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6236:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6239:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":265,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"6199:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_address_$_t_uint32_$_t_uint32_$returns$_t_bool_$","typeString":"function (uint64,address,uint32,uint32) returns (bool)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6199:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":271,"nodeType":"ExpressionStatement","src":"6199:42:1"}]},"id":273,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"initialAdmin","nameLocation":"5985:12:1","nodeType":"VariableDeclaration","scope":273,"src":"5977:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"5977:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5976:22:1"},"returnParameters":{"id":249,"nodeType":"ParameterList","parameters":[],"src":"5999:0:1"},"scope":2033,"src":"5965:283:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2255],"body":{"id":339,"nodeType":"Block","src":"6564:647:1","statements":[{"condition":{"arguments":[{"id":288,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"6593:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":287,"name":"isTargetClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"6578:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6578:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":295,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"6654:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":298,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6672:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6664:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"6664:7:1","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6664:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6654:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":336,"nodeType":"Block","src":"6971:234:1","statements":[{"assignments":[310],"declarations":[{"constant":false,"id":310,"mutability":"mutable","name":"roleId","nameLocation":"6992:6:1","nodeType":"VariableDeclaration","scope":336,"src":"6985:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":309,"name":"uint64","nodeType":"ElementaryTypeName","src":"6985:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":315,"initialValue":{"arguments":[{"id":312,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"7023:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":313,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"7031:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":311,"name":"getTargetFunctionRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"7001:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_uint64_$","typeString":"function (address,bytes4) view returns (uint64)"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7001:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"6985:55:1"},{"assignments":[317,319],"declarations":[{"constant":false,"id":317,"mutability":"mutable","name":"isMember","nameLocation":"7060:8:1","nodeType":"VariableDeclaration","scope":336,"src":"7055:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":316,"name":"bool","nodeType":"ElementaryTypeName","src":"7055:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"currentDelay","nameLocation":"7077:12:1","nodeType":"VariableDeclaration","scope":336,"src":"7070:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":318,"name":"uint32","nodeType":"ElementaryTypeName","src":"7070:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":324,"initialValue":{"arguments":[{"id":321,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"7101:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":322,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"7109:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":320,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"7093:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$_t_uint32_$","typeString":"function (uint64,address) view returns (bool,uint32)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7093:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"7054:62:1"},{"expression":{"condition":{"id":325,"name":"isMember","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"7137:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"hexValue":"66616c7365","id":331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7185:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7192:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":333,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7184:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7137:57:1","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":326,"name":"currentDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"7149:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7165:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7149:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":329,"name":"currentDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"7168:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7148:33:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":286,"id":335,"nodeType":"Return","src":"7130:64:1"}]},"id":337,"nodeType":"IfStatement","src":"6650:555:1","trueBody":{"id":308,"nodeType":"Block","src":"6679:286:1","statements":[{"expression":{"components":[{"arguments":[{"id":302,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"6933:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":303,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"6941:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":301,"name":"_isExecuting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6920:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"30","id":305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":306,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6919:35:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":286,"id":307,"nodeType":"Return","src":"6912:42:1"}]}},"id":338,"nodeType":"IfStatement","src":"6574:631:1","trueBody":{"id":294,"nodeType":"Block","src":"6602:42:1","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6624:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6623:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":286,"id":293,"nodeType":"Return","src":"6616:17:1"}]}}]},"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"6374:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"b7009613","id":340,"implemented":true,"kind":"function","modifiers":[],"name":"canCall","nameLocation":"6418:7:1","nodeType":"FunctionDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"caller","nameLocation":"6443:6:1","nodeType":"VariableDeclaration","scope":340,"src":"6435:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"6435:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"target","nameLocation":"6467:6:1","nodeType":"VariableDeclaration","scope":340,"src":"6459:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"6459:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"selector","nameLocation":"6490:8:1","nodeType":"VariableDeclaration","scope":340,"src":"6483:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":279,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6483:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"6425:79:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"immediate","nameLocation":"6539:9:1","nodeType":"VariableDeclaration","scope":340,"src":"6534:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":282,"name":"bool","nodeType":"ElementaryTypeName","src":"6534:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"delay","nameLocation":"6557:5:1","nodeType":"VariableDeclaration","scope":340,"src":"6550:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":284,"name":"uint32","nodeType":"ElementaryTypeName","src":"6550:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6533:30:1"},"scope":2033,"src":"6409:802:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2261],"body":{"id":348,"nodeType":"Block","src":"7311:31:1","statements":[{"expression":{"hexValue":"31","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7328:7:1","subdenomination":"weeks","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"1"},"functionReturnParameters":345,"id":347,"nodeType":"Return","src":"7321:14:1"}]},"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"7217:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"4665096d","id":349,"implemented":true,"kind":"function","modifiers":[],"name":"expiration","nameLocation":"7261:10:1","nodeType":"FunctionDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"7271:2:1"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":349,"src":"7303:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":343,"name":"uint32","nodeType":"ElementaryTypeName","src":"7303:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"7302:8:1"},"scope":2033,"src":"7252:90:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2267],"body":{"id":357,"nodeType":"Block","src":"7442:30:1","statements":[{"expression":{"hexValue":"35","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7459:6:1","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_432000_by_1","typeString":"int_const 432000"},"value":"5"},"functionReturnParameters":354,"id":356,"nodeType":"Return","src":"7452:13:1"}]},"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"7348:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"cc1b6c81","id":358,"implemented":true,"kind":"function","modifiers":[],"name":"minSetback","nameLocation":"7392:10:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"7402:2:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":358,"src":"7434:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":352,"name":"uint32","nodeType":"ElementaryTypeName","src":"7434:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"7433:8:1"},"scope":2033,"src":"7383:89:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2275],"body":{"id":371,"nodeType":"Block","src":"7588:47:1","statements":[{"expression":{"expression":{"baseExpression":{"id":366,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"7605:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":368,"indexExpression":{"id":367,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"7614:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7605:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":369,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7622:6:1","memberName":"closed","nodeType":"MemberAccess","referencedDeclaration":181,"src":"7605:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":365,"id":370,"nodeType":"Return","src":"7598:30:1"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"7478:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"a166aa89","id":372,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetClosed","nameLocation":"7522:14:1","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"target","nameLocation":"7545:6:1","nodeType":"VariableDeclaration","scope":372,"src":"7537:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"7537:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7536:16:1"},"returnParameters":{"id":365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":372,"src":"7582:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":363,"name":"bool","nodeType":"ElementaryTypeName","src":"7582:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7581:6:1"},"scope":2033,"src":"7513:122:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2285],"body":{"id":389,"nodeType":"Block","src":"7777:63:1","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":382,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"7794:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":384,"indexExpression":{"id":383,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"7803:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7794:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7811:12:1","memberName":"allowedRoles","nodeType":"MemberAccess","referencedDeclaration":176,"src":"7794:29:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_uint64_$","typeString":"mapping(bytes4 => uint64)"}},"id":387,"indexExpression":{"id":386,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"7824:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7794:39:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":381,"id":388,"nodeType":"Return","src":"7787:46:1"}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"7641:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"6d5115bd","id":390,"implemented":true,"kind":"function","modifiers":[],"name":"getTargetFunctionRole","nameLocation":"7685:21:1","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"target","nameLocation":"7715:6:1","nodeType":"VariableDeclaration","scope":390,"src":"7707:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":374,"name":"address","nodeType":"ElementaryTypeName","src":"7707:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"selector","nameLocation":"7730:8:1","nodeType":"VariableDeclaration","scope":390,"src":"7723:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":376,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7723:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7706:33:1"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"7769:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":379,"name":"uint64","nodeType":"ElementaryTypeName","src":"7769:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7768:8:1"},"scope":2033,"src":"7676:164:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2293],"body":{"id":405,"nodeType":"Block","src":"7963:57:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"baseExpression":{"id":398,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"7980:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":400,"indexExpression":{"id":399,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"7989:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7980:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":401,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7997:10:1","memberName":"adminDelay","nodeType":"MemberAccess","referencedDeclaration":179,"src":"7980:27:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8008:3:1","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":7768,"src":"7980:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) view returns (uint32)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7980:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":397,"id":404,"nodeType":"Return","src":"7973:40:1"}]},"documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"7846:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"4c1da1e2","id":406,"implemented":true,"kind":"function","modifiers":[],"name":"getTargetAdminDelay","nameLocation":"7890:19:1","nodeType":"FunctionDefinition","parameters":{"id":394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":393,"mutability":"mutable","name":"target","nameLocation":"7918:6:1","nodeType":"VariableDeclaration","scope":406,"src":"7910:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"7910:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7909:16:1"},"returnParameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":406,"src":"7955:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":395,"name":"uint32","nodeType":"ElementaryTypeName","src":"7955:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"7954:8:1"},"scope":2033,"src":"7881:139:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2301],"body":{"id":419,"nodeType":"Block","src":"8135:44:1","statements":[{"expression":{"expression":{"baseExpression":{"id":414,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"8152:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":416,"indexExpression":{"id":415,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"8159:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8152:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8167:5:1","memberName":"admin","nodeType":"MemberAccess","referencedDeclaration":195,"src":"8152:20:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":413,"id":418,"nodeType":"Return","src":"8145:27:1"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"8026:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"530dd456","id":420,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"8070:12:1","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"roleId","nameLocation":"8090:6:1","nodeType":"VariableDeclaration","scope":420,"src":"8083:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":408,"name":"uint64","nodeType":"ElementaryTypeName","src":"8083:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8082:15:1"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":420,"src":"8127:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":411,"name":"uint64","nodeType":"ElementaryTypeName","src":"8127:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8126:8:1"},"scope":2033,"src":"8061:118:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2309],"body":{"id":433,"nodeType":"Block","src":"8297:47:1","statements":[{"expression":{"expression":{"baseExpression":{"id":428,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"8314:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":430,"indexExpression":{"id":429,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"8321:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8314:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:8:1","memberName":"guardian","nodeType":"MemberAccess","referencedDeclaration":197,"src":"8314:23:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":427,"id":432,"nodeType":"Return","src":"8307:30:1"}]},"documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"8185:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"0b0a93ba","id":434,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleGuardian","nameLocation":"8229:15:1","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"roleId","nameLocation":"8252:6:1","nodeType":"VariableDeclaration","scope":434,"src":"8245:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":422,"name":"uint64","nodeType":"ElementaryTypeName","src":"8245:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8244:15:1"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"8289:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":425,"name":"uint64","nodeType":"ElementaryTypeName","src":"8289:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8288:8:1"},"scope":2033,"src":"8220:124:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2317],"body":{"id":449,"nodeType":"Block","src":"8464:55:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"baseExpression":{"id":442,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"8481:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":444,"indexExpression":{"id":443,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"8488:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8481:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8496:10:1","memberName":"grantDelay","nodeType":"MemberAccess","referencedDeclaration":200,"src":"8481:25:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8507:3:1","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":7768,"src":"8481:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) view returns (uint32)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8481:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":441,"id":448,"nodeType":"Return","src":"8474:38:1"}]},"documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"8350:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"12be8727","id":450,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleGrantDelay","nameLocation":"8394:17:1","nodeType":"FunctionDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"roleId","nameLocation":"8419:6:1","nodeType":"VariableDeclaration","scope":450,"src":"8412:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":436,"name":"uint64","nodeType":"ElementaryTypeName","src":"8412:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8411:15:1"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":450,"src":"8456:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":439,"name":"uint32","nodeType":"ElementaryTypeName","src":"8456:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8455:8:1"},"scope":2033,"src":"8385:134:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2333],"body":{"id":497,"nodeType":"Block","src":"8733:235:1","statements":[{"assignments":[468],"declarations":[{"constant":false,"id":468,"mutability":"mutable","name":"access","nameLocation":"8758:6:1","nodeType":"VariableDeclaration","scope":497,"src":"8743:21:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage_ptr","typeString":"struct AccessManager.Access"},"typeName":{"id":467,"nodeType":"UserDefinedTypeName","pathNode":{"id":466,"name":"Access","nameLocations":["8743:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":188,"src":"8743:6:1"},"referencedDeclaration":188,"src":"8743:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage_ptr","typeString":"struct AccessManager.Access"}},"visibility":"internal"}],"id":475,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":469,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"8767:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":471,"indexExpression":{"id":470,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"8774:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8767:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":472,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8782:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"8767:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":474,"indexExpression":{"id":473,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"8790:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8767:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8743:55:1"},{"expression":{"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":476,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"8809:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":477,"name":"access","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"8817:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage_ptr","typeString":"struct AccessManager.Access storage pointer"}},"id":478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8824:5:1","memberName":"since","nodeType":"MemberAccess","referencedDeclaration":184,"src":"8817:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"8809:20:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":480,"nodeType":"ExpressionStatement","src":"8809:20:1"},{"expression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":481,"name":"currentDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"8840:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":482,"name":"pendingDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8854:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":483,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8868:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":484,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8839:36:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":485,"name":"access","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"8878:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage_ptr","typeString":"struct AccessManager.Access storage pointer"}},"id":486,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8885:5:1","memberName":"delay","nodeType":"MemberAccess","referencedDeclaration":187,"src":"8878:12:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8891:7:1","memberName":"getFull","nodeType":"MemberAccess","referencedDeclaration":7750,"src":"8878:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) view returns (uint32,uint32,uint48)"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"src":"8839:61:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"ExpressionStatement","src":"8839:61:1"},{"expression":{"components":[{"id":491,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"8919:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":492,"name":"currentDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"8926:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":493,"name":"pendingDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8940:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":494,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8954:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8918:43:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint48_$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint48,uint32,uint32,uint48)"}},"functionReturnParameters":465,"id":496,"nodeType":"Return","src":"8911:50:1"}]},"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"8525:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"3078f114","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"getAccess","nameLocation":"8569:9:1","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"mutability":"mutable","name":"roleId","nameLocation":"8595:6:1","nodeType":"VariableDeclaration","scope":498,"src":"8588:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":452,"name":"uint64","nodeType":"ElementaryTypeName","src":"8588:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"account","nameLocation":"8619:7:1","nodeType":"VariableDeclaration","scope":498,"src":"8611:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"8611:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8578:54:1"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"since","nameLocation":"8669:5:1","nodeType":"VariableDeclaration","scope":498,"src":"8662:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":457,"name":"uint48","nodeType":"ElementaryTypeName","src":"8662:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"currentDelay","nameLocation":"8683:12:1","nodeType":"VariableDeclaration","scope":498,"src":"8676:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":459,"name":"uint32","nodeType":"ElementaryTypeName","src":"8676:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"pendingDelay","nameLocation":"8704:12:1","nodeType":"VariableDeclaration","scope":498,"src":"8697:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":461,"name":"uint32","nodeType":"ElementaryTypeName","src":"8697:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"effect","nameLocation":"8725:6:1","nodeType":"VariableDeclaration","scope":498,"src":"8718:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":463,"name":"uint48","nodeType":"ElementaryTypeName","src":"8718:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"8661:71:1"},"scope":2033,"src":"8560:408:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2345],"body":{"id":541,"nodeType":"Block","src":"9147:280:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":510,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"9161:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":511,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"9171:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9161:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":539,"nodeType":"Block","src":"9231:190:1","statements":[{"assignments":[519,521,null,null],"declarations":[{"constant":false,"id":519,"mutability":"mutable","name":"hasRoleSince","nameLocation":"9253:12:1","nodeType":"VariableDeclaration","scope":539,"src":"9246:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":518,"name":"uint48","nodeType":"ElementaryTypeName","src":"9246:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"currentDelay","nameLocation":"9274:12:1","nodeType":"VariableDeclaration","scope":539,"src":"9267:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":520,"name":"uint32","nodeType":"ElementaryTypeName","src":"9267:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},null,null],"id":526,"initialValue":{"arguments":[{"id":523,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"9304:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":524,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"9312:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":522,"name":"getAccess","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"9294:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_uint48_$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"function (uint64,address) view returns (uint48,uint32,uint32,uint48)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9294:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint48_$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint48,uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"9245:75:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":527,"name":"hasRoleSince","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9342:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9358:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9342:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":530,"name":"hasRoleSince","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9363:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":531,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"9379:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$7914_$","typeString":"type(library Time)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9384:9:1","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":7661,"src":"9379:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9379:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"9363:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9342:53:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":536,"name":"currentDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9397:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9341:69:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":509,"id":538,"nodeType":"Return","src":"9334:76:1"}]},"id":540,"nodeType":"IfStatement","src":"9157:264:1","trueBody":{"id":517,"nodeType":"Block","src":"9184:41:1","statements":[{"expression":{"components":[{"hexValue":"74727565","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9206:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9205:9:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":509,"id":516,"nodeType":"Return","src":"9198:16:1"}]}}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"8974:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"d1f856ee","id":542,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"9018:7:1","nodeType":"FunctionDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"roleId","nameLocation":"9042:6:1","nodeType":"VariableDeclaration","scope":542,"src":"9035:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":500,"name":"uint64","nodeType":"ElementaryTypeName","src":"9035:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"account","nameLocation":"9066:7:1","nodeType":"VariableDeclaration","scope":542,"src":"9058:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"9058:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9025:54:1"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"isMember","nameLocation":"9114:8:1","nodeType":"VariableDeclaration","scope":542,"src":"9109:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":505,"name":"bool","nodeType":"ElementaryTypeName","src":"9109:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"executionDelay","nameLocation":"9131:14:1","nodeType":"VariableDeclaration","scope":542,"src":"9124:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":507,"name":"uint32","nodeType":"ElementaryTypeName","src":"9124:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9108:38:1"},"scope":2033,"src":"9009:418:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2353],"body":{"id":570,"nodeType":"Block","src":"9674:169:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"9688:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":553,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"9698:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9688:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":555,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"9712:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":556,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"9722:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"9712:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9688:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":564,"nodeType":"IfStatement","src":"9684:114:1","trueBody":{"id":563,"nodeType":"Block","src":"9735:63:1","statements":[{"errorCall":{"arguments":[{"id":560,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"9780:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":559,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"9756:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9756:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":562,"nodeType":"RevertStatement","src":"9749:38:1"}]}},{"eventCall":{"arguments":[{"id":566,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"9822:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":567,"name":"label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"9830:5:1","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":565,"name":"RoleLabel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"9812:9:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint64,string memory)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9812:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"EmitStatement","src":"9807:29:1"}]},"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"9552:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"853551b8","id":571,"implemented":true,"kind":"function","modifiers":[{"id":550,"kind":"modifierInvocation","modifierName":{"id":549,"name":"onlyAuthorized","nameLocations":["9659:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"9659:14:1"},"nodeType":"ModifierInvocation","src":"9659:14:1"}],"name":"labelRole","nameLocation":"9596:9:1","nodeType":"FunctionDefinition","parameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"roleId","nameLocation":"9613:6:1","nodeType":"VariableDeclaration","scope":571,"src":"9606:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":544,"name":"uint64","nodeType":"ElementaryTypeName","src":"9606:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":547,"mutability":"mutable","name":"label","nameLocation":"9637:5:1","nodeType":"VariableDeclaration","scope":571,"src":"9621:21:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":546,"name":"string","nodeType":"ElementaryTypeName","src":"9621:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"9605:38:1"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"9674:0:1"},"scope":2033,"src":"9587:256:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2363],"body":{"id":592,"nodeType":"Block","src":"9988:87:1","statements":[{"expression":{"arguments":[{"id":584,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"10009:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":585,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"10017:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":587,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"10044:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":586,"name":"getRoleGrantDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"10026:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$returns$_t_uint32_$","typeString":"function (uint64) view returns (uint32)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":589,"name":"executionDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"10053:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":583,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"9998:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_address_$_t_uint32_$_t_uint32_$returns$_t_bool_$","typeString":"function (uint64,address,uint32,uint32) returns (bool)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9998:70:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":591,"nodeType":"ExpressionStatement","src":"9998:70:1"}]},"documentation":{"id":572,"nodeType":"StructuredDocumentation","src":"9849:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"25c471a0","id":593,"implemented":true,"kind":"function","modifiers":[{"id":581,"kind":"modifierInvocation","modifierName":{"id":580,"name":"onlyAuthorized","nameLocations":["9973:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"9973:14:1"},"nodeType":"ModifierInvocation","src":"9973:14:1"}],"name":"grantRole","nameLocation":"9893:9:1","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"roleId","nameLocation":"9910:6:1","nodeType":"VariableDeclaration","scope":593,"src":"9903:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":573,"name":"uint64","nodeType":"ElementaryTypeName","src":"9903:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"account","nameLocation":"9926:7:1","nodeType":"VariableDeclaration","scope":593,"src":"9918:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"9918:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"executionDelay","nameLocation":"9942:14:1","nodeType":"VariableDeclaration","scope":593,"src":"9935:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":577,"name":"uint32","nodeType":"ElementaryTypeName","src":"9935:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9902:55:1"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"9988:0:1"},"scope":2033,"src":"9884:191:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2371],"body":{"id":608,"nodeType":"Block","src":"10198:45:1","statements":[{"expression":{"arguments":[{"id":604,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"10220:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":605,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"10228:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":603,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"10208:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_address_$returns$_t_bool_$","typeString":"function (uint64,address) returns (bool)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10208:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":607,"nodeType":"ExpressionStatement","src":"10208:28:1"}]},"documentation":{"id":594,"nodeType":"StructuredDocumentation","src":"10081:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"b7d2b162","id":609,"implemented":true,"kind":"function","modifiers":[{"id":601,"kind":"modifierInvocation","modifierName":{"id":600,"name":"onlyAuthorized","nameLocations":["10183:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"10183:14:1"},"nodeType":"ModifierInvocation","src":"10183:14:1"}],"name":"revokeRole","nameLocation":"10125:10:1","nodeType":"FunctionDefinition","parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"roleId","nameLocation":"10143:6:1","nodeType":"VariableDeclaration","scope":609,"src":"10136:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":595,"name":"uint64","nodeType":"ElementaryTypeName","src":"10136:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":598,"mutability":"mutable","name":"account","nameLocation":"10159:7:1","nodeType":"VariableDeclaration","scope":609,"src":"10151:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":597,"name":"address","nodeType":"ElementaryTypeName","src":"10151:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10135:32:1"},"returnParameters":{"id":602,"nodeType":"ParameterList","parameters":[],"src":"10198:0:1"},"scope":2033,"src":"10116:127:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2379],"body":{"id":631,"nodeType":"Block","src":"10364:167:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":617,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"10378:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":618,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"10400:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10400:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10378:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":625,"nodeType":"IfStatement","src":"10374:102:1","trueBody":{"id":624,"nodeType":"Block","src":"10414:62:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":621,"name":"AccessManagerBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"10435:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10435:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":623,"nodeType":"RevertStatement","src":"10428:37:1"}]}},{"expression":{"arguments":[{"id":627,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"10497:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":628,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"10505:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":626,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"10485:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_address_$returns$_t_bool_$","typeString":"function (uint64,address) returns (bool)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10485:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":630,"nodeType":"ExpressionStatement","src":"10485:39:1"}]},"documentation":{"id":610,"nodeType":"StructuredDocumentation","src":"10249:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"fe0776f5","id":632,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"10293:12:1","nodeType":"FunctionDefinition","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"roleId","nameLocation":"10313:6:1","nodeType":"VariableDeclaration","scope":632,"src":"10306:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":611,"name":"uint64","nodeType":"ElementaryTypeName","src":"10306:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"callerConfirmation","nameLocation":"10329:18:1","nodeType":"VariableDeclaration","scope":632,"src":"10321:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"10321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10305:43:1"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"10364:0:1"},"scope":2033,"src":"10284:247:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2387],"body":{"id":647,"nodeType":"Block","src":"10653:45:1","statements":[{"expression":{"arguments":[{"id":643,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"10677:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":644,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"10685:5:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":642,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"10663:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10663:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":646,"nodeType":"ExpressionStatement","src":"10663:28:1"}]},"documentation":{"id":633,"nodeType":"StructuredDocumentation","src":"10537:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"30cae187","id":648,"implemented":true,"kind":"function","modifiers":[{"id":640,"kind":"modifierInvocation","modifierName":{"id":639,"name":"onlyAuthorized","nameLocations":["10638:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"10638:14:1"},"nodeType":"ModifierInvocation","src":"10638:14:1"}],"name":"setRoleAdmin","nameLocation":"10581:12:1","nodeType":"FunctionDefinition","parameters":{"id":638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"roleId","nameLocation":"10601:6:1","nodeType":"VariableDeclaration","scope":648,"src":"10594:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":634,"name":"uint64","nodeType":"ElementaryTypeName","src":"10594:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"admin","nameLocation":"10616:5:1","nodeType":"VariableDeclaration","scope":648,"src":"10609:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":636,"name":"uint64","nodeType":"ElementaryTypeName","src":"10609:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10593:29:1"},"returnParameters":{"id":641,"nodeType":"ParameterList","parameters":[],"src":"10653:0:1"},"scope":2033,"src":"10572:126:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2395],"body":{"id":663,"nodeType":"Block","src":"10826:51:1","statements":[{"expression":{"arguments":[{"id":659,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"10853:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":660,"name":"guardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"10861:8:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":658,"name":"_setRoleGuardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"10836:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10836:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"10836:34:1"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"10704:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"52962952","id":664,"implemented":true,"kind":"function","modifiers":[{"id":656,"kind":"modifierInvocation","modifierName":{"id":655,"name":"onlyAuthorized","nameLocations":["10811:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"10811:14:1"},"nodeType":"ModifierInvocation","src":"10811:14:1"}],"name":"setRoleGuardian","nameLocation":"10748:15:1","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"roleId","nameLocation":"10771:6:1","nodeType":"VariableDeclaration","scope":664,"src":"10764:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":650,"name":"uint64","nodeType":"ElementaryTypeName","src":"10764:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"guardian","nameLocation":"10786:8:1","nodeType":"VariableDeclaration","scope":664,"src":"10779:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":652,"name":"uint64","nodeType":"ElementaryTypeName","src":"10779:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10763:32:1"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"10826:0:1"},"scope":2033,"src":"10739:138:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2403],"body":{"id":679,"nodeType":"Block","src":"11003:49:1","statements":[{"expression":{"arguments":[{"id":675,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"11028:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":676,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"11036:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":674,"name":"_setGrantDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"11013:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint64_$_t_uint32_$returns$__$","typeString":"function (uint64,uint32)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11013:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"ExpressionStatement","src":"11013:32:1"}]},"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"10883:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"a64d95ce","id":680,"implemented":true,"kind":"function","modifiers":[{"id":672,"kind":"modifierInvocation","modifierName":{"id":671,"name":"onlyAuthorized","nameLocations":["10988:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"10988:14:1"},"nodeType":"ModifierInvocation","src":"10988:14:1"}],"name":"setGrantDelay","nameLocation":"10927:13:1","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"roleId","nameLocation":"10948:6:1","nodeType":"VariableDeclaration","scope":680,"src":"10941:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":666,"name":"uint64","nodeType":"ElementaryTypeName","src":"10941:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"newDelay","nameLocation":"10963:8:1","nodeType":"VariableDeclaration","scope":680,"src":"10956:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":668,"name":"uint32","nodeType":"ElementaryTypeName","src":"10956:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"10940:32:1"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[],"src":"11003:0:1"},"scope":2033,"src":"10918:134:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":776,"nodeType":"Block","src":"11393:897:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":694,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"11407:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":695,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"11417:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"11407:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":702,"nodeType":"IfStatement","src":"11403:90:1","trueBody":{"id":701,"nodeType":"Block","src":"11430:63:1","statements":[{"errorCall":{"arguments":[{"id":698,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"11475:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":697,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"11451:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11451:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":700,"nodeType":"RevertStatement","src":"11444:38:1"}]}},{"assignments":[704],"declarations":[{"constant":false,"id":704,"mutability":"mutable","name":"newMember","nameLocation":"11508:9:1","nodeType":"VariableDeclaration","scope":776,"src":"11503:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":703,"name":"bool","nodeType":"ElementaryTypeName","src":"11503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":714,"initialValue":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":705,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"11520:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":707,"indexExpression":{"id":706,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"11527:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11520:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11535:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"11520:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":710,"indexExpression":{"id":709,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"11543:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11520:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"id":711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11552:5:1","memberName":"since","nodeType":"MemberAccess","referencedDeclaration":184,"src":"11520:37:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11561:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11520:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"11503:59:1"},{"assignments":[716],"declarations":[{"constant":false,"id":716,"mutability":"mutable","name":"since","nameLocation":"11579:5:1","nodeType":"VariableDeclaration","scope":776,"src":"11572:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":715,"name":"uint48","nodeType":"ElementaryTypeName","src":"11572:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":717,"nodeType":"VariableDeclarationStatement","src":"11572:12:1"},{"condition":{"id":718,"name":"newMember","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"11599:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":764,"nodeType":"Block","src":"11781:399:1","statements":[{"expression":{"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":742,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"12008:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":744,"indexExpression":{"id":743,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"12015:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12008:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12023:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"12008:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":747,"indexExpression":{"id":746,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12031:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12008:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"id":748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12040:5:1","memberName":"delay","nodeType":"MemberAccess","referencedDeclaration":187,"src":"12008:37:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},{"id":749,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"12047:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":750,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"12007:46:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":759,"name":"executionDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12122:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12154:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":751,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"12056:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":753,"indexExpression":{"id":752,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"12063:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12056:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12071:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"12056:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":756,"indexExpression":{"id":755,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12079:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12056:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"id":757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12088:5:1","memberName":"delay","nodeType":"MemberAccess","referencedDeclaration":187,"src":"12056:37:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12094:10:1","memberName":"withUpdate","nodeType":"MemberAccess","referencedDeclaration":7824,"src":"12056:48:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$_t_uint32_$_t_uint32_$returns$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay,uint32,uint32) view returns (Time.Delay,uint48)"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12056:113:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"src":"12007:162:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":763,"nodeType":"ExpressionStatement","src":"12007:162:1"}]},"id":765,"nodeType":"IfStatement","src":"11595:585:1","trueBody":{"id":741,"nodeType":"Block","src":"11610:165:1","statements":[{"expression":{"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":719,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11624:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":720,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"11632:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$7914_$","typeString":"type(library Time)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11637:9:1","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":7661,"src":"11632:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11632:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":723,"name":"grantDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"11651:10:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"11632:29:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"11624:37:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":726,"nodeType":"ExpressionStatement","src":"11624:37:1"},{"expression":{"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":727,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"11675:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":729,"indexExpression":{"id":728,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"11682:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11675:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":730,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11690:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"11675:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":732,"indexExpression":{"id":731,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"11698:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11675:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":734,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"11724:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":735,"name":"executionDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"11738:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11753:7:1","memberName":"toDelay","nodeType":"MemberAccess","referencedDeclaration":7691,"src":"11738:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$returns$_t_userDefinedValueType$_Delay_$7676_$attached_to$_t_uint32_$","typeString":"function (uint32) pure returns (Time.Delay)"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11738:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}],"id":733,"name":"Access","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"11709:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Access_$188_storage_ptr_$","typeString":"type(struct AccessManager.Access storage pointer)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["11717:5:1","11731:5:1"],"names":["since","delay"],"nodeType":"FunctionCall","src":"11709:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_memory_ptr","typeString":"struct AccessManager.Access memory"}},"src":"11675:89:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"id":740,"nodeType":"ExpressionStatement","src":"11675:89:1"}]}},{"eventCall":{"arguments":[{"id":767,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"12207:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":768,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12215:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":769,"name":"executionDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"12224:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":770,"name":"since","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"12240:5:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":771,"name":"newMember","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"12247:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":766,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"12195:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$_t_uint32_$_t_uint48_$_t_bool_$returns$__$","typeString":"function (uint64,address,uint32,uint48,bool)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12195:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":773,"nodeType":"EmitStatement","src":"12190:67:1"},{"expression":{"id":774,"name":"newMember","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"12274:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":693,"id":775,"nodeType":"Return","src":"12267:16:1"}]},"documentation":{"id":681,"nodeType":"StructuredDocumentation","src":"11058:166:1","text":" @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n Emits a {RoleGranted} event."},"id":777,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"11238:10:1","nodeType":"FunctionDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"roleId","nameLocation":"11265:6:1","nodeType":"VariableDeclaration","scope":777,"src":"11258:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":682,"name":"uint64","nodeType":"ElementaryTypeName","src":"11258:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":685,"mutability":"mutable","name":"account","nameLocation":"11289:7:1","nodeType":"VariableDeclaration","scope":777,"src":"11281:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":684,"name":"address","nodeType":"ElementaryTypeName","src":"11281:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"grantDelay","nameLocation":"11313:10:1","nodeType":"VariableDeclaration","scope":777,"src":"11306:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":686,"name":"uint32","nodeType":"ElementaryTypeName","src":"11306:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"executionDelay","nameLocation":"11340:14:1","nodeType":"VariableDeclaration","scope":777,"src":"11333:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":688,"name":"uint32","nodeType":"ElementaryTypeName","src":"11333:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"11248:112:1"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":777,"src":"11387:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":691,"name":"bool","nodeType":"ElementaryTypeName","src":"11387:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11386:6:1"},"scope":2033,"src":"11229:1061:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":824,"nodeType":"Block","src":"12636:315:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":787,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"12650:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":788,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"12660:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"12650:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":795,"nodeType":"IfStatement","src":"12646:90:1","trueBody":{"id":794,"nodeType":"Block","src":"12673:63:1","statements":[{"errorCall":{"arguments":[{"id":791,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"12718:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":790,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"12694:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12694:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":793,"nodeType":"RevertStatement","src":"12687:38:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":796,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"12750:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":798,"indexExpression":{"id":797,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"12757:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12750:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":799,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12765:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"12750:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":801,"indexExpression":{"id":800,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"12773:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12750:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"id":802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12782:5:1","memberName":"since","nodeType":"MemberAccess","referencedDeclaration":184,"src":"12750:37:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12791:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12750:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":808,"nodeType":"IfStatement","src":"12746:85:1","trueBody":{"id":807,"nodeType":"Block","src":"12794:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12815:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":786,"id":806,"nodeType":"Return","src":"12808:12:1"}]}},{"expression":{"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"12841:38:1","subExpression":{"baseExpression":{"expression":{"baseExpression":{"id":809,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"12848:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":811,"indexExpression":{"id":810,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"12855:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12848:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12863:7:1","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":193,"src":"12848:22:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Access_$188_storage_$","typeString":"mapping(address => struct AccessManager.Access storage ref)"}},"id":814,"indexExpression":{"id":813,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"12871:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12848:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Access_$188_storage","typeString":"struct AccessManager.Access storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"12841:38:1"},{"eventCall":{"arguments":[{"id":818,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"12907:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":819,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"12915:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":817,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"12895:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$returns$__$","typeString":"function (uint64,address)"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12895:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"EmitStatement","src":"12890:33:1"},{"expression":{"hexValue":"74727565","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12940:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":786,"id":823,"nodeType":"Return","src":"12933:11:1"}]},"documentation":{"id":778,"nodeType":"StructuredDocumentation","src":"12296:250:1","text":" @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n Returns true if the role was previously granted.\n Emits a {RoleRevoked} event if the account had the role."},"id":825,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"12560:11:1","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"roleId","nameLocation":"12579:6:1","nodeType":"VariableDeclaration","scope":825,"src":"12572:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":779,"name":"uint64","nodeType":"ElementaryTypeName","src":"12572:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"account","nameLocation":"12595:7:1","nodeType":"VariableDeclaration","scope":825,"src":"12587:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"12587:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12571:32:1"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":825,"src":"12630:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":784,"name":"bool","nodeType":"ElementaryTypeName","src":"12630:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12629:6:1"},"scope":2033,"src":"12551:400:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":858,"nodeType":"Block","src":"13315:216:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":833,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"13329:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":834,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"13339:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13329:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":836,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"13353:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":837,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"13363:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13353:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13329:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":845,"nodeType":"IfStatement","src":"13325:114:1","trueBody":{"id":844,"nodeType":"Block","src":"13376:63:1","statements":[{"errorCall":{"arguments":[{"id":841,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"13421:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":840,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"13397:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13397:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":843,"nodeType":"RevertStatement","src":"13390:38:1"}]}},{"expression":{"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":846,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"13449:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":848,"indexExpression":{"id":847,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"13456:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13449:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":849,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13464:5:1","memberName":"admin","nodeType":"MemberAccess","referencedDeclaration":195,"src":"13449:20:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":850,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"13472:5:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13449:28:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":852,"nodeType":"ExpressionStatement","src":"13449:28:1"},{"eventCall":{"arguments":[{"id":854,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"13510:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":855,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"13518:5:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":853,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"13493:16:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13493:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"EmitStatement","src":"13488:36:1"}]},"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"12957:284:1","text":" @dev Internal version of {setRoleAdmin} without access control.\n Emits a {RoleAdminChanged} event.\n NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n anyone to set grant or revoke such role."},"id":859,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"13255:13:1","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"roleId","nameLocation":"13276:6:1","nodeType":"VariableDeclaration","scope":859,"src":"13269:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":827,"name":"uint64","nodeType":"ElementaryTypeName","src":"13269:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"admin","nameLocation":"13291:5:1","nodeType":"VariableDeclaration","scope":859,"src":"13284:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":829,"name":"uint64","nodeType":"ElementaryTypeName","src":"13284:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13268:29:1"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"13315:0:1"},"scope":2033,"src":"13246:285:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":892,"nodeType":"Block","src":"13925:228:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":867,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"13939:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":868,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"13949:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13939:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":870,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"13963:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":871,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"13973:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13963:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13939:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":879,"nodeType":"IfStatement","src":"13935:114:1","trueBody":{"id":878,"nodeType":"Block","src":"13986:63:1","statements":[{"errorCall":{"arguments":[{"id":875,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"14031:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":874,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"14007:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14007:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":877,"nodeType":"RevertStatement","src":"14000:38:1"}]}},{"expression":{"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":880,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"14059:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":882,"indexExpression":{"id":881,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"14066:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14059:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":883,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14074:8:1","memberName":"guardian","nodeType":"MemberAccess","referencedDeclaration":197,"src":"14059:23:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":884,"name":"guardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"14085:8:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"14059:34:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":886,"nodeType":"ExpressionStatement","src":"14059:34:1"},{"eventCall":{"arguments":[{"id":888,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"14129:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":889,"name":"guardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"14137:8:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":887,"name":"RoleGuardianChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"14109:19:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14109:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":891,"nodeType":"EmitStatement","src":"14104:42:1"}]},"documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"13537:308:1","text":" @dev Internal version of {setRoleGuardian} without access control.\n Emits a {RoleGuardianChanged} event.\n NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n anyone to cancel any scheduled operation for such role."},"id":893,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleGuardian","nameLocation":"13859:16:1","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"roleId","nameLocation":"13883:6:1","nodeType":"VariableDeclaration","scope":893,"src":"13876:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":861,"name":"uint64","nodeType":"ElementaryTypeName","src":"13876:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"guardian","nameLocation":"13898:8:1","nodeType":"VariableDeclaration","scope":893,"src":"13891:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":863,"name":"uint64","nodeType":"ElementaryTypeName","src":"13891:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13875:32:1"},"returnParameters":{"id":866,"nodeType":"ParameterList","parameters":[],"src":"13925:0:1"},"scope":2033,"src":"13850:303:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":936,"nodeType":"Block","src":"14373:301:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":901,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"14387:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":902,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"14397:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"14387:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":909,"nodeType":"IfStatement","src":"14383:90:1","trueBody":{"id":908,"nodeType":"Block","src":"14410:63:1","statements":[{"errorCall":{"arguments":[{"id":905,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"14455:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":904,"name":"AccessManagerLockedRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"14431:23:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14431:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":907,"nodeType":"RevertStatement","src":"14424:38:1"}]}},{"assignments":[911],"declarations":[{"constant":false,"id":911,"mutability":"mutable","name":"effect","nameLocation":"14490:6:1","nodeType":"VariableDeclaration","scope":936,"src":"14483:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":910,"name":"uint48","nodeType":"ElementaryTypeName","src":"14483:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":912,"nodeType":"VariableDeclarationStatement","src":"14483:13:1"},{"expression":{"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"baseExpression":{"id":913,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"14507:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":915,"indexExpression":{"id":914,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"14514:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14507:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14522:10:1","memberName":"grantDelay","nodeType":"MemberAccess","referencedDeclaration":200,"src":"14507:25:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},{"id":917,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"14534:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":918,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14506:35:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":924,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"14581:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":925,"name":"minSetback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"14591:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint32_$","typeString":"function () view returns (uint32)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14591:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"expression":{"baseExpression":{"id":919,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"14544:6:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Role_$201_storage_$","typeString":"mapping(uint64 => struct AccessManager.Role storage ref)"}},"id":921,"indexExpression":{"id":920,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"14551:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14544:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Role_$201_storage","typeString":"struct AccessManager.Role storage ref"}},"id":922,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14559:10:1","memberName":"grantDelay","nodeType":"MemberAccess","referencedDeclaration":200,"src":"14544:25:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14570:10:1","memberName":"withUpdate","nodeType":"MemberAccess","referencedDeclaration":7824,"src":"14544:36:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$_t_uint32_$_t_uint32_$returns$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay,uint32,uint32) view returns (Time.Delay,uint48)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14544:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"src":"14506:98:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":929,"nodeType":"ExpressionStatement","src":"14506:98:1"},{"eventCall":{"arguments":[{"id":931,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"14642:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":932,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"14650:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":933,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"14660:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":930,"name":"RoleGrantDelayChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"14620:21:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_uint32_$_t_uint48_$returns$__$","typeString":"function (uint64,uint32,uint48)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14620:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"EmitStatement","src":"14615:52:1"}]},"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"14159:136:1","text":" @dev Internal version of {setGrantDelay} without access control.\n Emits a {RoleGrantDelayChanged} event."},"id":937,"implemented":true,"kind":"function","modifiers":[],"name":"_setGrantDelay","nameLocation":"14309:14:1","nodeType":"FunctionDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"roleId","nameLocation":"14331:6:1","nodeType":"VariableDeclaration","scope":937,"src":"14324:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":895,"name":"uint64","nodeType":"ElementaryTypeName","src":"14324:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"newDelay","nameLocation":"14346:8:1","nodeType":"VariableDeclaration","scope":937,"src":"14339:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":897,"name":"uint32","nodeType":"ElementaryTypeName","src":"14339:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14323:32:1"},"returnParameters":{"id":900,"nodeType":"ParameterList","parameters":[],"src":"14373:0:1"},"scope":2033,"src":"14300:374:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2414],"body":{"id":971,"nodeType":"Block","src":"14986:140:1","statements":[{"body":{"id":969,"nodeType":"Block","src":"15043:77:1","statements":[{"expression":{"arguments":[{"id":962,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"15080:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":963,"name":"selectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"15088:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_calldata_ptr","typeString":"bytes4[] calldata"}},"id":965,"indexExpression":{"id":964,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"15098:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15088:12:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":966,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"15102:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":961,"name":"_setTargetFunctionRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"15057:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes4_$_t_uint64_$returns$__$","typeString":"function (address,bytes4,uint64)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15057:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":968,"nodeType":"ExpressionStatement","src":"15057:52:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":954,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"15016:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":955,"name":"selectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"15020:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_calldata_ptr","typeString":"bytes4[] calldata"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15030:6:1","memberName":"length","nodeType":"MemberAccess","src":"15020:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15016:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":970,"initializationExpression":{"assignments":[951],"declarations":[{"constant":false,"id":951,"mutability":"mutable","name":"i","nameLocation":"15009:1:1","nodeType":"VariableDeclaration","scope":970,"src":"15001:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"15001:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":953,"initialValue":{"hexValue":"30","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15013:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"15001:13:1"},"loopExpression":{"expression":{"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"15038:3:1","subExpression":{"id":958,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"15040:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":960,"nodeType":"ExpressionStatement","src":"15038:3:1"},"nodeType":"ForStatement","src":"14996:124:1"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"14800:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"08d6122d","id":972,"implemented":true,"kind":"function","modifiers":[{"id":948,"kind":"modifierInvocation","modifierName":{"id":947,"name":"onlyAuthorized","nameLocations":["14971:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"14971:14:1"},"nodeType":"ModifierInvocation","src":"14971:14:1"}],"name":"setTargetFunctionRole","nameLocation":"14844:21:1","nodeType":"FunctionDefinition","parameters":{"id":946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"target","nameLocation":"14883:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14875:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"14875:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"selectors","nameLocation":"14917:9:1","nodeType":"VariableDeclaration","scope":972,"src":"14899:27:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_calldata_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":941,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14899:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":942,"nodeType":"ArrayTypeName","src":"14899:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"roleId","nameLocation":"14943:6:1","nodeType":"VariableDeclaration","scope":972,"src":"14936:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":944,"name":"uint64","nodeType":"ElementaryTypeName","src":"14936:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"14865:90:1"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[],"src":"14986:0:1"},"scope":2033,"src":"14835:291:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":997,"nodeType":"Block","src":"15382:131:1","statements":[{"expression":{"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":982,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"15392:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":984,"indexExpression":{"id":983,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"15401:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15392:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15409:12:1","memberName":"allowedRoles","nodeType":"MemberAccess","referencedDeclaration":176,"src":"15392:29:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_uint64_$","typeString":"mapping(bytes4 => uint64)"}},"id":987,"indexExpression":{"id":986,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"15422:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15392:39:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":988,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"15434:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"15392:48:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":990,"nodeType":"ExpressionStatement","src":"15392:48:1"},{"eventCall":{"arguments":[{"id":992,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"15481:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":993,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"15489:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":994,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"15499:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":991,"name":"TargetFunctionRoleUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"15455:25:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes4_$_t_uint64_$returns$__$","typeString":"function (address,bytes4,uint64)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15455:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":996,"nodeType":"EmitStatement","src":"15450:56:1"}]},"documentation":{"id":973,"nodeType":"StructuredDocumentation","src":"15132:148:1","text":" @dev Internal version of {setTargetFunctionRole} without access control.\n Emits a {TargetFunctionRoleUpdated} event."},"id":998,"implemented":true,"kind":"function","modifiers":[],"name":"_setTargetFunctionRole","nameLocation":"15294:22:1","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"target","nameLocation":"15325:6:1","nodeType":"VariableDeclaration","scope":998,"src":"15317:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"15317:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"selector","nameLocation":"15340:8:1","nodeType":"VariableDeclaration","scope":998,"src":"15333:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":976,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15333:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"roleId","nameLocation":"15357:6:1","nodeType":"VariableDeclaration","scope":998,"src":"15350:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":978,"name":"uint64","nodeType":"ElementaryTypeName","src":"15350:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15316:48:1"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[],"src":"15382:0:1"},"scope":2033,"src":"15285:228:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2422],"body":{"id":1013,"nodeType":"Block","src":"15646:55:1","statements":[{"expression":{"arguments":[{"id":1009,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"15677:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1010,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"15685:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1008,"name":"_setTargetAdminDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"15656:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint32_$returns$__$","typeString":"function (address,uint32)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15656:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1012,"nodeType":"ExpressionStatement","src":"15656:38:1"}]},"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"15519:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"d22b5989","id":1014,"implemented":true,"kind":"function","modifiers":[{"id":1006,"kind":"modifierInvocation","modifierName":{"id":1005,"name":"onlyAuthorized","nameLocations":["15631:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"15631:14:1"},"nodeType":"ModifierInvocation","src":"15631:14:1"}],"name":"setTargetAdminDelay","nameLocation":"15563:19:1","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"target","nameLocation":"15591:6:1","nodeType":"VariableDeclaration","scope":1014,"src":"15583:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"15583:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"newDelay","nameLocation":"15606:8:1","nodeType":"VariableDeclaration","scope":1014,"src":"15599:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1002,"name":"uint32","nodeType":"ElementaryTypeName","src":"15599:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15582:33:1"},"returnParameters":{"id":1007,"nodeType":"ParameterList","parameters":[],"src":"15646:0:1"},"scope":2033,"src":"15554:147:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1048,"nodeType":"Block","src":"15936:207:1","statements":[{"assignments":[1023],"declarations":[{"constant":false,"id":1023,"mutability":"mutable","name":"effect","nameLocation":"15953:6:1","nodeType":"VariableDeclaration","scope":1048,"src":"15946:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1022,"name":"uint48","nodeType":"ElementaryTypeName","src":"15946:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":1024,"nodeType":"VariableDeclarationStatement","src":"15946:13:1"},{"expression":{"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"baseExpression":{"id":1025,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"15970:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":1027,"indexExpression":{"id":1026,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"15979:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15970:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":1028,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15987:10:1","memberName":"adminDelay","nodeType":"MemberAccess","referencedDeclaration":179,"src":"15970:27:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},{"id":1029,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"15999:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":1030,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"15969:37:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1036,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"16048:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1037,"name":"minSetback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"16058:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint32_$","typeString":"function () view returns (uint32)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16058:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"expression":{"baseExpression":{"id":1031,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"16009:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":1033,"indexExpression":{"id":1032,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"16018:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16009:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":1034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16026:10:1","memberName":"adminDelay","nodeType":"MemberAccess","referencedDeclaration":179,"src":"16009:27:1","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16037:10:1","memberName":"withUpdate","nodeType":"MemberAccess","referencedDeclaration":7824,"src":"16009:38:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$_t_uint32_$_t_uint32_$returns$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay,uint32,uint32) view returns (Time.Delay,uint48)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16009:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"src":"15969:102:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1041,"nodeType":"ExpressionStatement","src":"15969:102:1"},{"eventCall":{"arguments":[{"id":1043,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"16111:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1044,"name":"newDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"16119:8:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1045,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"16129:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":1042,"name":"TargetAdminDelayUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"16087:23:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint32_$_t_uint48_$returns$__$","typeString":"function (address,uint32,uint48)"}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16087:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1047,"nodeType":"EmitStatement","src":"16082:54:1"}]},"documentation":{"id":1015,"nodeType":"StructuredDocumentation","src":"15707:144:1","text":" @dev Internal version of {setTargetAdminDelay} without access control.\n Emits a {TargetAdminDelayUpdated} event."},"id":1049,"implemented":true,"kind":"function","modifiers":[],"name":"_setTargetAdminDelay","nameLocation":"15865:20:1","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"target","nameLocation":"15894:6:1","nodeType":"VariableDeclaration","scope":1049,"src":"15886:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1016,"name":"address","nodeType":"ElementaryTypeName","src":"15886:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"newDelay","nameLocation":"15909:8:1","nodeType":"VariableDeclaration","scope":1049,"src":"15902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1018,"name":"uint32","nodeType":"ElementaryTypeName","src":"15902:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15885:33:1"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[],"src":"15936:0:1"},"scope":2033,"src":"15856:287:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2430],"body":{"id":1064,"nodeType":"Block","src":"16388:49:1","statements":[{"expression":{"arguments":[{"id":1060,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"16415:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1061,"name":"closed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"16423:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1059,"name":"_setTargetClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"16398:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16398:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1063,"nodeType":"ExpressionStatement","src":"16398:32:1"}]},"documentation":{"id":1050,"nodeType":"StructuredDocumentation","src":"16269:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"167bd395","id":1065,"implemented":true,"kind":"function","modifiers":[{"id":1057,"kind":"modifierInvocation","modifierName":{"id":1056,"name":"onlyAuthorized","nameLocations":["16373:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"16373:14:1"},"nodeType":"ModifierInvocation","src":"16373:14:1"}],"name":"setTargetClosed","nameLocation":"16313:15:1","nodeType":"FunctionDefinition","parameters":{"id":1055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"mutability":"mutable","name":"target","nameLocation":"16337:6:1","nodeType":"VariableDeclaration","scope":1065,"src":"16329:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1051,"name":"address","nodeType":"ElementaryTypeName","src":"16329:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1054,"mutability":"mutable","name":"closed","nameLocation":"16350:6:1","nodeType":"VariableDeclaration","scope":1065,"src":"16345:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1053,"name":"bool","nodeType":"ElementaryTypeName","src":"16345:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16328:29:1"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[],"src":"16388:0:1"},"scope":2033,"src":"16304:133:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1097,"nodeType":"Block","src":"16679:196:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1073,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"16693:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1076,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16711:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":1075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16703:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"16703:7:1","typeDescriptions":{}}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16703:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16693:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1084,"nodeType":"IfStatement","src":"16689:95:1","trueBody":{"id":1083,"nodeType":"Block","src":"16718:66:1","statements":[{"errorCall":{"arguments":[{"id":1080,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"16766:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1079,"name":"AccessManagerLockedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"16739:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16739:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1082,"nodeType":"RevertStatement","src":"16732:41:1"}]}},{"expression":{"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1085,"name":"_targets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"16793:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_TargetConfig_$182_storage_$","typeString":"mapping(address => struct AccessManager.TargetConfig storage ref)"}},"id":1087,"indexExpression":{"id":1086,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"16802:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16793:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_TargetConfig_$182_storage","typeString":"struct AccessManager.TargetConfig storage ref"}},"id":1088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16810:6:1","memberName":"closed","nodeType":"MemberAccess","referencedDeclaration":181,"src":"16793:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1089,"name":"closed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"16819:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16793:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"nodeType":"ExpressionStatement","src":"16793:32:1"},{"eventCall":{"arguments":[{"id":1093,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"16853:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1094,"name":"closed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"16861:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1092,"name":"TargetClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"16840:12:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16840:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1096,"nodeType":"EmitStatement","src":"16835:33:1"}]},"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"16443:159:1","text":" @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n Emits a {TargetClosed} event."},"id":1098,"implemented":true,"kind":"function","modifiers":[],"name":"_setTargetClosed","nameLocation":"16616:16:1","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"target","nameLocation":"16641:6:1","nodeType":"VariableDeclaration","scope":1098,"src":"16633:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"16633:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"closed","nameLocation":"16654:6:1","nodeType":"VariableDeclaration","scope":1098,"src":"16649:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1069,"name":"bool","nodeType":"ElementaryTypeName","src":"16649:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16632:29:1"},"returnParameters":{"id":1072,"nodeType":"ParameterList","parameters":[],"src":"16679:0:1"},"scope":2033,"src":"16607:268:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2438],"body":{"id":1120,"nodeType":"Block","src":"17106:114:1","statements":[{"assignments":[1107],"declarations":[{"constant":false,"id":1107,"mutability":"mutable","name":"timepoint","nameLocation":"17123:9:1","nodeType":"VariableDeclaration","scope":1120,"src":"17116:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1106,"name":"uint48","nodeType":"ElementaryTypeName","src":"17116:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":1112,"initialValue":{"expression":{"baseExpression":{"id":1108,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"17135:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1110,"indexExpression":{"id":1109,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"17146:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17135:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17150:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"17135:24:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"17116:43:1"},{"expression":{"condition":{"arguments":[{"id":1114,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"17187:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":1113,"name":"_isExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"17176:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint48_$returns$_t_bool_$","typeString":"function (uint48) view returns (bool)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17176:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1117,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"17204:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"17176:37:1","trueExpression":{"hexValue":"30","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17200:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":1105,"id":1119,"nodeType":"Return","src":"17169:44:1"}]},"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"17001:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"3adc277a","id":1121,"implemented":true,"kind":"function","modifiers":[],"name":"getSchedule","nameLocation":"17045:11:1","nodeType":"FunctionDefinition","parameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"id","nameLocation":"17065:2:1","nodeType":"VariableDeclaration","scope":1121,"src":"17057:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17057:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17056:12:1"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1121,"src":"17098:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1103,"name":"uint48","nodeType":"ElementaryTypeName","src":"17098:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"17097:8:1"},"scope":2033,"src":"17036:184:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2446],"body":{"id":1134,"nodeType":"Block","src":"17328:44:1","statements":[{"expression":{"expression":{"baseExpression":{"id":1129,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"17345:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1131,"indexExpression":{"id":1130,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"17356:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17345:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17360:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":205,"src":"17345:20:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1128,"id":1133,"nodeType":"Return","src":"17338:27:1"}]},"documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"17226:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"4136a33c","id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"17270:8:1","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"id","nameLocation":"17287:2:1","nodeType":"VariableDeclaration","scope":1135,"src":"17279:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17279:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17278:12:1"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"17320:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1126,"name":"uint32","nodeType":"ElementaryTypeName","src":"17320:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"17319:8:1"},"scope":2033,"src":"17261:111:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2460],"body":{"id":1248,"nodeType":"Block","src":"17570:1208:1","statements":[{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"caller","nameLocation":"17588:6:1","nodeType":"VariableDeclaration","scope":1248,"src":"17580:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"17580:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1153,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1151,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"17597:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17597:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17580:29:1"},{"assignments":[null,1155],"declarations":[null,{"constant":false,"id":1155,"mutability":"mutable","name":"setback","nameLocation":"17710:7:1","nodeType":"VariableDeclaration","scope":1248,"src":"17703:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1154,"name":"uint32","nodeType":"ElementaryTypeName","src":"17703:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1161,"initialValue":{"arguments":[{"id":1157,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"17738:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1158,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"17746:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"17754:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1156,"name":"_canCallExtended","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"17721:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,address,bytes calldata) view returns (bool,uint32)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17721:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"17700:59:1"},{"assignments":[1163],"declarations":[{"constant":false,"id":1163,"mutability":"mutable","name":"minWhen","nameLocation":"17777:7:1","nodeType":"VariableDeclaration","scope":1248,"src":"17770:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1162,"name":"uint48","nodeType":"ElementaryTypeName","src":"17770:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":1169,"initialValue":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1164,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"17787:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$7914_$","typeString":"type(library Time)"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17792:9:1","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":7661,"src":"17787:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17787:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1167,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"17806:7:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"17787:26:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"17770:43:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1170,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"17912:7:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17923:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17912:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1173,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"17929:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17936:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17929:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1176,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"17941:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1177,"name":"minWhen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"17948:7:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"17941:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17929:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17928:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17912:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1191,"nodeType":"IfStatement","src":"17908:149:1","trueBody":{"id":1190,"nodeType":"Block","src":"17958:99:1","statements":[{"errorCall":{"arguments":[{"id":1183,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"18009:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1184,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"18017:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1186,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"18040:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1185,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"18025:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18025:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1182,"name":"AccessManagerUnauthorizedCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"17979:29:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (address,address,bytes4) pure"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17979:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1189,"nodeType":"RevertStatement","src":"17972:74:1"}]}},{"expression":{"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1192,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"18115:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1197,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"18138:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":1198,"name":"minWhen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"18144:7:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"expression":{"id":1195,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"18129:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4156_$","typeString":"type(library Math)"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18134:3:1","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"18129:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18129:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18122:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":1193,"name":"uint48","nodeType":"ElementaryTypeName","src":"18122:6:1","typeDescriptions":{}}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18122:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"18115:38:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":1202,"nodeType":"ExpressionStatement","src":"18115:38:1"},{"expression":{"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1203,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18259:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1205,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"18287:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1206,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"18295:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1207,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"18303:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1204,"name":"hashOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"18273:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,bytes calldata) view returns (bytes32)"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18273:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"18259:49:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1210,"nodeType":"ExpressionStatement","src":"18259:49:1"},{"expression":{"arguments":[{"id":1212,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18338:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1211,"name":"_checkNotScheduled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"18319:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18319:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1214,"nodeType":"ExpressionStatement","src":"18319:31:1"},{"id":1224,"nodeType":"UncheckedBlock","src":"18361:155:1","statements":[{"expression":{"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1215,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"18464:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1216,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"18472:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1218,"indexExpression":{"id":1217,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18483:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18472:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18496:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":205,"src":"18472:29:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18504:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18472:33:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"18464:41:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1223,"nodeType":"ExpressionStatement","src":"18464:41:1"}]},{"expression":{"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1225,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"18525:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1227,"indexExpression":{"id":1226,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18536:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18525:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1228,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"18549:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"18525:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1229,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"18561:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"18525:40:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":1231,"nodeType":"ExpressionStatement","src":"18525:40:1"},{"expression":{"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1232,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"18575:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1234,"indexExpression":{"id":1233,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18586:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18575:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"18599:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":205,"src":"18575:29:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1236,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"18607:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"18575:37:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1238,"nodeType":"ExpressionStatement","src":"18575:37:1"},{"eventCall":{"arguments":[{"id":1240,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"18646:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1241,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"18659:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1242,"name":"when","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"18666:4:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":1243,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"18672:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1244,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"18680:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1245,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"18688:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1239,"name":"OperationScheduled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"18627:18:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint32_$_t_uint48_$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,uint32,uint48,address,address,bytes memory)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18627:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1247,"nodeType":"EmitStatement","src":"18622:71:1"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"17378:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"f801a698","id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"schedule","nameLocation":"17422:8:1","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"target","nameLocation":"17448:6:1","nodeType":"VariableDeclaration","scope":1249,"src":"17440:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"17440:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"data","nameLocation":"17479:4:1","nodeType":"VariableDeclaration","scope":1249,"src":"17464:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1139,"name":"bytes","nodeType":"ElementaryTypeName","src":"17464:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"when","nameLocation":"17500:4:1","nodeType":"VariableDeclaration","scope":1249,"src":"17493:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1141,"name":"uint48","nodeType":"ElementaryTypeName","src":"17493:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"17430:80:1"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"operationId","nameLocation":"17543:11:1","nodeType":"VariableDeclaration","scope":1249,"src":"17535:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17535:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"nonce","nameLocation":"17563:5:1","nodeType":"VariableDeclaration","scope":1249,"src":"17556:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1146,"name":"uint32","nodeType":"ElementaryTypeName","src":"17556:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"17534:35:1"},"scope":2033,"src":"17413:1365:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1276,"nodeType":"Block","src":"19029:210:1","statements":[{"assignments":[1256],"declarations":[{"constant":false,"id":1256,"mutability":"mutable","name":"prevTimepoint","nameLocation":"19046:13:1","nodeType":"VariableDeclaration","scope":1276,"src":"19039:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1255,"name":"uint48","nodeType":"ElementaryTypeName","src":"19039:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":1261,"initialValue":{"expression":{"baseExpression":{"id":1257,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"19062:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1259,"indexExpression":{"id":1258,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"19073:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19062:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19086:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"19062:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"19039:56:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1262,"name":"prevTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"19109:13:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19126:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19109:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"19131:26:1","subExpression":{"arguments":[{"id":1266,"name":"prevTimepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"19143:13:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":1265,"name":"_isExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"19132:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint48_$returns$_t_bool_$","typeString":"function (uint48) view returns (bool)"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19132:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19109:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1275,"nodeType":"IfStatement","src":"19105:128:1","trueBody":{"id":1274,"nodeType":"Block","src":"19159:74:1","statements":[{"errorCall":{"arguments":[{"id":1271,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"19210:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1270,"name":"AccessManagerAlreadyScheduled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"19180:29:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19180:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1273,"nodeType":"RevertStatement","src":"19173:49:1"}]}}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"18784:178:1","text":" @dev Reverts if the operation is currently scheduled and has not expired.\n (Note: This function was introduced due to stack too deep errors in schedule.)"},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"_checkNotScheduled","nameLocation":"18976:18:1","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"operationId","nameLocation":"19003:11:1","nodeType":"VariableDeclaration","scope":1277,"src":"18995:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18995:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"18994:21:1"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[],"src":"19029:0:1"},"scope":2033,"src":"18967:272:1","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[2470],"body":{"id":1374,"nodeType":"Block","src":"19603:1146:1","statements":[{"assignments":[1288],"declarations":[{"constant":false,"id":1288,"mutability":"mutable","name":"caller","nameLocation":"19621:6:1","nodeType":"VariableDeclaration","scope":1374,"src":"19613:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"19613:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1291,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1289,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"19630:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19630:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"19613:29:1"},{"assignments":[1293,1295],"declarations":[{"constant":false,"id":1293,"mutability":"mutable","name":"immediate","nameLocation":"19739:9:1","nodeType":"VariableDeclaration","scope":1374,"src":"19734:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1292,"name":"bool","nodeType":"ElementaryTypeName","src":"19734:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"setback","nameLocation":"19757:7:1","nodeType":"VariableDeclaration","scope":1374,"src":"19750:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1294,"name":"uint32","nodeType":"ElementaryTypeName","src":"19750:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1301,"initialValue":{"arguments":[{"id":1297,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"19785:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1298,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"19793:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1299,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"19801:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1296,"name":"_canCallExtended","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"19768:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,address,bytes calldata) view returns (bool,uint32)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19768:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"19733:73:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"19868:10:1","subExpression":{"id":1302,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"19869:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1304,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"19882:7:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19893:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19882:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19868:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1317,"nodeType":"IfStatement","src":"19864:131:1","trueBody":{"id":1316,"nodeType":"Block","src":"19896:99:1","statements":[{"errorCall":{"arguments":[{"id":1309,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"19947:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1310,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"19955:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1312,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"19978:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1311,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"19963:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19963:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1308,"name":"AccessManagerUnauthorizedCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"19917:29:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (address,address,bytes4) pure"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19917:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1315,"nodeType":"RevertStatement","src":"19910:74:1"}]}},{"assignments":[1319],"declarations":[{"constant":false,"id":1319,"mutability":"mutable","name":"operationId","nameLocation":"20013:11:1","nodeType":"VariableDeclaration","scope":1374,"src":"20005:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20005:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1325,"initialValue":{"arguments":[{"id":1321,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"20041:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1322,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"20049:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"20057:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1320,"name":"hashOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"20027:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,bytes calldata) view returns (bytes32)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20027:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20005:57:1"},{"assignments":[1327],"declarations":[{"constant":false,"id":1327,"mutability":"mutable","name":"nonce","nameLocation":"20079:5:1","nodeType":"VariableDeclaration","scope":1374,"src":"20072:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1326,"name":"uint32","nodeType":"ElementaryTypeName","src":"20072:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1328,"nodeType":"VariableDeclarationStatement","src":"20072:12:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1329,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"20264:7:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20275:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20264:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1333,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"20292:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1332,"name":"getSchedule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"20280:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_uint48_$","typeString":"function (bytes32) view returns (uint48)"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20280:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20308:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20280:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"20264:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1345,"nodeType":"IfStatement","src":"20260:116:1","trueBody":{"id":1344,"nodeType":"Block","src":"20311:65:1","statements":[{"expression":{"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1338,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"20325:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1340,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1319,"src":"20353:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1339,"name":"_consumeScheduledOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"20333:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$_t_uint32_$","typeString":"function (bytes32) returns (uint32)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20333:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"20325:40:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1343,"nodeType":"ExpressionStatement","src":"20325:40:1"}]}},{"assignments":[1347],"declarations":[{"constant":false,"id":1347,"mutability":"mutable","name":"executionIdBefore","nameLocation":"20448:17:1","nodeType":"VariableDeclaration","scope":1374,"src":"20440:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20440:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1349,"initialValue":{"id":1348,"name":"_executionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"20468:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20440:40:1"},{"expression":{"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1350,"name":"_executionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"20490:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1352,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"20522:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1354,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"20545:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1353,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"20530:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20530:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1351,"name":"_hashExecutionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"20505:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (address,bytes4) pure returns (bytes32)"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20505:46:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20490:61:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1358,"nodeType":"ExpressionStatement","src":"20490:61:1"},{"expression":{"arguments":[{"id":1362,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"20616:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"20624:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"expression":{"id":1364,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"20630:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20634:5:1","memberName":"value","nodeType":"MemberAccess","src":"20630:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1359,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"20586:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2868_$","typeString":"type(library Address)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20594:21:1","memberName":"functionCallWithValue","nodeType":"MemberAccess","referencedDeclaration":2735,"src":"20586:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20586:54:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1367,"nodeType":"ExpressionStatement","src":"20586:54:1"},{"expression":{"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1368,"name":"_executionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"20687:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1369,"name":"executionIdBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"20702:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20687:32:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1371,"nodeType":"ExpressionStatement","src":"20687:32:1"},{"expression":{"id":1372,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"20737:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1286,"id":1373,"nodeType":"Return","src":"20730:12:1"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"19245:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"1cff79cd","id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"execute","nameLocation":"19518:7:1","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"target","nameLocation":"19534:6:1","nodeType":"VariableDeclaration","scope":1375,"src":"19526:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1279,"name":"address","nodeType":"ElementaryTypeName","src":"19526:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"data","nameLocation":"19557:4:1","nodeType":"VariableDeclaration","scope":1375,"src":"19542:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1281,"name":"bytes","nodeType":"ElementaryTypeName","src":"19542:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19525:37:1"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"19595:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1284,"name":"uint32","nodeType":"ElementaryTypeName","src":"19595:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"19594:8:1"},"scope":2033,"src":"19509:1240:1","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[2482],"body":{"id":1476,"nodeType":"Block","src":"20891:1007:1","statements":[{"assignments":[1388],"declarations":[{"constant":false,"id":1388,"mutability":"mutable","name":"msgsender","nameLocation":"20909:9:1","nodeType":"VariableDeclaration","scope":1476,"src":"20901:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1387,"name":"address","nodeType":"ElementaryTypeName","src":"20901:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1391,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1389,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"20921:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20921:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20901:32:1"},{"assignments":[1393],"declarations":[{"constant":false,"id":1393,"mutability":"mutable","name":"selector","nameLocation":"20950:8:1","nodeType":"VariableDeclaration","scope":1476,"src":"20943:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1392,"name":"bytes4","nodeType":"ElementaryTypeName","src":"20943:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":1397,"initialValue":{"arguments":[{"id":1395,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"20976:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1394,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"20961:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20961:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"20943:38:1"},{"assignments":[1399],"declarations":[{"constant":false,"id":1399,"mutability":"mutable","name":"operationId","nameLocation":"21000:11:1","nodeType":"VariableDeclaration","scope":1476,"src":"20992:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20992:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1405,"initialValue":{"arguments":[{"id":1401,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"21028:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1402,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"21036:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1403,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"21044:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1400,"name":"hashOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"21014:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,bytes calldata) view returns (bytes32)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21014:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20992:57:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1406,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"21063:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1408,"indexExpression":{"id":1407,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"21074:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21063:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1409,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21087:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"21063:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21100:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21063:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"21183:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1418,"name":"msgsender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"21193:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21183:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"IfStatement","src":"21179:494:1","trueBody":{"id":1453,"nodeType":"Block","src":"21204:469:1","statements":[{"assignments":[1421,null],"declarations":[{"constant":false,"id":1421,"mutability":"mutable","name":"isAdmin","nameLocation":"21357:7:1","nodeType":"VariableDeclaration","scope":1453,"src":"21352:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1420,"name":"bool","nodeType":"ElementaryTypeName","src":"21352:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1426,"initialValue":{"arguments":[{"id":1423,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"21378:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1424,"name":"msgsender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"21390:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1422,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"21370:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$_t_uint32_$","typeString":"function (uint64,address) view returns (bool,uint32)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21370:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"21351:49:1"},{"assignments":[1428,null],"declarations":[{"constant":false,"id":1428,"mutability":"mutable","name":"isGuardian","nameLocation":"21420:10:1","nodeType":"VariableDeclaration","scope":1453,"src":"21415:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1427,"name":"bool","nodeType":"ElementaryTypeName","src":"21415:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1438,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1432,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"21482:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1433,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"21490:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1431,"name":"getTargetFunctionRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"21460:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_uint64_$","typeString":"function (address,bytes4) view returns (uint64)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21460:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1430,"name":"getRoleGuardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"21444:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$returns$_t_uint64_$","typeString":"function (uint64) view returns (uint64)"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21444:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1436,"name":"msgsender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"21502:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1429,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"21436:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$_t_uint32_$","typeString":"function (uint64,address) view returns (bool,uint32)"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21436:76:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"21414:98:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"21530:8:1","subExpression":{"id":1439,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"21531:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"21542:11:1","subExpression":{"id":1441,"name":"isGuardian","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"21543:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"21530:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1452,"nodeType":"IfStatement","src":"21526:137:1","trueBody":{"id":1451,"nodeType":"Block","src":"21555:108:1","statements":[{"errorCall":{"arguments":[{"id":1445,"name":"msgsender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"21612:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1446,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"21623:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1447,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"21631:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1448,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"21639:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1444,"name":"AccessManagerUnauthorizedCancel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"21580:31:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (address,address,address,bytes4) pure"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21580:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1450,"nodeType":"RevertStatement","src":"21573:75:1"}]}}]}},"id":1455,"nodeType":"IfStatement","src":"21059:614:1","trueBody":{"id":1416,"nodeType":"Block","src":"21103:70:1","statements":[{"errorCall":{"arguments":[{"id":1413,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"21150:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1412,"name":"AccessManagerNotScheduled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"21124:25:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21124:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"RevertStatement","src":"21117:45:1"}]}},{"expression":{"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"21683:40:1","subExpression":{"expression":{"baseExpression":{"id":1456,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"21690:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1458,"indexExpression":{"id":1457,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"21701:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21690:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21714:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"21690:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1461,"nodeType":"ExpressionStatement","src":"21683:40:1"},{"assignments":[1463],"declarations":[{"constant":false,"id":1463,"mutability":"mutable","name":"nonce","nameLocation":"21779:5:1","nodeType":"VariableDeclaration","scope":1476,"src":"21772:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1462,"name":"uint32","nodeType":"ElementaryTypeName","src":"21772:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1468,"initialValue":{"expression":{"baseExpression":{"id":1464,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"21787:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1466,"indexExpression":{"id":1465,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"21798:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21787:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21811:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":205,"src":"21787:29:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"21772:44:1"},{"eventCall":{"arguments":[{"id":1470,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"21849:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1471,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"21862:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1469,"name":"OperationCanceled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"21831:17:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint32_$returns$__$","typeString":"function (bytes32,uint32)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21831:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1473,"nodeType":"EmitStatement","src":"21826:42:1"},{"expression":{"id":1474,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"21886:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1386,"id":1475,"nodeType":"Return","src":"21879:12:1"}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"20755:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"d6bb62c6","id":1477,"implemented":true,"kind":"function","modifiers":[],"name":"cancel","nameLocation":"20799:6:1","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"caller","nameLocation":"20814:6:1","nodeType":"VariableDeclaration","scope":1477,"src":"20806:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"20806:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"target","nameLocation":"20830:6:1","nodeType":"VariableDeclaration","scope":1477,"src":"20822:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"20822:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"data","nameLocation":"20853:4:1","nodeType":"VariableDeclaration","scope":1477,"src":"20838:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1381,"name":"bytes","nodeType":"ElementaryTypeName","src":"20838:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20805:53:1"},"returnParameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1477,"src":"20883:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1384,"name":"uint32","nodeType":"ElementaryTypeName","src":"20883:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"20882:8:1"},"scope":2033,"src":"20790:1108:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2490],"body":{"id":1513,"nodeType":"Block","src":"22019:296:1","statements":[{"assignments":[1486],"declarations":[{"constant":false,"id":1486,"mutability":"mutable","name":"target","nameLocation":"22037:6:1","nodeType":"VariableDeclaration","scope":1513,"src":"22029:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"22029:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1489,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1487,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"22046:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22046:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"22029:29:1"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1491,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"22087:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1490,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"22072:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManaged_$2073_$","typeString":"type(contract IAccessManaged)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22072:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessManaged_$2073","typeString":"contract IAccessManaged"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22095:22:1","memberName":"isConsumingScheduledOp","nodeType":"MemberAccess","referencedDeclaration":2072,"src":"22072:45:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes4_$","typeString":"function () view external returns (bytes4)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22072:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1495,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"22123:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManaged_$2073_$","typeString":"type(contract IAccessManaged)"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22138:22:1","memberName":"isConsumingScheduledOp","nodeType":"MemberAccess","referencedDeclaration":2072,"src":"22123:37:1","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$__$returns$_t_bytes4_$","typeString":"function IAccessManaged.isConsumingScheduledOp() view returns (bytes4)"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"22161:8:1","memberName":"selector","nodeType":"MemberAccess","src":"22123:46:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"22072:97:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1504,"nodeType":"IfStatement","src":"22068:175:1","trueBody":{"id":1503,"nodeType":"Block","src":"22171:72:1","statements":[{"errorCall":{"arguments":[{"id":1500,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"22225:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1499,"name":"AccessManagerUnauthorizedConsume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"22192:32:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22192:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1502,"nodeType":"RevertStatement","src":"22185:47:1"}]}},{"expression":{"arguments":[{"arguments":[{"id":1507,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"22286:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1508,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"22294:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1509,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"22302:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1506,"name":"hashOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"22272:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,bytes calldata) view returns (bytes32)"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22272:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1505,"name":"_consumeScheduledOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"22252:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$_t_uint32_$","typeString":"function (bytes32) returns (uint32)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22252:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1512,"nodeType":"ExpressionStatement","src":"22252:56:1"}]},"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"21904:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"94c7d7ee","id":1514,"implemented":true,"kind":"function","modifiers":[],"name":"consumeScheduledOp","nameLocation":"21948:18:1","nodeType":"FunctionDefinition","parameters":{"id":1483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"caller","nameLocation":"21975:6:1","nodeType":"VariableDeclaration","scope":1514,"src":"21967:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"21967:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"data","nameLocation":"21998:4:1","nodeType":"VariableDeclaration","scope":1514,"src":"21983:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1481,"name":"bytes","nodeType":"ElementaryTypeName","src":"21983:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"21966:37:1"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[],"src":"22019:0:1"},"scope":2033,"src":"21939:376:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1578,"nodeType":"Block","src":"22589:592:1","statements":[{"assignments":[1523],"declarations":[{"constant":false,"id":1523,"mutability":"mutable","name":"timepoint","nameLocation":"22606:9:1","nodeType":"VariableDeclaration","scope":1578,"src":"22599:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1522,"name":"uint48","nodeType":"ElementaryTypeName","src":"22599:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":1528,"initialValue":{"expression":{"baseExpression":{"id":1524,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"22618:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1526,"indexExpression":{"id":1525,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"22629:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22618:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22642:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"22618:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"22599:52:1"},{"assignments":[1530],"declarations":[{"constant":false,"id":1530,"mutability":"mutable","name":"nonce","nameLocation":"22668:5:1","nodeType":"VariableDeclaration","scope":1578,"src":"22661:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1529,"name":"uint32","nodeType":"ElementaryTypeName","src":"22661:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1535,"initialValue":{"expression":{"baseExpression":{"id":1531,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"22676:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1533,"indexExpression":{"id":1532,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"22687:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22676:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1534,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22700:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":205,"src":"22676:29:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"22661:44:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1536,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"22720:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22720:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1544,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"22816:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1545,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"22828:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$7914_$","typeString":"type(library Time)"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22833:9:1","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":7661,"src":"22828:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22828:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"22816:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"arguments":[{"id":1555,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"22933:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":1554,"name":"_isExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"22922:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint48_$returns$_t_bool_$","typeString":"function (uint48) view returns (bool)"}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22922:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1562,"nodeType":"IfStatement","src":"22918:92:1","trueBody":{"id":1561,"nodeType":"Block","src":"22945:65:1","statements":[{"errorCall":{"arguments":[{"id":1558,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"22987:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1557,"name":"AccessManagerExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"22966:20:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22966:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1560,"nodeType":"RevertStatement","src":"22959:40:1"}]}},"id":1563,"nodeType":"IfStatement","src":"22812:198:1","trueBody":{"id":1553,"nodeType":"Block","src":"22846:66:1","statements":[{"errorCall":{"arguments":[{"id":1550,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"22889:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1549,"name":"AccessManagerNotReady","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"22867:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22867:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1552,"nodeType":"RevertStatement","src":"22860:41:1"}]}},"id":1564,"nodeType":"IfStatement","src":"22716:294:1","trueBody":{"id":1543,"nodeType":"Block","src":"22736:70:1","statements":[{"errorCall":{"arguments":[{"id":1540,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"22783:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1539,"name":"AccessManagerNotScheduled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"22757:25:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22757:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1542,"nodeType":"RevertStatement","src":"22750:45:1"}]}},{"expression":{"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"23020:40:1","subExpression":{"expression":{"baseExpression":{"id":1565,"name":"_schedules","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"23027:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Schedule_$206_storage_$","typeString":"mapping(bytes32 => struct AccessManager.Schedule storage ref)"}},"id":1567,"indexExpression":{"id":1566,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"23038:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23027:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Schedule_$206_storage","typeString":"struct AccessManager.Schedule storage ref"}},"id":1568,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"23051:9:1","memberName":"timepoint","nodeType":"MemberAccess","referencedDeclaration":203,"src":"23027:33:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1570,"nodeType":"ExpressionStatement","src":"23020:40:1"},{"eventCall":{"arguments":[{"id":1572,"name":"operationId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"23132:11:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1573,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"23145:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1571,"name":"OperationExecuted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"23114:17:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint32_$returns$__$","typeString":"function (bytes32,uint32)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23114:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1575,"nodeType":"EmitStatement","src":"23109:42:1"},{"expression":{"id":1576,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"23169:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1521,"id":1577,"nodeType":"Return","src":"23162:12:1"}]},"documentation":{"id":1515,"nodeType":"StructuredDocumentation","src":"22321:179:1","text":" @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n Returns the nonce of the scheduled operation that is consumed."},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"_consumeScheduledOp","nameLocation":"22514:19:1","nodeType":"FunctionDefinition","parameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"operationId","nameLocation":"22542:11:1","nodeType":"VariableDeclaration","scope":1579,"src":"22534:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22534:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22533:21:1"},"returnParameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"22581:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1519,"name":"uint32","nodeType":"ElementaryTypeName","src":"22581:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"22580:8:1"},"scope":2033,"src":"22505:676:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[2502],"body":{"id":1600,"nodeType":"Block","src":"23336:67:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":1594,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"23374:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1595,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"23382:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1596,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"23390:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1592,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23363:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"23367:6:1","memberName":"encode","nodeType":"MemberAccess","src":"23363:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23363:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1591,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23353:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23353:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1590,"id":1599,"nodeType":"Return","src":"23346:50:1"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"23187:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"abd9bd2a","id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"hashOperation","nameLocation":"23231:13:1","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"caller","nameLocation":"23253:6:1","nodeType":"VariableDeclaration","scope":1601,"src":"23245:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1581,"name":"address","nodeType":"ElementaryTypeName","src":"23245:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"target","nameLocation":"23269:6:1","nodeType":"VariableDeclaration","scope":1601,"src":"23261:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"23261:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"data","nameLocation":"23292:4:1","nodeType":"VariableDeclaration","scope":1601,"src":"23277:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1585,"name":"bytes","nodeType":"ElementaryTypeName","src":"23277:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23244:53:1"},"returnParameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"23327:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23327:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"23326:9:1"},"scope":2033,"src":"23222:181:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2510],"body":{"id":1618,"nodeType":"Block","src":"23657:66:1","statements":[{"expression":{"arguments":[{"id":1615,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"23703:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":1612,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"23682:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1611,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"23667:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManaged_$2073_$","typeString":"type(contract IAccessManaged)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23667:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessManaged_$2073","typeString":"contract IAccessManaged"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23690:12:1","memberName":"setAuthority","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"23667:35:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23667:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1617,"nodeType":"ExpressionStatement","src":"23667:49:1"}]},"documentation":{"id":1602,"nodeType":"StructuredDocumentation","src":"23529:30:1","text":"@inheritdoc IAccessManager"},"functionSelector":"18ff183c","id":1619,"implemented":true,"kind":"function","modifiers":[{"id":1609,"kind":"modifierInvocation","modifierName":{"id":1608,"name":"onlyAuthorized","nameLocations":["23642:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"23642:14:1"},"nodeType":"ModifierInvocation","src":"23642:14:1"}],"name":"updateAuthority","nameLocation":"23573:15:1","nodeType":"FunctionDefinition","parameters":{"id":1607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"target","nameLocation":"23597:6:1","nodeType":"VariableDeclaration","scope":1619,"src":"23589:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1603,"name":"address","nodeType":"ElementaryTypeName","src":"23589:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"newAuthority","nameLocation":"23613:12:1","nodeType":"VariableDeclaration","scope":1619,"src":"23605:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"23605:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23588:38:1"},"returnParameters":{"id":1610,"nodeType":"ParameterList","parameters":[],"src":"23657:0:1"},"scope":2033,"src":"23564:159:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1672,"nodeType":"Block","src":"23979:467:1","statements":[{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"caller","nameLocation":"23997:6:1","nodeType":"VariableDeclaration","scope":1672,"src":"23989:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"23989:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1627,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1625,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"24006:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24006:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"23989:29:1"},{"assignments":[1629,1631],"declarations":[{"constant":false,"id":1629,"mutability":"mutable","name":"immediate","nameLocation":"24034:9:1","nodeType":"VariableDeclaration","scope":1672,"src":"24029:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1628,"name":"bool","nodeType":"ElementaryTypeName","src":"24029:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1631,"mutability":"mutable","name":"delay","nameLocation":"24052:5:1","nodeType":"VariableDeclaration","scope":1672,"src":"24045:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1630,"name":"uint32","nodeType":"ElementaryTypeName","src":"24045:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1637,"initialValue":{"arguments":[{"id":1633,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"24074:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1634,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"24082:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24082:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1632,"name":"_canCallSelf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"24061:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,bytes calldata) view returns (bool,uint32)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24061:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"24028:65:1"},{"condition":{"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24107:10:1","subExpression":{"id":1638,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"24108:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1671,"nodeType":"IfStatement","src":"24103:337:1","trueBody":{"id":1670,"nodeType":"Block","src":"24119:321:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1640,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"24137:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24146:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24137:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1668,"nodeType":"Block","src":"24328:102:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":1658,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"24380:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1661,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"24396:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":1660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24388:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"24388:7:1","typeDescriptions":{}}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24388:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1663,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"24403:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24403:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1657,"name":"hashOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"24366:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (address,address,bytes calldata) view returns (bytes32)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24366:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1656,"name":"_consumeScheduledOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"24346:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$_t_uint32_$","typeString":"function (bytes32) returns (uint32)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24346:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1667,"nodeType":"ExpressionStatement","src":"24346:69:1"}]},"id":1669,"nodeType":"IfStatement","src":"24133:297:1","trueBody":{"id":1655,"nodeType":"Block","src":"24149:173:1","statements":[{"assignments":[null,1644,null],"declarations":[null,{"constant":false,"id":1644,"mutability":"mutable","name":"requiredRole","nameLocation":"24177:12:1","nodeType":"VariableDeclaration","scope":1655,"src":"24170:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1643,"name":"uint64","nodeType":"ElementaryTypeName","src":"24170:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},null],"id":1649,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1646,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"24217:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24217:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1645,"name":"_getAdminRestrictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"24195:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint64_$_t_uint32_$","typeString":"function (bytes calldata) view returns (bool,uint64,uint32)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24195:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint64_$_t_uint32_$","typeString":"tuple(bool,uint64,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"24167:61:1"},{"errorCall":{"arguments":[{"id":1651,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"24286:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1652,"name":"requiredRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"24294:12:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1650,"name":"AccessManagerUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"24253:32:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint64_$returns$__$","typeString":"function (address,uint64) pure"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24253:54:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1654,"nodeType":"RevertStatement","src":"24246:61:1"}]}}]}}]},"documentation":{"id":1620,"nodeType":"StructuredDocumentation","src":"23849:89:1","text":" @dev Check if the current call is authorized according to admin logic."},"id":1673,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"23952:16:1","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"23968:2:1"},"returnParameters":{"id":1622,"nodeType":"ParameterList","parameters":[],"src":"23979:0:1"},"scope":2033,"src":"23943:503:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1819,"nodeType":"Block","src":"25000:1480:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1685,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"25014:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25019:6:1","memberName":"length","nodeType":"MemberAccess","src":"25014:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25028:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25014:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1695,"nodeType":"IfStatement","src":"25010:66:1","trueBody":{"id":1694,"nodeType":"Block","src":"25031:45:1","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"25053:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25060:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25063:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1692,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"25052:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0,int_const 0)"}},"functionReturnParameters":1684,"id":1693,"nodeType":"Return","src":"25045:20:1"}]}},{"assignments":[1697],"declarations":[{"constant":false,"id":1697,"mutability":"mutable","name":"selector","nameLocation":"25093:8:1","nodeType":"VariableDeclaration","scope":1819,"src":"25086:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1696,"name":"bytes4","nodeType":"ElementaryTypeName","src":"25086:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":1701,"initialValue":{"arguments":[{"id":1699,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"25119:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1698,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"25104:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25104:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"25086:38:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1702,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25244:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1703,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25256:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25261:9:1","memberName":"labelRole","nodeType":"MemberAccess","referencedDeclaration":571,"src":"25256:14:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint64,string memory) external"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25271:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25256:23:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25244:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1707,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25295:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1708,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25307:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25312:12:1","memberName":"setRoleAdmin","nodeType":"MemberAccess","referencedDeclaration":648,"src":"25307:17:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64) external"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25325:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25307:26:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25295:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25244:89:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1713,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25349:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1714,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25361:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25366:15:1","memberName":"setRoleGuardian","nodeType":"MemberAccess","referencedDeclaration":664,"src":"25361:20:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_uint64_$returns$__$","typeString":"function (uint64,uint64) external"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25382:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25361:29:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25349:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25244:146:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1719,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25406:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1720,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25418:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25423:13:1","memberName":"setGrantDelay","nodeType":"MemberAccess","referencedDeclaration":680,"src":"25418:18:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_uint32_$returns$__$","typeString":"function (uint64,uint32) external"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25437:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25418:27:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25406:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25244:201:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1725,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25461:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1726,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25473:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25478:19:1","memberName":"setTargetAdminDelay","nodeType":"MemberAccess","referencedDeclaration":1014,"src":"25473:24:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint32_$returns$__$","typeString":"function (address,uint32) external"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25498:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25473:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25461:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25244:262:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1737,"nodeType":"IfStatement","src":"25227:343:1","trueBody":{"id":1736,"nodeType":"Block","src":"25517:53:1","statements":[{"expression":{"components":[{"hexValue":"74727565","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"25539:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1732,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"25545:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"30","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25557:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"25538:21:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint64_$_t_rational_0_by_1_$","typeString":"tuple(bool,uint64,int_const 0)"}},"functionReturnParameters":1684,"id":1735,"nodeType":"Return","src":"25531:28:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1738,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25677:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1739,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25689:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25694:15:1","memberName":"updateAuthority","nodeType":"MemberAccess","referencedDeclaration":1619,"src":"25689:20:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) external"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25710:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25689:29:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25677:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1743,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25734:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1744,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25746:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25751:15:1","memberName":"setTargetClosed","nodeType":"MemberAccess","referencedDeclaration":1065,"src":"25746:20:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) external"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25767:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25746:29:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25734:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25677:98:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1749,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"25791:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1750,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"25803:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25808:21:1","memberName":"setTargetFunctionRole","nodeType":"MemberAccess","referencedDeclaration":972,"src":"25803:26:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$_t_uint64_$returns$__$","typeString":"function (address,bytes4[] memory,uint64) external"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25830:8:1","memberName":"selector","nodeType":"MemberAccess","src":"25803:35:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"25791:47:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25677:161:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1780,"nodeType":"IfStatement","src":"25660:414:1","trueBody":{"id":1779,"nodeType":"Block","src":"25849:225:1","statements":[{"assignments":[1756],"declarations":[{"constant":false,"id":1756,"mutability":"mutable","name":"target","nameLocation":"25914:6:1","nodeType":"VariableDeclaration","scope":1779,"src":"25906:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"25906:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1767,"initialValue":{"arguments":[{"baseExpression":{"id":1759,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"25934:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"hexValue":"30783234","id":1761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25944:4:1","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"25934:15:1","startExpression":{"hexValue":"30783034","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25939:4:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},{"components":[{"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25952:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"25952:7:1","typeDescriptions":{}}}],"id":1765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"25951:9:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":1757,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"25923:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"25927:6:1","memberName":"decode","nodeType":"MemberAccess","src":"25923:10:1","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25923:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"25906:55:1"},{"assignments":[1769],"declarations":[{"constant":false,"id":1769,"mutability":"mutable","name":"delay","nameLocation":"25982:5:1","nodeType":"VariableDeclaration","scope":1779,"src":"25975:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1768,"name":"uint32","nodeType":"ElementaryTypeName","src":"25975:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1773,"initialValue":{"arguments":[{"id":1771,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"26010:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1770,"name":"getTargetAdminDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"25990:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint32_$","typeString":"function (address) view returns (uint32)"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25990:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"25975:42:1"},{"expression":{"components":[{"hexValue":"74727565","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26039:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1775,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"26045:10:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1776,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"26057:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":1777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26038:25:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint64_$_t_uint32_$","typeString":"tuple(bool,uint64,uint32)"}},"functionReturnParameters":1684,"id":1778,"nodeType":"Return","src":"26031:32:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"26193:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1782,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"26205:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26210:9:1","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":593,"src":"26205:14:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_address_$_t_uint32_$returns$__$","typeString":"function (uint64,address,uint32) external"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26220:8:1","memberName":"selector","nodeType":"MemberAccess","src":"26205:23:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"26193:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1786,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"26232:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1787,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"26244:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26249:10:1","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":609,"src":"26244:15:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_address_$returns$__$","typeString":"function (uint64,address) external"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26260:8:1","memberName":"selector","nodeType":"MemberAccess","src":"26244:24:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"26232:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26193:75:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1813,"nodeType":"IfStatement","src":"26189:254:1","trueBody":{"id":1812,"nodeType":"Block","src":"26270:173:1","statements":[{"assignments":[1793],"declarations":[{"constant":false,"id":1793,"mutability":"mutable","name":"roleId","nameLocation":"26334:6:1","nodeType":"VariableDeclaration","scope":1812,"src":"26327:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1792,"name":"uint64","nodeType":"ElementaryTypeName","src":"26327:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":1804,"initialValue":{"arguments":[{"baseExpression":{"id":1796,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"26354:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"hexValue":"30783234","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26364:4:1","typeDescriptions":{"typeIdentifier":"t_rational_36_by_1","typeString":"int_const 36"},"value":"0x24"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"26354:15:1","startExpression":{"hexValue":"30783034","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26359:4:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x04"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},{"components":[{"id":1801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26372:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1800,"name":"uint64","nodeType":"ElementaryTypeName","src":"26372:6:1","typeDescriptions":{}}}],"id":1802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"26371:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"},{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"expression":{"id":1794,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"26343:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"26347:6:1","memberName":"decode","nodeType":"MemberAccess","src":"26343:10:1","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26343:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"26327:53:1"},{"expression":{"components":[{"hexValue":"74727565","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26402:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"arguments":[{"id":1807,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"26421:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1806,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"26408:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$returns$_t_uint64_$","typeString":"function (uint64) view returns (uint64)"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26408:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26430:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26401:31:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint64_$_t_rational_0_by_1_$","typeString":"tuple(bool,uint64,int_const 0)"}},"functionReturnParameters":1684,"id":1811,"nodeType":"Return","src":"26394:38:1"}]}},{"expression":{"components":[{"hexValue":"66616c7365","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26461:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26468:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26471:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"26460:13:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0,int_const 0)"}},"functionReturnParameters":1684,"id":1818,"nodeType":"Return","src":"26453:20:1"}]},"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"24452:395:1","text":" @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n Returns:\n - bool restricted: does this data match a restricted operation\n - uint64: which role is this operation restricted to\n - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)"},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdminRestrictions","nameLocation":"24861:21:1","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1676,"mutability":"mutable","name":"data","nameLocation":"24907:4:1","nodeType":"VariableDeclaration","scope":1820,"src":"24892:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1675,"name":"bytes","nodeType":"ElementaryTypeName","src":"24892:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"24882:35:1"},"returnParameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"restricted","nameLocation":"24945:10:1","nodeType":"VariableDeclaration","scope":1820,"src":"24940:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1678,"name":"bool","nodeType":"ElementaryTypeName","src":"24940:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1681,"mutability":"mutable","name":"roleAdminId","nameLocation":"24964:11:1","nodeType":"VariableDeclaration","scope":1820,"src":"24957:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1680,"name":"uint64","nodeType":"ElementaryTypeName","src":"24957:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"executionDelay","nameLocation":"24984:14:1","nodeType":"VariableDeclaration","scope":1820,"src":"24977:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1682,"name":"uint32","nodeType":"ElementaryTypeName","src":"24977:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"24939:60:1"},"scope":2033,"src":"24852:1628:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1864,"nodeType":"Block","src":"27072:217:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1834,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"27086:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1837,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"27104:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":1836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27096:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"27096:7:1","typeDescriptions":{}}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27096:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"27086:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1862,"nodeType":"Block","src":"27175:108:1","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1846,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"27196:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27201:6:1","memberName":"length","nodeType":"MemberAccess","src":"27196:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27210:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"27196:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1854,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"27235:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1855,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"27243:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1857,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"27266:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1856,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"27251:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27251:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1853,"name":"canCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"27227:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_bytes4_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,address,bytes4) view returns (bool,uint32)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27227:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"27196:76:1","trueExpression":{"components":[{"hexValue":"66616c7365","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"27215:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27222:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27214:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":1833,"id":1861,"nodeType":"Return","src":"27189:83:1"}]},"id":1863,"nodeType":"IfStatement","src":"27082:201:1","trueBody":{"id":1845,"nodeType":"Block","src":"27111:58:1","statements":[{"expression":{"arguments":[{"id":1841,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"27145:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1842,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"27153:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1840,"name":"_canCallSelf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"27132:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,bytes calldata) view returns (bool,uint32)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27132:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":1833,"id":1844,"nodeType":"Return","src":"27125:33:1"}]}}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"26606:300:1","text":" @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n when the target is this contract.\n Returns:\n - bool immediate: whether the operation can be executed immediately (with no delay)\n - uint32 delay: the execution delay"},"id":1865,"implemented":true,"kind":"function","modifiers":[],"name":"_canCallExtended","nameLocation":"26920:16:1","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"caller","nameLocation":"26954:6:1","nodeType":"VariableDeclaration","scope":1865,"src":"26946:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"26946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"target","nameLocation":"26978:6:1","nodeType":"VariableDeclaration","scope":1865,"src":"26970:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1824,"name":"address","nodeType":"ElementaryTypeName","src":"26970:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"data","nameLocation":"27009:4:1","nodeType":"VariableDeclaration","scope":1865,"src":"26994:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1826,"name":"bytes","nodeType":"ElementaryTypeName","src":"26994:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"26936:83:1"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"immediate","nameLocation":"27047:9:1","nodeType":"VariableDeclaration","scope":1865,"src":"27042:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1829,"name":"bool","nodeType":"ElementaryTypeName","src":"27042:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"delay","nameLocation":"27065:5:1","nodeType":"VariableDeclaration","scope":1865,"src":"27058:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1831,"name":"uint32","nodeType":"ElementaryTypeName","src":"27058:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"27041:30:1"},"scope":2033,"src":"26911:378:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1959,"nodeType":"Block","src":"27510:881:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1877,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"27524:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27529:6:1","memberName":"length","nodeType":"MemberAccess","src":"27524:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"34","id":1879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27538:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"27524:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1886,"nodeType":"IfStatement","src":"27520:63:1","trueBody":{"id":1885,"nodeType":"Block","src":"27541:42:1","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"27563:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27570:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27562:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1876,"id":1884,"nodeType":"Return","src":"27555:17:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1887,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"27597:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1890,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"27615:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27607:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1888,"name":"address","nodeType":"ElementaryTypeName","src":"27607:7:1","typeDescriptions":{}}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27607:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"27597:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1906,"nodeType":"IfStatement","src":"27593:334:1","trueBody":{"id":1905,"nodeType":"Block","src":"27622:305:1","statements":[{"expression":{"components":[{"arguments":[{"arguments":[{"id":1896,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"27884:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManager_$2033","typeString":"contract AccessManager"}],"id":1895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27876:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1894,"name":"address","nodeType":"ElementaryTypeName","src":"27876:7:1","typeDescriptions":{}}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27876:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1899,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"27906:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1898,"name":"_checkSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"27891:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function (bytes calldata) pure returns (bytes4)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27891:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1893,"name":"_isExecuting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"27863:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27863:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"30","id":1902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27914:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"27862:54:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1876,"id":1904,"nodeType":"Return","src":"27855:61:1"}]}},{"assignments":[1908,1910,1912],"declarations":[{"constant":false,"id":1908,"mutability":"mutable","name":"enabled","nameLocation":"27943:7:1","nodeType":"VariableDeclaration","scope":1959,"src":"27938:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1907,"name":"bool","nodeType":"ElementaryTypeName","src":"27938:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"roleId","nameLocation":"27959:6:1","nodeType":"VariableDeclaration","scope":1959,"src":"27952:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1909,"name":"uint64","nodeType":"ElementaryTypeName","src":"27952:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"operationDelay","nameLocation":"27974:14:1","nodeType":"VariableDeclaration","scope":1959,"src":"27967:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1911,"name":"uint32","nodeType":"ElementaryTypeName","src":"27967:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1916,"initialValue":{"arguments":[{"id":1914,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"28014:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1913,"name":"_getAdminRestrictions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"27992:21:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_calldata_ptr_$returns$_t_bool_$_t_uint64_$_t_uint32_$","typeString":"function (bytes calldata) view returns (bool,uint64,uint32)"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27992:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint64_$_t_uint32_$","typeString":"tuple(bool,uint64,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"27937:82:1"},{"condition":{"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"28033:8:1","subExpression":{"id":1917,"name":"enabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"28034:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1924,"nodeType":"IfStatement","src":"28029:56:1","trueBody":{"id":1923,"nodeType":"Block","src":"28043:42:1","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"28065:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28072:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1921,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"28064:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1876,"id":1922,"nodeType":"Return","src":"28057:17:1"}]}},{"assignments":[1926,1928],"declarations":[{"constant":false,"id":1926,"mutability":"mutable","name":"inRole","nameLocation":"28101:6:1","nodeType":"VariableDeclaration","scope":1959,"src":"28096:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1925,"name":"bool","nodeType":"ElementaryTypeName","src":"28096:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"executionDelay","nameLocation":"28116:14:1","nodeType":"VariableDeclaration","scope":1959,"src":"28109:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1927,"name":"uint32","nodeType":"ElementaryTypeName","src":"28109:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1933,"initialValue":{"arguments":[{"id":1930,"name":"roleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"28142:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1931,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"28150:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1929,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"28134:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$_t_uint32_$","typeString":"function (uint64,address) view returns (bool,uint32)"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28134:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"28095:62:1"},{"condition":{"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"28171:7:1","subExpression":{"id":1934,"name":"inRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"28172:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1941,"nodeType":"IfStatement","src":"28167:55:1","trueBody":{"id":1940,"nodeType":"Block","src":"28180:42:1","statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"28202:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28209:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1938,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"28201:10:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1876,"id":1939,"nodeType":"Return","src":"28194:17:1"}]}},{"expression":{"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1942,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"28292:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1947,"name":"operationDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"28316:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1948,"name":"executionDelay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"28332:14:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":1945,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"28307:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4156_$","typeString":"type(library Math)"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28312:3:1","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"28307:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28307:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28300:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1943,"name":"uint32","nodeType":"ElementaryTypeName","src":"28300:6:1","typeDescriptions":{}}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28300:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"28292:56:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1952,"nodeType":"ExpressionStatement","src":"28292:56:1"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1953,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"28366:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28375:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"28366:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1956,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"28378:5:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":1957,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"28365:19:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":1876,"id":1958,"nodeType":"Return","src":"28358:26:1"}]},"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"27295:99:1","text":" @dev A version of {canCall} that checks for admin restrictions in this contract."},"id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"_canCallSelf","nameLocation":"27408:12:1","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"caller","nameLocation":"27429:6:1","nodeType":"VariableDeclaration","scope":1960,"src":"27421:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1867,"name":"address","nodeType":"ElementaryTypeName","src":"27421:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1870,"mutability":"mutable","name":"data","nameLocation":"27452:4:1","nodeType":"VariableDeclaration","scope":1960,"src":"27437:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1869,"name":"bytes","nodeType":"ElementaryTypeName","src":"27437:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"27420:37:1"},"returnParameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"immediate","nameLocation":"27485:9:1","nodeType":"VariableDeclaration","scope":1960,"src":"27480:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1872,"name":"bool","nodeType":"ElementaryTypeName","src":"27480:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"delay","nameLocation":"27503:5:1","nodeType":"VariableDeclaration","scope":1960,"src":"27496:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1874,"name":"uint32","nodeType":"ElementaryTypeName","src":"27496:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"27479:30:1"},"scope":2033,"src":"27399:992:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1977,"nodeType":"Block","src":"28594:74:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1970,"name":"_executionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"28611:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1972,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"28644:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1973,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"28652:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1971,"name":"_hashExecutionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"28627:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (address,bytes4) pure returns (bytes32)"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28627:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"28611:50:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1969,"id":1976,"nodeType":"Return","src":"28604:57:1"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"28397:109:1","text":" @dev Returns true if a call with `target` and `selector` is being executed via {executed}."},"id":1978,"implemented":true,"kind":"function","modifiers":[],"name":"_isExecuting","nameLocation":"28520:12:1","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"target","nameLocation":"28541:6:1","nodeType":"VariableDeclaration","scope":1978,"src":"28533:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1962,"name":"address","nodeType":"ElementaryTypeName","src":"28533:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"selector","nameLocation":"28556:8:1","nodeType":"VariableDeclaration","scope":1978,"src":"28549:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1964,"name":"bytes4","nodeType":"ElementaryTypeName","src":"28549:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"28532:33:1"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1978,"src":"28588:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1967,"name":"bool","nodeType":"ElementaryTypeName","src":"28588:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28587:6:1"},"scope":2033,"src":"28511:157:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1995,"nodeType":"Block","src":"28838:68:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1986,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"28855:9:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1987,"name":"expiration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"28867:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint32_$","typeString":"function () view returns (uint32)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28867:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"28855:24:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1990,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"28883:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Time_$7914_$","typeString":"type(library Time)"}},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28888:9:1","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":7661,"src":"28883:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28883:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"28855:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1985,"id":1994,"nodeType":"Return","src":"28848:51:1"}]},"documentation":{"id":1979,"nodeType":"StructuredDocumentation","src":"28674:93:1","text":" @dev Returns true if a schedule timepoint is past its expiration deadline."},"id":1996,"implemented":true,"kind":"function","modifiers":[],"name":"_isExpired","nameLocation":"28781:10:1","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"timepoint","nameLocation":"28799:9:1","nodeType":"VariableDeclaration","scope":1996,"src":"28792:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1980,"name":"uint48","nodeType":"ElementaryTypeName","src":"28792:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"28791:18:1"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1996,"src":"28832:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1983,"name":"bool","nodeType":"ElementaryTypeName","src":"28832:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28831:6:1"},"scope":2033,"src":"28772:134:1","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2012,"nodeType":"Block","src":"29091:41:1","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2006,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"29115:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"hexValue":"34","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29122:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"29115:9:1","startExpression":{"hexValue":"30","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29120:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":2005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29108:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2004,"name":"bytes4","nodeType":"ElementaryTypeName","src":"29108:6:1","typeDescriptions":{}}},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29108:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2003,"id":2011,"nodeType":"Return","src":"29101:24:1"}]},"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"28912:99:1","text":" @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes"},"id":2013,"implemented":true,"kind":"function","modifiers":[],"name":"_checkSelector","nameLocation":"29025:14:1","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"data","nameLocation":"29055:4:1","nodeType":"VariableDeclaration","scope":2013,"src":"29040:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1998,"name":"bytes","nodeType":"ElementaryTypeName","src":"29040:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"29039:21:1"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2013,"src":"29083:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2001,"name":"bytes4","nodeType":"ElementaryTypeName","src":"29083:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"29082:8:1"},"scope":2033,"src":"29016:116:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2031,"nodeType":"Block","src":"29296:63:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":2026,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"29334:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2027,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"29342:8:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2024,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"29323:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"29327:6:1","memberName":"encode","nodeType":"MemberAccess","src":"29323:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29323:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2023,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"29313:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29313:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2022,"id":2030,"nodeType":"Return","src":"29306:46:1"}]},"documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"29138:63:1","text":" @dev Hashing function for execute protection"},"id":2032,"implemented":true,"kind":"function","modifiers":[],"name":"_hashExecutionId","nameLocation":"29215:16:1","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"target","nameLocation":"29240:6:1","nodeType":"VariableDeclaration","scope":2032,"src":"29232:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2015,"name":"address","nodeType":"ElementaryTypeName","src":"29232:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"selector","nameLocation":"29255:8:1","nodeType":"VariableDeclaration","scope":2032,"src":"29248:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2017,"name":"bytes4","nodeType":"ElementaryTypeName","src":"29248:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"29231:33:1"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2032,"src":"29287:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2020,"name":"bytes32","nodeType":"ElementaryTypeName","src":"29287:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"29286:9:1"},"scope":2033,"src":"29206:153:1","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2034,"src":"3726:25635:1","usedErrors":[2187,2191,2195,2199,2203,2207,2209,2215,2223,2227,2237,2241,2623,2628,2631,4166],"usedEvents":[2094,2101,2108,2115,2128,2135,2142,2149,2158,2165,2174,2183]}],"src":"116:29246:1"},"id":1},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","exportedSymbols":{"IAccessManaged":[2073]},"id":2074,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2035,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"117:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessManaged","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2073,"linearizedBaseContracts":[2073],"name":"IAccessManaged","nameLocation":"153:14:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2036,"nodeType":"StructuredDocumentation","src":"174:73:2","text":" @dev Authority that manages this contract was updated."},"eventSelector":"2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad","id":2040,"name":"AuthorityUpdated","nameLocation":"258:16:2","nodeType":"EventDefinition","parameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"indexed":false,"mutability":"mutable","name":"authority","nameLocation":"283:9:2","nodeType":"VariableDeclaration","scope":2040,"src":"275:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2037,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:19:2"},"src":"252:42:2"},{"errorSelector":"068ca9d8","id":2044,"name":"AccessManagedUnauthorized","nameLocation":"306:25:2","nodeType":"ErrorDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"caller","nameLocation":"340:6:2","nodeType":"VariableDeclaration","scope":2044,"src":"332:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"332:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"331:16:2"},"src":"300:48:2"},{"errorSelector":"af77169d","id":2050,"name":"AccessManagedRequiredDelay","nameLocation":"359:26:2","nodeType":"ErrorDefinition","parameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"caller","nameLocation":"394:6:2","nodeType":"VariableDeclaration","scope":2050,"src":"386:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2048,"mutability":"mutable","name":"delay","nameLocation":"409:5:2","nodeType":"VariableDeclaration","scope":2050,"src":"402:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2047,"name":"uint32","nodeType":"ElementaryTypeName","src":"402:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"385:30:2"},"src":"353:63:2"},{"errorSelector":"c2f31e5e","id":2054,"name":"AccessManagedInvalidAuthority","nameLocation":"427:29:2","nodeType":"ErrorDefinition","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"authority","nameLocation":"465:9:2","nodeType":"VariableDeclaration","scope":2054,"src":"457:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2051,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"456:19:2"},"src":"421:55:2"},{"documentation":{"id":2055,"nodeType":"StructuredDocumentation","src":"482:54:2","text":" @dev Returns the current authority."},"functionSelector":"bf7e214f","id":2060,"implemented":false,"kind":"function","modifiers":[],"name":"authority","nameLocation":"550:9:2","nodeType":"FunctionDefinition","parameters":{"id":2056,"nodeType":"ParameterList","parameters":[],"src":"559:2:2"},"returnParameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2060,"src":"585:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2057,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"584:9:2"},"scope":2073,"src":"541:53:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"600:103:2","text":" @dev Transfers control to a new authority. The caller must be the current authority."},"functionSelector":"7a9e5e4b","id":2066,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthority","nameLocation":"717:12:2","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"730:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"730:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"729:9:2"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[],"src":"747:0:2"},"scope":2073,"src":"708:40:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"754:284:2","text":" @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n attacker controlled calls."},"functionSelector":"8fb36037","id":2072,"implemented":false,"kind":"function","modifiers":[],"name":"isConsumingScheduledOp","nameLocation":"1052:22:2","nodeType":"FunctionDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[],"src":"1074:2:2"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2072,"src":"1100:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2069,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1100:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1099:8:2"},"scope":2073,"src":"1043:65:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2074,"src":"143:967:2","usedErrors":[2044,2050,2054],"usedEvents":[2040]}],"src":"117:994:2"},"id":2},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManager.sol","exportedSymbols":{"IAccessManaged":[2073],"IAccessManager":[2511],"Time":[7914]},"id":2512,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2075,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"117:24:3"},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","file":"./IAccessManaged.sol","id":2077,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2512,"sourceUnit":2074,"src":"143:52:3","symbolAliases":[{"foreign":{"id":2076,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"151:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","file":"../../utils/types/Time.sol","id":2079,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2512,"sourceUnit":7915,"src":"196:48:3","symbolAliases":[{"foreign":{"id":2078,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7914,"src":"204:4:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2511,"linearizedBaseContracts":[2511],"name":"IAccessManager","nameLocation":"256:14:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2080,"nodeType":"StructuredDocumentation","src":"277:58:3","text":" @dev A delayed operation was scheduled."},"eventSelector":"82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b4","id":2094,"name":"OperationScheduled","nameLocation":"346:18:3","nodeType":"EventDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"390:11:3","nodeType":"VariableDeclaration","scope":2094,"src":"374:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2084,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"426:5:3","nodeType":"VariableDeclaration","scope":2094,"src":"411:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2083,"name":"uint32","nodeType":"ElementaryTypeName","src":"411:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2086,"indexed":false,"mutability":"mutable","name":"schedule","nameLocation":"448:8:3","nodeType":"VariableDeclaration","scope":2094,"src":"441:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2085,"name":"uint48","nodeType":"ElementaryTypeName","src":"441:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":2088,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"474:6:3","nodeType":"VariableDeclaration","scope":2094,"src":"466:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2087,"name":"address","nodeType":"ElementaryTypeName","src":"466:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2090,"indexed":false,"mutability":"mutable","name":"target","nameLocation":"498:6:3","nodeType":"VariableDeclaration","scope":2094,"src":"490:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2089,"name":"address","nodeType":"ElementaryTypeName","src":"490:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2092,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"520:4:3","nodeType":"VariableDeclaration","scope":2094,"src":"514:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2091,"name":"bytes","nodeType":"ElementaryTypeName","src":"514:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"364:166:3"},"src":"340:191:3"},{"anonymous":false,"documentation":{"id":2095,"nodeType":"StructuredDocumentation","src":"537:59:3","text":" @dev A scheduled operation was executed."},"eventSelector":"76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d","id":2101,"name":"OperationExecuted","nameLocation":"607:17:3","nodeType":"EventDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"641:11:3","nodeType":"VariableDeclaration","scope":2101,"src":"625:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"625:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2099,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"669:5:3","nodeType":"VariableDeclaration","scope":2101,"src":"654:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2098,"name":"uint32","nodeType":"ElementaryTypeName","src":"654:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"624:51:3"},"src":"601:75:3"},{"anonymous":false,"documentation":{"id":2102,"nodeType":"StructuredDocumentation","src":"682:59:3","text":" @dev A scheduled operation was canceled."},"eventSelector":"bd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f7","id":2108,"name":"OperationCanceled","nameLocation":"752:17:3","nodeType":"EventDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"786:11:3","nodeType":"VariableDeclaration","scope":2108,"src":"770:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2106,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"814:5:3","nodeType":"VariableDeclaration","scope":2108,"src":"799:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2105,"name":"uint32","nodeType":"ElementaryTypeName","src":"799:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"769:51:3"},"src":"746:75:3"},{"anonymous":false,"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"827:61:3","text":" @dev Informational labelling for a roleId."},"eventSelector":"1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a450","id":2115,"name":"RoleLabel","nameLocation":"899:9:3","nodeType":"EventDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"924:6:3","nodeType":"VariableDeclaration","scope":2115,"src":"909:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2110,"name":"uint64","nodeType":"ElementaryTypeName","src":"909:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2113,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"939:5:3","nodeType":"VariableDeclaration","scope":2115,"src":"932:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2112,"name":"string","nodeType":"ElementaryTypeName","src":"932:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"908:37:3"},"src":"893:53:3"},{"anonymous":false,"documentation":{"id":2116,"nodeType":"StructuredDocumentation","src":"952:375:3","text":" @dev Emitted when `account` is granted `roleId`.\n NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n otherwise it indicates the execution delay for this account and roleId is updated."},"eventSelector":"f98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf","id":2128,"name":"RoleGranted","nameLocation":"1338:11:3","nodeType":"EventDefinition","parameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2118,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1365:6:3","nodeType":"VariableDeclaration","scope":2128,"src":"1350:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2117,"name":"uint64","nodeType":"ElementaryTypeName","src":"1350:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2120,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1389:7:3","nodeType":"VariableDeclaration","scope":2128,"src":"1373:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2119,"name":"address","nodeType":"ElementaryTypeName","src":"1373:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2122,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"1405:5:3","nodeType":"VariableDeclaration","scope":2128,"src":"1398:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2121,"name":"uint32","nodeType":"ElementaryTypeName","src":"1398:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2124,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"1419:5:3","nodeType":"VariableDeclaration","scope":2128,"src":"1412:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2123,"name":"uint48","nodeType":"ElementaryTypeName","src":"1412:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":2126,"indexed":false,"mutability":"mutable","name":"newMember","nameLocation":"1431:9:3","nodeType":"VariableDeclaration","scope":2128,"src":"1426:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2125,"name":"bool","nodeType":"ElementaryTypeName","src":"1426:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1349:92:3"},"src":"1332:110:3"},{"anonymous":false,"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"1448:125:3","text":" @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"eventSelector":"f229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c166","id":2135,"name":"RoleRevoked","nameLocation":"1584:11:3","nodeType":"EventDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1611:6:3","nodeType":"VariableDeclaration","scope":2135,"src":"1596:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2130,"name":"uint64","nodeType":"ElementaryTypeName","src":"1596:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2133,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1635:7:3","nodeType":"VariableDeclaration","scope":2135,"src":"1619:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2132,"name":"address","nodeType":"ElementaryTypeName","src":"1619:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1595:48:3"},"src":"1578:66:3"},{"anonymous":false,"documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"1650:78:3","text":" @dev Role acting as admin over a given `roleId` is updated."},"eventSelector":"1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e6340","id":2142,"name":"RoleAdminChanged","nameLocation":"1739:16:3","nodeType":"EventDefinition","parameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1771:6:3","nodeType":"VariableDeclaration","scope":2142,"src":"1756:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2137,"name":"uint64","nodeType":"ElementaryTypeName","src":"1756:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2140,"indexed":true,"mutability":"mutable","name":"admin","nameLocation":"1794:5:3","nodeType":"VariableDeclaration","scope":2142,"src":"1779:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2139,"name":"uint64","nodeType":"ElementaryTypeName","src":"1779:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1755:45:3"},"src":"1733:68:3"},{"anonymous":false,"documentation":{"id":2143,"nodeType":"StructuredDocumentation","src":"1807:81:3","text":" @dev Role acting as guardian over a given `roleId` is updated."},"eventSelector":"7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae2","id":2149,"name":"RoleGuardianChanged","nameLocation":"1899:19:3","nodeType":"EventDefinition","parameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2145,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1934:6:3","nodeType":"VariableDeclaration","scope":2149,"src":"1919:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2144,"name":"uint64","nodeType":"ElementaryTypeName","src":"1919:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2147,"indexed":true,"mutability":"mutable","name":"guardian","nameLocation":"1957:8:3","nodeType":"VariableDeclaration","scope":2149,"src":"1942:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2146,"name":"uint64","nodeType":"ElementaryTypeName","src":"1942:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1918:48:3"},"src":"1893:74:3"},{"anonymous":false,"documentation":{"id":2150,"nodeType":"StructuredDocumentation","src":"1973:108:3","text":" @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"eventSelector":"feb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b48","id":2158,"name":"RoleGrantDelayChanged","nameLocation":"2092:21:3","nodeType":"EventDefinition","parameters":{"id":2157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"2129:6:3","nodeType":"VariableDeclaration","scope":2158,"src":"2114:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2151,"name":"uint64","nodeType":"ElementaryTypeName","src":"2114:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2154,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"2144:5:3","nodeType":"VariableDeclaration","scope":2158,"src":"2137:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2153,"name":"uint32","nodeType":"ElementaryTypeName","src":"2137:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2156,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"2158:5:3","nodeType":"VariableDeclaration","scope":2158,"src":"2151:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2155,"name":"uint48","nodeType":"ElementaryTypeName","src":"2151:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2113:51:3"},"src":"2086:79:3"},{"anonymous":false,"documentation":{"id":2159,"nodeType":"StructuredDocumentation","src":"2171:77:3","text":" @dev Target mode is updated (true = closed, false = open)."},"eventSelector":"90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb138","id":2165,"name":"TargetClosed","nameLocation":"2259:12:3","nodeType":"EventDefinition","parameters":{"id":2164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2161,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2288:6:3","nodeType":"VariableDeclaration","scope":2165,"src":"2272:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2160,"name":"address","nodeType":"ElementaryTypeName","src":"2272:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2163,"indexed":false,"mutability":"mutable","name":"closed","nameLocation":"2301:6:3","nodeType":"VariableDeclaration","scope":2165,"src":"2296:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2162,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2271:37:3"},"src":"2253:56:3"},{"anonymous":false,"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"2315:94:3","text":" @dev Role required to invoke `selector` on `target` is updated to `roleId`."},"eventSelector":"9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151","id":2174,"name":"TargetFunctionRoleUpdated","nameLocation":"2420:25:3","nodeType":"EventDefinition","parameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2462:6:3","nodeType":"VariableDeclaration","scope":2174,"src":"2446:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2167,"name":"address","nodeType":"ElementaryTypeName","src":"2446:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2170,"indexed":false,"mutability":"mutable","name":"selector","nameLocation":"2477:8:3","nodeType":"VariableDeclaration","scope":2174,"src":"2470:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2169,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2470:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":2172,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"2502:6:3","nodeType":"VariableDeclaration","scope":2174,"src":"2487:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2171,"name":"uint64","nodeType":"ElementaryTypeName","src":"2487:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2445:64:3"},"src":"2414:96:3"},{"anonymous":false,"documentation":{"id":2175,"nodeType":"StructuredDocumentation","src":"2516:108:3","text":" @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"eventSelector":"a56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c","id":2183,"name":"TargetAdminDelayUpdated","nameLocation":"2635:23:3","nodeType":"EventDefinition","parameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2675:6:3","nodeType":"VariableDeclaration","scope":2183,"src":"2659:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2176,"name":"address","nodeType":"ElementaryTypeName","src":"2659:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2179,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"2690:5:3","nodeType":"VariableDeclaration","scope":2183,"src":"2683:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2178,"name":"uint32","nodeType":"ElementaryTypeName","src":"2683:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2181,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"2704:5:3","nodeType":"VariableDeclaration","scope":2183,"src":"2697:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2180,"name":"uint48","nodeType":"ElementaryTypeName","src":"2697:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2658:52:3"},"src":"2629:82:3"},{"errorSelector":"813e9459","id":2187,"name":"AccessManagerAlreadyScheduled","nameLocation":"2723:29:3","nodeType":"ErrorDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"operationId","nameLocation":"2761:11:3","nodeType":"VariableDeclaration","scope":2187,"src":"2753:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2753:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2752:21:3"},"src":"2717:57:3"},{"errorSelector":"60a299b0","id":2191,"name":"AccessManagerNotScheduled","nameLocation":"2785:25:3","nodeType":"ErrorDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"operationId","nameLocation":"2819:11:3","nodeType":"VariableDeclaration","scope":2191,"src":"2811:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2811:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2810:21:3"},"src":"2779:53:3"},{"errorSelector":"18cb6b7a","id":2195,"name":"AccessManagerNotReady","nameLocation":"2843:21:3","nodeType":"ErrorDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"operationId","nameLocation":"2873:11:3","nodeType":"VariableDeclaration","scope":2195,"src":"2865:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2865:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2864:21:3"},"src":"2837:49:3"},{"errorSelector":"78a5d6e4","id":2199,"name":"AccessManagerExpired","nameLocation":"2897:20:3","nodeType":"ErrorDefinition","parameters":{"id":2198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2197,"mutability":"mutable","name":"operationId","nameLocation":"2926:11:3","nodeType":"VariableDeclaration","scope":2199,"src":"2918:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2918:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2917:21:3"},"src":"2891:48:3"},{"errorSelector":"5a068bc8","id":2203,"name":"AccessManagerLockedAccount","nameLocation":"2950:26:3","nodeType":"ErrorDefinition","parameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2201,"mutability":"mutable","name":"account","nameLocation":"2985:7:3","nodeType":"VariableDeclaration","scope":2203,"src":"2977:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"2977:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2976:17:3"},"src":"2944:50:3"},{"errorSelector":"1871a90c","id":2207,"name":"AccessManagerLockedRole","nameLocation":"3005:23:3","nodeType":"ErrorDefinition","parameters":{"id":2206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2205,"mutability":"mutable","name":"roleId","nameLocation":"3036:6:3","nodeType":"VariableDeclaration","scope":2207,"src":"3029:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2204,"name":"uint64","nodeType":"ElementaryTypeName","src":"3029:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3028:15:3"},"src":"2999:45:3"},{"errorSelector":"5f159e63","id":2209,"name":"AccessManagerBadConfirmation","nameLocation":"3055:28:3","nodeType":"ErrorDefinition","parameters":{"id":2208,"nodeType":"ParameterList","parameters":[],"src":"3083:2:3"},"src":"3049:37:3"},{"errorSelector":"f07e038f","id":2215,"name":"AccessManagerUnauthorizedAccount","nameLocation":"3097:32:3","nodeType":"ErrorDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"msgsender","nameLocation":"3138:9:3","nodeType":"VariableDeclaration","scope":2215,"src":"3130:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2210,"name":"address","nodeType":"ElementaryTypeName","src":"3130:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2213,"mutability":"mutable","name":"roleId","nameLocation":"3156:6:3","nodeType":"VariableDeclaration","scope":2215,"src":"3149:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2212,"name":"uint64","nodeType":"ElementaryTypeName","src":"3149:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3129:34:3"},"src":"3091:73:3"},{"errorSelector":"81c6f24b","id":2223,"name":"AccessManagerUnauthorizedCall","nameLocation":"3175:29:3","nodeType":"ErrorDefinition","parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"mutability":"mutable","name":"caller","nameLocation":"3213:6:3","nodeType":"VariableDeclaration","scope":2223,"src":"3205:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2216,"name":"address","nodeType":"ElementaryTypeName","src":"3205:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2219,"mutability":"mutable","name":"target","nameLocation":"3229:6:3","nodeType":"VariableDeclaration","scope":2223,"src":"3221:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2218,"name":"address","nodeType":"ElementaryTypeName","src":"3221:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2221,"mutability":"mutable","name":"selector","nameLocation":"3244:8:3","nodeType":"VariableDeclaration","scope":2223,"src":"3237:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2220,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3237:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3204:49:3"},"src":"3169:85:3"},{"errorSelector":"320ff748","id":2227,"name":"AccessManagerUnauthorizedConsume","nameLocation":"3265:32:3","nodeType":"ErrorDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"target","nameLocation":"3306:6:3","nodeType":"VariableDeclaration","scope":2227,"src":"3298:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"3298:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3297:16:3"},"src":"3259:55:3"},{"errorSelector":"3fe2751c","id":2237,"name":"AccessManagerUnauthorizedCancel","nameLocation":"3325:31:3","nodeType":"ErrorDefinition","parameters":{"id":2236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"msgsender","nameLocation":"3365:9:3","nodeType":"VariableDeclaration","scope":2237,"src":"3357:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2228,"name":"address","nodeType":"ElementaryTypeName","src":"3357:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"caller","nameLocation":"3384:6:3","nodeType":"VariableDeclaration","scope":2237,"src":"3376:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2230,"name":"address","nodeType":"ElementaryTypeName","src":"3376:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"target","nameLocation":"3400:6:3","nodeType":"VariableDeclaration","scope":2237,"src":"3392:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"3392:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2235,"mutability":"mutable","name":"selector","nameLocation":"3415:8:3","nodeType":"VariableDeclaration","scope":2237,"src":"3408:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2234,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3408:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3356:68:3"},"src":"3319:106:3"},{"errorSelector":"0813ada2","id":2241,"name":"AccessManagerInvalidInitialAdmin","nameLocation":"3436:32:3","nodeType":"ErrorDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"initialAdmin","nameLocation":"3477:12:3","nodeType":"VariableDeclaration","scope":2241,"src":"3469:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"3469:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3468:22:3"},"src":"3430:61:3"},{"documentation":{"id":2242,"nodeType":"StructuredDocumentation","src":"3497:1373:3","text":" @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n & {execute} workflow.\n This function is usually called by the targeted contract to control immediate execution of restricted functions.\n Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n previously set delay (not zero), then the function should return false and the caller should schedule the operation\n for future execution.\n If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n the operation can be executed if and only if delay is greater than 0.\n NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n NOTE: This function does not report the permissions of this manager itself. These are defined by the\n {_canCallSelf} function instead."},"functionSelector":"b7009613","id":2255,"implemented":false,"kind":"function","modifiers":[],"name":"canCall","nameLocation":"4884:7:3","nodeType":"FunctionDefinition","parameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2244,"mutability":"mutable","name":"caller","nameLocation":"4909:6:3","nodeType":"VariableDeclaration","scope":2255,"src":"4901:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2243,"name":"address","nodeType":"ElementaryTypeName","src":"4901:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"target","nameLocation":"4933:6:3","nodeType":"VariableDeclaration","scope":2255,"src":"4925:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2245,"name":"address","nodeType":"ElementaryTypeName","src":"4925:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"selector","nameLocation":"4956:8:3","nodeType":"VariableDeclaration","scope":2255,"src":"4949:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2247,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4949:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4891:79:3"},"returnParameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"allowed","nameLocation":"4999:7:3","nodeType":"VariableDeclaration","scope":2255,"src":"4994:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2250,"name":"bool","nodeType":"ElementaryTypeName","src":"4994:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2253,"mutability":"mutable","name":"delay","nameLocation":"5015:5:3","nodeType":"VariableDeclaration","scope":2255,"src":"5008:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2252,"name":"uint32","nodeType":"ElementaryTypeName","src":"5008:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4993:28:3"},"scope":2511,"src":"4875:147:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2256,"nodeType":"StructuredDocumentation","src":"5028:252:3","text":" @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n disabling any scheduling usage."},"functionSelector":"4665096d","id":2261,"implemented":false,"kind":"function","modifiers":[],"name":"expiration","nameLocation":"5294:10:3","nodeType":"FunctionDefinition","parameters":{"id":2257,"nodeType":"ParameterList","parameters":[],"src":"5304:2:3"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2261,"src":"5330:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2258,"name":"uint32","nodeType":"ElementaryTypeName","src":"5330:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5329:8:3"},"scope":2511,"src":"5285:53:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2262,"nodeType":"StructuredDocumentation","src":"5344:246:3","text":" @dev Minimum setback for all delay updates, with the exception of execution delays. It\n can be increased without setback (and reset via {revokeRole} in the case event of an\n accidental increase). Defaults to 5 days."},"functionSelector":"cc1b6c81","id":2267,"implemented":false,"kind":"function","modifiers":[],"name":"minSetback","nameLocation":"5604:10:3","nodeType":"FunctionDefinition","parameters":{"id":2263,"nodeType":"ParameterList","parameters":[],"src":"5614:2:3"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2267,"src":"5640:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2264,"name":"uint32","nodeType":"ElementaryTypeName","src":"5640:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5639:8:3"},"scope":2511,"src":"5595:53:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2268,"nodeType":"StructuredDocumentation","src":"5654:120:3","text":" @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"functionSelector":"a166aa89","id":2275,"implemented":false,"kind":"function","modifiers":[],"name":"isTargetClosed","nameLocation":"5788:14:3","nodeType":"FunctionDefinition","parameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"target","nameLocation":"5811:6:3","nodeType":"VariableDeclaration","scope":2275,"src":"5803:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2269,"name":"address","nodeType":"ElementaryTypeName","src":"5803:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5802:16:3"},"returnParameters":{"id":2274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2275,"src":"5842:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2272,"name":"bool","nodeType":"ElementaryTypeName","src":"5842:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5841:6:3"},"scope":2511,"src":"5779:69:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"5854:65:3","text":" @dev Get the role required to call a function."},"functionSelector":"6d5115bd","id":2285,"implemented":false,"kind":"function","modifiers":[],"name":"getTargetFunctionRole","nameLocation":"5933:21:3","nodeType":"FunctionDefinition","parameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"target","nameLocation":"5963:6:3","nodeType":"VariableDeclaration","scope":2285,"src":"5955:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"5955:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"selector","nameLocation":"5978:8:3","nodeType":"VariableDeclaration","scope":2285,"src":"5971:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2279,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5971:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5954:33:3"},"returnParameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2285,"src":"6011:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2282,"name":"uint64","nodeType":"ElementaryTypeName","src":"6011:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6010:8:3"},"scope":2511,"src":"5924:95:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2286,"nodeType":"StructuredDocumentation","src":"6025:127:3","text":" @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"functionSelector":"4c1da1e2","id":2293,"implemented":false,"kind":"function","modifiers":[],"name":"getTargetAdminDelay","nameLocation":"6166:19:3","nodeType":"FunctionDefinition","parameters":{"id":2289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"target","nameLocation":"6194:6:3","nodeType":"VariableDeclaration","scope":2293,"src":"6186:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2287,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6185:16:3"},"returnParameters":{"id":2292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"6225:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2290,"name":"uint32","nodeType":"ElementaryTypeName","src":"6225:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6224:8:3"},"scope":2511,"src":"6157:76:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2294,"nodeType":"StructuredDocumentation","src":"6239:265:3","text":" @dev Get the id of the role that acts as an admin for the given role.\n The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n an operation that is restricted to this role."},"functionSelector":"530dd456","id":2301,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"6518:12:3","nodeType":"FunctionDefinition","parameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"roleId","nameLocation":"6538:6:3","nodeType":"VariableDeclaration","scope":2301,"src":"6531:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2295,"name":"uint64","nodeType":"ElementaryTypeName","src":"6531:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6530:15:3"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2301,"src":"6569:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2298,"name":"uint64","nodeType":"ElementaryTypeName","src":"6569:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6568:8:3"},"scope":2511,"src":"6509:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2302,"nodeType":"StructuredDocumentation","src":"6583:185:3","text":" @dev Get the role that acts as a guardian for a given role.\n The guardian permission allows canceling operations that have been scheduled under the role."},"functionSelector":"0b0a93ba","id":2309,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleGuardian","nameLocation":"6782:15:3","nodeType":"FunctionDefinition","parameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"roleId","nameLocation":"6805:6:3","nodeType":"VariableDeclaration","scope":2309,"src":"6798:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2303,"name":"uint64","nodeType":"ElementaryTypeName","src":"6798:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6797:15:3"},"returnParameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2309,"src":"6836:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2306,"name":"uint64","nodeType":"ElementaryTypeName","src":"6836:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6835:8:3"},"scope":2511,"src":"6773:71:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2310,"nodeType":"StructuredDocumentation","src":"6850:286:3","text":" @dev Get the role current grant delay.\n Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"functionSelector":"12be8727","id":2317,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleGrantDelay","nameLocation":"7150:17:3","nodeType":"FunctionDefinition","parameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"roleId","nameLocation":"7175:6:3","nodeType":"VariableDeclaration","scope":2317,"src":"7168:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2311,"name":"uint64","nodeType":"ElementaryTypeName","src":"7168:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7167:15:3"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2317,"src":"7206:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2314,"name":"uint32","nodeType":"ElementaryTypeName","src":"7206:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"7205:8:3"},"scope":2511,"src":"7141:73:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2318,"nodeType":"StructuredDocumentation","src":"7220:599:3","text":" @dev Get the access details for a given account for a given role. These details include the timepoint at which\n membership becomes active, and the delay applied to all operation by this user that requires this permission\n level.\n Returns:\n [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n [1] Current execution delay for the account.\n [2] Pending execution delay for the account.\n [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"functionSelector":"3078f114","id":2333,"implemented":false,"kind":"function","modifiers":[],"name":"getAccess","nameLocation":"7833:9:3","nodeType":"FunctionDefinition","parameters":{"id":2323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"roleId","nameLocation":"7850:6:3","nodeType":"VariableDeclaration","scope":2333,"src":"7843:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2319,"name":"uint64","nodeType":"ElementaryTypeName","src":"7843:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2322,"mutability":"mutable","name":"account","nameLocation":"7866:7:3","nodeType":"VariableDeclaration","scope":2333,"src":"7858:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2321,"name":"address","nodeType":"ElementaryTypeName","src":"7858:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7842:32:3"},"returnParameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2333,"src":"7898:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2324,"name":"uint48","nodeType":"ElementaryTypeName","src":"7898:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2333,"src":"7906:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2326,"name":"uint32","nodeType":"ElementaryTypeName","src":"7906:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2333,"src":"7914:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2328,"name":"uint32","nodeType":"ElementaryTypeName","src":"7914:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2333,"src":"7922:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2330,"name":"uint48","nodeType":"ElementaryTypeName","src":"7922:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"7897:32:3"},"scope":2511,"src":"7824:106:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2334,"nodeType":"StructuredDocumentation","src":"7936:230:3","text":" @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n permission might be associated with an execution delay. {getAccess} can provide more details."},"functionSelector":"d1f856ee","id":2345,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"8180:7:3","nodeType":"FunctionDefinition","parameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"roleId","nameLocation":"8195:6:3","nodeType":"VariableDeclaration","scope":2345,"src":"8188:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2335,"name":"uint64","nodeType":"ElementaryTypeName","src":"8188:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2338,"mutability":"mutable","name":"account","nameLocation":"8211:7:3","nodeType":"VariableDeclaration","scope":2345,"src":"8203:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2337,"name":"address","nodeType":"ElementaryTypeName","src":"8203:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8187:32:3"},"returnParameters":{"id":2344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2345,"src":"8243:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2340,"name":"bool","nodeType":"ElementaryTypeName","src":"8243:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2345,"src":"8249:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2342,"name":"uint32","nodeType":"ElementaryTypeName","src":"8249:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8242:14:3"},"scope":2511,"src":"8171:86:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2346,"nodeType":"StructuredDocumentation","src":"8263:208:3","text":" @dev Give a label to a role, for improved role discoverability by UIs.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleLabel} event."},"functionSelector":"853551b8","id":2353,"implemented":false,"kind":"function","modifiers":[],"name":"labelRole","nameLocation":"8485:9:3","nodeType":"FunctionDefinition","parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2348,"mutability":"mutable","name":"roleId","nameLocation":"8502:6:3","nodeType":"VariableDeclaration","scope":2353,"src":"8495:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2347,"name":"uint64","nodeType":"ElementaryTypeName","src":"8495:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"label","nameLocation":"8526:5:3","nodeType":"VariableDeclaration","scope":2353,"src":"8510:21:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2349,"name":"string","nodeType":"ElementaryTypeName","src":"8510:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8494:38:3"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[],"src":"8541:0:3"},"scope":2511,"src":"8476:66:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2354,"nodeType":"StructuredDocumentation","src":"8548:1222:3","text":" @dev Add `account` to `roleId`, or change its execution delay.\n This gives the account the authorization to call any function that is restricted to this role. An optional\n execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n If the account has already been granted this role, the execution delay will be updated. This update is not\n immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n Requirements:\n - the caller must be an admin for the role (see {getRoleAdmin})\n - granted role must not be the `PUBLIC_ROLE`\n Emits a {RoleGranted} event."},"functionSelector":"25c471a0","id":2363,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"9784:9:3","nodeType":"FunctionDefinition","parameters":{"id":2361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2356,"mutability":"mutable","name":"roleId","nameLocation":"9801:6:3","nodeType":"VariableDeclaration","scope":2363,"src":"9794:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2355,"name":"uint64","nodeType":"ElementaryTypeName","src":"9794:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2358,"mutability":"mutable","name":"account","nameLocation":"9817:7:3","nodeType":"VariableDeclaration","scope":2363,"src":"9809:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2357,"name":"address","nodeType":"ElementaryTypeName","src":"9809:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2360,"mutability":"mutable","name":"executionDelay","nameLocation":"9833:14:3","nodeType":"VariableDeclaration","scope":2363,"src":"9826:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2359,"name":"uint32","nodeType":"ElementaryTypeName","src":"9826:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9793:55:3"},"returnParameters":{"id":2362,"nodeType":"ParameterList","parameters":[],"src":"9857:0:3"},"scope":2511,"src":"9775:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2364,"nodeType":"StructuredDocumentation","src":"9864:377:3","text":" @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n no effect.\n Requirements:\n - the caller must be an admin for the role (see {getRoleAdmin})\n - revoked role must not be the `PUBLIC_ROLE`\n Emits a {RoleRevoked} event if the account had the role."},"functionSelector":"b7d2b162","id":2371,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"10255:10:3","nodeType":"FunctionDefinition","parameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2366,"mutability":"mutable","name":"roleId","nameLocation":"10273:6:3","nodeType":"VariableDeclaration","scope":2371,"src":"10266:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2365,"name":"uint64","nodeType":"ElementaryTypeName","src":"10266:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2368,"mutability":"mutable","name":"account","nameLocation":"10289:7:3","nodeType":"VariableDeclaration","scope":2371,"src":"10281:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2367,"name":"address","nodeType":"ElementaryTypeName","src":"10281:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10265:32:3"},"returnParameters":{"id":2370,"nodeType":"ParameterList","parameters":[],"src":"10306:0:3"},"scope":2511,"src":"10246:61:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2372,"nodeType":"StructuredDocumentation","src":"10313:317:3","text":" @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n the role this call has no effect.\n Requirements:\n - the caller must be `callerConfirmation`.\n Emits a {RoleRevoked} event if the account had the role."},"functionSelector":"fe0776f5","id":2379,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"10644:12:3","nodeType":"FunctionDefinition","parameters":{"id":2377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"roleId","nameLocation":"10664:6:3","nodeType":"VariableDeclaration","scope":2379,"src":"10657:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2373,"name":"uint64","nodeType":"ElementaryTypeName","src":"10657:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"callerConfirmation","nameLocation":"10680:18:3","nodeType":"VariableDeclaration","scope":2379,"src":"10672:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2375,"name":"address","nodeType":"ElementaryTypeName","src":"10672:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10656:43:3"},"returnParameters":{"id":2378,"nodeType":"ParameterList","parameters":[],"src":"10708:0:3"},"scope":2511,"src":"10635:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"10715:184:3","text":" @dev Change admin role for a given role.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleAdminChanged} event"},"functionSelector":"30cae187","id":2387,"implemented":false,"kind":"function","modifiers":[],"name":"setRoleAdmin","nameLocation":"10913:12:3","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"roleId","nameLocation":"10933:6:3","nodeType":"VariableDeclaration","scope":2387,"src":"10926:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2381,"name":"uint64","nodeType":"ElementaryTypeName","src":"10926:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"admin","nameLocation":"10948:5:3","nodeType":"VariableDeclaration","scope":2387,"src":"10941:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2383,"name":"uint64","nodeType":"ElementaryTypeName","src":"10941:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10925:29:3"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[],"src":"10963:0:3"},"scope":2511,"src":"10904:60:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"10970:190:3","text":" @dev Change guardian role for a given role.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleGuardianChanged} event"},"functionSelector":"52962952","id":2395,"implemented":false,"kind":"function","modifiers":[],"name":"setRoleGuardian","nameLocation":"11174:15:3","nodeType":"FunctionDefinition","parameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"roleId","nameLocation":"11197:6:3","nodeType":"VariableDeclaration","scope":2395,"src":"11190:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2389,"name":"uint64","nodeType":"ElementaryTypeName","src":"11190:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2392,"mutability":"mutable","name":"guardian","nameLocation":"11212:8:3","nodeType":"VariableDeclaration","scope":2395,"src":"11205:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2391,"name":"uint64","nodeType":"ElementaryTypeName","src":"11205:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11189:32:3"},"returnParameters":{"id":2394,"nodeType":"ParameterList","parameters":[],"src":"11230:0:3"},"scope":2511,"src":"11165:66:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"11237:196:3","text":" @dev Update the delay for granting a `roleId`.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleGrantDelayChanged} event."},"functionSelector":"a64d95ce","id":2403,"implemented":false,"kind":"function","modifiers":[],"name":"setGrantDelay","nameLocation":"11447:13:3","nodeType":"FunctionDefinition","parameters":{"id":2401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"roleId","nameLocation":"11468:6:3","nodeType":"VariableDeclaration","scope":2403,"src":"11461:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2397,"name":"uint64","nodeType":"ElementaryTypeName","src":"11461:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2400,"mutability":"mutable","name":"newDelay","nameLocation":"11483:8:3","nodeType":"VariableDeclaration","scope":2403,"src":"11476:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2399,"name":"uint32","nodeType":"ElementaryTypeName","src":"11476:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"11460:32:3"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[],"src":"11501:0:3"},"scope":2511,"src":"11438:64:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2404,"nodeType":"StructuredDocumentation","src":"11508:267:3","text":" @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetFunctionRoleUpdated} event per selector."},"functionSelector":"08d6122d","id":2414,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetFunctionRole","nameLocation":"11789:21:3","nodeType":"FunctionDefinition","parameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"target","nameLocation":"11819:6:3","nodeType":"VariableDeclaration","scope":2414,"src":"11811:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2405,"name":"address","nodeType":"ElementaryTypeName","src":"11811:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2409,"mutability":"mutable","name":"selectors","nameLocation":"11845:9:3","nodeType":"VariableDeclaration","scope":2414,"src":"11827:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_calldata_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":2407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"11827:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2408,"nodeType":"ArrayTypeName","src":"11827:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"},{"constant":false,"id":2411,"mutability":"mutable","name":"roleId","nameLocation":"11863:6:3","nodeType":"VariableDeclaration","scope":2414,"src":"11856:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2410,"name":"uint64","nodeType":"ElementaryTypeName","src":"11856:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11810:60:3"},"returnParameters":{"id":2413,"nodeType":"ParameterList","parameters":[],"src":"11879:0:3"},"scope":2511,"src":"11780:100:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"11886:229:3","text":" @dev Set the delay for changing the configuration of a given target contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetAdminDelayUpdated} event."},"functionSelector":"d22b5989","id":2422,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetAdminDelay","nameLocation":"12129:19:3","nodeType":"FunctionDefinition","parameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"target","nameLocation":"12157:6:3","nodeType":"VariableDeclaration","scope":2422,"src":"12149:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2416,"name":"address","nodeType":"ElementaryTypeName","src":"12149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2419,"mutability":"mutable","name":"newDelay","nameLocation":"12172:8:3","nodeType":"VariableDeclaration","scope":2422,"src":"12165:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2418,"name":"uint32","nodeType":"ElementaryTypeName","src":"12165:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12148:33:3"},"returnParameters":{"id":2421,"nodeType":"ParameterList","parameters":[],"src":"12190:0:3"},"scope":2511,"src":"12120:71:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"12197:181:3","text":" @dev Set the closed flag for a contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetClosed} event."},"functionSelector":"167bd395","id":2430,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetClosed","nameLocation":"12392:15:3","nodeType":"FunctionDefinition","parameters":{"id":2428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"target","nameLocation":"12416:6:3","nodeType":"VariableDeclaration","scope":2430,"src":"12408:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2424,"name":"address","nodeType":"ElementaryTypeName","src":"12408:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2427,"mutability":"mutable","name":"closed","nameLocation":"12429:6:3","nodeType":"VariableDeclaration","scope":2430,"src":"12424:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2426,"name":"bool","nodeType":"ElementaryTypeName","src":"12424:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12407:29:3"},"returnParameters":{"id":2429,"nodeType":"ParameterList","parameters":[],"src":"12445:0:3"},"scope":2511,"src":"12383:63:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2431,"nodeType":"StructuredDocumentation","src":"12452:209:3","text":" @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n operation is not yet scheduled, has expired, was executed, or was canceled."},"functionSelector":"3adc277a","id":2438,"implemented":false,"kind":"function","modifiers":[],"name":"getSchedule","nameLocation":"12675:11:3","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"id","nameLocation":"12695:2:3","nodeType":"VariableDeclaration","scope":2438,"src":"12687:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12687:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12686:12:3"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2438,"src":"12722:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2435,"name":"uint48","nodeType":"ElementaryTypeName","src":"12722:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"12721:8:3"},"scope":2511,"src":"12666:64:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"12736:152:3","text":" @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n been scheduled."},"functionSelector":"4136a33c","id":2446,"implemented":false,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"12902:8:3","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"id","nameLocation":"12919:2:3","nodeType":"VariableDeclaration","scope":2446,"src":"12911:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12911:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12910:12:3"},"returnParameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2446,"src":"12946:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2443,"name":"uint32","nodeType":"ElementaryTypeName","src":"12946:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12945:8:3"},"scope":2511,"src":"12893:61:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2447,"nodeType":"StructuredDocumentation","src":"12960:1068:3","text":" @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n required for the caller. The special value zero will automatically set the earliest possible time.\n Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n Emits a {OperationScheduled} event.\n NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n contract if it is using standard Solidity ABI encoding."},"functionSelector":"f801a698","id":2460,"implemented":false,"kind":"function","modifiers":[],"name":"schedule","nameLocation":"14042:8:3","nodeType":"FunctionDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"mutability":"mutable","name":"target","nameLocation":"14059:6:3","nodeType":"VariableDeclaration","scope":2460,"src":"14051:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2448,"name":"address","nodeType":"ElementaryTypeName","src":"14051:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2451,"mutability":"mutable","name":"data","nameLocation":"14082:4:3","nodeType":"VariableDeclaration","scope":2460,"src":"14067:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2450,"name":"bytes","nodeType":"ElementaryTypeName","src":"14067:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"when","nameLocation":"14095:4:3","nodeType":"VariableDeclaration","scope":2460,"src":"14088:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":2452,"name":"uint48","nodeType":"ElementaryTypeName","src":"14088:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14050:50:3"},"returnParameters":{"id":2459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"14119:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14119:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"14128:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2457,"name":"uint32","nodeType":"ElementaryTypeName","src":"14128:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14118:17:3"},"scope":2511,"src":"14033:103:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"14142:451:3","text":" @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n execution delay is 0.\n Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"functionSelector":"1cff79cd","id":2470,"implemented":false,"kind":"function","modifiers":[],"name":"execute","nameLocation":"14607:7:3","nodeType":"FunctionDefinition","parameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"target","nameLocation":"14623:6:3","nodeType":"VariableDeclaration","scope":2470,"src":"14615:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2462,"name":"address","nodeType":"ElementaryTypeName","src":"14615:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"data","nameLocation":"14646:4:3","nodeType":"VariableDeclaration","scope":2470,"src":"14631:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2464,"name":"bytes","nodeType":"ElementaryTypeName","src":"14631:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14614:37:3"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2470,"src":"14678:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2467,"name":"uint32","nodeType":"ElementaryTypeName","src":"14678:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14677:8:3"},"scope":2511,"src":"14598:88:3","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"14692:339:3","text":" @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n operation that is cancelled.\n Requirements:\n - the caller must be the proposer, a guardian of the targeted function, or a global admin\n Emits a {OperationCanceled} event."},"functionSelector":"d6bb62c6","id":2482,"implemented":false,"kind":"function","modifiers":[],"name":"cancel","nameLocation":"15045:6:3","nodeType":"FunctionDefinition","parameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"caller","nameLocation":"15060:6:3","nodeType":"VariableDeclaration","scope":2482,"src":"15052:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"15052:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"target","nameLocation":"15076:6:3","nodeType":"VariableDeclaration","scope":2482,"src":"15068:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2474,"name":"address","nodeType":"ElementaryTypeName","src":"15068:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"data","nameLocation":"15099:4:3","nodeType":"VariableDeclaration","scope":2482,"src":"15084:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2476,"name":"bytes","nodeType":"ElementaryTypeName","src":"15084:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15051:53:3"},"returnParameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2482,"src":"15123:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2479,"name":"uint32","nodeType":"ElementaryTypeName","src":"15123:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15122:8:3"},"scope":2511,"src":"15036:95:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2483,"nodeType":"StructuredDocumentation","src":"15137:434:3","text":" @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n with all the verifications that it implies.\n Emit a {OperationExecuted} event."},"functionSelector":"94c7d7ee","id":2490,"implemented":false,"kind":"function","modifiers":[],"name":"consumeScheduledOp","nameLocation":"15585:18:3","nodeType":"FunctionDefinition","parameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"caller","nameLocation":"15612:6:3","nodeType":"VariableDeclaration","scope":2490,"src":"15604:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"15604:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2487,"mutability":"mutable","name":"data","nameLocation":"15635:4:3","nodeType":"VariableDeclaration","scope":2490,"src":"15620:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2486,"name":"bytes","nodeType":"ElementaryTypeName","src":"15620:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15603:37:3"},"returnParameters":{"id":2489,"nodeType":"ParameterList","parameters":[],"src":"15649:0:3"},"scope":2511,"src":"15576:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2491,"nodeType":"StructuredDocumentation","src":"15656:64:3","text":" @dev Hashing function for delayed operations."},"functionSelector":"abd9bd2a","id":2502,"implemented":false,"kind":"function","modifiers":[],"name":"hashOperation","nameLocation":"15734:13:3","nodeType":"FunctionDefinition","parameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2493,"mutability":"mutable","name":"caller","nameLocation":"15756:6:3","nodeType":"VariableDeclaration","scope":2502,"src":"15748:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2492,"name":"address","nodeType":"ElementaryTypeName","src":"15748:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2495,"mutability":"mutable","name":"target","nameLocation":"15772:6:3","nodeType":"VariableDeclaration","scope":2502,"src":"15764:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2494,"name":"address","nodeType":"ElementaryTypeName","src":"15764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2497,"mutability":"mutable","name":"data","nameLocation":"15795:4:3","nodeType":"VariableDeclaration","scope":2502,"src":"15780:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2496,"name":"bytes","nodeType":"ElementaryTypeName","src":"15780:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15747:53:3"},"returnParameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2502,"src":"15824:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15824:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15823:9:3"},"scope":2511,"src":"15725:108:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2503,"nodeType":"StructuredDocumentation","src":"15839:169:3","text":" @dev Changes the authority of a target managed by this manager instance.\n Requirements:\n - the caller must be a global admin"},"functionSelector":"18ff183c","id":2510,"implemented":false,"kind":"function","modifiers":[],"name":"updateAuthority","nameLocation":"16022:15:3","nodeType":"FunctionDefinition","parameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2505,"mutability":"mutable","name":"target","nameLocation":"16046:6:3","nodeType":"VariableDeclaration","scope":2510,"src":"16038:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2504,"name":"address","nodeType":"ElementaryTypeName","src":"16038:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2507,"mutability":"mutable","name":"newAuthority","nameLocation":"16062:12:3","nodeType":"VariableDeclaration","scope":2510,"src":"16054:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2506,"name":"address","nodeType":"ElementaryTypeName","src":"16054:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16037:38:3"},"returnParameters":{"id":2509,"nodeType":"ParameterList","parameters":[],"src":"16084:0:3"},"scope":2511,"src":"16013:72:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2512,"src":"246:15841:3","usedErrors":[2187,2191,2195,2199,2203,2207,2209,2215,2223,2227,2237,2241],"usedEvents":[2094,2101,2108,2115,2128,2135,2142,2149,2158,2165,2174,2183]}],"src":"117:15971:3"},"id":3},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2589]},"id":2590,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2513,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"132:70:4","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2589,"linearizedBaseContracts":[2589],"name":"IERC20","nameLocation":"213:6:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2515,"nodeType":"StructuredDocumentation","src":"226:158:4","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2523,"name":"Transfer","nameLocation":"395:8:4","nodeType":"EventDefinition","parameters":{"id":2522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:4","nodeType":"VariableDeclaration","scope":2523,"src":"404:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2516,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2519,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:4","nodeType":"VariableDeclaration","scope":2523,"src":"426:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2518,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2521,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:4","nodeType":"VariableDeclaration","scope":2523,"src":"446:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2520,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:4"},"src":"389:72:4"},{"anonymous":false,"documentation":{"id":2524,"nodeType":"StructuredDocumentation","src":"467:148:4","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2532,"name":"Approval","nameLocation":"626:8:4","nodeType":"EventDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2526,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:4","nodeType":"VariableDeclaration","scope":2532,"src":"635:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2525,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2528,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:4","nodeType":"VariableDeclaration","scope":2532,"src":"658:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2527,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2530,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:4","nodeType":"VariableDeclaration","scope":2532,"src":"683:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:4"},"src":"620:78:4"},{"documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"704:65:4","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":2538,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:4","nodeType":"FunctionDefinition","parameters":{"id":2534,"nodeType":"ParameterList","parameters":[],"src":"794:2:4"},"returnParameters":{"id":2537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2538,"src":"820:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:4"},"scope":2589,"src":"774:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2539,"nodeType":"StructuredDocumentation","src":"835:71:4","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":2546,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:4","nodeType":"FunctionDefinition","parameters":{"id":2542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2541,"mutability":"mutable","name":"account","nameLocation":"938:7:4","nodeType":"VariableDeclaration","scope":2546,"src":"930:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2540,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:4"},"returnParameters":{"id":2545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2546,"src":"970:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2543,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:4"},"scope":2589,"src":"911:68:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2547,"nodeType":"StructuredDocumentation","src":"985:213:4","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2556,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:4","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2549,"mutability":"mutable","name":"to","nameLocation":"1229:2:4","nodeType":"VariableDeclaration","scope":2556,"src":"1221:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2548,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"value","nameLocation":"1241:5:4","nodeType":"VariableDeclaration","scope":2556,"src":"1233:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:4"},"returnParameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2556,"src":"1266:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2553,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:4"},"scope":2589,"src":"1203:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2557,"nodeType":"StructuredDocumentation","src":"1278:264:4","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2566,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:4","nodeType":"FunctionDefinition","parameters":{"id":2562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"owner","nameLocation":"1574:5:4","nodeType":"VariableDeclaration","scope":2566,"src":"1566:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2558,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2561,"mutability":"mutable","name":"spender","nameLocation":"1589:7:4","nodeType":"VariableDeclaration","scope":2566,"src":"1581:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2560,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:4"},"returnParameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"1621:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2563,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:4"},"scope":2589,"src":"1547:83:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"1636:667:4","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2576,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:4","nodeType":"FunctionDefinition","parameters":{"id":2572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"spender","nameLocation":"2333:7:4","nodeType":"VariableDeclaration","scope":2576,"src":"2325:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2571,"mutability":"mutable","name":"value","nameLocation":"2350:5:4","nodeType":"VariableDeclaration","scope":2576,"src":"2342:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2570,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:4"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2576,"src":"2375:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2573,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:4"},"scope":2589,"src":"2308:73:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2577,"nodeType":"StructuredDocumentation","src":"2387:297:4","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2588,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:4","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"from","nameLocation":"2719:4:4","nodeType":"VariableDeclaration","scope":2588,"src":"2711:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2578,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2581,"mutability":"mutable","name":"to","nameLocation":"2733:2:4","nodeType":"VariableDeclaration","scope":2588,"src":"2725:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2580,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2583,"mutability":"mutable","name":"value","nameLocation":"2745:5:4","nodeType":"VariableDeclaration","scope":2588,"src":"2737:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:4"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2588,"src":"2770:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2585,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:4"},"scope":2589,"src":"2689:87:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2590,"src":"203:2575:4","usedErrors":[],"usedEvents":[2523,2532]}],"src":"106:2673:4"},"id":4},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[2589],"IERC20Metadata":[2615]},"id":2616,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2591,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2616,"sourceUnit":2590,"src":"151:37:5","symbolAliases":[{"foreign":{"id":2592,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"159:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2595,"name":"IERC20","nameLocations":["305:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":2589,"src":"305:6:5"},"id":2596,"nodeType":"InheritanceSpecifier","src":"305:6:5"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2594,"nodeType":"StructuredDocumentation","src":"190:86:5","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":2615,"linearizedBaseContracts":[2615,2589],"name":"IERC20Metadata","nameLocation":"287:14:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2597,"nodeType":"StructuredDocumentation","src":"318:54:5","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2602,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:5","nodeType":"FunctionDefinition","parameters":{"id":2598,"nodeType":"ParameterList","parameters":[],"src":"390:2:5"},"returnParameters":{"id":2601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2602,"src":"416:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2599,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:5"},"scope":2615,"src":"377:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2603,"nodeType":"StructuredDocumentation","src":"437:56:5","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2608,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:5","nodeType":"FunctionDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[],"src":"513:2:5"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2608,"src":"539:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2605,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:5"},"scope":2615,"src":"498:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2609,"nodeType":"StructuredDocumentation","src":"560:65:5","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2614,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:5","nodeType":"FunctionDefinition","parameters":{"id":2610,"nodeType":"ParameterList","parameters":[],"src":"647:2:5"},"returnParameters":{"id":2613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2614,"src":"673:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2611,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:5"},"scope":2615,"src":"630:50:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2616,"src":"277:405:5","usedErrors":[],"usedEvents":[2523,2532]}],"src":"125:558:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2868]},"id":2869,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2617,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2618,"nodeType":"StructuredDocumentation","src":"127:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2868,"linearizedBaseContracts":[2868],"name":"Address","nameLocation":"203:7:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2619,"nodeType":"StructuredDocumentation","src":"217:94:6","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":2623,"name":"AddressInsufficientBalance","nameLocation":"322:26:6","nodeType":"ErrorDefinition","parameters":{"id":2622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"account","nameLocation":"357:7:6","nodeType":"VariableDeclaration","scope":2623,"src":"349:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2620,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:6"},"src":"316:50:6"},{"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"372:75:6","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":2628,"name":"AddressEmptyCode","nameLocation":"458:16:6","nodeType":"ErrorDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"target","nameLocation":"483:6:6","nodeType":"VariableDeclaration","scope":2628,"src":"475:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2625,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:6"},"src":"452:39:6"},{"documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"497:89:6","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":2631,"name":"FailedInnerCall","nameLocation":"597:15:6","nodeType":"ErrorDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[],"src":"612:2:6"},"src":"591:24:6"},{"body":{"id":2671,"nodeType":"Block","src":"1602:260:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2641,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}],"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2639,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:6","typeDescriptions":{}}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:6","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2644,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"1640:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2654,"nodeType":"IfStatement","src":"1612:109:6","trueBody":{"id":2653,"nodeType":"Block","src":"1648:73:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2649,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}],"id":2648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2647,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:6","typeDescriptions":{}}},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2646,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"1669:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2652,"nodeType":"RevertStatement","src":"1662:48:6"}]}},{"assignments":[2656,null],"declarations":[{"constant":false,"id":2656,"mutability":"mutable","name":"success","nameLocation":"1737:7:6","nodeType":"VariableDeclaration","scope":2671,"src":"1732:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2655,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2663,"initialValue":{"arguments":[{"hexValue":"","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2657,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"1750:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:6","memberName":"call","nodeType":"MemberAccess","src":"1750:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2659,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"1772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:6"},{"condition":{"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:6","subExpression":{"id":2664,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"1798:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2670,"nodeType":"IfStatement","src":"1793:63:6","trueBody":{"id":2669,"nodeType":"Block","src":"1807:49:6","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2666,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"1828:15:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2668,"nodeType":"RevertStatement","src":"1821:24:6"}]}}]},"documentation":{"id":2632,"nodeType":"StructuredDocumentation","src":"621:905:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2672,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:6","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:6","nodeType":"VariableDeclaration","scope":2672,"src":"1550:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2633,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"amount","nameLocation":"1585:6:6","nodeType":"VariableDeclaration","scope":2672,"src":"1577:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:6"},"returnParameters":{"id":2638,"nodeType":"ParameterList","parameters":[],"src":"1602:0:6"},"scope":2868,"src":"1531:331:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2688,"nodeType":"Block","src":"2794:62:6","statements":[{"expression":{"arguments":[{"id":2683,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"2833:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2684,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"2841:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2682,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"2811:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2681,"id":2687,"nodeType":"Return","src":"2804:45:6"}]},"documentation":{"id":2673,"nodeType":"StructuredDocumentation","src":"1868:832:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":2689,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:6","nodeType":"FunctionDefinition","parameters":{"id":2678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"mutability":"mutable","name":"target","nameLocation":"2735:6:6","nodeType":"VariableDeclaration","scope":2689,"src":"2727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2677,"mutability":"mutable","name":"data","nameLocation":"2756:4:6","nodeType":"VariableDeclaration","scope":2689,"src":"2743:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2676,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:6"},"returnParameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2689,"src":"2780:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2679,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:6"},"scope":2868,"src":"2705:151:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2734,"nodeType":"Block","src":"3293:279:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2703,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}],"id":2702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2701,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:6","typeDescriptions":{}}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:6","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"3331:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2716,"nodeType":"IfStatement","src":"3303:108:6","trueBody":{"id":2715,"nodeType":"Block","src":"3338:73:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2711,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2868","typeString":"library Address"}],"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:6","typeDescriptions":{}}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2708,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"3359:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2714,"nodeType":"RevertStatement","src":"3352:48:6"}]}},{"assignments":[2718,2720],"declarations":[{"constant":false,"id":2718,"mutability":"mutable","name":"success","nameLocation":"3426:7:6","nodeType":"VariableDeclaration","scope":2734,"src":"3421:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2717,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2720,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:6","nodeType":"VariableDeclaration","scope":2734,"src":"3435:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2719,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2727,"initialValue":{"arguments":[{"id":2725,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"3488:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2721,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"3462:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:6","memberName":"call","nodeType":"MemberAccess","src":"3462:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"3481:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:6"},{"expression":{"arguments":[{"id":2729,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"3537:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2730,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"3545:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2731,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"3554:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2728,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"3510:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2700,"id":2733,"nodeType":"Return","src":"3503:62:6"}]},"documentation":{"id":2690,"nodeType":"StructuredDocumentation","src":"2862:313:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":2735,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:6","nodeType":"FunctionDefinition","parameters":{"id":2697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"target","nameLocation":"3219:6:6","nodeType":"VariableDeclaration","scope":2735,"src":"3211:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2691,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"data","nameLocation":"3240:4:6","nodeType":"VariableDeclaration","scope":2735,"src":"3227:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2693,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"value","nameLocation":"3254:5:6","nodeType":"VariableDeclaration","scope":2735,"src":"3246:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2695,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:6"},"returnParameters":{"id":2700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2699,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2735,"src":"3279:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2698,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:6"},"scope":2868,"src":"3180:392:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2760,"nodeType":"Block","src":"3811:154:6","statements":[{"assignments":[2746,2748],"declarations":[{"constant":false,"id":2746,"mutability":"mutable","name":"success","nameLocation":"3827:7:6","nodeType":"VariableDeclaration","scope":2760,"src":"3822:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2745,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2748,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:6","nodeType":"VariableDeclaration","scope":2760,"src":"3836:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2747,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2753,"initialValue":{"arguments":[{"id":2751,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2740,"src":"3881:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2749,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2738,"src":"3863:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:6"},{"expression":{"arguments":[{"id":2755,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2738,"src":"3930:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2756,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"3938:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2757,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"3947:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2754,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"3903:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2744,"id":2759,"nodeType":"Return","src":"3896:62:6"}]},"documentation":{"id":2736,"nodeType":"StructuredDocumentation","src":"3578:128:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":2761,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:6","nodeType":"FunctionDefinition","parameters":{"id":2741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2738,"mutability":"mutable","name":"target","nameLocation":"3747:6:6","nodeType":"VariableDeclaration","scope":2761,"src":"3739:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2737,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2740,"mutability":"mutable","name":"data","nameLocation":"3768:4:6","nodeType":"VariableDeclaration","scope":2761,"src":"3755:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2739,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:6"},"returnParameters":{"id":2744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2761,"src":"3797:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2742,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:6"},"scope":2868,"src":"3711:254:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2786,"nodeType":"Block","src":"4203:156:6","statements":[{"assignments":[2772,2774],"declarations":[{"constant":false,"id":2772,"mutability":"mutable","name":"success","nameLocation":"4219:7:6","nodeType":"VariableDeclaration","scope":2786,"src":"4214:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2771,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2774,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:6","nodeType":"VariableDeclaration","scope":2786,"src":"4228:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2773,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2779,"initialValue":{"arguments":[{"id":2777,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"4275:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2775,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"4255:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:6"},{"expression":{"arguments":[{"id":2781,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2764,"src":"4324:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2782,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"4332:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2783,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"4341:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2780,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"4297:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2770,"id":2785,"nodeType":"Return","src":"4290:62:6"}]},"documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"3971:130:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":2787,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:6","nodeType":"FunctionDefinition","parameters":{"id":2767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"target","nameLocation":"4144:6:6","nodeType":"VariableDeclaration","scope":2787,"src":"4136:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2763,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2766,"mutability":"mutable","name":"data","nameLocation":"4165:4:6","nodeType":"VariableDeclaration","scope":2787,"src":"4152:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2765,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:6"},"returnParameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2787,"src":"4189:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2768,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:6"},"scope":2868,"src":"4106:253:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2826,"nodeType":"Block","src":"4783:424:6","statements":[{"condition":{"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:6","subExpression":{"id":2799,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"4798:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2824,"nodeType":"Block","src":"4857:344:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2806,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"5045:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:6","memberName":"length","nodeType":"MemberAccess","src":"5045:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2810,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"5071:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:6","memberName":"code","nodeType":"MemberAccess","src":"5071:11:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:6","memberName":"length","nodeType":"MemberAccess","src":"5071:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2821,"nodeType":"IfStatement","src":"5041:119:6","trueBody":{"id":2820,"nodeType":"Block","src":"5096:64:6","statements":[{"errorCall":{"arguments":[{"id":2817,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"5138:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2816,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"5121:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2819,"nodeType":"RevertStatement","src":"5114:31:6"}]}},{"expression":{"id":2822,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"5180:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2798,"id":2823,"nodeType":"Return","src":"5173:17:6"}]},"id":2825,"nodeType":"IfStatement","src":"4793:408:6","trueBody":{"id":2805,"nodeType":"Block","src":"4807:44:6","statements":[{"expression":{"arguments":[{"id":2802,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"4829:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2801,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"4821:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2804,"nodeType":"ExpressionStatement","src":"4821:19:6"}]}}]},"documentation":{"id":2788,"nodeType":"StructuredDocumentation","src":"4365:255:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:6","nodeType":"FunctionDefinition","parameters":{"id":2795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"target","nameLocation":"4678:6:6","nodeType":"VariableDeclaration","scope":2827,"src":"4670:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2789,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2792,"mutability":"mutable","name":"success","nameLocation":"4699:7:6","nodeType":"VariableDeclaration","scope":2827,"src":"4694:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2791,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2794,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:6","nodeType":"VariableDeclaration","scope":2827,"src":"4716:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2793,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:6"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2827,"src":"4769:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2796,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:6"},"scope":2868,"src":"4625:582:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2848,"nodeType":"Block","src":"5509:122:6","statements":[{"condition":{"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:6","subExpression":{"id":2837,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"5524:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2846,"nodeType":"Block","src":"5583:42:6","statements":[{"expression":{"id":2844,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"5604:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2836,"id":2845,"nodeType":"Return","src":"5597:17:6"}]},"id":2847,"nodeType":"IfStatement","src":"5519:106:6","trueBody":{"id":2843,"nodeType":"Block","src":"5533:44:6","statements":[{"expression":{"arguments":[{"id":2840,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"5555:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2839,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"5547:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2842,"nodeType":"ExpressionStatement","src":"5547:19:6"}]}}]},"documentation":{"id":2828,"nodeType":"StructuredDocumentation","src":"5213:189:6","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":2849,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:6","nodeType":"FunctionDefinition","parameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2830,"mutability":"mutable","name":"success","nameLocation":"5438:7:6","nodeType":"VariableDeclaration","scope":2849,"src":"5433:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2829,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:6","nodeType":"VariableDeclaration","scope":2849,"src":"5447:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2831,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:6"},"returnParameters":{"id":2836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2849,"src":"5495:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2834,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:6"},"scope":2868,"src":"5407:224:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2866,"nodeType":"Block","src":"5798:461:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2855,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"5874:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:6","memberName":"length","nodeType":"MemberAccess","src":"5874:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2864,"nodeType":"Block","src":"6204:49:6","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2861,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"6225:15:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2863,"nodeType":"RevertStatement","src":"6218:24:6"}]},"id":2865,"nodeType":"IfStatement","src":"5870:383:6","trueBody":{"id":2860,"nodeType":"Block","src":"5897:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"6055:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6073:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"6102:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6096:5:6"},"nodeType":"YulFunctionCall","src":"6096:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"6077:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6141:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"6145:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6137:3:6"},"nodeType":"YulFunctionCall","src":"6137:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"6158:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6130:6:6"},"nodeType":"YulFunctionCall","src":"6130:44:6"},"nodeType":"YulExpressionStatement","src":"6130:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2852,"isOffset":false,"isSlot":false,"src":"6102:10:6","valueSize":1},{"declaration":2852,"isOffset":false,"isSlot":false,"src":"6145:10:6","valueSize":1}],"id":2859,"nodeType":"InlineAssembly","src":"6046:142:6"}]}}]},"documentation":{"id":2850,"nodeType":"StructuredDocumentation","src":"5637:101:6","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":2867,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:6","nodeType":"FunctionDefinition","parameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:6","nodeType":"VariableDeclaration","scope":2867,"src":"5760:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2851,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:6"},"returnParameters":{"id":2854,"nodeType":"ParameterList","parameters":[],"src":"5798:0:6"},"scope":2868,"src":"5743:516:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2869,"src":"195:6066:6","usedErrors":[2623,2628,2631],"usedEvents":[]}],"src":"101:6161:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2898]},"id":2899,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2870,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"127:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2898,"linearizedBaseContracts":[2898],"name":"Context","nameLocation":"642:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":2879,"nodeType":"Block","src":"718:34:7","statements":[{"expression":{"expression":{"id":2876,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:7","memberName":"sender","nodeType":"MemberAccess","src":"735:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2875,"id":2878,"nodeType":"Return","src":"728:17:7"}]},"id":2880,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:7","nodeType":"FunctionDefinition","parameters":{"id":2872,"nodeType":"ParameterList","parameters":[],"src":"675:2:7"},"returnParameters":{"id":2875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2880,"src":"709:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2873,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:7"},"scope":2898,"src":"656:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2888,"nodeType":"Block","src":"825:32:7","statements":[{"expression":{"expression":{"id":2885,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:7","memberName":"data","nodeType":"MemberAccess","src":"842:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2884,"id":2887,"nodeType":"Return","src":"835:15:7"}]},"id":2889,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:7","nodeType":"FunctionDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[],"src":"775:2:7"},"returnParameters":{"id":2884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2889,"src":"809:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2882,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:7"},"scope":2898,"src":"758:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2896,"nodeType":"Block","src":"935:25:7","statements":[{"expression":{"hexValue":"30","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2893,"id":2895,"nodeType":"Return","src":"945:8:7"}]},"id":2897,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:7","nodeType":"FunctionDefinition","parameters":{"id":2890,"nodeType":"ParameterList","parameters":[],"src":"892:2:7"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2897,"src":"926:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2891,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:7"},"scope":2898,"src":"863:97:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2899,"src":"624:338:7","usedErrors":[],"usedEvents":[]}],"src":"101:862:7"},"id":7},"@openzeppelin/contracts/utils/Multicall.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Multicall.sol","exportedSymbols":{"Address":[2868],"Context":[2898],"Multicall":[2985]},"id":2986,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2900,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"./Address.sol","id":2902,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2986,"sourceUnit":2869,"src":"129:38:8","symbolAliases":[{"foreign":{"id":2901,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"137:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"./Context.sol","id":2904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2986,"sourceUnit":2899,"src":"168:38:8","symbolAliases":[{"foreign":{"id":2903,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"176:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2906,"name":"Context","nameLocations":["1037:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2898,"src":"1037:7:8"},"id":2907,"nodeType":"InheritanceSpecifier","src":"1037:7:8"}],"canonicalName":"Multicall","contractDependencies":[],"contractKind":"contract","documentation":{"id":2905,"nodeType":"StructuredDocumentation","src":"208:797:8","text":" @dev Provides a function to batch together multiple calls in a single external call.\n Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n selectors won't filter calls nested within a {multicall} operation.\n NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n {_msgSender} are not propagated to subcalls."},"fullyImplemented":true,"id":2985,"linearizedBaseContracts":[2985,2898],"name":"Multicall","nameLocation":"1024:9:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":2983,"nodeType":"Block","src":"1300:392:8","statements":[{"assignments":[2918],"declarations":[{"constant":false,"id":2918,"mutability":"mutable","name":"context","nameLocation":"1323:7:8","nodeType":"VariableDeclaration","scope":2983,"src":"1310:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2917,"name":"bytes","nodeType":"ElementaryTypeName","src":"1310:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2938,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2919,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1333:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1337:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1333:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2921,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"1347:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1347:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1333:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"expression":{"id":2928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1401:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1405:4:8","memberName":"data","nodeType":"MemberAccess","src":"1401:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1401:51:8","startExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2930,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1410:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1414:4:8","memberName":"data","nodeType":"MemberAccess","src":"1410:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1419:6:8","memberName":"length","nodeType":"MemberAccess","src":"1410:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2933,"name":"_contextSuffixLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"1428:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1428:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1410:40:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1333:119:8","trueExpression":{"arguments":[{"hexValue":"30","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1384:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1374:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2924,"name":"bytes","nodeType":"ElementaryTypeName","src":"1378:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1310:142:8"},{"expression":{"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2939,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1463:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2943,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1485:4:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1490:6:8","memberName":"length","nodeType":"MemberAccess","src":"1485:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1473:11:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":2940,"name":"bytes","nodeType":"ElementaryTypeName","src":"1477:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2941,"nodeType":"ArrayTypeName","src":"1477:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1473:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"1463:34:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2947,"nodeType":"ExpressionStatement","src":"1463:34:8"},{"body":{"id":2979,"nodeType":"Block","src":"1549:113:8","statements":[{"expression":{"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2959,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1563:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2961,"indexExpression":{"id":2960,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1571:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1563:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2966,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1613:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Multicall_$2985","typeString":"contract Multicall"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Multicall_$2985","typeString":"contract Multicall"}],"id":2965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1605:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2964,"name":"address","nodeType":"ElementaryTypeName","src":"1605:7:8","typeDescriptions":{}}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1605:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"baseExpression":{"id":2971,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1633:4:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2973,"indexExpression":{"id":2972,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1638:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1633:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2974,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"1642:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1620:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2968,"name":"bytes","nodeType":"ElementaryTypeName","src":"1620:5:8","typeDescriptions":{}}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:6:8","memberName":"concat","nodeType":"MemberAccess","src":"1620:12:8","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1620:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2962,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"1576:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2868_$","typeString":"type(library Address)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:20:8","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":2787,"src":"1576:28:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1563:88:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2978,"nodeType":"ExpressionStatement","src":"1563:88:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2952,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1527:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2953,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"1531:4:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1536:6:8","memberName":"length","nodeType":"MemberAccess","src":"1531:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1527:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2980,"initializationExpression":{"assignments":[2949],"declarations":[{"constant":false,"id":2949,"mutability":"mutable","name":"i","nameLocation":"1520:1:8","nodeType":"VariableDeclaration","scope":2980,"src":"1512:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2948,"name":"uint256","nodeType":"ElementaryTypeName","src":"1512:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2951,"initialValue":{"hexValue":"30","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1524:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1512:13:8"},"loopExpression":{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1544:3:8","subExpression":{"id":2956,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"1544:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2958,"nodeType":"ExpressionStatement","src":"1544:3:8"},"nodeType":"ForStatement","src":"1507:155:8"},{"expression":{"id":2981,"name":"results","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"1678:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"functionReturnParameters":2916,"id":2982,"nodeType":"Return","src":"1671:14:8"}]},"documentation":{"id":2908,"nodeType":"StructuredDocumentation","src":"1051:152:8","text":" @dev Receives and executes a batch of function calls on this contract.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"ac9650d8","id":2984,"implemented":true,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"1217:9:8","nodeType":"FunctionDefinition","parameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2911,"mutability":"mutable","name":"data","nameLocation":"1244:4:8","nodeType":"VariableDeclaration","scope":2984,"src":"1227:21:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2909,"name":"bytes","nodeType":"ElementaryTypeName","src":"1227:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2910,"nodeType":"ArrayTypeName","src":"1227:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1226:23:8"},"returnParameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"results","nameLocation":"1291:7:8","nodeType":"VariableDeclaration","scope":2984,"src":"1276:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2913,"name":"bytes","nodeType":"ElementaryTypeName","src":"1276:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2914,"nodeType":"ArrayTypeName","src":"1276:7:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1275:24:8"},"scope":2985,"src":"1208:484:8","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":2986,"src":"1006:688:8","usedErrors":[2628,2631],"usedEvents":[]}],"src":"103:1592:8"},"id":8},"@openzeppelin/contracts/utils/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","exportedSymbols":{"Context":[2898],"Pausable":[3102]},"id":3103,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2987,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:9"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2989,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3103,"sourceUnit":2899,"src":"128:45:9","symbolAliases":[{"foreign":{"id":2988,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"136:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2991,"name":"Context","nameLocations":["645:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2898,"src":"645:7:9"},"id":2992,"nodeType":"InheritanceSpecifier","src":"645:7:9"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"175:439:9","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":3102,"linearizedBaseContracts":[3102,2898],"name":"Pausable","nameLocation":"633:8:9","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2994,"mutability":"mutable","name":"_paused","nameLocation":"672:7:9","nodeType":"VariableDeclaration","scope":3102,"src":"659:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2993,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":2995,"nodeType":"StructuredDocumentation","src":"686:73:9","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":2999,"name":"Paused","nameLocation":"770:6:9","nodeType":"EventDefinition","parameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"785:7:9","nodeType":"VariableDeclaration","scope":2999,"src":"777:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2996,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"776:17:9"},"src":"764:30:9"},{"anonymous":false,"documentation":{"id":3000,"nodeType":"StructuredDocumentation","src":"800:70:9","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":3004,"name":"Unpaused","nameLocation":"881:8:9","nodeType":"EventDefinition","parameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3002,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"898:7:9","nodeType":"VariableDeclaration","scope":3004,"src":"890:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3001,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"889:17:9"},"src":"875:32:9"},{"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"913:76:9","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":3007,"name":"EnforcedPause","nameLocation":"1000:13:9","nodeType":"ErrorDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"1013:2:9"},"src":"994:22:9"},{"documentation":{"id":3008,"nodeType":"StructuredDocumentation","src":"1022:80:9","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":3010,"name":"ExpectedPause","nameLocation":"1113:13:9","nodeType":"ErrorDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[],"src":"1126:2:9"},"src":"1107:22:9"},{"body":{"id":3018,"nodeType":"Block","src":"1221:32:9","statements":[{"expression":{"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3014,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"1231:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1231:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3017,"nodeType":"ExpressionStatement","src":"1231:15:9"}]},"documentation":{"id":3011,"nodeType":"StructuredDocumentation","src":"1135:67:9","text":" @dev Initializes the contract in unpaused state."},"id":3019,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[],"src":"1218:2:9"},"returnParameters":{"id":3013,"nodeType":"ParameterList","parameters":[],"src":"1221:0:9"},"scope":3102,"src":"1207:46:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3026,"nodeType":"Block","src":"1464:47:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3022,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"1474:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1474:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"ExpressionStatement","src":"1474:19:9"},{"id":3025,"nodeType":"PlaceholderStatement","src":"1503:1:9"}]},"documentation":{"id":3020,"nodeType":"StructuredDocumentation","src":"1259:175:9","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":3027,"name":"whenNotPaused","nameLocation":"1448:13:9","nodeType":"ModifierDefinition","parameters":{"id":3021,"nodeType":"ParameterList","parameters":[],"src":"1461:2:9"},"src":"1439:72:9","virtual":false,"visibility":"internal"},{"body":{"id":3034,"nodeType":"Block","src":"1711:44:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3030,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"1721:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3032,"nodeType":"ExpressionStatement","src":"1721:16:9"},{"id":3033,"nodeType":"PlaceholderStatement","src":"1747:1:9"}]},"documentation":{"id":3028,"nodeType":"StructuredDocumentation","src":"1517:167:9","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":3035,"name":"whenPaused","nameLocation":"1698:10:9","nodeType":"ModifierDefinition","parameters":{"id":3029,"nodeType":"ParameterList","parameters":[],"src":"1708:2:9"},"src":"1689:66:9","virtual":false,"visibility":"internal"},{"body":{"id":3043,"nodeType":"Block","src":"1903:31:9","statements":[{"expression":{"id":3041,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"1920:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3040,"id":3042,"nodeType":"Return","src":"1913:14:9"}]},"documentation":{"id":3036,"nodeType":"StructuredDocumentation","src":"1761:84:9","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":3044,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1859:6:9","nodeType":"FunctionDefinition","parameters":{"id":3037,"nodeType":"ParameterList","parameters":[],"src":"1865:2:9"},"returnParameters":{"id":3040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3044,"src":"1897:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3038,"name":"bool","nodeType":"ElementaryTypeName","src":"1897:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1896:6:9"},"scope":3102,"src":"1850:84:9","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3055,"nodeType":"Block","src":"2053:77:9","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":3048,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"2067:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3054,"nodeType":"IfStatement","src":"2063:61:9","trueBody":{"id":3053,"nodeType":"Block","src":"2077:47:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3050,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2098:13:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3052,"nodeType":"RevertStatement","src":"2091:22:9"}]}}]},"documentation":{"id":3045,"nodeType":"StructuredDocumentation","src":"1940:57:9","text":" @dev Throws if the contract is paused."},"id":3056,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2011:17:9","nodeType":"FunctionDefinition","parameters":{"id":3046,"nodeType":"ParameterList","parameters":[],"src":"2028:2:9"},"returnParameters":{"id":3047,"nodeType":"ParameterList","parameters":[],"src":"2053:0:9"},"scope":3102,"src":"2002:128:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3068,"nodeType":"Block","src":"2250:78:9","statements":[{"condition":{"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2264:9:9","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3060,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"2265:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2265:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3067,"nodeType":"IfStatement","src":"2260:62:9","trueBody":{"id":3066,"nodeType":"Block","src":"2275:47:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3063,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"2296:13:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3065,"nodeType":"RevertStatement","src":"2289:22:9"}]}}]},"documentation":{"id":3057,"nodeType":"StructuredDocumentation","src":"2136:61:9","text":" @dev Throws if the contract is not paused."},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2211:14:9","nodeType":"FunctionDefinition","parameters":{"id":3058,"nodeType":"ParameterList","parameters":[],"src":"2225:2:9"},"returnParameters":{"id":3059,"nodeType":"ParameterList","parameters":[],"src":"2250:0:9"},"scope":3102,"src":"2202:126:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3084,"nodeType":"Block","src":"2512:66:9","statements":[{"expression":{"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3075,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"2522:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2532:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2522:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3078,"nodeType":"ExpressionStatement","src":"2522:14:9"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3080,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"2558:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2558:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3079,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"2551:6:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3083,"nodeType":"EmitStatement","src":"2546:25:9"}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"2334:124:9","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":3085,"implemented":true,"kind":"function","modifiers":[{"id":3073,"kind":"modifierInvocation","modifierName":{"id":3072,"name":"whenNotPaused","nameLocations":["2498:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"2498:13:9"},"nodeType":"ModifierInvocation","src":"2498:13:9"}],"name":"_pause","nameLocation":"2472:6:9","nodeType":"FunctionDefinition","parameters":{"id":3071,"nodeType":"ParameterList","parameters":[],"src":"2478:2:9"},"returnParameters":{"id":3074,"nodeType":"ParameterList","parameters":[],"src":"2512:0:9"},"scope":3102,"src":"2463:115:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3100,"nodeType":"Block","src":"2758:69:9","statements":[{"expression":{"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3091,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"2768:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2778:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2768:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3094,"nodeType":"ExpressionStatement","src":"2768:15:9"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3096,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2880,"src":"2807:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2807:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3095,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2798:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2798:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3099,"nodeType":"EmitStatement","src":"2793:27:9"}]},"documentation":{"id":3086,"nodeType":"StructuredDocumentation","src":"2584:121:9","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":3101,"implemented":true,"kind":"function","modifiers":[{"id":3089,"kind":"modifierInvocation","modifierName":{"id":3088,"name":"whenPaused","nameLocations":["2747:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"2747:10:9"},"nodeType":"ModifierInvocation","src":"2747:10:9"}],"name":"_unpause","nameLocation":"2719:8:9","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[],"src":"2727:2:9"},"returnParameters":{"id":3090,"nodeType":"ParameterList","parameters":[],"src":"2758:0:9"},"scope":3102,"src":"2710:117:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3103,"src":"615:2214:9","usedErrors":[3007,3010],"usedEvents":[2999,3004]}],"src":"102:2728:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4156]},"id":4157,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3104,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3105,"nodeType":"StructuredDocumentation","src":"129:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4156,"linearizedBaseContracts":[4156],"name":"Math","nameLocation":"211:4:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3106,"nodeType":"StructuredDocumentation","src":"222:50:10","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":3108,"name":"MathOverflowedMulDiv","nameLocation":"283:20:10","nodeType":"ErrorDefinition","parameters":{"id":3107,"nodeType":"ParameterList","parameters":[],"src":"303:2:10"},"src":"277:29:10"},{"canonicalName":"Math.Rounding","id":3113,"members":[{"id":3109,"name":"Floor","nameLocation":"336:5:10","nodeType":"EnumValue","src":"336:5:10"},{"id":3110,"name":"Ceil","nameLocation":"379:4:10","nodeType":"EnumValue","src":"379:4:10"},{"id":3111,"name":"Trunc","nameLocation":"421:5:10","nodeType":"EnumValue","src":"421:5:10"},{"id":3112,"name":"Expand","nameLocation":"451:6:10","nodeType":"EnumValue","src":"451:6:10"}],"name":"Rounding","nameLocation":"317:8:10","nodeType":"EnumDefinition","src":"312:169:10"},{"body":{"id":3144,"nodeType":"Block","src":"661:140:10","statements":[{"id":3143,"nodeType":"UncheckedBlock","src":"671:124:10","statements":[{"assignments":[3126],"declarations":[{"constant":false,"id":3126,"mutability":"mutable","name":"c","nameLocation":"703:1:10","nodeType":"VariableDeclaration","scope":3143,"src":"695:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3125,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3130,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"707:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3128,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"711:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3131,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"730:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"734:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3138,"nodeType":"IfStatement","src":"726:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3124,"id":3137,"nodeType":"Return","src":"737:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3140,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3126,"src":"782:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3141,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3124,"id":3142,"nodeType":"Return","src":"768:16:10"}]}]},"documentation":{"id":3114,"nodeType":"StructuredDocumentation","src":"487:93:10","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":3145,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:10","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3116,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":3145,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3118,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":3145,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3145,"src":"646:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3120,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3145,"src":"652:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3122,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:10"},"scope":4156,"src":"585:216:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3172,"nodeType":"Block","src":"984:113:10","statements":[{"id":3171,"nodeType":"UncheckedBlock","src":"994:97:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"1022:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3158,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"1026:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3164,"nodeType":"IfStatement","src":"1018:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3156,"id":3163,"nodeType":"Return","src":"1029:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3166,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"1074:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3167,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"1078:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3169,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3156,"id":3170,"nodeType":"Return","src":"1060:20:10"}]}]},"documentation":{"id":3146,"nodeType":"StructuredDocumentation","src":"807:96:10","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":3173,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:10","nodeType":"FunctionDefinition","parameters":{"id":3151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"a","nameLocation":"932:1:10","nodeType":"VariableDeclaration","scope":3173,"src":"924:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3150,"mutability":"mutable","name":"b","nameLocation":"943:1:10","nodeType":"VariableDeclaration","scope":3173,"src":"935:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:10"},"returnParameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3173,"src":"969:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3152,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3173,"src":"975:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3154,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:10"},"scope":4156,"src":"908:189:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3214,"nodeType":"Block","src":"1283:417:10","statements":[{"id":3213,"nodeType":"UncheckedBlock","src":"1293:401:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3185,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"1551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3192,"nodeType":"IfStatement","src":"1547:28:10","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3190,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3184,"id":3191,"nodeType":"Return","src":"1559:16:10"}},{"assignments":[3194],"declarations":[{"constant":false,"id":3194,"mutability":"mutable","name":"c","nameLocation":"1597:1:10","nodeType":"VariableDeclaration","scope":3213,"src":"1589:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3193,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"1601:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3196,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"1605:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3199,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"1624:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3200,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"1628:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3202,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"1633:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3208,"nodeType":"IfStatement","src":"1620:33:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3206,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3184,"id":3207,"nodeType":"Return","src":"1636:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3210,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"1681:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3184,"id":3212,"nodeType":"Return","src":"1667:16:10"}]}]},"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"1103:99:10","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:10","nodeType":"FunctionDefinition","parameters":{"id":3179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"a","nameLocation":"1231:1:10","nodeType":"VariableDeclaration","scope":3215,"src":"1223:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3178,"mutability":"mutable","name":"b","nameLocation":"1242:1:10","nodeType":"VariableDeclaration","scope":3215,"src":"1234:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:10"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3215,"src":"1268:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3180,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3215,"src":"1274:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3182,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:10"},"scope":4156,"src":"1207:493:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3242,"nodeType":"Block","src":"1887:114:10","statements":[{"id":3241,"nodeType":"UncheckedBlock","src":"1897:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3227,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"1925:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3234,"nodeType":"IfStatement","src":"1921:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3232,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3226,"id":3233,"nodeType":"Return","src":"1933:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"1978:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3237,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"1982:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3226,"id":3240,"nodeType":"Return","src":"1964:20:10"}]}]},"documentation":{"id":3216,"nodeType":"StructuredDocumentation","src":"1706:100:10","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":3243,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:10","nodeType":"FunctionDefinition","parameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"a","nameLocation":"1835:1:10","nodeType":"VariableDeclaration","scope":3243,"src":"1827:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3220,"mutability":"mutable","name":"b","nameLocation":"1846:1:10","nodeType":"VariableDeclaration","scope":3243,"src":"1838:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:10"},"returnParameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3243,"src":"1872:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3222,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3243,"src":"1878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:10"},"scope":4156,"src":"1811:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3270,"nodeType":"Block","src":"2198:114:10","statements":[{"id":3269,"nodeType":"UncheckedBlock","src":"2208:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3255,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3262,"nodeType":"IfStatement","src":"2232:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3260,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3254,"id":3261,"nodeType":"Return","src":"2244:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":3263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3264,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"2289:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3265,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"2293:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3254,"id":3268,"nodeType":"Return","src":"2275:20:10"}]}]},"documentation":{"id":3244,"nodeType":"StructuredDocumentation","src":"2007:110:10","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":3271,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:10","nodeType":"FunctionDefinition","parameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3246,"mutability":"mutable","name":"a","nameLocation":"2146:1:10","nodeType":"VariableDeclaration","scope":3271,"src":"2138:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3248,"mutability":"mutable","name":"b","nameLocation":"2157:1:10","nodeType":"VariableDeclaration","scope":3271,"src":"2149:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3247,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:10"},"returnParameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3271,"src":"2183:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3250,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3271,"src":"2189:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:10"},"scope":4156,"src":"2122:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3288,"nodeType":"Block","src":"2449:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3281,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"2466:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3282,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2470:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3285,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2478:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:10","trueExpression":{"id":3284,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"2474:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3280,"id":3287,"nodeType":"Return","src":"2459:20:10"}]},"documentation":{"id":3272,"nodeType":"StructuredDocumentation","src":"2318:59:10","text":" @dev Returns the largest of two numbers."},"id":3289,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:10","nodeType":"FunctionDefinition","parameters":{"id":3277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"a","nameLocation":"2403:1:10","nodeType":"VariableDeclaration","scope":3289,"src":"2395:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3273,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3276,"mutability":"mutable","name":"b","nameLocation":"2414:1:10","nodeType":"VariableDeclaration","scope":3289,"src":"2406:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:10"},"returnParameters":{"id":3280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3289,"src":"2440:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:10"},"scope":4156,"src":"2382:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3306,"nodeType":"Block","src":"2624:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3299,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"2641:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3300,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"2645:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3303,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"2653:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:10","trueExpression":{"id":3302,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"2649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3298,"id":3305,"nodeType":"Return","src":"2634:20:10"}]},"documentation":{"id":3290,"nodeType":"StructuredDocumentation","src":"2492:60:10","text":" @dev Returns the smallest of two numbers."},"id":3307,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:10","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"a","nameLocation":"2578:1:10","nodeType":"VariableDeclaration","scope":3307,"src":"2570:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3294,"mutability":"mutable","name":"b","nameLocation":"2589:1:10","nodeType":"VariableDeclaration","scope":3307,"src":"2581:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3293,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:10"},"returnParameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3307,"src":"2615:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3296,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:10"},"scope":4156,"src":"2557:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3329,"nodeType":"Block","src":"2845:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"2900:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3318,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"2904:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3321,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"2910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3322,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"2914:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3316,"id":3328,"nodeType":"Return","src":"2892:28:10"}]},"documentation":{"id":3308,"nodeType":"StructuredDocumentation","src":"2667:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3330,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:10","nodeType":"FunctionDefinition","parameters":{"id":3313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"mutability":"mutable","name":"a","nameLocation":"2799:1:10","nodeType":"VariableDeclaration","scope":3330,"src":"2791:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3312,"mutability":"mutable","name":"b","nameLocation":"2810:1:10","nodeType":"VariableDeclaration","scope":3330,"src":"2802:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3311,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:10"},"returnParameters":{"id":3316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3330,"src":"2836:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:10"},"scope":4156,"src":"2774:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3363,"nodeType":"Block","src":"3219:260:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3340,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"3233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3348,"nodeType":"IfStatement","src":"3229:127:10","trueBody":{"id":3347,"nodeType":"Block","src":"3241:115:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3343,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"3340:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3344,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"3344:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3339,"id":3346,"nodeType":"Return","src":"3333:12:10"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"3444:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3353,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"3458:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3357,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"3467:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:10","trueExpression":{"hexValue":"30","id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3339,"id":3362,"nodeType":"Return","src":"3437:35:10"}]},"documentation":{"id":3331,"nodeType":"StructuredDocumentation","src":"2933:210:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3364,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:10","nodeType":"FunctionDefinition","parameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"a","nameLocation":"3173:1:10","nodeType":"VariableDeclaration","scope":3364,"src":"3165:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3332,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"b","nameLocation":"3184:1:10","nodeType":"VariableDeclaration","scope":3364,"src":"3176:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:10"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3364,"src":"3210:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3337,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:10"},"scope":4156,"src":"3148:331:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3489,"nodeType":"Block","src":"3901:4018:10","statements":[{"id":3488,"nodeType":"UncheckedBlock","src":"3911:4002:10","statements":[{"assignments":[3377],"declarations":[{"constant":false,"id":3377,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:10","nodeType":"VariableDeclaration","scope":3488,"src":"4232:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3381,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"4248:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3379,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"4252:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:10"},{"assignments":[3383],"declarations":[{"constant":false,"id":3383,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:10","nodeType":"VariableDeclaration","scope":3488,"src":"4312:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3382,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3384,"nodeType":"VariableDeclarationStatement","src":"4312:13:10"},{"AST":{"nodeType":"YulBlock","src":"4392:122:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:10"},"nodeType":"YulFunctionCall","src":"4433:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:10"},"nodeType":"YulFunctionCall","src":"4420:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:10","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:10"},"nodeType":"YulFunctionCall","src":"4470:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:10"},"nodeType":"YulFunctionCall","src":"4486:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:10"},"nodeType":"YulFunctionCall","src":"4466:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3377,"isOffset":false,"isSlot":false,"src":"4478:5:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"4493:5:10","valueSize":1},{"declaration":3383,"isOffset":false,"isSlot":false,"src":"4457:5:10","valueSize":1},{"declaration":3367,"isOffset":false,"isSlot":false,"src":"4427:1:10","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"4430:1:10","valueSize":1}],"id":3385,"nodeType":"InlineAssembly","src":"4383:131:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3386,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"4595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3394,"nodeType":"IfStatement","src":"4591:368:10","trueBody":{"id":3393,"nodeType":"Block","src":"4607:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3389,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"4925:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3390,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"4933:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3375,"id":3392,"nodeType":"Return","src":"4918:26:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3395,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"5065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3396,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"5080:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3402,"nodeType":"IfStatement","src":"5061:88:10","trueBody":{"id":3401,"nodeType":"Block","src":"5087:62:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3398,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"5112:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3400,"nodeType":"RevertStatement","src":"5105:29:10"}]}},{"assignments":[3404],"declarations":[{"constant":false,"id":3404,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:10","nodeType":"VariableDeclaration","scope":3488,"src":"5404:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3403,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3405,"nodeType":"VariableDeclarationStatement","src":"5404:17:10"},{"AST":{"nodeType":"YulBlock","src":"5444:291:10","statements":[{"nodeType":"YulAssignment","src":"5513:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:10"},"nodeType":"YulFunctionCall","src":"5526:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:10"}]},{"nodeType":"YulAssignment","src":"5633:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:10"},"nodeType":"YulFunctionCall","src":"5653:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:10"},"nodeType":"YulFunctionCall","src":"5642:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:10"}]},{"nodeType":"YulAssignment","src":"5691:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:10"},"nodeType":"YulFunctionCall","src":"5700:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3371,"isOffset":false,"isSlot":false,"src":"5539:11:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"5667:5:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"5691:5:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"5704:5:10","valueSize":1},{"declaration":3383,"isOffset":false,"isSlot":false,"src":"5633:5:10","valueSize":1},{"declaration":3383,"isOffset":false,"isSlot":false,"src":"5646:5:10","valueSize":1},{"declaration":3404,"isOffset":false,"isSlot":false,"src":"5513:9:10","valueSize":1},{"declaration":3404,"isOffset":false,"isSlot":false,"src":"5656:9:10","valueSize":1},{"declaration":3404,"isOffset":false,"isSlot":false,"src":"5711:9:10","valueSize":1},{"declaration":3367,"isOffset":false,"isSlot":false,"src":"5533:1:10","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"5536:1:10","valueSize":1}],"id":3406,"nodeType":"InlineAssembly","src":"5435:300:10"},{"assignments":[3408],"declarations":[{"constant":false,"id":3408,"mutability":"mutable","name":"twos","nameLocation":"5947:4:10","nodeType":"VariableDeclaration","scope":3488,"src":"5939:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3415,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"5954:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3411,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"5973:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3413,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:10"},{"AST":{"nodeType":"YulBlock","src":"6008:362:10","statements":[{"nodeType":"YulAssignment","src":"6073:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:10"},"nodeType":"YulFunctionCall","src":"6088:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:10"}]},{"nodeType":"YulAssignment","src":"6177:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:10"},"nodeType":"YulFunctionCall","src":"6186:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:10"}]},{"nodeType":"YulAssignment","src":"6317:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:10"},"nodeType":"YulFunctionCall","src":"6333:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:10"},"nodeType":"YulFunctionCall","src":"6329:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:10"},"nodeType":"YulFunctionCall","src":"6325:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3371,"isOffset":false,"isSlot":false,"src":"6073:11:10","valueSize":1},{"declaration":3371,"isOffset":false,"isSlot":false,"src":"6092:11:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"6177:5:10","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"6190:5:10","valueSize":1},{"declaration":3408,"isOffset":false,"isSlot":false,"src":"6105:4:10","valueSize":1},{"declaration":3408,"isOffset":false,"isSlot":false,"src":"6197:4:10","valueSize":1},{"declaration":3408,"isOffset":false,"isSlot":false,"src":"6317:4:10","valueSize":1},{"declaration":3408,"isOffset":false,"isSlot":false,"src":"6340:4:10","valueSize":1},{"declaration":3408,"isOffset":false,"isSlot":false,"src":"6347:4:10","valueSize":1}],"id":3416,"nodeType":"InlineAssembly","src":"5999:371:10"},{"expression":{"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3417,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"6436:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3418,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3383,"src":"6445:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3419,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"6453:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3422,"nodeType":"ExpressionStatement","src":"6436:21:10"},{"assignments":[3424],"declarations":[{"constant":false,"id":3424,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:10","nodeType":"VariableDeclaration","scope":3488,"src":"6775:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3423,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3431,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3426,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"6798:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:10"},{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3432,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7031:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7046:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3435,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7060:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"7031:36:10"},{"expression":{"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3440,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7100:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7115:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3443,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7129:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3447,"nodeType":"ExpressionStatement","src":"7100:36:10"},{"expression":{"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3448,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7170:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3450,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7185:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3451,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7199:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3455,"nodeType":"ExpressionStatement","src":"7170:36:10"},{"expression":{"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3456,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7240:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3458,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7255:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3459,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7269:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3463,"nodeType":"ExpressionStatement","src":"7240:36:10"},{"expression":{"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3464,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7310:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3466,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7325:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3467,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7339:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3471,"nodeType":"ExpressionStatement","src":"7310:36:10"},{"expression":{"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3472,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7381:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7396:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3475,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7410:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3479,"nodeType":"ExpressionStatement","src":"7381:36:10"},{"expression":{"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"7851:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"7860:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3482,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"7868:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3485,"nodeType":"ExpressionStatement","src":"7851:24:10"},{"expression":{"id":3486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"7896:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3375,"id":3487,"nodeType":"Return","src":"7889:13:10"}]}]},"documentation":{"id":3365,"nodeType":"StructuredDocumentation","src":"3485:313:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3490,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:10","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3367,"mutability":"mutable","name":"x","nameLocation":"3827:1:10","nodeType":"VariableDeclaration","scope":3490,"src":"3819:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"y","nameLocation":"3838:1:10","nodeType":"VariableDeclaration","scope":3490,"src":"3830:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:10","nodeType":"VariableDeclaration","scope":3490,"src":"3841:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:10"},"returnParameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3374,"mutability":"mutable","name":"result","nameLocation":"3893:6:10","nodeType":"VariableDeclaration","scope":3490,"src":"3885:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3373,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:10"},"scope":4156,"src":"3803:4116:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3532,"nodeType":"Block","src":"8161:192:10","statements":[{"assignments":[3506],"declarations":[{"constant":false,"id":3506,"mutability":"mutable","name":"result","nameLocation":"8179:6:10","nodeType":"VariableDeclaration","scope":3532,"src":"8171:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3505,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3512,"initialValue":{"arguments":[{"id":3508,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"8195:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3509,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"8198:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3510,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"8201:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3507,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3490,3533],"referencedDeclaration":3490,"src":"8188:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3514,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"8244:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":3513,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"8227:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3113_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3517,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"8264:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3518,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"8267:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3519,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"8270:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3516,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3529,"nodeType":"IfStatement","src":"8223:101:10","trueBody":{"id":3528,"nodeType":"Block","src":"8288:36:10","statements":[{"expression":{"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3524,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"8302:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3527,"nodeType":"ExpressionStatement","src":"8302:11:10"}]}},{"expression":{"id":3530,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"8340:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3504,"id":3531,"nodeType":"Return","src":"8333:13:10"}]},"documentation":{"id":3491,"nodeType":"StructuredDocumentation","src":"7925:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3533,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:10","nodeType":"FunctionDefinition","parameters":{"id":3501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"x","nameLocation":"8075:1:10","nodeType":"VariableDeclaration","scope":3533,"src":"8067:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3492,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3495,"mutability":"mutable","name":"y","nameLocation":"8086:1:10","nodeType":"VariableDeclaration","scope":3533,"src":"8078:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3494,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3497,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:10","nodeType":"VariableDeclaration","scope":3533,"src":"8089:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3496,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3500,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:10","nodeType":"VariableDeclaration","scope":3533,"src":"8110:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":3499,"nodeType":"UserDefinedTypeName","pathNode":{"id":3498,"name":"Rounding","nameLocations":["8110:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"8110:8:10"},"referencedDeclaration":3113,"src":"8110:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:10"},"returnParameters":{"id":3504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3533,"src":"8152:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3502,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:10"},"scope":4156,"src":"8051:302:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3644,"nodeType":"Block","src":"8644:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3541,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"8658:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3547,"nodeType":"IfStatement","src":"8654:45:10","trueBody":{"id":3546,"nodeType":"Block","src":"8666:33:10","statements":[{"expression":{"hexValue":"30","id":3544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3540,"id":3545,"nodeType":"Return","src":"8680:8:10"}]}},{"assignments":[3549],"declarations":[{"constant":false,"id":3549,"mutability":"mutable","name":"result","nameLocation":"9386:6:10","nodeType":"VariableDeclaration","scope":3644,"src":"9378:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3558,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3552,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"9406:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3551,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3812,3847],"referencedDeclaration":3812,"src":"9401:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3556,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:10"},{"id":3643,"nodeType":"UncheckedBlock","src":"9815:408:10","statements":[{"expression":{"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3559,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9839:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3560,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3561,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"9858:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9862:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3565,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3569,"nodeType":"ExpressionStatement","src":"9839:35:10"},{"expression":{"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3570,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9888:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"9907:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9911:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3576,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3580,"nodeType":"ExpressionStatement","src":"9888:35:10"},{"expression":{"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3581,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9937:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9947:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3583,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"9956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9960:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3591,"nodeType":"ExpressionStatement","src":"9937:35:10"},{"expression":{"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3592,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"9996:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"10005:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10009:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3598,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3602,"nodeType":"ExpressionStatement","src":"9986:35:10"},{"expression":{"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10035:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10045:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"10054:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3606,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10058:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3613,"nodeType":"ExpressionStatement","src":"10035:35:10"},{"expression":{"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10084:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3615,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10094:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3616,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"10103:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3617,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10107:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3620,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3624,"nodeType":"ExpressionStatement","src":"10084:35:10"},{"expression":{"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3625,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10133:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10143:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3627,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"10152:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10156:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3631,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3635,"nodeType":"ExpressionStatement","src":"10133:35:10"},{"expression":{"arguments":[{"id":3637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10193:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3638,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"10201:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3639,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"10205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3636,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3307,"src":"10189:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3540,"id":3642,"nodeType":"Return","src":"10182:30:10"}]}]},"documentation":{"id":3534,"nodeType":"StructuredDocumentation","src":"8359:223:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3645,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:10","nodeType":"FunctionDefinition","parameters":{"id":3537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3536,"mutability":"mutable","name":"a","nameLocation":"8609:1:10","nodeType":"VariableDeclaration","scope":3645,"src":"8601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:10"},"returnParameters":{"id":3540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3645,"src":"8635:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3538,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:10"},"scope":4156,"src":"8587:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3679,"nodeType":"Block","src":"10405:164:10","statements":[{"id":3678,"nodeType":"UncheckedBlock","src":"10415:148:10","statements":[{"assignments":[3657],"declarations":[{"constant":false,"id":3657,"mutability":"mutable","name":"result","nameLocation":"10447:6:10","nodeType":"VariableDeclaration","scope":3678,"src":"10439:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3661,"initialValue":{"arguments":[{"id":3659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"10461:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3658,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3645,3680],"referencedDeclaration":3645,"src":"10456:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3662,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"10484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3664,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"10511:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":3663,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"10494:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3113_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3666,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"10524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"10533:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3669,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"10542:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:10","trueExpression":{"hexValue":"31","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3675,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3655,"id":3677,"nodeType":"Return","src":"10477:75:10"}]}]},"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"10235:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3680,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:10","nodeType":"FunctionDefinition","parameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"mutability":"mutable","name":"a","nameLocation":"10351:1:10","nodeType":"VariableDeclaration","scope":3680,"src":"10343:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:10","nodeType":"VariableDeclaration","scope":3680,"src":"10354:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":3650,"nodeType":"UserDefinedTypeName","pathNode":{"id":3649,"name":"Rounding","nameLocations":["10354:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"10354:8:10"},"referencedDeclaration":3113,"src":"10354:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:10"},"returnParameters":{"id":3655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3680,"src":"10396:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3653,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:10"},"scope":4156,"src":"10329:240:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3811,"nodeType":"Block","src":"10760:922:10","statements":[{"assignments":[3689],"declarations":[{"constant":false,"id":3689,"mutability":"mutable","name":"result","nameLocation":"10778:6:10","nodeType":"VariableDeclaration","scope":3811,"src":"10770:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3691,"initialValue":{"hexValue":"30","id":3690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:10"},{"id":3808,"nodeType":"UncheckedBlock","src":"10798:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"10826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3706,"nodeType":"IfStatement","src":"10822:99:10","trueBody":{"id":3705,"nodeType":"Block","src":"10844:77:10","statements":[{"expression":{"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3697,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"10862:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3700,"nodeType":"ExpressionStatement","src":"10862:13:10"},{"expression":{"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3701,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"10893:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3704,"nodeType":"ExpressionStatement","src":"10893:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"10938:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3721,"nodeType":"IfStatement","src":"10934:96:10","trueBody":{"id":3720,"nodeType":"Block","src":"10955:75:10","statements":[{"expression":{"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"10973:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3715,"nodeType":"ExpressionStatement","src":"10973:12:10"},{"expression":{"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11003:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3719,"nodeType":"ExpressionStatement","src":"11003:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11047:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3736,"nodeType":"IfStatement","src":"11043:96:10","trueBody":{"id":3735,"nodeType":"Block","src":"11064:75:10","statements":[{"expression":{"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11082:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3730,"nodeType":"ExpressionStatement","src":"11082:12:10"},{"expression":{"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3731,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11112:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3734,"nodeType":"ExpressionStatement","src":"11112:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11156:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3751,"nodeType":"IfStatement","src":"11152:96:10","trueBody":{"id":3750,"nodeType":"Block","src":"11173:75:10","statements":[{"expression":{"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11191:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3745,"nodeType":"ExpressionStatement","src":"11191:12:10"},{"expression":{"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11221:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3749,"nodeType":"ExpressionStatement","src":"11221:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11265:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3766,"nodeType":"IfStatement","src":"11261:93:10","trueBody":{"id":3765,"nodeType":"Block","src":"11281:73:10","statements":[{"expression":{"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11299:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3760,"nodeType":"ExpressionStatement","src":"11299:11:10"},{"expression":{"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3761,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11328:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3764,"nodeType":"ExpressionStatement","src":"11328:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11371:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3781,"nodeType":"IfStatement","src":"11367:93:10","trueBody":{"id":3780,"nodeType":"Block","src":"11387:73:10","statements":[{"expression":{"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11405:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3775,"nodeType":"ExpressionStatement","src":"11405:11:10"},{"expression":{"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11434:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3779,"nodeType":"ExpressionStatement","src":"11434:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11477:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3796,"nodeType":"IfStatement","src":"11473:93:10","trueBody":{"id":3795,"nodeType":"Block","src":"11493:73:10","statements":[{"expression":{"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11511:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3790,"nodeType":"ExpressionStatement","src":"11511:11:10"},{"expression":{"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3791,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11540:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3794,"nodeType":"ExpressionStatement","src":"11540:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"11583:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3807,"nodeType":"IfStatement","src":"11579:64:10","trueBody":{"id":3806,"nodeType":"Block","src":"11599:44:10","statements":[{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3802,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11617:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3805,"nodeType":"ExpressionStatement","src":"11617:11:10"}]}}]},{"expression":{"id":3809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"11669:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3687,"id":3810,"nodeType":"Return","src":"11662:13:10"}]},"documentation":{"id":3681,"nodeType":"StructuredDocumentation","src":"10575:119:10","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3812,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:10","nodeType":"FunctionDefinition","parameters":{"id":3684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3683,"mutability":"mutable","name":"value","nameLocation":"10721:5:10","nodeType":"VariableDeclaration","scope":3812,"src":"10713:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3682,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:10"},"returnParameters":{"id":3687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3812,"src":"10751:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3685,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:10"},"scope":4156,"src":"10699:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3846,"nodeType":"Block","src":"11915:168:10","statements":[{"id":3845,"nodeType":"UncheckedBlock","src":"11925:152:10","statements":[{"assignments":[3824],"declarations":[{"constant":false,"id":3824,"mutability":"mutable","name":"result","nameLocation":"11957:6:10","nodeType":"VariableDeclaration","scope":3845,"src":"11949:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3828,"initialValue":{"arguments":[{"id":3826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"11971:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3825,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3812,3847],"referencedDeclaration":3812,"src":"11966:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"11998:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3831,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3818,"src":"12025:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":3830,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"12008:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3113_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"12043:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"12052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:10","trueExpression":{"hexValue":"31","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3822,"id":3844,"nodeType":"Return","src":"11991:75:10"}]}]},"documentation":{"id":3813,"nodeType":"StructuredDocumentation","src":"11688:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3847,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:10","nodeType":"FunctionDefinition","parameters":{"id":3819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"value","nameLocation":"11857:5:10","nodeType":"VariableDeclaration","scope":3847,"src":"11849:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3814,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:10","nodeType":"VariableDeclaration","scope":3847,"src":"11864:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":3817,"nodeType":"UserDefinedTypeName","pathNode":{"id":3816,"name":"Rounding","nameLocations":["11864:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"11864:8:10"},"referencedDeclaration":3113,"src":"11864:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:10"},"returnParameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3847,"src":"11906:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3820,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:10"},"scope":4156,"src":"11835:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3975,"nodeType":"Block","src":"12276:854:10","statements":[{"assignments":[3856],"declarations":[{"constant":false,"id":3856,"mutability":"mutable","name":"result","nameLocation":"12294:6:10","nodeType":"VariableDeclaration","scope":3975,"src":"12286:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3858,"initialValue":{"hexValue":"30","id":3857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:10"},{"id":3972,"nodeType":"UncheckedBlock","src":"12314:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12342:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3875,"nodeType":"IfStatement","src":"12338:103:10","trueBody":{"id":3874,"nodeType":"Block","src":"12361:80:10","statements":[{"expression":{"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12379:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3869,"nodeType":"ExpressionStatement","src":"12379:17:10"},{"expression":{"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3870,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3873,"nodeType":"ExpressionStatement","src":"12414:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3892,"nodeType":"IfStatement","src":"12454:103:10","trueBody":{"id":3891,"nodeType":"Block","src":"12477:80:10","statements":[{"expression":{"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12495:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3886,"nodeType":"ExpressionStatement","src":"12495:17:10"},{"expression":{"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3887,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12530:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3890,"nodeType":"ExpressionStatement","src":"12530:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12574:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3909,"nodeType":"IfStatement","src":"12570:103:10","trueBody":{"id":3908,"nodeType":"Block","src":"12593:80:10","statements":[{"expression":{"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12611:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3903,"nodeType":"ExpressionStatement","src":"12611:17:10"},{"expression":{"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3904,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12646:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3907,"nodeType":"ExpressionStatement","src":"12646:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12690:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3926,"nodeType":"IfStatement","src":"12686:100:10","trueBody":{"id":3925,"nodeType":"Block","src":"12708:78:10","statements":[{"expression":{"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12726:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3920,"nodeType":"ExpressionStatement","src":"12726:16:10"},{"expression":{"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3921,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12760:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3924,"nodeType":"ExpressionStatement","src":"12760:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3927,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12803:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3943,"nodeType":"IfStatement","src":"12799:100:10","trueBody":{"id":3942,"nodeType":"Block","src":"12821:78:10","statements":[{"expression":{"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12839:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3937,"nodeType":"ExpressionStatement","src":"12839:16:10"},{"expression":{"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12873:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3941,"nodeType":"ExpressionStatement","src":"12873:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3960,"nodeType":"IfStatement","src":"12912:100:10","trueBody":{"id":3959,"nodeType":"Block","src":"12934:78:10","statements":[{"expression":{"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"12952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3954,"nodeType":"ExpressionStatement","src":"12952:16:10"},{"expression":{"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3955,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"12986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3958,"nodeType":"ExpressionStatement","src":"12986:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"13029:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3971,"nodeType":"IfStatement","src":"13025:66:10","trueBody":{"id":3970,"nodeType":"Block","src":"13047:44:10","statements":[{"expression":{"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3966,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"13065:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3969,"nodeType":"ExpressionStatement","src":"13065:11:10"}]}}]},{"expression":{"id":3973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"13117:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3854,"id":3974,"nodeType":"Return","src":"13110:13:10"}]},"documentation":{"id":3848,"nodeType":"StructuredDocumentation","src":"12089:120:10","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3976,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:10","nodeType":"FunctionDefinition","parameters":{"id":3851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3850,"mutability":"mutable","name":"value","nameLocation":"12237:5:10","nodeType":"VariableDeclaration","scope":3976,"src":"12229:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3849,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:10"},"returnParameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3976,"src":"12267:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3852,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:10"},"scope":4156,"src":"12214:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4010,"nodeType":"Block","src":"13365:170:10","statements":[{"id":4009,"nodeType":"UncheckedBlock","src":"13375:154:10","statements":[{"assignments":[3988],"declarations":[{"constant":false,"id":3988,"mutability":"mutable","name":"result","nameLocation":"13407:6:10","nodeType":"VariableDeclaration","scope":4009,"src":"13399:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3987,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3992,"initialValue":{"arguments":[{"id":3990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"13422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3989,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3976,4011],"referencedDeclaration":3976,"src":"13416:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"13449:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3995,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"13476:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":3994,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"13459:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3113_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3998,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3988,"src":"13495:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4000,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3979,"src":"13504:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:10","trueExpression":{"hexValue":"31","id":4003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3986,"id":4008,"nodeType":"Return","src":"13442:76:10"}]}]},"documentation":{"id":3977,"nodeType":"StructuredDocumentation","src":"13136:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4011,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:10","nodeType":"FunctionDefinition","parameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3979,"mutability":"mutable","name":"value","nameLocation":"13307:5:10","nodeType":"VariableDeclaration","scope":4011,"src":"13299:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:10","nodeType":"VariableDeclaration","scope":4011,"src":"13314:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":3981,"nodeType":"UserDefinedTypeName","pathNode":{"id":3980,"name":"Rounding","nameLocations":["13314:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"13314:8:10"},"referencedDeclaration":3113,"src":"13314:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:10"},"returnParameters":{"id":3986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4011,"src":"13356:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3984,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:10"},"scope":4156,"src":"13284:251:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4097,"nodeType":"Block","src":"13855:600:10","statements":[{"assignments":[4020],"declarations":[{"constant":false,"id":4020,"mutability":"mutable","name":"result","nameLocation":"13873:6:10","nodeType":"VariableDeclaration","scope":4097,"src":"13865:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4019,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4022,"initialValue":{"hexValue":"30","id":4021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:10"},{"id":4094,"nodeType":"UncheckedBlock","src":"13893:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"13921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4037,"nodeType":"IfStatement","src":"13917:98:10","trueBody":{"id":4036,"nodeType":"Block","src":"13939:76:10","statements":[{"expression":{"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"13957:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4031,"nodeType":"ExpressionStatement","src":"13957:13:10"},{"expression":{"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"13988:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4035,"nodeType":"ExpressionStatement","src":"13988:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14032:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4052,"nodeType":"IfStatement","src":"14028:95:10","trueBody":{"id":4051,"nodeType":"Block","src":"14049:74:10","statements":[{"expression":{"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4046,"nodeType":"ExpressionStatement","src":"14067:12:10"},{"expression":{"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"14097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4050,"nodeType":"ExpressionStatement","src":"14097:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14140:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4067,"nodeType":"IfStatement","src":"14136:95:10","trueBody":{"id":4066,"nodeType":"Block","src":"14157:74:10","statements":[{"expression":{"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4061,"nodeType":"ExpressionStatement","src":"14175:12:10"},{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"14205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"nodeType":"ExpressionStatement","src":"14205:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4082,"nodeType":"IfStatement","src":"14244:95:10","trueBody":{"id":4081,"nodeType":"Block","src":"14265:74:10","statements":[{"expression":{"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4076,"nodeType":"ExpressionStatement","src":"14283:12:10"},{"expression":{"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4077,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"14313:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4080,"nodeType":"ExpressionStatement","src":"14313:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4014,"src":"14356:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4093,"nodeType":"IfStatement","src":"14352:64:10","trueBody":{"id":4092,"nodeType":"Block","src":"14372:44:10","statements":[{"expression":{"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4088,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"14390:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4091,"nodeType":"ExpressionStatement","src":"14390:11:10"}]}}]},{"expression":{"id":4095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"14442:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4018,"id":4096,"nodeType":"Return","src":"14435:13:10"}]},"documentation":{"id":4012,"nodeType":"StructuredDocumentation","src":"13541:246:10","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4098,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:10","nodeType":"FunctionDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"mutability":"mutable","name":"value","nameLocation":"13816:5:10","nodeType":"VariableDeclaration","scope":4098,"src":"13808:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4013,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:10"},"returnParameters":{"id":4018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4098,"src":"13846:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4016,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:10"},"scope":4156,"src":"13792:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4135,"nodeType":"Block","src":"14692:177:10","statements":[{"id":4134,"nodeType":"UncheckedBlock","src":"14702:161:10","statements":[{"assignments":[4110],"declarations":[{"constant":false,"id":4110,"mutability":"mutable","name":"result","nameLocation":"14734:6:10","nodeType":"VariableDeclaration","scope":4134,"src":"14726:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4109,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4114,"initialValue":{"arguments":[{"id":4112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"14750:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4111,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4098,4136],"referencedDeclaration":4098,"src":"14743:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4115,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"14777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4117,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"14804:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":4116,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4155,"src":"14787:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3113_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4120,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"14823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"14838:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:10","trueExpression":{"hexValue":"31","id":4128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4108,"id":4133,"nodeType":"Return","src":"14770:82:10"}]}]},"documentation":{"id":4099,"nodeType":"StructuredDocumentation","src":"14461:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4136,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:10","nodeType":"FunctionDefinition","parameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4101,"mutability":"mutable","name":"value","nameLocation":"14634:5:10","nodeType":"VariableDeclaration","scope":4136,"src":"14626:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4100,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4104,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:10","nodeType":"VariableDeclaration","scope":4136,"src":"14641:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":4103,"nodeType":"UserDefinedTypeName","pathNode":{"id":4102,"name":"Rounding","nameLocations":["14641:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"14641:8:10"},"referencedDeclaration":3113,"src":"14641:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:10"},"returnParameters":{"id":4108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4136,"src":"14683:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4106,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:10"},"scope":4156,"src":"14610:259:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4154,"nodeType":"Block","src":"15067:48:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4147,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"15090:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}],"id":4146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4145,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:10","typeDescriptions":{}}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4144,"id":4153,"nodeType":"Return","src":"15077:31:10"}]},"documentation":{"id":4137,"nodeType":"StructuredDocumentation","src":"14875:113:10","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4155,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:10","nodeType":"FunctionDefinition","parameters":{"id":4141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4140,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:10","nodeType":"VariableDeclaration","scope":4155,"src":"15019:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"},"typeName":{"id":4139,"nodeType":"UserDefinedTypeName","pathNode":{"id":4138,"name":"Rounding","nameLocations":["15019:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":3113,"src":"15019:8:10"},"referencedDeclaration":3113,"src":"15019:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3113","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:10"},"returnParameters":{"id":4144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4155,"src":"15061:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4142,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:10"},"scope":4156,"src":"14993:122:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4157,"src":"203:14914:10","usedErrors":[3108],"usedEvents":[]}],"src":"103:15015:10"},"id":10},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[5911]},"id":5912,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4158,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":4159,"nodeType":"StructuredDocumentation","src":"218:545:11","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":5911,"linearizedBaseContracts":[5911],"name":"SafeCast","nameLocation":"772:8:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4160,"nodeType":"StructuredDocumentation","src":"787:68:11","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":4166,"name":"SafeCastOverflowedUintDowncast","nameLocation":"866:30:11","nodeType":"ErrorDefinition","parameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4162,"mutability":"mutable","name":"bits","nameLocation":"903:4:11","nodeType":"VariableDeclaration","scope":4166,"src":"897:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4161,"name":"uint8","nodeType":"ElementaryTypeName","src":"897:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4164,"mutability":"mutable","name":"value","nameLocation":"917:5:11","nodeType":"VariableDeclaration","scope":4166,"src":"909:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"896:27:11"},"src":"860:64:11"},{"documentation":{"id":4167,"nodeType":"StructuredDocumentation","src":"930:75:11","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":4171,"name":"SafeCastOverflowedIntToUint","nameLocation":"1016:27:11","nodeType":"ErrorDefinition","parameters":{"id":4170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4169,"mutability":"mutable","name":"value","nameLocation":"1051:5:11","nodeType":"VariableDeclaration","scope":4171,"src":"1044:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4168,"name":"int256","nodeType":"ElementaryTypeName","src":"1044:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1043:14:11"},"src":"1010:48:11"},{"documentation":{"id":4172,"nodeType":"StructuredDocumentation","src":"1064:67:11","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":4178,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1142:29:11","nodeType":"ErrorDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4174,"mutability":"mutable","name":"bits","nameLocation":"1178:4:11","nodeType":"VariableDeclaration","scope":4178,"src":"1172:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4173,"name":"uint8","nodeType":"ElementaryTypeName","src":"1172:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4176,"mutability":"mutable","name":"value","nameLocation":"1191:5:11","nodeType":"VariableDeclaration","scope":4178,"src":"1184:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4175,"name":"int256","nodeType":"ElementaryTypeName","src":"1184:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1171:26:11"},"src":"1136:62:11"},{"documentation":{"id":4179,"nodeType":"StructuredDocumentation","src":"1204:75:11","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":4183,"name":"SafeCastOverflowedUintToInt","nameLocation":"1290:27:11","nodeType":"ErrorDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4181,"mutability":"mutable","name":"value","nameLocation":"1326:5:11","nodeType":"VariableDeclaration","scope":4183,"src":"1318:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1317:15:11"},"src":"1284:49:11"},{"body":{"id":4210,"nodeType":"Block","src":"1690:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"1704:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1717:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4193,"name":"uint248","nodeType":"ElementaryTypeName","src":"1717:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":4192,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1712:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1712:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":4196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1726:3:11","memberName":"max","nodeType":"MemberAccess","src":"1712:17:11","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1704:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4204,"nodeType":"IfStatement","src":"1700:105:11","trueBody":{"id":4203,"nodeType":"Block","src":"1731:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":4199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:3:11","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":4200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"1788:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4198,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"1752:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4202,"nodeType":"RevertStatement","src":"1745:49:11"}]}},{"expression":{"arguments":[{"id":4207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"1829:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1821:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4205,"name":"uint248","nodeType":"ElementaryTypeName","src":"1821:7:11","typeDescriptions":{}}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1821:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":4190,"id":4209,"nodeType":"Return","src":"1814:21:11"}]},"documentation":{"id":4184,"nodeType":"StructuredDocumentation","src":"1339:280:11","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":4211,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1633:9:11","nodeType":"FunctionDefinition","parameters":{"id":4187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4186,"mutability":"mutable","name":"value","nameLocation":"1651:5:11","nodeType":"VariableDeclaration","scope":4211,"src":"1643:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1642:15:11"},"returnParameters":{"id":4190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4211,"src":"1681:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":4188,"name":"uint248","nodeType":"ElementaryTypeName","src":"1681:7:11","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1680:9:11"},"scope":5911,"src":"1624:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4238,"nodeType":"Block","src":"2199:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"2213:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2226:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4221,"name":"uint240","nodeType":"ElementaryTypeName","src":"2226:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":4220,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2221:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2235:3:11","memberName":"max","nodeType":"MemberAccess","src":"2221:17:11","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2213:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4232,"nodeType":"IfStatement","src":"2209:105:11","trueBody":{"id":4231,"nodeType":"Block","src":"2240:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":4227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2292:3:11","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":4228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"2297:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4226,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"2261:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4230,"nodeType":"RevertStatement","src":"2254:49:11"}]}},{"expression":{"arguments":[{"id":4235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4214,"src":"2338:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2330:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4233,"name":"uint240","nodeType":"ElementaryTypeName","src":"2330:7:11","typeDescriptions":{}}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":4218,"id":4237,"nodeType":"Return","src":"2323:21:11"}]},"documentation":{"id":4212,"nodeType":"StructuredDocumentation","src":"1848:280:11","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":4239,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2142:9:11","nodeType":"FunctionDefinition","parameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"value","nameLocation":"2160:5:11","nodeType":"VariableDeclaration","scope":4239,"src":"2152:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2151:15:11"},"returnParameters":{"id":4218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4239,"src":"2190:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":4216,"name":"uint240","nodeType":"ElementaryTypeName","src":"2190:7:11","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2189:9:11"},"scope":5911,"src":"2133:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4266,"nodeType":"Block","src":"2708:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"2722:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2735:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4249,"name":"uint232","nodeType":"ElementaryTypeName","src":"2735:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":4248,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2730:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:3:11","memberName":"max","nodeType":"MemberAccess","src":"2730:17:11","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2722:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4260,"nodeType":"IfStatement","src":"2718:105:11","trueBody":{"id":4259,"nodeType":"Block","src":"2749:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2801:3:11","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":4256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"2806:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4254,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"2770:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4258,"nodeType":"RevertStatement","src":"2763:49:11"}]}},{"expression":{"arguments":[{"id":4263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"2847:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2839:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4261,"name":"uint232","nodeType":"ElementaryTypeName","src":"2839:7:11","typeDescriptions":{}}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":4246,"id":4265,"nodeType":"Return","src":"2832:21:11"}]},"documentation":{"id":4240,"nodeType":"StructuredDocumentation","src":"2357:280:11","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":4267,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2651:9:11","nodeType":"FunctionDefinition","parameters":{"id":4243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"value","nameLocation":"2669:5:11","nodeType":"VariableDeclaration","scope":4267,"src":"2661:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4241,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2660:15:11"},"returnParameters":{"id":4246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4267,"src":"2699:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":4244,"name":"uint232","nodeType":"ElementaryTypeName","src":"2699:7:11","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2698:9:11"},"scope":5911,"src":"2642:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4294,"nodeType":"Block","src":"3217:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"3231:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3244:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4277,"name":"uint224","nodeType":"ElementaryTypeName","src":"3244:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":4276,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3239:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3253:3:11","memberName":"max","nodeType":"MemberAccess","src":"3239:17:11","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3231:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4288,"nodeType":"IfStatement","src":"3227:105:11","trueBody":{"id":4287,"nodeType":"Block","src":"3258:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":4283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:3:11","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":4284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"3315:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4282,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"3279:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4286,"nodeType":"RevertStatement","src":"3272:49:11"}]}},{"expression":{"arguments":[{"id":4291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"3356:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3348:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4289,"name":"uint224","nodeType":"ElementaryTypeName","src":"3348:7:11","typeDescriptions":{}}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":4274,"id":4293,"nodeType":"Return","src":"3341:21:11"}]},"documentation":{"id":4268,"nodeType":"StructuredDocumentation","src":"2866:280:11","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4295,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3160:9:11","nodeType":"FunctionDefinition","parameters":{"id":4271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4270,"mutability":"mutable","name":"value","nameLocation":"3178:5:11","nodeType":"VariableDeclaration","scope":4295,"src":"3170:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4269,"name":"uint256","nodeType":"ElementaryTypeName","src":"3170:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3169:15:11"},"returnParameters":{"id":4274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4295,"src":"3208:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":4272,"name":"uint224","nodeType":"ElementaryTypeName","src":"3208:7:11","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3207:9:11"},"scope":5911,"src":"3151:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4322,"nodeType":"Block","src":"3726:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3740:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3753:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4305,"name":"uint216","nodeType":"ElementaryTypeName","src":"3753:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":4304,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3748:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3748:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3762:3:11","memberName":"max","nodeType":"MemberAccess","src":"3748:17:11","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3740:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4316,"nodeType":"IfStatement","src":"3736:105:11","trueBody":{"id":4315,"nodeType":"Block","src":"3767:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3819:3:11","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3824:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4310,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"3788:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3788:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4314,"nodeType":"RevertStatement","src":"3781:49:11"}]}},{"expression":{"arguments":[{"id":4319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4298,"src":"3865:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3857:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4317,"name":"uint216","nodeType":"ElementaryTypeName","src":"3857:7:11","typeDescriptions":{}}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3857:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":4302,"id":4321,"nodeType":"Return","src":"3850:21:11"}]},"documentation":{"id":4296,"nodeType":"StructuredDocumentation","src":"3375:280:11","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4323,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3669:9:11","nodeType":"FunctionDefinition","parameters":{"id":4299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4298,"mutability":"mutable","name":"value","nameLocation":"3687:5:11","nodeType":"VariableDeclaration","scope":4323,"src":"3679:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4297,"name":"uint256","nodeType":"ElementaryTypeName","src":"3679:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3678:15:11"},"returnParameters":{"id":4302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4323,"src":"3717:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":4300,"name":"uint216","nodeType":"ElementaryTypeName","src":"3717:7:11","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3716:9:11"},"scope":5911,"src":"3660:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4350,"nodeType":"Block","src":"4235:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"4249:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4262:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4333,"name":"uint208","nodeType":"ElementaryTypeName","src":"4262:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":4332,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4257:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4257:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":4336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4271:3:11","memberName":"max","nodeType":"MemberAccess","src":"4257:17:11","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4249:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4344,"nodeType":"IfStatement","src":"4245:105:11","trueBody":{"id":4343,"nodeType":"Block","src":"4276:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4328:3:11","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"4333:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4338,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"4297:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4342,"nodeType":"RevertStatement","src":"4290:49:11"}]}},{"expression":{"arguments":[{"id":4347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4326,"src":"4374:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4366:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4345,"name":"uint208","nodeType":"ElementaryTypeName","src":"4366:7:11","typeDescriptions":{}}},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4366:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":4330,"id":4349,"nodeType":"Return","src":"4359:21:11"}]},"documentation":{"id":4324,"nodeType":"StructuredDocumentation","src":"3884:280:11","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4351,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4178:9:11","nodeType":"FunctionDefinition","parameters":{"id":4327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4326,"mutability":"mutable","name":"value","nameLocation":"4196:5:11","nodeType":"VariableDeclaration","scope":4351,"src":"4188:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4325,"name":"uint256","nodeType":"ElementaryTypeName","src":"4188:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4187:15:11"},"returnParameters":{"id":4330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4351,"src":"4226:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":4328,"name":"uint208","nodeType":"ElementaryTypeName","src":"4226:7:11","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4225:9:11"},"scope":5911,"src":"4169:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4378,"nodeType":"Block","src":"4744:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4758:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4771:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4361,"name":"uint200","nodeType":"ElementaryTypeName","src":"4771:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":4360,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4766:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4766:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4780:3:11","memberName":"max","nodeType":"MemberAccess","src":"4766:17:11","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4758:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4372,"nodeType":"IfStatement","src":"4754:105:11","trueBody":{"id":4371,"nodeType":"Block","src":"4785:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4837:3:11","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4842:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4366,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"4806:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4370,"nodeType":"RevertStatement","src":"4799:49:11"}]}},{"expression":{"arguments":[{"id":4375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4883:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4875:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4373,"name":"uint200","nodeType":"ElementaryTypeName","src":"4875:7:11","typeDescriptions":{}}},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4875:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":4358,"id":4377,"nodeType":"Return","src":"4868:21:11"}]},"documentation":{"id":4352,"nodeType":"StructuredDocumentation","src":"4393:280:11","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4379,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4687:9:11","nodeType":"FunctionDefinition","parameters":{"id":4355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"value","nameLocation":"4705:5:11","nodeType":"VariableDeclaration","scope":4379,"src":"4697:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4696:15:11"},"returnParameters":{"id":4358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4379,"src":"4735:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":4356,"name":"uint200","nodeType":"ElementaryTypeName","src":"4735:7:11","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4734:9:11"},"scope":5911,"src":"4678:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4406,"nodeType":"Block","src":"5253:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"5267:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5280:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4389,"name":"uint192","nodeType":"ElementaryTypeName","src":"5280:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":4388,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5275:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5275:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5289:3:11","memberName":"max","nodeType":"MemberAccess","src":"5275:17:11","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5267:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4400,"nodeType":"IfStatement","src":"5263:105:11","trueBody":{"id":4399,"nodeType":"Block","src":"5294:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":4395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5346:3:11","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":4396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"5351:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4394,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"5315:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4398,"nodeType":"RevertStatement","src":"5308:49:11"}]}},{"expression":{"arguments":[{"id":4403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4382,"src":"5392:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5384:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4401,"name":"uint192","nodeType":"ElementaryTypeName","src":"5384:7:11","typeDescriptions":{}}},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5384:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":4386,"id":4405,"nodeType":"Return","src":"5377:21:11"}]},"documentation":{"id":4380,"nodeType":"StructuredDocumentation","src":"4902:280:11","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":4407,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5196:9:11","nodeType":"FunctionDefinition","parameters":{"id":4383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4382,"mutability":"mutable","name":"value","nameLocation":"5214:5:11","nodeType":"VariableDeclaration","scope":4407,"src":"5206:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4381,"name":"uint256","nodeType":"ElementaryTypeName","src":"5206:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5205:15:11"},"returnParameters":{"id":4386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4407,"src":"5244:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":4384,"name":"uint192","nodeType":"ElementaryTypeName","src":"5244:7:11","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5243:9:11"},"scope":5911,"src":"5187:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4434,"nodeType":"Block","src":"5762:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"5776:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5789:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4417,"name":"uint184","nodeType":"ElementaryTypeName","src":"5789:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":4416,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5784:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":4420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5798:3:11","memberName":"max","nodeType":"MemberAccess","src":"5784:17:11","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5776:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4428,"nodeType":"IfStatement","src":"5772:105:11","trueBody":{"id":4427,"nodeType":"Block","src":"5803:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":4423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5855:3:11","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":4424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"5860:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4422,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"5824:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5824:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4426,"nodeType":"RevertStatement","src":"5817:49:11"}]}},{"expression":{"arguments":[{"id":4431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"5901:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5893:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4429,"name":"uint184","nodeType":"ElementaryTypeName","src":"5893:7:11","typeDescriptions":{}}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5893:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":4414,"id":4433,"nodeType":"Return","src":"5886:21:11"}]},"documentation":{"id":4408,"nodeType":"StructuredDocumentation","src":"5411:280:11","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":4435,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5705:9:11","nodeType":"FunctionDefinition","parameters":{"id":4411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4410,"mutability":"mutable","name":"value","nameLocation":"5723:5:11","nodeType":"VariableDeclaration","scope":4435,"src":"5715:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4409,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5714:15:11"},"returnParameters":{"id":4414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4435,"src":"5753:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":4412,"name":"uint184","nodeType":"ElementaryTypeName","src":"5753:7:11","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5752:9:11"},"scope":5911,"src":"5696:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4462,"nodeType":"Block","src":"6271:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4443,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"6285:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6298:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4445,"name":"uint176","nodeType":"ElementaryTypeName","src":"6298:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":4444,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6293:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6307:3:11","memberName":"max","nodeType":"MemberAccess","src":"6293:17:11","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6285:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4456,"nodeType":"IfStatement","src":"6281:105:11","trueBody":{"id":4455,"nodeType":"Block","src":"6312:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":4451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6364:3:11","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":4452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"6369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4450,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"6333:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4454,"nodeType":"RevertStatement","src":"6326:49:11"}]}},{"expression":{"arguments":[{"id":4459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4438,"src":"6410:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6402:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4457,"name":"uint176","nodeType":"ElementaryTypeName","src":"6402:7:11","typeDescriptions":{}}},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":4442,"id":4461,"nodeType":"Return","src":"6395:21:11"}]},"documentation":{"id":4436,"nodeType":"StructuredDocumentation","src":"5920:280:11","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":4463,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6214:9:11","nodeType":"FunctionDefinition","parameters":{"id":4439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4438,"mutability":"mutable","name":"value","nameLocation":"6232:5:11","nodeType":"VariableDeclaration","scope":4463,"src":"6224:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4437,"name":"uint256","nodeType":"ElementaryTypeName","src":"6224:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6223:15:11"},"returnParameters":{"id":4442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4463,"src":"6262:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":4440,"name":"uint176","nodeType":"ElementaryTypeName","src":"6262:7:11","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6261:9:11"},"scope":5911,"src":"6205:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4490,"nodeType":"Block","src":"6780:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"6794:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6807:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4473,"name":"uint168","nodeType":"ElementaryTypeName","src":"6807:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":4472,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6802:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6802:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6816:3:11","memberName":"max","nodeType":"MemberAccess","src":"6802:17:11","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6794:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4484,"nodeType":"IfStatement","src":"6790:105:11","trueBody":{"id":4483,"nodeType":"Block","src":"6821:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6873:3:11","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"6878:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4478,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"6842:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4482,"nodeType":"RevertStatement","src":"6835:49:11"}]}},{"expression":{"arguments":[{"id":4487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"6919:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4485,"name":"uint168","nodeType":"ElementaryTypeName","src":"6911:7:11","typeDescriptions":{}}},"id":4488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":4470,"id":4489,"nodeType":"Return","src":"6904:21:11"}]},"documentation":{"id":4464,"nodeType":"StructuredDocumentation","src":"6429:280:11","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4491,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6723:9:11","nodeType":"FunctionDefinition","parameters":{"id":4467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4466,"mutability":"mutable","name":"value","nameLocation":"6741:5:11","nodeType":"VariableDeclaration","scope":4491,"src":"6733:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4465,"name":"uint256","nodeType":"ElementaryTypeName","src":"6733:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6732:15:11"},"returnParameters":{"id":4470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4491,"src":"6771:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":4468,"name":"uint168","nodeType":"ElementaryTypeName","src":"6771:7:11","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6770:9:11"},"scope":5911,"src":"6714:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4518,"nodeType":"Block","src":"7289:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"7303:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7316:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4501,"name":"uint160","nodeType":"ElementaryTypeName","src":"7316:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":4500,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7311:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7325:3:11","memberName":"max","nodeType":"MemberAccess","src":"7311:17:11","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7303:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4512,"nodeType":"IfStatement","src":"7299:105:11","trueBody":{"id":4511,"nodeType":"Block","src":"7330:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7382:3:11","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"7387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4506,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"7351:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7351:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4510,"nodeType":"RevertStatement","src":"7344:49:11"}]}},{"expression":{"arguments":[{"id":4515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"7428:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7420:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4513,"name":"uint160","nodeType":"ElementaryTypeName","src":"7420:7:11","typeDescriptions":{}}},"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":4498,"id":4517,"nodeType":"Return","src":"7413:21:11"}]},"documentation":{"id":4492,"nodeType":"StructuredDocumentation","src":"6938:280:11","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4519,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7232:9:11","nodeType":"FunctionDefinition","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4494,"mutability":"mutable","name":"value","nameLocation":"7250:5:11","nodeType":"VariableDeclaration","scope":4519,"src":"7242:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7241:15:11"},"returnParameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4519,"src":"7280:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4496,"name":"uint160","nodeType":"ElementaryTypeName","src":"7280:7:11","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7279:9:11"},"scope":5911,"src":"7223:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4546,"nodeType":"Block","src":"7798:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"7812:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7825:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4529,"name":"uint152","nodeType":"ElementaryTypeName","src":"7825:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":4528,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7820:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7820:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7834:3:11","memberName":"max","nodeType":"MemberAccess","src":"7820:17:11","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7812:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4540,"nodeType":"IfStatement","src":"7808:105:11","trueBody":{"id":4539,"nodeType":"Block","src":"7839:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7891:3:11","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"7896:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4534,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"7860:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7860:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4538,"nodeType":"RevertStatement","src":"7853:49:11"}]}},{"expression":{"arguments":[{"id":4543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4522,"src":"7937:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7929:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4541,"name":"uint152","nodeType":"ElementaryTypeName","src":"7929:7:11","typeDescriptions":{}}},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7929:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":4526,"id":4545,"nodeType":"Return","src":"7922:21:11"}]},"documentation":{"id":4520,"nodeType":"StructuredDocumentation","src":"7447:280:11","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4547,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7741:9:11","nodeType":"FunctionDefinition","parameters":{"id":4523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4522,"mutability":"mutable","name":"value","nameLocation":"7759:5:11","nodeType":"VariableDeclaration","scope":4547,"src":"7751:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4521,"name":"uint256","nodeType":"ElementaryTypeName","src":"7751:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7750:15:11"},"returnParameters":{"id":4526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4547,"src":"7789:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":4524,"name":"uint152","nodeType":"ElementaryTypeName","src":"7789:7:11","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7788:9:11"},"scope":5911,"src":"7732:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4574,"nodeType":"Block","src":"8307:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4555,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"8321:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8334:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4557,"name":"uint144","nodeType":"ElementaryTypeName","src":"8334:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":4556,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8329:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8329:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8343:3:11","memberName":"max","nodeType":"MemberAccess","src":"8329:17:11","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8321:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4568,"nodeType":"IfStatement","src":"8317:105:11","trueBody":{"id":4567,"nodeType":"Block","src":"8348:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8400:3:11","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"8405:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4562,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"8369:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8369:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4566,"nodeType":"RevertStatement","src":"8362:49:11"}]}},{"expression":{"arguments":[{"id":4571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"8446:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8438:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4569,"name":"uint144","nodeType":"ElementaryTypeName","src":"8438:7:11","typeDescriptions":{}}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":4554,"id":4573,"nodeType":"Return","src":"8431:21:11"}]},"documentation":{"id":4548,"nodeType":"StructuredDocumentation","src":"7956:280:11","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4575,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8250:9:11","nodeType":"FunctionDefinition","parameters":{"id":4551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4550,"mutability":"mutable","name":"value","nameLocation":"8268:5:11","nodeType":"VariableDeclaration","scope":4575,"src":"8260:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4549,"name":"uint256","nodeType":"ElementaryTypeName","src":"8260:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8259:15:11"},"returnParameters":{"id":4554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4575,"src":"8298:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":4552,"name":"uint144","nodeType":"ElementaryTypeName","src":"8298:7:11","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8297:9:11"},"scope":5911,"src":"8241:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4602,"nodeType":"Block","src":"8816:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"8830:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8843:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4585,"name":"uint136","nodeType":"ElementaryTypeName","src":"8843:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":4584,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8838:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8838:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8852:3:11","memberName":"max","nodeType":"MemberAccess","src":"8838:17:11","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8830:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4596,"nodeType":"IfStatement","src":"8826:105:11","trueBody":{"id":4595,"nodeType":"Block","src":"8857:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8909:3:11","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"8914:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4590,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"8878:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4594,"nodeType":"RevertStatement","src":"8871:49:11"}]}},{"expression":{"arguments":[{"id":4599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"8955:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8947:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4597,"name":"uint136","nodeType":"ElementaryTypeName","src":"8947:7:11","typeDescriptions":{}}},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":4582,"id":4601,"nodeType":"Return","src":"8940:21:11"}]},"documentation":{"id":4576,"nodeType":"StructuredDocumentation","src":"8465:280:11","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4603,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8759:9:11","nodeType":"FunctionDefinition","parameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4578,"mutability":"mutable","name":"value","nameLocation":"8777:5:11","nodeType":"VariableDeclaration","scope":4603,"src":"8769:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4577,"name":"uint256","nodeType":"ElementaryTypeName","src":"8769:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8768:15:11"},"returnParameters":{"id":4582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4603,"src":"8807:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":4580,"name":"uint136","nodeType":"ElementaryTypeName","src":"8807:7:11","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8806:9:11"},"scope":5911,"src":"8750:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4630,"nodeType":"Block","src":"9325:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"9339:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9352:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4613,"name":"uint128","nodeType":"ElementaryTypeName","src":"9352:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4612,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9347:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9347:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9361:3:11","memberName":"max","nodeType":"MemberAccess","src":"9347:17:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9339:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4624,"nodeType":"IfStatement","src":"9335:105:11","trueBody":{"id":4623,"nodeType":"Block","src":"9366:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":4619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9418:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":4620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"9423:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4618,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"9387:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9387:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4622,"nodeType":"RevertStatement","src":"9380:49:11"}]}},{"expression":{"arguments":[{"id":4627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"9464:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9456:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4625,"name":"uint128","nodeType":"ElementaryTypeName","src":"9456:7:11","typeDescriptions":{}}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9456:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4610,"id":4629,"nodeType":"Return","src":"9449:21:11"}]},"documentation":{"id":4604,"nodeType":"StructuredDocumentation","src":"8974:280:11","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":4631,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9268:9:11","nodeType":"FunctionDefinition","parameters":{"id":4607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4606,"mutability":"mutable","name":"value","nameLocation":"9286:5:11","nodeType":"VariableDeclaration","scope":4631,"src":"9278:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4605,"name":"uint256","nodeType":"ElementaryTypeName","src":"9278:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9277:15:11"},"returnParameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4631,"src":"9316:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4608,"name":"uint128","nodeType":"ElementaryTypeName","src":"9316:7:11","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9315:9:11"},"scope":5911,"src":"9259:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4658,"nodeType":"Block","src":"9834:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"9848:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9861:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4641,"name":"uint120","nodeType":"ElementaryTypeName","src":"9861:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":4640,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9856:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":4644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9870:3:11","memberName":"max","nodeType":"MemberAccess","src":"9856:17:11","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9848:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4652,"nodeType":"IfStatement","src":"9844:105:11","trueBody":{"id":4651,"nodeType":"Block","src":"9875:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":4647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9927:3:11","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":4648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"9932:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4646,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"9896:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9896:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4650,"nodeType":"RevertStatement","src":"9889:49:11"}]}},{"expression":{"arguments":[{"id":4655,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"9973:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9965:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4653,"name":"uint120","nodeType":"ElementaryTypeName","src":"9965:7:11","typeDescriptions":{}}},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":4638,"id":4657,"nodeType":"Return","src":"9958:21:11"}]},"documentation":{"id":4632,"nodeType":"StructuredDocumentation","src":"9483:280:11","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":4659,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9777:9:11","nodeType":"FunctionDefinition","parameters":{"id":4635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4634,"mutability":"mutable","name":"value","nameLocation":"9795:5:11","nodeType":"VariableDeclaration","scope":4659,"src":"9787:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4633,"name":"uint256","nodeType":"ElementaryTypeName","src":"9787:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9786:15:11"},"returnParameters":{"id":4638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4659,"src":"9825:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":4636,"name":"uint120","nodeType":"ElementaryTypeName","src":"9825:7:11","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9824:9:11"},"scope":5911,"src":"9768:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4686,"nodeType":"Block","src":"10343:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"10357:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10370:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4669,"name":"uint112","nodeType":"ElementaryTypeName","src":"10370:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":4668,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10365:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10365:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":4672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10379:3:11","memberName":"max","nodeType":"MemberAccess","src":"10365:17:11","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10357:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4680,"nodeType":"IfStatement","src":"10353:105:11","trueBody":{"id":4679,"nodeType":"Block","src":"10384:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10436:3:11","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":4676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"10441:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4674,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"10405:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10405:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4678,"nodeType":"RevertStatement","src":"10398:49:11"}]}},{"expression":{"arguments":[{"id":4683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"10482:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4681,"name":"uint112","nodeType":"ElementaryTypeName","src":"10474:7:11","typeDescriptions":{}}},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":4666,"id":4685,"nodeType":"Return","src":"10467:21:11"}]},"documentation":{"id":4660,"nodeType":"StructuredDocumentation","src":"9992:280:11","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":4687,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10286:9:11","nodeType":"FunctionDefinition","parameters":{"id":4663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"value","nameLocation":"10304:5:11","nodeType":"VariableDeclaration","scope":4687,"src":"10296:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4661,"name":"uint256","nodeType":"ElementaryTypeName","src":"10296:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10295:15:11"},"returnParameters":{"id":4666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4687,"src":"10334:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":4664,"name":"uint112","nodeType":"ElementaryTypeName","src":"10334:7:11","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10333:9:11"},"scope":5911,"src":"10277:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4714,"nodeType":"Block","src":"10852:152:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"10866:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10879:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4697,"name":"uint104","nodeType":"ElementaryTypeName","src":"10879:7:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":4696,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10874:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10874:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10888:3:11","memberName":"max","nodeType":"MemberAccess","src":"10874:17:11","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10866:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4708,"nodeType":"IfStatement","src":"10862:105:11","trueBody":{"id":4707,"nodeType":"Block","src":"10893:74:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10945:3:11","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":4704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"10950:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4702,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"10914:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10914:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4706,"nodeType":"RevertStatement","src":"10907:49:11"}]}},{"expression":{"arguments":[{"id":4711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"10991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10983:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4709,"name":"uint104","nodeType":"ElementaryTypeName","src":"10983:7:11","typeDescriptions":{}}},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10983:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":4694,"id":4713,"nodeType":"Return","src":"10976:21:11"}]},"documentation":{"id":4688,"nodeType":"StructuredDocumentation","src":"10501:280:11","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":4715,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10795:9:11","nodeType":"FunctionDefinition","parameters":{"id":4691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4690,"mutability":"mutable","name":"value","nameLocation":"10813:5:11","nodeType":"VariableDeclaration","scope":4715,"src":"10805:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4689,"name":"uint256","nodeType":"ElementaryTypeName","src":"10805:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10804:15:11"},"returnParameters":{"id":4694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4715,"src":"10843:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":4692,"name":"uint104","nodeType":"ElementaryTypeName","src":"10843:7:11","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10842:9:11"},"scope":5911,"src":"10786:218:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4742,"nodeType":"Block","src":"11355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"11369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4725,"name":"uint96","nodeType":"ElementaryTypeName","src":"11382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":4724,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":4728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11390:3:11","memberName":"max","nodeType":"MemberAccess","src":"11377:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4736,"nodeType":"IfStatement","src":"11365:103:11","trueBody":{"id":4735,"nodeType":"Block","src":"11395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":4731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":4732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"11451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4730,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"11416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4734,"nodeType":"RevertStatement","src":"11409:48:11"}]}},{"expression":{"arguments":[{"id":4739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"11491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4737,"name":"uint96","nodeType":"ElementaryTypeName","src":"11484:6:11","typeDescriptions":{}}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4722,"id":4741,"nodeType":"Return","src":"11477:20:11"}]},"documentation":{"id":4716,"nodeType":"StructuredDocumentation","src":"11010:276:11","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":4743,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4718,"mutability":"mutable","name":"value","nameLocation":"11317:5:11","nodeType":"VariableDeclaration","scope":4743,"src":"11309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4717,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11308:15:11"},"returnParameters":{"id":4722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4743,"src":"11347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4720,"name":"uint96","nodeType":"ElementaryTypeName","src":"11347:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11346:8:11"},"scope":5911,"src":"11291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4770,"nodeType":"Block","src":"11855:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"11869:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11882:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4753,"name":"uint88","nodeType":"ElementaryTypeName","src":"11882:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":4752,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11877:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11877:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11890:3:11","memberName":"max","nodeType":"MemberAccess","src":"11877:16:11","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11869:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4764,"nodeType":"IfStatement","src":"11865:103:11","trueBody":{"id":4763,"nodeType":"Block","src":"11895:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":4759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":4760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"11951:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4758,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"11916:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11916:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4762,"nodeType":"RevertStatement","src":"11909:48:11"}]}},{"expression":{"arguments":[{"id":4767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"11991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4765,"name":"uint88","nodeType":"ElementaryTypeName","src":"11984:6:11","typeDescriptions":{}}},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":4750,"id":4769,"nodeType":"Return","src":"11977:20:11"}]},"documentation":{"id":4744,"nodeType":"StructuredDocumentation","src":"11510:276:11","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":4771,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11800:8:11","nodeType":"FunctionDefinition","parameters":{"id":4747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4746,"mutability":"mutable","name":"value","nameLocation":"11817:5:11","nodeType":"VariableDeclaration","scope":4771,"src":"11809:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4745,"name":"uint256","nodeType":"ElementaryTypeName","src":"11809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11808:15:11"},"returnParameters":{"id":4750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4771,"src":"11847:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":4748,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:11","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11846:8:11"},"scope":5911,"src":"11791:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4798,"nodeType":"Block","src":"12355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"12369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4781,"name":"uint80","nodeType":"ElementaryTypeName","src":"12382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":4780,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":4784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12390:3:11","memberName":"max","nodeType":"MemberAccess","src":"12377:16:11","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4792,"nodeType":"IfStatement","src":"12365:103:11","trueBody":{"id":4791,"nodeType":"Block","src":"12395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":4787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":4788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"12451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4786,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"12416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4790,"nodeType":"RevertStatement","src":"12409:48:11"}]}},{"expression":{"arguments":[{"id":4795,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"12491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4793,"name":"uint80","nodeType":"ElementaryTypeName","src":"12484:6:11","typeDescriptions":{}}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":4778,"id":4797,"nodeType":"Return","src":"12477:20:11"}]},"documentation":{"id":4772,"nodeType":"StructuredDocumentation","src":"12010:276:11","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":4799,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4774,"mutability":"mutable","name":"value","nameLocation":"12317:5:11","nodeType":"VariableDeclaration","scope":4799,"src":"12309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4773,"name":"uint256","nodeType":"ElementaryTypeName","src":"12309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12308:15:11"},"returnParameters":{"id":4778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4777,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4799,"src":"12347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":4776,"name":"uint80","nodeType":"ElementaryTypeName","src":"12347:6:11","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12346:8:11"},"scope":5911,"src":"12291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4826,"nodeType":"Block","src":"12855:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"12869:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12882:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4809,"name":"uint72","nodeType":"ElementaryTypeName","src":"12882:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":4808,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12877:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12877:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":4812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12890:3:11","memberName":"max","nodeType":"MemberAccess","src":"12877:16:11","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12869:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4820,"nodeType":"IfStatement","src":"12865:103:11","trueBody":{"id":4819,"nodeType":"Block","src":"12895:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":4815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":4816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"12951:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4814,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"12916:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12916:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4818,"nodeType":"RevertStatement","src":"12909:48:11"}]}},{"expression":{"arguments":[{"id":4823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"12991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4821,"name":"uint72","nodeType":"ElementaryTypeName","src":"12984:6:11","typeDescriptions":{}}},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":4806,"id":4825,"nodeType":"Return","src":"12977:20:11"}]},"documentation":{"id":4800,"nodeType":"StructuredDocumentation","src":"12510:276:11","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":4827,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12800:8:11","nodeType":"FunctionDefinition","parameters":{"id":4803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4802,"mutability":"mutable","name":"value","nameLocation":"12817:5:11","nodeType":"VariableDeclaration","scope":4827,"src":"12809:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4801,"name":"uint256","nodeType":"ElementaryTypeName","src":"12809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12808:15:11"},"returnParameters":{"id":4806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4827,"src":"12847:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":4804,"name":"uint72","nodeType":"ElementaryTypeName","src":"12847:6:11","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12846:8:11"},"scope":5911,"src":"12791:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4854,"nodeType":"Block","src":"13355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"13369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4837,"name":"uint64","nodeType":"ElementaryTypeName","src":"13382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4836,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13390:3:11","memberName":"max","nodeType":"MemberAccess","src":"13377:16:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4848,"nodeType":"IfStatement","src":"13365:103:11","trueBody":{"id":4847,"nodeType":"Block","src":"13395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":4843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":4844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"13451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4842,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"13416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4846,"nodeType":"RevertStatement","src":"13409:48:11"}]}},{"expression":{"arguments":[{"id":4851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"13491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4849,"name":"uint64","nodeType":"ElementaryTypeName","src":"13484:6:11","typeDescriptions":{}}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4834,"id":4853,"nodeType":"Return","src":"13477:20:11"}]},"documentation":{"id":4828,"nodeType":"StructuredDocumentation","src":"13010:276:11","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":4855,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4830,"mutability":"mutable","name":"value","nameLocation":"13317:5:11","nodeType":"VariableDeclaration","scope":4855,"src":"13309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4829,"name":"uint256","nodeType":"ElementaryTypeName","src":"13309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13308:15:11"},"returnParameters":{"id":4834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4855,"src":"13347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4832,"name":"uint64","nodeType":"ElementaryTypeName","src":"13347:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13346:8:11"},"scope":5911,"src":"13291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4882,"nodeType":"Block","src":"13855:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"13869:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13882:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4865,"name":"uint56","nodeType":"ElementaryTypeName","src":"13882:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":4864,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13877:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13877:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":4868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13890:3:11","memberName":"max","nodeType":"MemberAccess","src":"13877:16:11","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13869:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4876,"nodeType":"IfStatement","src":"13865:103:11","trueBody":{"id":4875,"nodeType":"Block","src":"13895:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":4871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":4872,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"13951:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4870,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"13916:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13916:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4874,"nodeType":"RevertStatement","src":"13909:48:11"}]}},{"expression":{"arguments":[{"id":4879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4858,"src":"13991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4877,"name":"uint56","nodeType":"ElementaryTypeName","src":"13984:6:11","typeDescriptions":{}}},"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":4862,"id":4881,"nodeType":"Return","src":"13977:20:11"}]},"documentation":{"id":4856,"nodeType":"StructuredDocumentation","src":"13510:276:11","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":4883,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13800:8:11","nodeType":"FunctionDefinition","parameters":{"id":4859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4858,"mutability":"mutable","name":"value","nameLocation":"13817:5:11","nodeType":"VariableDeclaration","scope":4883,"src":"13809:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4857,"name":"uint256","nodeType":"ElementaryTypeName","src":"13809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13808:15:11"},"returnParameters":{"id":4862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4883,"src":"13847:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":4860,"name":"uint56","nodeType":"ElementaryTypeName","src":"13847:6:11","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13846:8:11"},"scope":5911,"src":"13791:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4910,"nodeType":"Block","src":"14355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"14369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4893,"name":"uint48","nodeType":"ElementaryTypeName","src":"14382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":4892,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":4896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14390:3:11","memberName":"max","nodeType":"MemberAccess","src":"14377:16:11","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4904,"nodeType":"IfStatement","src":"14365:103:11","trueBody":{"id":4903,"nodeType":"Block","src":"14395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":4899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":4900,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"14451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4898,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"14416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4902,"nodeType":"RevertStatement","src":"14409:48:11"}]}},{"expression":{"arguments":[{"id":4907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4886,"src":"14491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4905,"name":"uint48","nodeType":"ElementaryTypeName","src":"14484:6:11","typeDescriptions":{}}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":4890,"id":4909,"nodeType":"Return","src":"14477:20:11"}]},"documentation":{"id":4884,"nodeType":"StructuredDocumentation","src":"14010:276:11","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":4911,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4886,"mutability":"mutable","name":"value","nameLocation":"14317:5:11","nodeType":"VariableDeclaration","scope":4911,"src":"14309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4885,"name":"uint256","nodeType":"ElementaryTypeName","src":"14309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14308:15:11"},"returnParameters":{"id":4890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4911,"src":"14347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4888,"name":"uint48","nodeType":"ElementaryTypeName","src":"14347:6:11","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14346:8:11"},"scope":5911,"src":"14291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4938,"nodeType":"Block","src":"14855:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"14869:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14882:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4921,"name":"uint40","nodeType":"ElementaryTypeName","src":"14882:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":4920,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14877:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14877:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14890:3:11","memberName":"max","nodeType":"MemberAccess","src":"14877:16:11","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14869:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4932,"nodeType":"IfStatement","src":"14865:103:11","trueBody":{"id":4931,"nodeType":"Block","src":"14895:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":4927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":4928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"14951:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4926,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"14916:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14916:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4930,"nodeType":"RevertStatement","src":"14909:48:11"}]}},{"expression":{"arguments":[{"id":4935,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4914,"src":"14991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4933,"name":"uint40","nodeType":"ElementaryTypeName","src":"14984:6:11","typeDescriptions":{}}},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":4918,"id":4937,"nodeType":"Return","src":"14977:20:11"}]},"documentation":{"id":4912,"nodeType":"StructuredDocumentation","src":"14510:276:11","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":4939,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14800:8:11","nodeType":"FunctionDefinition","parameters":{"id":4915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4914,"mutability":"mutable","name":"value","nameLocation":"14817:5:11","nodeType":"VariableDeclaration","scope":4939,"src":"14809:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4913,"name":"uint256","nodeType":"ElementaryTypeName","src":"14809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14808:15:11"},"returnParameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4939,"src":"14847:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":4916,"name":"uint40","nodeType":"ElementaryTypeName","src":"14847:6:11","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14846:8:11"},"scope":5911,"src":"14791:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4966,"nodeType":"Block","src":"15355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"15369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4949,"name":"uint32","nodeType":"ElementaryTypeName","src":"15382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4948,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15390:3:11","memberName":"max","nodeType":"MemberAccess","src":"15377:16:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4960,"nodeType":"IfStatement","src":"15365:103:11","trueBody":{"id":4959,"nodeType":"Block","src":"15395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":4955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":4956,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"15451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4954,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"15416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4958,"nodeType":"RevertStatement","src":"15409:48:11"}]}},{"expression":{"arguments":[{"id":4963,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4942,"src":"15491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4961,"name":"uint32","nodeType":"ElementaryTypeName","src":"15484:6:11","typeDescriptions":{}}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4946,"id":4965,"nodeType":"Return","src":"15477:20:11"}]},"documentation":{"id":4940,"nodeType":"StructuredDocumentation","src":"15010:276:11","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":4967,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"value","nameLocation":"15317:5:11","nodeType":"VariableDeclaration","scope":4967,"src":"15309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4941,"name":"uint256","nodeType":"ElementaryTypeName","src":"15309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15308:15:11"},"returnParameters":{"id":4946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4967,"src":"15347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4944,"name":"uint32","nodeType":"ElementaryTypeName","src":"15347:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15346:8:11"},"scope":5911,"src":"15291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4994,"nodeType":"Block","src":"15855:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4975,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"15869:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15882:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4977,"name":"uint24","nodeType":"ElementaryTypeName","src":"15882:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":4976,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15877:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15877:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15890:3:11","memberName":"max","nodeType":"MemberAccess","src":"15877:16:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15869:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4988,"nodeType":"IfStatement","src":"15865:103:11","trueBody":{"id":4987,"nodeType":"Block","src":"15895:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":4983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15947:2:11","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":4984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"15951:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4982,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"15916:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4986,"nodeType":"RevertStatement","src":"15909:48:11"}]}},{"expression":{"arguments":[{"id":4991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"15991:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4989,"name":"uint24","nodeType":"ElementaryTypeName","src":"15984:6:11","typeDescriptions":{}}},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":4974,"id":4993,"nodeType":"Return","src":"15977:20:11"}]},"documentation":{"id":4968,"nodeType":"StructuredDocumentation","src":"15510:276:11","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":4995,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15800:8:11","nodeType":"FunctionDefinition","parameters":{"id":4971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4970,"mutability":"mutable","name":"value","nameLocation":"15817:5:11","nodeType":"VariableDeclaration","scope":4995,"src":"15809:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4969,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15808:15:11"},"returnParameters":{"id":4974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4995,"src":"15847:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4972,"name":"uint24","nodeType":"ElementaryTypeName","src":"15847:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15846:8:11"},"scope":5911,"src":"15791:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5022,"nodeType":"Block","src":"16355:149:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5003,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"16369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16382:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":5005,"name":"uint16","nodeType":"ElementaryTypeName","src":"16382:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":5004,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16377:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16377:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16390:3:11","memberName":"max","nodeType":"MemberAccess","src":"16377:16:11","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16369:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5016,"nodeType":"IfStatement","src":"16365:103:11","trueBody":{"id":5015,"nodeType":"Block","src":"16395:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":5011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16447:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":5012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"16451:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5010,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"16416:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16416:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5014,"nodeType":"RevertStatement","src":"16409:48:11"}]}},{"expression":{"arguments":[{"id":5019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4998,"src":"16491:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16484:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":5017,"name":"uint16","nodeType":"ElementaryTypeName","src":"16484:6:11","typeDescriptions":{}}},"id":5020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16484:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":5002,"id":5021,"nodeType":"Return","src":"16477:20:11"}]},"documentation":{"id":4996,"nodeType":"StructuredDocumentation","src":"16010:276:11","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":5023,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16300:8:11","nodeType":"FunctionDefinition","parameters":{"id":4999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4998,"mutability":"mutable","name":"value","nameLocation":"16317:5:11","nodeType":"VariableDeclaration","scope":5023,"src":"16309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4997,"name":"uint256","nodeType":"ElementaryTypeName","src":"16309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16308:15:11"},"returnParameters":{"id":5002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5023,"src":"16347:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5000,"name":"uint16","nodeType":"ElementaryTypeName","src":"16347:6:11","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16346:8:11"},"scope":5911,"src":"16291:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5050,"nodeType":"Block","src":"16849:146:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"16863:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16876:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5033,"name":"uint8","nodeType":"ElementaryTypeName","src":"16876:5:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":5032,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16871:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16871:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16883:3:11","memberName":"max","nodeType":"MemberAccess","src":"16871:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16863:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5044,"nodeType":"IfStatement","src":"16859:101:11","trueBody":{"id":5043,"nodeType":"Block","src":"16888:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":5039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16940:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":5040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"16943:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5038,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"16909:30:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16909:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5042,"nodeType":"RevertStatement","src":"16902:47:11"}]}},{"expression":{"arguments":[{"id":5047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"16982:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16976:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5045,"name":"uint8","nodeType":"ElementaryTypeName","src":"16976:5:11","typeDescriptions":{}}},"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16976:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":5030,"id":5049,"nodeType":"Return","src":"16969:19:11"}]},"documentation":{"id":5024,"nodeType":"StructuredDocumentation","src":"16510:272:11","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":5051,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16796:7:11","nodeType":"FunctionDefinition","parameters":{"id":5027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5026,"mutability":"mutable","name":"value","nameLocation":"16812:5:11","nodeType":"VariableDeclaration","scope":5051,"src":"16804:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5025,"name":"uint256","nodeType":"ElementaryTypeName","src":"16804:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16803:15:11"},"returnParameters":{"id":5030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5051,"src":"16842:5:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5028,"name":"uint8","nodeType":"ElementaryTypeName","src":"16842:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16841:7:11"},"scope":5911,"src":"16787:208:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5073,"nodeType":"Block","src":"17231:128:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"17245:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":5060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17253:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17245:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5067,"nodeType":"IfStatement","src":"17241:81:11","trueBody":{"id":5066,"nodeType":"Block","src":"17256:66:11","statements":[{"errorCall":{"arguments":[{"id":5063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"17305:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5062,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"17277:27:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$__$","typeString":"function (int256) pure"}},"id":5064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17277:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5065,"nodeType":"RevertStatement","src":"17270:41:11"}]}},{"expression":{"arguments":[{"id":5070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5054,"src":"17346:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17338:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5068,"name":"uint256","nodeType":"ElementaryTypeName","src":"17338:7:11","typeDescriptions":{}}},"id":5071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17338:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5058,"id":5072,"nodeType":"Return","src":"17331:21:11"}]},"documentation":{"id":5052,"nodeType":"StructuredDocumentation","src":"17001:160:11","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":5074,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17175:9:11","nodeType":"FunctionDefinition","parameters":{"id":5055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5054,"mutability":"mutable","name":"value","nameLocation":"17192:5:11","nodeType":"VariableDeclaration","scope":5074,"src":"17185:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5053,"name":"int256","nodeType":"ElementaryTypeName","src":"17185:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17184:14:11"},"returnParameters":{"id":5058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5074,"src":"17222:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5056,"name":"uint256","nodeType":"ElementaryTypeName","src":"17222:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17221:9:11"},"scope":5911,"src":"17166:193:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5099,"nodeType":"Block","src":"17756:150:11","statements":[{"expression":{"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5082,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"17766:10:11","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"17786:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17779:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":5083,"name":"int248","nodeType":"ElementaryTypeName","src":"17779:6:11","typeDescriptions":{}}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17779:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17766:26:11","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":5088,"nodeType":"ExpressionStatement","src":"17766:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5089,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"17806:10:11","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"17820:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17806:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5098,"nodeType":"IfStatement","src":"17802:98:11","trueBody":{"id":5097,"nodeType":"Block","src":"17827:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":5093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17878:3:11","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":5094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5077,"src":"17883:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5092,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"17848:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17848:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5096,"nodeType":"RevertStatement","src":"17841:48:11"}]}}]},"documentation":{"id":5075,"nodeType":"StructuredDocumentation","src":"17365:312:11","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":5100,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17691:8:11","nodeType":"FunctionDefinition","parameters":{"id":5078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5077,"mutability":"mutable","name":"value","nameLocation":"17707:5:11","nodeType":"VariableDeclaration","scope":5100,"src":"17700:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5076,"name":"int256","nodeType":"ElementaryTypeName","src":"17700:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17699:14:11"},"returnParameters":{"id":5081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5080,"mutability":"mutable","name":"downcasted","nameLocation":"17744:10:11","nodeType":"VariableDeclaration","scope":5100,"src":"17737:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":5079,"name":"int248","nodeType":"ElementaryTypeName","src":"17737:6:11","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17736:19:11"},"scope":5911,"src":"17682:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5125,"nodeType":"Block","src":"18303:150:11","statements":[{"expression":{"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5108,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5106,"src":"18313:10:11","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"18333:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18326:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":5109,"name":"int240","nodeType":"ElementaryTypeName","src":"18326:6:11","typeDescriptions":{}}},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18326:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18313:26:11","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":5114,"nodeType":"ExpressionStatement","src":"18313:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5115,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5106,"src":"18353:10:11","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"18367:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18353:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5124,"nodeType":"IfStatement","src":"18349:98:11","trueBody":{"id":5123,"nodeType":"Block","src":"18374:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":5119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18425:3:11","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":5120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"18430:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5118,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"18395:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18395:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5122,"nodeType":"RevertStatement","src":"18388:48:11"}]}}]},"documentation":{"id":5101,"nodeType":"StructuredDocumentation","src":"17912:312:11","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":5126,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18238:8:11","nodeType":"FunctionDefinition","parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5103,"mutability":"mutable","name":"value","nameLocation":"18254:5:11","nodeType":"VariableDeclaration","scope":5126,"src":"18247:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5102,"name":"int256","nodeType":"ElementaryTypeName","src":"18247:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18246:14:11"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"downcasted","nameLocation":"18291:10:11","nodeType":"VariableDeclaration","scope":5126,"src":"18284:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":5105,"name":"int240","nodeType":"ElementaryTypeName","src":"18284:6:11","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18283:19:11"},"scope":5911,"src":"18229:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5151,"nodeType":"Block","src":"18850:150:11","statements":[{"expression":{"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5134,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"18860:10:11","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"18880:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18873:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":5135,"name":"int232","nodeType":"ElementaryTypeName","src":"18873:6:11","typeDescriptions":{}}},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18873:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18860:26:11","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":5140,"nodeType":"ExpressionStatement","src":"18860:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5141,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"18900:10:11","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"18914:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18900:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5150,"nodeType":"IfStatement","src":"18896:98:11","trueBody":{"id":5149,"nodeType":"Block","src":"18921:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":5145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18972:3:11","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":5146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5129,"src":"18977:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5144,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"18942:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18942:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5148,"nodeType":"RevertStatement","src":"18935:48:11"}]}}]},"documentation":{"id":5127,"nodeType":"StructuredDocumentation","src":"18459:312:11","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":5152,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18785:8:11","nodeType":"FunctionDefinition","parameters":{"id":5130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5129,"mutability":"mutable","name":"value","nameLocation":"18801:5:11","nodeType":"VariableDeclaration","scope":5152,"src":"18794:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5128,"name":"int256","nodeType":"ElementaryTypeName","src":"18794:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18793:14:11"},"returnParameters":{"id":5133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"downcasted","nameLocation":"18838:10:11","nodeType":"VariableDeclaration","scope":5152,"src":"18831:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":5131,"name":"int232","nodeType":"ElementaryTypeName","src":"18831:6:11","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18830:19:11"},"scope":5911,"src":"18776:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5177,"nodeType":"Block","src":"19397:150:11","statements":[{"expression":{"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5160,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"19407:10:11","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"19427:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19420:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":5161,"name":"int224","nodeType":"ElementaryTypeName","src":"19420:6:11","typeDescriptions":{}}},"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19420:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19407:26:11","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":5166,"nodeType":"ExpressionStatement","src":"19407:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5167,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"19447:10:11","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"19461:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19447:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5176,"nodeType":"IfStatement","src":"19443:98:11","trueBody":{"id":5175,"nodeType":"Block","src":"19468:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":5171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19519:3:11","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":5172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5155,"src":"19524:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5170,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"19489:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19489:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5174,"nodeType":"RevertStatement","src":"19482:48:11"}]}}]},"documentation":{"id":5153,"nodeType":"StructuredDocumentation","src":"19006:312:11","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":5178,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19332:8:11","nodeType":"FunctionDefinition","parameters":{"id":5156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5155,"mutability":"mutable","name":"value","nameLocation":"19348:5:11","nodeType":"VariableDeclaration","scope":5178,"src":"19341:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5154,"name":"int256","nodeType":"ElementaryTypeName","src":"19341:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19340:14:11"},"returnParameters":{"id":5159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5158,"mutability":"mutable","name":"downcasted","nameLocation":"19385:10:11","nodeType":"VariableDeclaration","scope":5178,"src":"19378:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":5157,"name":"int224","nodeType":"ElementaryTypeName","src":"19378:6:11","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19377:19:11"},"scope":5911,"src":"19323:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5203,"nodeType":"Block","src":"19944:150:11","statements":[{"expression":{"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5186,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5184,"src":"19954:10:11","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"19974:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19967:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":5187,"name":"int216","nodeType":"ElementaryTypeName","src":"19967:6:11","typeDescriptions":{}}},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19967:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19954:26:11","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":5192,"nodeType":"ExpressionStatement","src":"19954:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5193,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5184,"src":"19994:10:11","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"20008:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19994:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5202,"nodeType":"IfStatement","src":"19990:98:11","trueBody":{"id":5201,"nodeType":"Block","src":"20015:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20066:3:11","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":5198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"20071:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5196,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"20036:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20036:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5200,"nodeType":"RevertStatement","src":"20029:48:11"}]}}]},"documentation":{"id":5179,"nodeType":"StructuredDocumentation","src":"19553:312:11","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":5204,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19879:8:11","nodeType":"FunctionDefinition","parameters":{"id":5182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5181,"mutability":"mutable","name":"value","nameLocation":"19895:5:11","nodeType":"VariableDeclaration","scope":5204,"src":"19888:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5180,"name":"int256","nodeType":"ElementaryTypeName","src":"19888:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19887:14:11"},"returnParameters":{"id":5185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5184,"mutability":"mutable","name":"downcasted","nameLocation":"19932:10:11","nodeType":"VariableDeclaration","scope":5204,"src":"19925:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":5183,"name":"int216","nodeType":"ElementaryTypeName","src":"19925:6:11","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19924:19:11"},"scope":5911,"src":"19870:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5229,"nodeType":"Block","src":"20491:150:11","statements":[{"expression":{"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5212,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"20501:10:11","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"20521:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20514:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":5213,"name":"int208","nodeType":"ElementaryTypeName","src":"20514:6:11","typeDescriptions":{}}},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20514:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20501:26:11","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":5218,"nodeType":"ExpressionStatement","src":"20501:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5219,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"20541:10:11","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"20555:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20541:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5228,"nodeType":"IfStatement","src":"20537:98:11","trueBody":{"id":5227,"nodeType":"Block","src":"20562:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":5223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20613:3:11","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":5224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"20618:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5222,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"20583:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20583:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5226,"nodeType":"RevertStatement","src":"20576:48:11"}]}}]},"documentation":{"id":5205,"nodeType":"StructuredDocumentation","src":"20100:312:11","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":5230,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20426:8:11","nodeType":"FunctionDefinition","parameters":{"id":5208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5207,"mutability":"mutable","name":"value","nameLocation":"20442:5:11","nodeType":"VariableDeclaration","scope":5230,"src":"20435:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5206,"name":"int256","nodeType":"ElementaryTypeName","src":"20435:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20434:14:11"},"returnParameters":{"id":5211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5210,"mutability":"mutable","name":"downcasted","nameLocation":"20479:10:11","nodeType":"VariableDeclaration","scope":5230,"src":"20472:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":5209,"name":"int208","nodeType":"ElementaryTypeName","src":"20472:6:11","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20471:19:11"},"scope":5911,"src":"20417:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5255,"nodeType":"Block","src":"21038:150:11","statements":[{"expression":{"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5238,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"21048:10:11","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"21068:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21061:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":5239,"name":"int200","nodeType":"ElementaryTypeName","src":"21061:6:11","typeDescriptions":{}}},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21061:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21048:26:11","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":5244,"nodeType":"ExpressionStatement","src":"21048:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5245,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5236,"src":"21088:10:11","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"21102:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21088:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5254,"nodeType":"IfStatement","src":"21084:98:11","trueBody":{"id":5253,"nodeType":"Block","src":"21109:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21160:3:11","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":5250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"21165:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5248,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"21130:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21130:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5252,"nodeType":"RevertStatement","src":"21123:48:11"}]}}]},"documentation":{"id":5231,"nodeType":"StructuredDocumentation","src":"20647:312:11","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":5256,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20973:8:11","nodeType":"FunctionDefinition","parameters":{"id":5234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5233,"mutability":"mutable","name":"value","nameLocation":"20989:5:11","nodeType":"VariableDeclaration","scope":5256,"src":"20982:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5232,"name":"int256","nodeType":"ElementaryTypeName","src":"20982:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20981:14:11"},"returnParameters":{"id":5237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5236,"mutability":"mutable","name":"downcasted","nameLocation":"21026:10:11","nodeType":"VariableDeclaration","scope":5256,"src":"21019:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":5235,"name":"int200","nodeType":"ElementaryTypeName","src":"21019:6:11","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21018:19:11"},"scope":5911,"src":"20964:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5281,"nodeType":"Block","src":"21585:150:11","statements":[{"expression":{"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5264,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5262,"src":"21595:10:11","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"21615:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21608:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":5265,"name":"int192","nodeType":"ElementaryTypeName","src":"21608:6:11","typeDescriptions":{}}},"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21608:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21595:26:11","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":5270,"nodeType":"ExpressionStatement","src":"21595:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5271,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5262,"src":"21635:10:11","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"21649:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21635:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5280,"nodeType":"IfStatement","src":"21631:98:11","trueBody":{"id":5279,"nodeType":"Block","src":"21656:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":5275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21707:3:11","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":5276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"21712:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5274,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"21677:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21677:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5278,"nodeType":"RevertStatement","src":"21670:48:11"}]}}]},"documentation":{"id":5257,"nodeType":"StructuredDocumentation","src":"21194:312:11","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":5282,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21520:8:11","nodeType":"FunctionDefinition","parameters":{"id":5260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5259,"mutability":"mutable","name":"value","nameLocation":"21536:5:11","nodeType":"VariableDeclaration","scope":5282,"src":"21529:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5258,"name":"int256","nodeType":"ElementaryTypeName","src":"21529:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21528:14:11"},"returnParameters":{"id":5263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5262,"mutability":"mutable","name":"downcasted","nameLocation":"21573:10:11","nodeType":"VariableDeclaration","scope":5282,"src":"21566:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":5261,"name":"int192","nodeType":"ElementaryTypeName","src":"21566:6:11","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21565:19:11"},"scope":5911,"src":"21511:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5307,"nodeType":"Block","src":"22132:150:11","statements":[{"expression":{"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5290,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"22142:10:11","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"22162:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22155:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5291,"name":"int184","nodeType":"ElementaryTypeName","src":"22155:6:11","typeDescriptions":{}}},"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22155:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22142:26:11","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":5296,"nodeType":"ExpressionStatement","src":"22142:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5297,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"22182:10:11","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5298,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"22196:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22182:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5306,"nodeType":"IfStatement","src":"22178:98:11","trueBody":{"id":5305,"nodeType":"Block","src":"22203:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":5301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22254:3:11","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":5302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"22259:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5300,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"22224:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22224:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5304,"nodeType":"RevertStatement","src":"22217:48:11"}]}}]},"documentation":{"id":5283,"nodeType":"StructuredDocumentation","src":"21741:312:11","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":5308,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22067:8:11","nodeType":"FunctionDefinition","parameters":{"id":5286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5285,"mutability":"mutable","name":"value","nameLocation":"22083:5:11","nodeType":"VariableDeclaration","scope":5308,"src":"22076:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5284,"name":"int256","nodeType":"ElementaryTypeName","src":"22076:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22075:14:11"},"returnParameters":{"id":5289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5288,"mutability":"mutable","name":"downcasted","nameLocation":"22120:10:11","nodeType":"VariableDeclaration","scope":5308,"src":"22113:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":5287,"name":"int184","nodeType":"ElementaryTypeName","src":"22113:6:11","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22112:19:11"},"scope":5911,"src":"22058:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5333,"nodeType":"Block","src":"22679:150:11","statements":[{"expression":{"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5316,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5314,"src":"22689:10:11","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"22709:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22702:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5317,"name":"int176","nodeType":"ElementaryTypeName","src":"22702:6:11","typeDescriptions":{}}},"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22702:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22689:26:11","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":5322,"nodeType":"ExpressionStatement","src":"22689:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5323,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5314,"src":"22729:10:11","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"22743:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22729:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5332,"nodeType":"IfStatement","src":"22725:98:11","trueBody":{"id":5331,"nodeType":"Block","src":"22750:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":5327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22801:3:11","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":5328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"22806:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5326,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"22771:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22771:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5330,"nodeType":"RevertStatement","src":"22764:48:11"}]}}]},"documentation":{"id":5309,"nodeType":"StructuredDocumentation","src":"22288:312:11","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":5334,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22614:8:11","nodeType":"FunctionDefinition","parameters":{"id":5312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5311,"mutability":"mutable","name":"value","nameLocation":"22630:5:11","nodeType":"VariableDeclaration","scope":5334,"src":"22623:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5310,"name":"int256","nodeType":"ElementaryTypeName","src":"22623:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22622:14:11"},"returnParameters":{"id":5315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5314,"mutability":"mutable","name":"downcasted","nameLocation":"22667:10:11","nodeType":"VariableDeclaration","scope":5334,"src":"22660:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":5313,"name":"int176","nodeType":"ElementaryTypeName","src":"22660:6:11","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22659:19:11"},"scope":5911,"src":"22605:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5359,"nodeType":"Block","src":"23226:150:11","statements":[{"expression":{"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5342,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"23236:10:11","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"23256:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23249:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5343,"name":"int168","nodeType":"ElementaryTypeName","src":"23249:6:11","typeDescriptions":{}}},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23249:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23236:26:11","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":5348,"nodeType":"ExpressionStatement","src":"23236:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5349,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"23276:10:11","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5350,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"23290:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23276:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5358,"nodeType":"IfStatement","src":"23272:98:11","trueBody":{"id":5357,"nodeType":"Block","src":"23297:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":5353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23348:3:11","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":5354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"23353:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5352,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"23318:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23318:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5356,"nodeType":"RevertStatement","src":"23311:48:11"}]}}]},"documentation":{"id":5335,"nodeType":"StructuredDocumentation","src":"22835:312:11","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":5360,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23161:8:11","nodeType":"FunctionDefinition","parameters":{"id":5338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5337,"mutability":"mutable","name":"value","nameLocation":"23177:5:11","nodeType":"VariableDeclaration","scope":5360,"src":"23170:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5336,"name":"int256","nodeType":"ElementaryTypeName","src":"23170:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23169:14:11"},"returnParameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5340,"mutability":"mutable","name":"downcasted","nameLocation":"23214:10:11","nodeType":"VariableDeclaration","scope":5360,"src":"23207:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":5339,"name":"int168","nodeType":"ElementaryTypeName","src":"23207:6:11","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23206:19:11"},"scope":5911,"src":"23152:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5385,"nodeType":"Block","src":"23773:150:11","statements":[{"expression":{"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5368,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"23783:10:11","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"23803:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23796:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5369,"name":"int160","nodeType":"ElementaryTypeName","src":"23796:6:11","typeDescriptions":{}}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23796:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23783:26:11","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":5374,"nodeType":"ExpressionStatement","src":"23783:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5375,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"23823:10:11","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"23837:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23823:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5384,"nodeType":"IfStatement","src":"23819:98:11","trueBody":{"id":5383,"nodeType":"Block","src":"23844:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":5379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23895:3:11","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":5380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"23900:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5378,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"23865:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23865:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5382,"nodeType":"RevertStatement","src":"23858:48:11"}]}}]},"documentation":{"id":5361,"nodeType":"StructuredDocumentation","src":"23382:312:11","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":5386,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23708:8:11","nodeType":"FunctionDefinition","parameters":{"id":5364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5363,"mutability":"mutable","name":"value","nameLocation":"23724:5:11","nodeType":"VariableDeclaration","scope":5386,"src":"23717:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5362,"name":"int256","nodeType":"ElementaryTypeName","src":"23717:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23716:14:11"},"returnParameters":{"id":5367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"downcasted","nameLocation":"23761:10:11","nodeType":"VariableDeclaration","scope":5386,"src":"23754:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":5365,"name":"int160","nodeType":"ElementaryTypeName","src":"23754:6:11","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23753:19:11"},"scope":5911,"src":"23699:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5411,"nodeType":"Block","src":"24320:150:11","statements":[{"expression":{"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5394,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"24330:10:11","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"24350:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24343:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":5395,"name":"int152","nodeType":"ElementaryTypeName","src":"24343:6:11","typeDescriptions":{}}},"id":5398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24343:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24330:26:11","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":5400,"nodeType":"ExpressionStatement","src":"24330:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5401,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"24370:10:11","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"24384:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24370:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5410,"nodeType":"IfStatement","src":"24366:98:11","trueBody":{"id":5409,"nodeType":"Block","src":"24391:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":5405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24442:3:11","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":5406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"24447:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5404,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"24412:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24412:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5408,"nodeType":"RevertStatement","src":"24405:48:11"}]}}]},"documentation":{"id":5387,"nodeType":"StructuredDocumentation","src":"23929:312:11","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":5412,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24255:8:11","nodeType":"FunctionDefinition","parameters":{"id":5390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5389,"mutability":"mutable","name":"value","nameLocation":"24271:5:11","nodeType":"VariableDeclaration","scope":5412,"src":"24264:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5388,"name":"int256","nodeType":"ElementaryTypeName","src":"24264:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24263:14:11"},"returnParameters":{"id":5393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5392,"mutability":"mutable","name":"downcasted","nameLocation":"24308:10:11","nodeType":"VariableDeclaration","scope":5412,"src":"24301:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":5391,"name":"int152","nodeType":"ElementaryTypeName","src":"24301:6:11","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24300:19:11"},"scope":5911,"src":"24246:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5437,"nodeType":"Block","src":"24867:150:11","statements":[{"expression":{"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5420,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"24877:10:11","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"24897:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24890:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":5421,"name":"int144","nodeType":"ElementaryTypeName","src":"24890:6:11","typeDescriptions":{}}},"id":5424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24890:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24877:26:11","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":5426,"nodeType":"ExpressionStatement","src":"24877:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5427,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"24917:10:11","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"24931:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24917:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5436,"nodeType":"IfStatement","src":"24913:98:11","trueBody":{"id":5435,"nodeType":"Block","src":"24938:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":5431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24989:3:11","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":5432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5415,"src":"24994:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5430,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"24959:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24959:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5434,"nodeType":"RevertStatement","src":"24952:48:11"}]}}]},"documentation":{"id":5413,"nodeType":"StructuredDocumentation","src":"24476:312:11","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":5438,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24802:8:11","nodeType":"FunctionDefinition","parameters":{"id":5416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5415,"mutability":"mutable","name":"value","nameLocation":"24818:5:11","nodeType":"VariableDeclaration","scope":5438,"src":"24811:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5414,"name":"int256","nodeType":"ElementaryTypeName","src":"24811:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24810:14:11"},"returnParameters":{"id":5419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5418,"mutability":"mutable","name":"downcasted","nameLocation":"24855:10:11","nodeType":"VariableDeclaration","scope":5438,"src":"24848:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":5417,"name":"int144","nodeType":"ElementaryTypeName","src":"24848:6:11","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24847:19:11"},"scope":5911,"src":"24793:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5463,"nodeType":"Block","src":"25414:150:11","statements":[{"expression":{"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5446,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"25424:10:11","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"25444:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25437:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":5447,"name":"int136","nodeType":"ElementaryTypeName","src":"25437:6:11","typeDescriptions":{}}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25437:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25424:26:11","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":5452,"nodeType":"ExpressionStatement","src":"25424:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5453,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"25464:10:11","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"25478:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25464:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5462,"nodeType":"IfStatement","src":"25460:98:11","trueBody":{"id":5461,"nodeType":"Block","src":"25485:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":5457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25536:3:11","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":5458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"25541:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5456,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"25506:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25506:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5460,"nodeType":"RevertStatement","src":"25499:48:11"}]}}]},"documentation":{"id":5439,"nodeType":"StructuredDocumentation","src":"25023:312:11","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":5464,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25349:8:11","nodeType":"FunctionDefinition","parameters":{"id":5442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5441,"mutability":"mutable","name":"value","nameLocation":"25365:5:11","nodeType":"VariableDeclaration","scope":5464,"src":"25358:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5440,"name":"int256","nodeType":"ElementaryTypeName","src":"25358:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25357:14:11"},"returnParameters":{"id":5445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5444,"mutability":"mutable","name":"downcasted","nameLocation":"25402:10:11","nodeType":"VariableDeclaration","scope":5464,"src":"25395:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":5443,"name":"int136","nodeType":"ElementaryTypeName","src":"25395:6:11","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25394:19:11"},"scope":5911,"src":"25340:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5489,"nodeType":"Block","src":"25961:150:11","statements":[{"expression":{"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5472,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5470,"src":"25971:10:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"25991:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25984:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5473,"name":"int128","nodeType":"ElementaryTypeName","src":"25984:6:11","typeDescriptions":{}}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25984:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25971:26:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":5478,"nodeType":"ExpressionStatement","src":"25971:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5479,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5470,"src":"26011:10:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"26025:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26011:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5488,"nodeType":"IfStatement","src":"26007:98:11","trueBody":{"id":5487,"nodeType":"Block","src":"26032:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":5483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26083:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":5484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"26088:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5482,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"26053:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26053:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5486,"nodeType":"RevertStatement","src":"26046:48:11"}]}}]},"documentation":{"id":5465,"nodeType":"StructuredDocumentation","src":"25570:312:11","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":5490,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25896:8:11","nodeType":"FunctionDefinition","parameters":{"id":5468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5467,"mutability":"mutable","name":"value","nameLocation":"25912:5:11","nodeType":"VariableDeclaration","scope":5490,"src":"25905:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5466,"name":"int256","nodeType":"ElementaryTypeName","src":"25905:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25904:14:11"},"returnParameters":{"id":5471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5470,"mutability":"mutable","name":"downcasted","nameLocation":"25949:10:11","nodeType":"VariableDeclaration","scope":5490,"src":"25942:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":5469,"name":"int128","nodeType":"ElementaryTypeName","src":"25942:6:11","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25941:19:11"},"scope":5911,"src":"25887:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5515,"nodeType":"Block","src":"26508:150:11","statements":[{"expression":{"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5498,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5496,"src":"26518:10:11","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5493,"src":"26538:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26531:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5499,"name":"int120","nodeType":"ElementaryTypeName","src":"26531:6:11","typeDescriptions":{}}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26531:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26518:26:11","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":5504,"nodeType":"ExpressionStatement","src":"26518:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5505,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5496,"src":"26558:10:11","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5493,"src":"26572:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26558:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5514,"nodeType":"IfStatement","src":"26554:98:11","trueBody":{"id":5513,"nodeType":"Block","src":"26579:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":5509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26630:3:11","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":5510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5493,"src":"26635:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5508,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"26600:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26600:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5512,"nodeType":"RevertStatement","src":"26593:48:11"}]}}]},"documentation":{"id":5491,"nodeType":"StructuredDocumentation","src":"26117:312:11","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":5516,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26443:8:11","nodeType":"FunctionDefinition","parameters":{"id":5494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5493,"mutability":"mutable","name":"value","nameLocation":"26459:5:11","nodeType":"VariableDeclaration","scope":5516,"src":"26452:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5492,"name":"int256","nodeType":"ElementaryTypeName","src":"26452:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26451:14:11"},"returnParameters":{"id":5497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5496,"mutability":"mutable","name":"downcasted","nameLocation":"26496:10:11","nodeType":"VariableDeclaration","scope":5516,"src":"26489:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":5495,"name":"int120","nodeType":"ElementaryTypeName","src":"26489:6:11","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26488:19:11"},"scope":5911,"src":"26434:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5541,"nodeType":"Block","src":"27055:150:11","statements":[{"expression":{"id":5529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5524,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"27065:10:11","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"27085:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27078:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5525,"name":"int112","nodeType":"ElementaryTypeName","src":"27078:6:11","typeDescriptions":{}}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27078:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27065:26:11","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":5530,"nodeType":"ExpressionStatement","src":"27065:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5531,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"27105:10:11","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"27119:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27105:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5540,"nodeType":"IfStatement","src":"27101:98:11","trueBody":{"id":5539,"nodeType":"Block","src":"27126:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":5535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27177:3:11","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":5536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5519,"src":"27182:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5534,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"27147:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27147:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5538,"nodeType":"RevertStatement","src":"27140:48:11"}]}}]},"documentation":{"id":5517,"nodeType":"StructuredDocumentation","src":"26664:312:11","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":5542,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26990:8:11","nodeType":"FunctionDefinition","parameters":{"id":5520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5519,"mutability":"mutable","name":"value","nameLocation":"27006:5:11","nodeType":"VariableDeclaration","scope":5542,"src":"26999:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5518,"name":"int256","nodeType":"ElementaryTypeName","src":"26999:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26998:14:11"},"returnParameters":{"id":5523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5522,"mutability":"mutable","name":"downcasted","nameLocation":"27043:10:11","nodeType":"VariableDeclaration","scope":5542,"src":"27036:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":5521,"name":"int112","nodeType":"ElementaryTypeName","src":"27036:6:11","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27035:19:11"},"scope":5911,"src":"26981:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5567,"nodeType":"Block","src":"27602:150:11","statements":[{"expression":{"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5550,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5548,"src":"27612:10:11","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"27632:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27625:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5551,"name":"int104","nodeType":"ElementaryTypeName","src":"27625:6:11","typeDescriptions":{}}},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27625:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27612:26:11","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":5556,"nodeType":"ExpressionStatement","src":"27612:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5557,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5548,"src":"27652:10:11","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"27666:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27652:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5566,"nodeType":"IfStatement","src":"27648:98:11","trueBody":{"id":5565,"nodeType":"Block","src":"27673:73:11","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":5561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27724:3:11","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":5562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"27729:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5560,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"27694:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27694:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5564,"nodeType":"RevertStatement","src":"27687:48:11"}]}}]},"documentation":{"id":5543,"nodeType":"StructuredDocumentation","src":"27211:312:11","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":5568,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27537:8:11","nodeType":"FunctionDefinition","parameters":{"id":5546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5545,"mutability":"mutable","name":"value","nameLocation":"27553:5:11","nodeType":"VariableDeclaration","scope":5568,"src":"27546:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5544,"name":"int256","nodeType":"ElementaryTypeName","src":"27546:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27545:14:11"},"returnParameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5548,"mutability":"mutable","name":"downcasted","nameLocation":"27590:10:11","nodeType":"VariableDeclaration","scope":5568,"src":"27583:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":5547,"name":"int104","nodeType":"ElementaryTypeName","src":"27583:6:11","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27582:19:11"},"scope":5911,"src":"27528:224:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5593,"nodeType":"Block","src":"28142:148:11","statements":[{"expression":{"id":5581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5576,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"28152:10:11","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"28171:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28165:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5577,"name":"int96","nodeType":"ElementaryTypeName","src":"28165:5:11","typeDescriptions":{}}},"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28165:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28152:25:11","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":5582,"nodeType":"ExpressionStatement","src":"28152:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5583,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5574,"src":"28191:10:11","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5584,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"28205:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28191:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5592,"nodeType":"IfStatement","src":"28187:97:11","trueBody":{"id":5591,"nodeType":"Block","src":"28212:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":5587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28263:2:11","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":5588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5571,"src":"28267:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5586,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"28233:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28233:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5590,"nodeType":"RevertStatement","src":"28226:47:11"}]}}]},"documentation":{"id":5569,"nodeType":"StructuredDocumentation","src":"27758:307:11","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":5594,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28079:7:11","nodeType":"FunctionDefinition","parameters":{"id":5572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5571,"mutability":"mutable","name":"value","nameLocation":"28094:5:11","nodeType":"VariableDeclaration","scope":5594,"src":"28087:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5570,"name":"int256","nodeType":"ElementaryTypeName","src":"28087:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28086:14:11"},"returnParameters":{"id":5575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5574,"mutability":"mutable","name":"downcasted","nameLocation":"28130:10:11","nodeType":"VariableDeclaration","scope":5594,"src":"28124:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":5573,"name":"int96","nodeType":"ElementaryTypeName","src":"28124:5:11","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28123:18:11"},"scope":5911,"src":"28070:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5619,"nodeType":"Block","src":"28680:148:11","statements":[{"expression":{"id":5607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5602,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"28690:10:11","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"28709:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28703:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5603,"name":"int88","nodeType":"ElementaryTypeName","src":"28703:5:11","typeDescriptions":{}}},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28703:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28690:25:11","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":5608,"nodeType":"ExpressionStatement","src":"28690:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5609,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5600,"src":"28729:10:11","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"28743:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28729:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5618,"nodeType":"IfStatement","src":"28725:97:11","trueBody":{"id":5617,"nodeType":"Block","src":"28750:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":5613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28801:2:11","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":5614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"28805:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5612,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"28771:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28771:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5616,"nodeType":"RevertStatement","src":"28764:47:11"}]}}]},"documentation":{"id":5595,"nodeType":"StructuredDocumentation","src":"28296:307:11","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":5620,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28617:7:11","nodeType":"FunctionDefinition","parameters":{"id":5598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5597,"mutability":"mutable","name":"value","nameLocation":"28632:5:11","nodeType":"VariableDeclaration","scope":5620,"src":"28625:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5596,"name":"int256","nodeType":"ElementaryTypeName","src":"28625:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28624:14:11"},"returnParameters":{"id":5601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5600,"mutability":"mutable","name":"downcasted","nameLocation":"28668:10:11","nodeType":"VariableDeclaration","scope":5620,"src":"28662:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":5599,"name":"int88","nodeType":"ElementaryTypeName","src":"28662:5:11","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28661:18:11"},"scope":5911,"src":"28608:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5645,"nodeType":"Block","src":"29218:148:11","statements":[{"expression":{"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5628,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5626,"src":"29228:10:11","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"29247:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29241:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5629,"name":"int80","nodeType":"ElementaryTypeName","src":"29241:5:11","typeDescriptions":{}}},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29241:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29228:25:11","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":5634,"nodeType":"ExpressionStatement","src":"29228:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5635,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5626,"src":"29267:10:11","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"29281:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29267:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5644,"nodeType":"IfStatement","src":"29263:97:11","trueBody":{"id":5643,"nodeType":"Block","src":"29288:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":5639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29339:2:11","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":5640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5623,"src":"29343:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5638,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"29309:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29309:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5642,"nodeType":"RevertStatement","src":"29302:47:11"}]}}]},"documentation":{"id":5621,"nodeType":"StructuredDocumentation","src":"28834:307:11","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":5646,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29155:7:11","nodeType":"FunctionDefinition","parameters":{"id":5624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5623,"mutability":"mutable","name":"value","nameLocation":"29170:5:11","nodeType":"VariableDeclaration","scope":5646,"src":"29163:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5622,"name":"int256","nodeType":"ElementaryTypeName","src":"29163:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29162:14:11"},"returnParameters":{"id":5627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5626,"mutability":"mutable","name":"downcasted","nameLocation":"29206:10:11","nodeType":"VariableDeclaration","scope":5646,"src":"29200:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":5625,"name":"int80","nodeType":"ElementaryTypeName","src":"29200:5:11","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29199:18:11"},"scope":5911,"src":"29146:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5671,"nodeType":"Block","src":"29756:148:11","statements":[{"expression":{"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5654,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5652,"src":"29766:10:11","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5657,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"29785:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29779:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5655,"name":"int72","nodeType":"ElementaryTypeName","src":"29779:5:11","typeDescriptions":{}}},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29779:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29766:25:11","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":5660,"nodeType":"ExpressionStatement","src":"29766:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5661,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5652,"src":"29805:10:11","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"29819:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29805:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5670,"nodeType":"IfStatement","src":"29801:97:11","trueBody":{"id":5669,"nodeType":"Block","src":"29826:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":5665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29877:2:11","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":5666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"29881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5664,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"29847:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29847:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5668,"nodeType":"RevertStatement","src":"29840:47:11"}]}}]},"documentation":{"id":5647,"nodeType":"StructuredDocumentation","src":"29372:307:11","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":5672,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29693:7:11","nodeType":"FunctionDefinition","parameters":{"id":5650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5649,"mutability":"mutable","name":"value","nameLocation":"29708:5:11","nodeType":"VariableDeclaration","scope":5672,"src":"29701:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5648,"name":"int256","nodeType":"ElementaryTypeName","src":"29701:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29700:14:11"},"returnParameters":{"id":5653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5652,"mutability":"mutable","name":"downcasted","nameLocation":"29744:10:11","nodeType":"VariableDeclaration","scope":5672,"src":"29738:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":5651,"name":"int72","nodeType":"ElementaryTypeName","src":"29738:5:11","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29737:18:11"},"scope":5911,"src":"29684:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5697,"nodeType":"Block","src":"30294:148:11","statements":[{"expression":{"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5680,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"30304:10:11","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"30323:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30317:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5681,"name":"int64","nodeType":"ElementaryTypeName","src":"30317:5:11","typeDescriptions":{}}},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30317:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30304:25:11","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":5686,"nodeType":"ExpressionStatement","src":"30304:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5687,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"30343:10:11","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5688,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"30357:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30343:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5696,"nodeType":"IfStatement","src":"30339:97:11","trueBody":{"id":5695,"nodeType":"Block","src":"30364:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":5691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30415:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":5692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"30419:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5690,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"30385:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30385:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5694,"nodeType":"RevertStatement","src":"30378:47:11"}]}}]},"documentation":{"id":5673,"nodeType":"StructuredDocumentation","src":"29910:307:11","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":5698,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30231:7:11","nodeType":"FunctionDefinition","parameters":{"id":5676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5675,"mutability":"mutable","name":"value","nameLocation":"30246:5:11","nodeType":"VariableDeclaration","scope":5698,"src":"30239:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5674,"name":"int256","nodeType":"ElementaryTypeName","src":"30239:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30238:14:11"},"returnParameters":{"id":5679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5678,"mutability":"mutable","name":"downcasted","nameLocation":"30282:10:11","nodeType":"VariableDeclaration","scope":5698,"src":"30276:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":5677,"name":"int64","nodeType":"ElementaryTypeName","src":"30276:5:11","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30275:18:11"},"scope":5911,"src":"30222:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5723,"nodeType":"Block","src":"30832:148:11","statements":[{"expression":{"id":5711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5706,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"30842:10:11","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"30861:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30855:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5707,"name":"int56","nodeType":"ElementaryTypeName","src":"30855:5:11","typeDescriptions":{}}},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30855:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30842:25:11","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":5712,"nodeType":"ExpressionStatement","src":"30842:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5713,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5704,"src":"30881:10:11","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"30895:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30881:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5722,"nodeType":"IfStatement","src":"30877:97:11","trueBody":{"id":5721,"nodeType":"Block","src":"30902:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":5717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30953:2:11","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":5718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5701,"src":"30957:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5716,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"30923:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30923:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5720,"nodeType":"RevertStatement","src":"30916:47:11"}]}}]},"documentation":{"id":5699,"nodeType":"StructuredDocumentation","src":"30448:307:11","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":5724,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30769:7:11","nodeType":"FunctionDefinition","parameters":{"id":5702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5701,"mutability":"mutable","name":"value","nameLocation":"30784:5:11","nodeType":"VariableDeclaration","scope":5724,"src":"30777:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5700,"name":"int256","nodeType":"ElementaryTypeName","src":"30777:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30776:14:11"},"returnParameters":{"id":5705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5704,"mutability":"mutable","name":"downcasted","nameLocation":"30820:10:11","nodeType":"VariableDeclaration","scope":5724,"src":"30814:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5703,"name":"int56","nodeType":"ElementaryTypeName","src":"30814:5:11","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30813:18:11"},"scope":5911,"src":"30760:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5749,"nodeType":"Block","src":"31370:148:11","statements":[{"expression":{"id":5737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5732,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5730,"src":"31380:10:11","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5727,"src":"31399:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31393:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5733,"name":"int48","nodeType":"ElementaryTypeName","src":"31393:5:11","typeDescriptions":{}}},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31393:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31380:25:11","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":5738,"nodeType":"ExpressionStatement","src":"31380:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5739,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5730,"src":"31419:10:11","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5727,"src":"31433:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31419:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5748,"nodeType":"IfStatement","src":"31415:97:11","trueBody":{"id":5747,"nodeType":"Block","src":"31440:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":5743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31491:2:11","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":5744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5727,"src":"31495:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5742,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"31461:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31461:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5746,"nodeType":"RevertStatement","src":"31454:47:11"}]}}]},"documentation":{"id":5725,"nodeType":"StructuredDocumentation","src":"30986:307:11","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":5750,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31307:7:11","nodeType":"FunctionDefinition","parameters":{"id":5728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5727,"mutability":"mutable","name":"value","nameLocation":"31322:5:11","nodeType":"VariableDeclaration","scope":5750,"src":"31315:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5726,"name":"int256","nodeType":"ElementaryTypeName","src":"31315:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31314:14:11"},"returnParameters":{"id":5731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5730,"mutability":"mutable","name":"downcasted","nameLocation":"31358:10:11","nodeType":"VariableDeclaration","scope":5750,"src":"31352:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":5729,"name":"int48","nodeType":"ElementaryTypeName","src":"31352:5:11","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31351:18:11"},"scope":5911,"src":"31298:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5775,"nodeType":"Block","src":"31908:148:11","statements":[{"expression":{"id":5763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5758,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5756,"src":"31918:10:11","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"31937:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31931:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5759,"name":"int40","nodeType":"ElementaryTypeName","src":"31931:5:11","typeDescriptions":{}}},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31931:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31918:25:11","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":5764,"nodeType":"ExpressionStatement","src":"31918:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5765,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5756,"src":"31957:10:11","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"31971:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31957:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5774,"nodeType":"IfStatement","src":"31953:97:11","trueBody":{"id":5773,"nodeType":"Block","src":"31978:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":5769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32029:2:11","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":5770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"32033:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5768,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"31999:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31999:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5772,"nodeType":"RevertStatement","src":"31992:47:11"}]}}]},"documentation":{"id":5751,"nodeType":"StructuredDocumentation","src":"31524:307:11","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":5776,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31845:7:11","nodeType":"FunctionDefinition","parameters":{"id":5754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5753,"mutability":"mutable","name":"value","nameLocation":"31860:5:11","nodeType":"VariableDeclaration","scope":5776,"src":"31853:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5752,"name":"int256","nodeType":"ElementaryTypeName","src":"31853:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31852:14:11"},"returnParameters":{"id":5757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5756,"mutability":"mutable","name":"downcasted","nameLocation":"31896:10:11","nodeType":"VariableDeclaration","scope":5776,"src":"31890:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":5755,"name":"int40","nodeType":"ElementaryTypeName","src":"31890:5:11","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31889:18:11"},"scope":5911,"src":"31836:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5801,"nodeType":"Block","src":"32446:148:11","statements":[{"expression":{"id":5789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5784,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5782,"src":"32456:10:11","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"32475:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32469:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5785,"name":"int32","nodeType":"ElementaryTypeName","src":"32469:5:11","typeDescriptions":{}}},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32469:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32456:25:11","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":5790,"nodeType":"ExpressionStatement","src":"32456:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5791,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5782,"src":"32495:10:11","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"32509:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32495:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5800,"nodeType":"IfStatement","src":"32491:97:11","trueBody":{"id":5799,"nodeType":"Block","src":"32516:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":5795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32567:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":5796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"32571:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5794,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"32537:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32537:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5798,"nodeType":"RevertStatement","src":"32530:47:11"}]}}]},"documentation":{"id":5777,"nodeType":"StructuredDocumentation","src":"32062:307:11","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":5802,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32383:7:11","nodeType":"FunctionDefinition","parameters":{"id":5780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5779,"mutability":"mutable","name":"value","nameLocation":"32398:5:11","nodeType":"VariableDeclaration","scope":5802,"src":"32391:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5778,"name":"int256","nodeType":"ElementaryTypeName","src":"32391:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32390:14:11"},"returnParameters":{"id":5783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5782,"mutability":"mutable","name":"downcasted","nameLocation":"32434:10:11","nodeType":"VariableDeclaration","scope":5802,"src":"32428:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":5781,"name":"int32","nodeType":"ElementaryTypeName","src":"32428:5:11","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32427:18:11"},"scope":5911,"src":"32374:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5827,"nodeType":"Block","src":"32984:148:11","statements":[{"expression":{"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5810,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"32994:10:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5813,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"33013:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33007:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5811,"name":"int24","nodeType":"ElementaryTypeName","src":"33007:5:11","typeDescriptions":{}}},"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33007:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32994:25:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5816,"nodeType":"ExpressionStatement","src":"32994:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5817,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5808,"src":"33033:10:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"33047:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33033:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5826,"nodeType":"IfStatement","src":"33029:97:11","trueBody":{"id":5825,"nodeType":"Block","src":"33054:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":5821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33105:2:11","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":5822,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"33109:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5820,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"33075:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33075:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5824,"nodeType":"RevertStatement","src":"33068:47:11"}]}}]},"documentation":{"id":5803,"nodeType":"StructuredDocumentation","src":"32600:307:11","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":5828,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32921:7:11","nodeType":"FunctionDefinition","parameters":{"id":5806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5805,"mutability":"mutable","name":"value","nameLocation":"32936:5:11","nodeType":"VariableDeclaration","scope":5828,"src":"32929:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5804,"name":"int256","nodeType":"ElementaryTypeName","src":"32929:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32928:14:11"},"returnParameters":{"id":5809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5808,"mutability":"mutable","name":"downcasted","nameLocation":"32972:10:11","nodeType":"VariableDeclaration","scope":5828,"src":"32966:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5807,"name":"int24","nodeType":"ElementaryTypeName","src":"32966:5:11","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32965:18:11"},"scope":5911,"src":"32912:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5853,"nodeType":"Block","src":"33522:148:11","statements":[{"expression":{"id":5841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5836,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"33532:10:11","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"33551:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33545:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5837,"name":"int16","nodeType":"ElementaryTypeName","src":"33545:5:11","typeDescriptions":{}}},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33545:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33532:25:11","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":5842,"nodeType":"ExpressionStatement","src":"33532:25:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5843,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"33571:10:11","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"33585:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33571:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5852,"nodeType":"IfStatement","src":"33567:97:11","trueBody":{"id":5851,"nodeType":"Block","src":"33592:72:11","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":5847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33643:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":5848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5831,"src":"33647:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5846,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"33613:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33613:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5850,"nodeType":"RevertStatement","src":"33606:47:11"}]}}]},"documentation":{"id":5829,"nodeType":"StructuredDocumentation","src":"33138:307:11","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":5854,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33459:7:11","nodeType":"FunctionDefinition","parameters":{"id":5832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5831,"mutability":"mutable","name":"value","nameLocation":"33474:5:11","nodeType":"VariableDeclaration","scope":5854,"src":"33467:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5830,"name":"int256","nodeType":"ElementaryTypeName","src":"33467:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33466:14:11"},"returnParameters":{"id":5835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5834,"mutability":"mutable","name":"downcasted","nameLocation":"33510:10:11","nodeType":"VariableDeclaration","scope":5854,"src":"33504:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":5833,"name":"int16","nodeType":"ElementaryTypeName","src":"33504:5:11","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33503:18:11"},"scope":5911,"src":"33450:220:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5879,"nodeType":"Block","src":"34053:146:11","statements":[{"expression":{"id":5867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5862,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"34063:10:11","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"34081:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34076:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5863,"name":"int8","nodeType":"ElementaryTypeName","src":"34076:4:11","typeDescriptions":{}}},"id":5866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34076:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34063:24:11","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":5868,"nodeType":"ExpressionStatement","src":"34063:24:11"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5869,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"34101:10:11","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"34115:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34101:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5878,"nodeType":"IfStatement","src":"34097:96:11","trueBody":{"id":5877,"nodeType":"Block","src":"34122:71:11","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":5873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34173:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":5874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"34176:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5872,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"34143:29:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34143:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5876,"nodeType":"RevertStatement","src":"34136:46:11"}]}}]},"documentation":{"id":5855,"nodeType":"StructuredDocumentation","src":"33676:302:11","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":5880,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33992:6:11","nodeType":"FunctionDefinition","parameters":{"id":5858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5857,"mutability":"mutable","name":"value","nameLocation":"34006:5:11","nodeType":"VariableDeclaration","scope":5880,"src":"33999:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5856,"name":"int256","nodeType":"ElementaryTypeName","src":"33999:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33998:14:11"},"returnParameters":{"id":5861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5860,"mutability":"mutable","name":"downcasted","nameLocation":"34041:10:11","nodeType":"VariableDeclaration","scope":5880,"src":"34036:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":5859,"name":"int8","nodeType":"ElementaryTypeName","src":"34036:4:11","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34035:17:11"},"scope":5911,"src":"33983:216:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5909,"nodeType":"Block","src":"34439:250:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"34552:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":5893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34573:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5892,"name":"int256","nodeType":"ElementaryTypeName","src":"34573:6:11","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":5891,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34568:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34568:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":5895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34581:3:11","memberName":"max","nodeType":"MemberAccess","src":"34568:16:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34560:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5889,"name":"uint256","nodeType":"ElementaryTypeName","src":"34560:7:11","typeDescriptions":{}}},"id":5896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34560:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34552:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5903,"nodeType":"IfStatement","src":"34548:105:11","trueBody":{"id":5902,"nodeType":"Block","src":"34587:66:11","statements":[{"errorCall":{"arguments":[{"id":5899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"34636:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5898,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"34608:27:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34608:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5901,"nodeType":"RevertStatement","src":"34601:41:11"}]}},{"expression":{"arguments":[{"id":5906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"34676:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34669:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5904,"name":"int256","nodeType":"ElementaryTypeName","src":"34669:6:11","typeDescriptions":{}}},"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34669:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5887,"id":5908,"nodeType":"Return","src":"34662:20:11"}]},"documentation":{"id":5881,"nodeType":"StructuredDocumentation","src":"34205:165:11","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":5910,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34384:8:11","nodeType":"FunctionDefinition","parameters":{"id":5884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5883,"mutability":"mutable","name":"value","nameLocation":"34401:5:11","nodeType":"VariableDeclaration","scope":5910,"src":"34393:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5882,"name":"uint256","nodeType":"ElementaryTypeName","src":"34393:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34392:15:11"},"returnParameters":{"id":5887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5910,"src":"34431:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5885,"name":"int256","nodeType":"ElementaryTypeName","src":"34431:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34430:8:11"},"scope":5911,"src":"34375:314:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5912,"src":"764:33927:11","usedErrors":[4166,4171,4178,4183],"usedEvents":[]}],"src":"192:34500:11"},"id":11},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","exportedSymbols":{"EnumerableMap":[7026],"EnumerableSet":[7639]},"id":7027,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5913,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"205:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"./EnumerableSet.sol","id":5915,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7027,"sourceUnit":7640,"src":"231:50:12","symbolAliases":[{"foreign":{"id":5914,"name":"EnumerableSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7639,"src":"239:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableMap","contractDependencies":[],"contractKind":"library","documentation":{"id":5916,"nodeType":"StructuredDocumentation","src":"283:1367:12","text":" @dev Library for managing an enumerable variant of Solidity's\n https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n type.\n Maps have the following properties:\n - Entries are added, removed, and checked for existence in constant time\n (O(1)).\n - Entries are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableMap for EnumerableMap.UintToAddressMap;\n     // Declare a set state variable\n     EnumerableMap.UintToAddressMap private myMap;\n }\n ```\n The following map types are supported:\n - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableMap.\n ===="},"fullyImplemented":true,"id":7026,"linearizedBaseContracts":[7026],"name":"EnumerableMap","nameLocation":"1659:13:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5920,"libraryName":{"id":5917,"name":"EnumerableSet","nameLocations":["1685:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":7639,"src":"1685:13:12"},"nodeType":"UsingForDirective","src":"1679:49:12","typeName":{"id":5919,"nodeType":"UserDefinedTypeName","pathNode":{"id":5918,"name":"EnumerableSet.Bytes32Set","nameLocations":["1703:13:12","1717:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"1703:24:12"},"referencedDeclaration":7231,"src":"1703:24:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}}},{"documentation":{"id":5921,"nodeType":"StructuredDocumentation","src":"2161:56:12","text":" @dev Query for a nonexistent map key."},"errorSelector":"02b56686","id":5925,"name":"EnumerableMapNonexistentKey","nameLocation":"2228:27:12","nodeType":"ErrorDefinition","parameters":{"id":5924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5923,"mutability":"mutable","name":"key","nameLocation":"2264:3:12","nodeType":"VariableDeclaration","scope":5925,"src":"2256:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2256:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2255:13:12"},"src":"2222:47:12"},{"canonicalName":"EnumerableMap.Bytes32ToBytes32Map","id":5933,"members":[{"constant":false,"id":5928,"mutability":"mutable","name":"_keys","nameLocation":"2364:5:12","nodeType":"VariableDeclaration","scope":5933,"src":"2339:30:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":5927,"nodeType":"UserDefinedTypeName","pathNode":{"id":5926,"name":"EnumerableSet.Bytes32Set","nameLocations":["2339:13:12","2353:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"2339:24:12"},"referencedDeclaration":7231,"src":"2339:24:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":5932,"mutability":"mutable","name":"_values","nameLocation":"2411:7:12","nodeType":"VariableDeclaration","scope":5933,"src":"2379:39:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"typeName":{"id":5931,"keyName":"key","keyNameLocation":"2395:3:12","keyType":{"id":5929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2387:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2379:31:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2402:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"internal"}],"name":"Bytes32ToBytes32Map","nameLocation":"2282:19:12","nodeType":"StructDefinition","scope":7026,"src":"2275:150:12","visibility":"public"},{"body":{"id":5960,"nodeType":"Block","src":"2750:76:12","statements":[{"expression":{"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5946,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"2760:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":5949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2764:7:12","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5932,"src":"2760:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":5950,"indexExpression":{"id":5948,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"2772:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2760:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5951,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5941,"src":"2779:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2760:24:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5953,"nodeType":"ExpressionStatement","src":"2760:24:12"},{"expression":{"arguments":[{"id":5957,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5939,"src":"2815:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":5954,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5937,"src":"2801:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":5955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2805:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"2801:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":5956,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2811:3:12","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":7249,"src":"2801:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$7231_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":5958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2801:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5945,"id":5959,"nodeType":"Return","src":"2794:25:12"}]},"documentation":{"id":5934,"nodeType":"StructuredDocumentation","src":"2431:216:12","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":5961,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"2661:3:12","nodeType":"FunctionDefinition","parameters":{"id":5942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5937,"mutability":"mutable","name":"map","nameLocation":"2693:3:12","nodeType":"VariableDeclaration","scope":5961,"src":"2665:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":5936,"nodeType":"UserDefinedTypeName","pathNode":{"id":5935,"name":"Bytes32ToBytes32Map","nameLocations":["2665:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"2665:19:12"},"referencedDeclaration":5933,"src":"2665:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":5939,"mutability":"mutable","name":"key","nameLocation":"2706:3:12","nodeType":"VariableDeclaration","scope":5961,"src":"2698:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2698:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5941,"mutability":"mutable","name":"value","nameLocation":"2719:5:12","nodeType":"VariableDeclaration","scope":5961,"src":"2711:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2711:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2664:61:12"},"returnParameters":{"id":5945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5961,"src":"2744:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5943,"name":"bool","nodeType":"ElementaryTypeName","src":"2744:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2743:6:12"},"scope":7026,"src":"2652:174:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5984,"nodeType":"Block","src":"3080:78:12","statements":[{"expression":{"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3090:23:12","subExpression":{"baseExpression":{"expression":{"id":5972,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"3097:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":5973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3101:7:12","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5932,"src":"3097:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":5975,"indexExpression":{"id":5974,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5967,"src":"3109:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3097:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5977,"nodeType":"ExpressionStatement","src":"3090:23:12"},{"expression":{"arguments":[{"id":5981,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5967,"src":"3147:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":5978,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5965,"src":"3130:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":5979,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3134:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"3130:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":5980,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3140:6:12","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":7267,"src":"3130:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32Set_$7231_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) returns (bool)"}},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3130:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5971,"id":5983,"nodeType":"Return","src":"3123:28:12"}]},"documentation":{"id":5962,"nodeType":"StructuredDocumentation","src":"2832:157:12","text":" @dev Removes a key-value pair from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":5985,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"3003:6:12","nodeType":"FunctionDefinition","parameters":{"id":5968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5965,"mutability":"mutable","name":"map","nameLocation":"3038:3:12","nodeType":"VariableDeclaration","scope":5985,"src":"3010:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":5964,"nodeType":"UserDefinedTypeName","pathNode":{"id":5963,"name":"Bytes32ToBytes32Map","nameLocations":["3010:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"3010:19:12"},"referencedDeclaration":5933,"src":"3010:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":5967,"mutability":"mutable","name":"key","nameLocation":"3051:3:12","nodeType":"VariableDeclaration","scope":5985,"src":"3043:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3043:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3009:46:12"},"returnParameters":{"id":5971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5985,"src":"3074:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5969,"name":"bool","nodeType":"ElementaryTypeName","src":"3074:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3073:6:12"},"scope":7026,"src":"2994:164:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6002,"nodeType":"Block","src":"3330:47:12","statements":[{"expression":{"arguments":[{"id":5999,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5991,"src":"3366:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":5996,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5989,"src":"3347:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":5997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3351:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"3347:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":5998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3357:8:12","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":7285,"src":"3347:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$7231_storage_ptr_$_t_bytes32_$returns$_t_bool_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,bytes32) view returns (bool)"}},"id":6000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3347:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5995,"id":6001,"nodeType":"Return","src":"3340:30:12"}]},"documentation":{"id":5986,"nodeType":"StructuredDocumentation","src":"3164:68:12","text":" @dev Returns true if the key is in the map. O(1)."},"id":6003,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"3246:8:12","nodeType":"FunctionDefinition","parameters":{"id":5992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5989,"mutability":"mutable","name":"map","nameLocation":"3283:3:12","nodeType":"VariableDeclaration","scope":6003,"src":"3255:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":5988,"nodeType":"UserDefinedTypeName","pathNode":{"id":5987,"name":"Bytes32ToBytes32Map","nameLocations":["3255:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"3255:19:12"},"referencedDeclaration":5933,"src":"3255:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":5991,"mutability":"mutable","name":"key","nameLocation":"3296:3:12","nodeType":"VariableDeclaration","scope":6003,"src":"3288:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3288:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3254:46:12"},"returnParameters":{"id":5995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6003,"src":"3324:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5993,"name":"bool","nodeType":"ElementaryTypeName","src":"3324:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3323:6:12"},"scope":7026,"src":"3237:140:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6017,"nodeType":"Block","src":"3548:42:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":6012,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"3565:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3569:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"3565:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":6014,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3575:6:12","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":7300,"src":"3565:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$7231_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer) view returns (uint256)"}},"id":6015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6011,"id":6016,"nodeType":"Return","src":"3558:25:12"}]},"documentation":{"id":6004,"nodeType":"StructuredDocumentation","src":"3383:79:12","text":" @dev Returns the number of key-value pairs in the map. O(1)."},"id":6018,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"3476:6:12","nodeType":"FunctionDefinition","parameters":{"id":6008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6007,"mutability":"mutable","name":"map","nameLocation":"3511:3:12","nodeType":"VariableDeclaration","scope":6018,"src":"3483:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6006,"nodeType":"UserDefinedTypeName","pathNode":{"id":6005,"name":"Bytes32ToBytes32Map","nameLocations":["3483:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"3483:19:12"},"referencedDeclaration":5933,"src":"3483:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"src":"3482:33:12"},"returnParameters":{"id":6011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6018,"src":"3539:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6009,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3538:9:12"},"scope":7026,"src":"3467:123:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6046,"nodeType":"Block","src":"4044:90:12","statements":[{"assignments":[6032],"declarations":[{"constant":false,"id":6032,"mutability":"mutable","name":"key","nameLocation":"4062:3:12","nodeType":"VariableDeclaration","scope":6046,"src":"4054:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4054:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6038,"initialValue":{"arguments":[{"id":6036,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6024,"src":"4081:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6033,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"4068:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4072:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"4068:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":6035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4078:2:12","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":7318,"src":"4068:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$7231_storage_ptr_$_t_uint256_$returns$_t_bytes32_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer,uint256) view returns (bytes32)"}},"id":6037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4068:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4054:33:12"},{"expression":{"components":[{"id":6039,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6032,"src":"4105:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"expression":{"id":6040,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6022,"src":"4110:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4114:7:12","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5932,"src":"4110:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":6043,"indexExpression":{"id":6042,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6032,"src":"4122:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4110:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6044,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4104:23:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"functionReturnParameters":6030,"id":6045,"nodeType":"Return","src":"4097:30:12"}]},"documentation":{"id":6019,"nodeType":"StructuredDocumentation","src":"3596:342:12","text":" @dev Returns the key-value pair stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of entries inside the\n array, and it may change when more entries are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":6047,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"3952:2:12","nodeType":"FunctionDefinition","parameters":{"id":6025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6022,"mutability":"mutable","name":"map","nameLocation":"3983:3:12","nodeType":"VariableDeclaration","scope":6047,"src":"3955:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6021,"nodeType":"UserDefinedTypeName","pathNode":{"id":6020,"name":"Bytes32ToBytes32Map","nameLocations":["3955:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"3955:19:12"},"referencedDeclaration":5933,"src":"3955:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":6024,"mutability":"mutable","name":"index","nameLocation":"3996:5:12","nodeType":"VariableDeclaration","scope":6047,"src":"3988:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6023,"name":"uint256","nodeType":"ElementaryTypeName","src":"3988:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3954:48:12"},"returnParameters":{"id":6030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6047,"src":"4026:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4026:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6047,"src":"4035:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4035:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4025:18:12"},"scope":7026,"src":"3943:191:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6090,"nodeType":"Block","src":"4375:198:12","statements":[{"assignments":[6061],"declarations":[{"constant":false,"id":6061,"mutability":"mutable","name":"value","nameLocation":"4393:5:12","nodeType":"VariableDeclaration","scope":6090,"src":"4385:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4385:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6066,"initialValue":{"baseExpression":{"expression":{"id":6062,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6051,"src":"4401:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4405:7:12","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5932,"src":"4401:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":6065,"indexExpression":{"id":6064,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6053,"src":"4413:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4401:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4385:32:12"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"4431:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4448:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4440:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4440:7:12","typeDescriptions":{}}},"id":6071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4440:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4431:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6088,"nodeType":"Block","src":"4522:45:12","statements":[{"expression":{"components":[{"hexValue":"74727565","id":6084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4544:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":6085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6061,"src":"4550:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4543:13:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"functionReturnParameters":6059,"id":6087,"nodeType":"Return","src":"4536:20:12"}]},"id":6089,"nodeType":"IfStatement","src":"4427:140:12","trueBody":{"id":6083,"nodeType":"Block","src":"4452:64:12","statements":[{"expression":{"components":[{"arguments":[{"id":6074,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6051,"src":"4483:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},{"id":6075,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6053,"src":"4488:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6073,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"4474:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4474:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"hexValue":"30","id":6079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4502:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4494:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4494:7:12","typeDescriptions":{}}},"id":6080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4494:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6081,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4473:32:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"functionReturnParameters":6059,"id":6082,"nodeType":"Return","src":"4466:39:12"}]}}]},"documentation":{"id":6048,"nodeType":"StructuredDocumentation","src":"4140:130:12","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":6091,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"4284:6:12","nodeType":"FunctionDefinition","parameters":{"id":6054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6051,"mutability":"mutable","name":"map","nameLocation":"4319:3:12","nodeType":"VariableDeclaration","scope":6091,"src":"4291:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6050,"nodeType":"UserDefinedTypeName","pathNode":{"id":6049,"name":"Bytes32ToBytes32Map","nameLocations":["4291:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"4291:19:12"},"referencedDeclaration":5933,"src":"4291:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":6053,"mutability":"mutable","name":"key","nameLocation":"4332:3:12","nodeType":"VariableDeclaration","scope":6091,"src":"4324:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4324:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4290:46:12"},"returnParameters":{"id":6059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6091,"src":"4360:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6055,"name":"bool","nodeType":"ElementaryTypeName","src":"4360:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6091,"src":"4366:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4366:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4359:15:12"},"scope":7026,"src":"4275:298:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6126,"nodeType":"Block","src":"4815:183:12","statements":[{"assignments":[6103],"declarations":[{"constant":false,"id":6103,"mutability":"mutable","name":"value","nameLocation":"4833:5:12","nodeType":"VariableDeclaration","scope":6126,"src":"4825:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4825:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6108,"initialValue":{"baseExpression":{"expression":{"id":6104,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6095,"src":"4841:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6105,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4845:7:12","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":5932,"src":"4841:11:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bytes32_$","typeString":"mapping(bytes32 => bytes32)"}},"id":6107,"indexExpression":{"id":6106,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"4853:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4841:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4825:32:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6103,"src":"4871:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4880:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4871:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":6116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4885:19:12","subExpression":{"arguments":[{"id":6113,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6095,"src":"4895:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},{"id":6114,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"4900:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6112,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"4886:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4886:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4871:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6123,"nodeType":"IfStatement","src":"4867:103:12","trueBody":{"id":6122,"nodeType":"Block","src":"4906:64:12","statements":[{"errorCall":{"arguments":[{"id":6119,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6097,"src":"4955:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6118,"name":"EnumerableMapNonexistentKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5925,"src":"4927:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":6120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4927:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6121,"nodeType":"RevertStatement","src":"4920:39:12"}]}},{"expression":{"id":6124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6103,"src":"4986:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6101,"id":6125,"nodeType":"Return","src":"4979:12:12"}]},"documentation":{"id":6092,"nodeType":"StructuredDocumentation","src":"4579:140:12","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":6127,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"4733:3:12","nodeType":"FunctionDefinition","parameters":{"id":6098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6095,"mutability":"mutable","name":"map","nameLocation":"4765:3:12","nodeType":"VariableDeclaration","scope":6127,"src":"4737:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6094,"nodeType":"UserDefinedTypeName","pathNode":{"id":6093,"name":"Bytes32ToBytes32Map","nameLocations":["4737:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"4737:19:12"},"referencedDeclaration":5933,"src":"4737:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"},{"constant":false,"id":6097,"mutability":"mutable","name":"key","nameLocation":"4778:3:12","nodeType":"VariableDeclaration","scope":6127,"src":"4770:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4770:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4736:46:12"},"returnParameters":{"id":6101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6127,"src":"4806:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6099,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4806:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4805:9:12"},"scope":7026,"src":"4724:274:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6142,"nodeType":"Block","src":"5636:42:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":6137,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6131,"src":"5653:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage pointer"}},"id":6138,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5657:5:12","memberName":"_keys","nodeType":"MemberAccess","referencedDeclaration":5928,"src":"5653:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage","typeString":"struct EnumerableSet.Bytes32Set storage ref"}},"id":6139,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5663:6:12","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":7348,"src":"5653:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32Set_$7231_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$attached_to$_t_struct$_Bytes32Set_$7231_storage_ptr_$","typeString":"function (struct EnumerableSet.Bytes32Set storage pointer) view returns (bytes32[] memory)"}},"id":6140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":6136,"id":6141,"nodeType":"Return","src":"5646:25:12"}]},"documentation":{"id":6128,"nodeType":"StructuredDocumentation","src":"5004:539:12","text":" @dev Return the an array containing all the keys\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."},"id":6143,"implemented":true,"kind":"function","modifiers":[],"name":"keys","nameLocation":"5557:4:12","nodeType":"FunctionDefinition","parameters":{"id":6132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6131,"mutability":"mutable","name":"map","nameLocation":"5590:3:12","nodeType":"VariableDeclaration","scope":6143,"src":"5562:31:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6130,"nodeType":"UserDefinedTypeName","pathNode":{"id":6129,"name":"Bytes32ToBytes32Map","nameLocations":["5562:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"5562:19:12"},"referencedDeclaration":5933,"src":"5562:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"src":"5561:33:12"},"returnParameters":{"id":6136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6143,"src":"5618:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5618:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6134,"nodeType":"ArrayTypeName","src":"5618:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5617:18:12"},"scope":7026,"src":"5548:130:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.UintToUintMap","id":6147,"members":[{"constant":false,"id":6146,"mutability":"mutable","name":"_inner","nameLocation":"5757:6:12","nodeType":"VariableDeclaration","scope":6147,"src":"5737:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6145,"nodeType":"UserDefinedTypeName","pathNode":{"id":6144,"name":"Bytes32ToBytes32Map","nameLocations":["5737:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"5737:19:12"},"referencedDeclaration":5933,"src":"5737:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"UintToUintMap","nameLocation":"5713:13:12","nodeType":"StructDefinition","scope":7026,"src":"5706:64:12","visibility":"public"},{"body":{"id":6173,"nodeType":"Block","src":"6089:69:12","statements":[{"expression":{"arguments":[{"expression":{"id":6161,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6151,"src":"6110:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6114:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"6110:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6165,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6153,"src":"6130:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6122:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6122:7:12","typeDescriptions":{}}},"id":6166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6122:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":6169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"6144:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6136:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6136:7:12","typeDescriptions":{}}},"id":6170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6136:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6160,"name":"set","nodeType":"Identifier","overloadedDeclarations":[5961,6174,6390,6624,6861],"referencedDeclaration":5961,"src":"6106:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":6171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6159,"id":6172,"nodeType":"Return","src":"6099:52:12"}]},"documentation":{"id":6148,"nodeType":"StructuredDocumentation","src":"5776:216:12","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":6174,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"6006:3:12","nodeType":"FunctionDefinition","parameters":{"id":6156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6151,"mutability":"mutable","name":"map","nameLocation":"6032:3:12","nodeType":"VariableDeclaration","scope":6174,"src":"6010:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6150,"nodeType":"UserDefinedTypeName","pathNode":{"id":6149,"name":"UintToUintMap","nameLocations":["6010:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"6010:13:12"},"referencedDeclaration":6147,"src":"6010:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6153,"mutability":"mutable","name":"key","nameLocation":"6045:3:12","nodeType":"VariableDeclaration","scope":6174,"src":"6037:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6152,"name":"uint256","nodeType":"ElementaryTypeName","src":"6037:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6155,"mutability":"mutable","name":"value","nameLocation":"6058:5:12","nodeType":"VariableDeclaration","scope":6174,"src":"6050:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6154,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6009:55:12"},"returnParameters":{"id":6159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6174,"src":"6083:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6157,"name":"bool","nodeType":"ElementaryTypeName","src":"6083:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6082:6:12"},"scope":7026,"src":"5997:161:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6194,"nodeType":"Block","src":"6397:56:12","statements":[{"expression":{"arguments":[{"expression":{"id":6186,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6178,"src":"6421:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6425:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"6421:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6190,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"6441:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6433:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6433:7:12","typeDescriptions":{}}},"id":6191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6433:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6185,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[5985,6195,6411,6651,6879],"referencedDeclaration":5985,"src":"6414:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":6192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6414:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6184,"id":6193,"nodeType":"Return","src":"6407:39:12"}]},"documentation":{"id":6175,"nodeType":"StructuredDocumentation","src":"6164:148:12","text":" @dev Removes a value from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":6195,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6326:6:12","nodeType":"FunctionDefinition","parameters":{"id":6181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6178,"mutability":"mutable","name":"map","nameLocation":"6355:3:12","nodeType":"VariableDeclaration","scope":6195,"src":"6333:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6177,"nodeType":"UserDefinedTypeName","pathNode":{"id":6176,"name":"UintToUintMap","nameLocations":["6333:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"6333:13:12"},"referencedDeclaration":6147,"src":"6333:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6180,"mutability":"mutable","name":"key","nameLocation":"6368:3:12","nodeType":"VariableDeclaration","scope":6195,"src":"6360:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6179,"name":"uint256","nodeType":"ElementaryTypeName","src":"6360:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6332:40:12"},"returnParameters":{"id":6184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6195,"src":"6391:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6182,"name":"bool","nodeType":"ElementaryTypeName","src":"6391:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6390:6:12"},"scope":7026,"src":"6317:136:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6215,"nodeType":"Block","src":"6619:58:12","statements":[{"expression":{"arguments":[{"expression":{"id":6207,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6199,"src":"6645:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6649:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"6645:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6211,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6201,"src":"6665:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6657:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6209,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6657:7:12","typeDescriptions":{}}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6657:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6206,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"6636:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6636:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6205,"id":6214,"nodeType":"Return","src":"6629:41:12"}]},"documentation":{"id":6196,"nodeType":"StructuredDocumentation","src":"6459:68:12","text":" @dev Returns true if the key is in the map. O(1)."},"id":6216,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6541:8:12","nodeType":"FunctionDefinition","parameters":{"id":6202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6199,"mutability":"mutable","name":"map","nameLocation":"6572:3:12","nodeType":"VariableDeclaration","scope":6216,"src":"6550:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6198,"nodeType":"UserDefinedTypeName","pathNode":{"id":6197,"name":"UintToUintMap","nameLocations":["6550:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"6550:13:12"},"referencedDeclaration":6147,"src":"6550:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6201,"mutability":"mutable","name":"key","nameLocation":"6585:3:12","nodeType":"VariableDeclaration","scope":6216,"src":"6577:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6200,"name":"uint256","nodeType":"ElementaryTypeName","src":"6577:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6549:40:12"},"returnParameters":{"id":6205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6216,"src":"6613:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6203,"name":"bool","nodeType":"ElementaryTypeName","src":"6613:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6612:6:12"},"scope":7026,"src":"6532:145:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6230,"nodeType":"Block","src":"6835:42:12","statements":[{"expression":{"arguments":[{"expression":{"id":6226,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6220,"src":"6859:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6863:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"6859:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6225,"name":"length","nodeType":"Identifier","overloadedDeclarations":[6018,6231,6447,6693,6912],"referencedDeclaration":6018,"src":"6852:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":6228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6852:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6224,"id":6229,"nodeType":"Return","src":"6845:25:12"}]},"documentation":{"id":6217,"nodeType":"StructuredDocumentation","src":"6683:72:12","text":" @dev Returns the number of elements in the map. O(1)."},"id":6231,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6769:6:12","nodeType":"FunctionDefinition","parameters":{"id":6221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6220,"mutability":"mutable","name":"map","nameLocation":"6798:3:12","nodeType":"VariableDeclaration","scope":6231,"src":"6776:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6219,"nodeType":"UserDefinedTypeName","pathNode":{"id":6218,"name":"UintToUintMap","nameLocations":["6776:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"6776:13:12"},"referencedDeclaration":6147,"src":"6776:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"}],"src":"6775:27:12"},"returnParameters":{"id":6224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6231,"src":"6826:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6222,"name":"uint256","nodeType":"ElementaryTypeName","src":"6826:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6825:9:12"},"scope":7026,"src":"6760:117:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6264,"nodeType":"Block","src":"7309:116:12","statements":[{"assignments":[6245,6247],"declarations":[{"constant":false,"id":6245,"mutability":"mutable","name":"key","nameLocation":"7328:3:12","nodeType":"VariableDeclaration","scope":6264,"src":"7320:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7320:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6247,"mutability":"mutable","name":"value","nameLocation":"7341:5:12","nodeType":"VariableDeclaration","scope":6264,"src":"7333:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7333:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6253,"initialValue":{"arguments":[{"expression":{"id":6249,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"7353:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7357:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"7353:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6251,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6237,"src":"7365:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6248,"name":"at","nodeType":"Identifier","overloadedDeclarations":[6047,6265,6487,6733,6943],"referencedDeclaration":6047,"src":"7350:2:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":6252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7350:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"7319:52:12"},{"expression":{"components":[{"arguments":[{"id":6256,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"7397:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7389:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6254,"name":"uint256","nodeType":"ElementaryTypeName","src":"7389:7:12","typeDescriptions":{}}},"id":6257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7389:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":6260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6247,"src":"7411:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7403:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6258,"name":"uint256","nodeType":"ElementaryTypeName","src":"7403:7:12","typeDescriptions":{}}},"id":6261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7403:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7388:30:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6243,"id":6263,"nodeType":"Return","src":"7381:37:12"}]},"documentation":{"id":6232,"nodeType":"StructuredDocumentation","src":"6883:326:12","text":" @dev Returns the element stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":6265,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7223:2:12","nodeType":"FunctionDefinition","parameters":{"id":6238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6235,"mutability":"mutable","name":"map","nameLocation":"7248:3:12","nodeType":"VariableDeclaration","scope":6265,"src":"7226:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6234,"nodeType":"UserDefinedTypeName","pathNode":{"id":6233,"name":"UintToUintMap","nameLocations":["7226:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"7226:13:12"},"referencedDeclaration":6147,"src":"7226:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6237,"mutability":"mutable","name":"index","nameLocation":"7261:5:12","nodeType":"VariableDeclaration","scope":6265,"src":"7253:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6236,"name":"uint256","nodeType":"ElementaryTypeName","src":"7253:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7225:42:12"},"returnParameters":{"id":6243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6265,"src":"7291:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6239,"name":"uint256","nodeType":"ElementaryTypeName","src":"7291:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6265,"src":"7300:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6241,"name":"uint256","nodeType":"ElementaryTypeName","src":"7300:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7290:18:12"},"scope":7026,"src":"7214:211:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6298,"nodeType":"Block","src":"7660:123:12","statements":[{"assignments":[6279,6281],"declarations":[{"constant":false,"id":6279,"mutability":"mutable","name":"success","nameLocation":"7676:7:12","nodeType":"VariableDeclaration","scope":6298,"src":"7671:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6278,"name":"bool","nodeType":"ElementaryTypeName","src":"7671:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6281,"mutability":"mutable","name":"value","nameLocation":"7693:5:12","nodeType":"VariableDeclaration","scope":6298,"src":"7685:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7685:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6290,"initialValue":{"arguments":[{"expression":{"id":6283,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6269,"src":"7709:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7713:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"7709:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6287,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"7729:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7721:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7721:7:12","typeDescriptions":{}}},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7721:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6282,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[6091,6299,6527,6773,6974],"referencedDeclaration":6091,"src":"7702:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":6289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7702:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"7670:64:12"},{"expression":{"components":[{"id":6291,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6279,"src":"7752:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6281,"src":"7769:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7761:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6292,"name":"uint256","nodeType":"ElementaryTypeName","src":"7761:7:12","typeDescriptions":{}}},"id":6295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7761:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7751:25:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6277,"id":6297,"nodeType":"Return","src":"7744:32:12"}]},"documentation":{"id":6266,"nodeType":"StructuredDocumentation","src":"7431:130:12","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":6299,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"7575:6:12","nodeType":"FunctionDefinition","parameters":{"id":6272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6269,"mutability":"mutable","name":"map","nameLocation":"7604:3:12","nodeType":"VariableDeclaration","scope":6299,"src":"7582:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6268,"nodeType":"UserDefinedTypeName","pathNode":{"id":6267,"name":"UintToUintMap","nameLocations":["7582:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"7582:13:12"},"referencedDeclaration":6147,"src":"7582:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6271,"mutability":"mutable","name":"key","nameLocation":"7617:3:12","nodeType":"VariableDeclaration","scope":6299,"src":"7609:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6270,"name":"uint256","nodeType":"ElementaryTypeName","src":"7609:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7581:40:12"},"returnParameters":{"id":6277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6299,"src":"7645:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6273,"name":"bool","nodeType":"ElementaryTypeName","src":"7645:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6299,"src":"7651:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6275,"name":"uint256","nodeType":"ElementaryTypeName","src":"7651:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7644:15:12"},"scope":7026,"src":"7566:217:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6322,"nodeType":"Block","src":"8019:62:12","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":6313,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6303,"src":"8048:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8052:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"8048:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6317,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6305,"src":"8068:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8060:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6315,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8060:7:12","typeDescriptions":{}}},"id":6318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8060:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6312,"name":"get","nodeType":"Identifier","overloadedDeclarations":[6127,6323,6557,6803,6995],"referencedDeclaration":6127,"src":"8044:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":6319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8036:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6310,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:12","typeDescriptions":{}}},"id":6320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8036:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6309,"id":6321,"nodeType":"Return","src":"8029:45:12"}]},"documentation":{"id":6300,"nodeType":"StructuredDocumentation","src":"7789:140:12","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":6323,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"7943:3:12","nodeType":"FunctionDefinition","parameters":{"id":6306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6303,"mutability":"mutable","name":"map","nameLocation":"7969:3:12","nodeType":"VariableDeclaration","scope":6323,"src":"7947:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6302,"nodeType":"UserDefinedTypeName","pathNode":{"id":6301,"name":"UintToUintMap","nameLocations":["7947:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"7947:13:12"},"referencedDeclaration":6147,"src":"7947:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"},{"constant":false,"id":6305,"mutability":"mutable","name":"key","nameLocation":"7982:3:12","nodeType":"VariableDeclaration","scope":6323,"src":"7974:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6304,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7946:40:12"},"returnParameters":{"id":6309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6323,"src":"8010:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6307,"name":"uint256","nodeType":"ElementaryTypeName","src":"8010:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8009:9:12"},"scope":7026,"src":"7934:147:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6352,"nodeType":"Block","src":"8713:216:12","statements":[{"assignments":[6337],"declarations":[{"constant":false,"id":6337,"mutability":"mutable","name":"store","nameLocation":"8740:5:12","nodeType":"VariableDeclaration","scope":6352,"src":"8723:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8723:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6336,"nodeType":"ArrayTypeName","src":"8723:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":6342,"initialValue":{"arguments":[{"expression":{"id":6339,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6327,"src":"8753:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap storage pointer"}},"id":6340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8757:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6146,"src":"8753:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6338,"name":"keys","nodeType":"Identifier","overloadedDeclarations":[6143,6353,6587,6833,7025],"referencedDeclaration":6143,"src":"8748:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (bytes32[] memory)"}},"id":6341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8748:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8723:41:12"},{"assignments":[6347],"declarations":[{"constant":false,"id":6347,"mutability":"mutable","name":"result","nameLocation":"8791:6:12","nodeType":"VariableDeclaration","scope":6352,"src":"8774:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6345,"name":"uint256","nodeType":"ElementaryTypeName","src":"8774:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6346,"nodeType":"ArrayTypeName","src":"8774:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":6348,"nodeType":"VariableDeclarationStatement","src":"8774:23:12"},{"AST":{"nodeType":"YulBlock","src":"8860:39:12","statements":[{"nodeType":"YulAssignment","src":"8874:15:12","value":{"name":"store","nodeType":"YulIdentifier","src":"8884:5:12"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8874:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":6347,"isOffset":false,"isSlot":false,"src":"8874:6:12","valueSize":1},{"declaration":6337,"isOffset":false,"isSlot":false,"src":"8884:5:12","valueSize":1}],"id":6349,"nodeType":"InlineAssembly","src":"8851:48:12"},{"expression":{"id":6350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6347,"src":"8916:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":6332,"id":6351,"nodeType":"Return","src":"8909:13:12"}]},"documentation":{"id":6324,"nodeType":"StructuredDocumentation","src":"8087:539:12","text":" @dev Return the an array containing all the keys\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."},"id":6353,"implemented":true,"kind":"function","modifiers":[],"name":"keys","nameLocation":"8640:4:12","nodeType":"FunctionDefinition","parameters":{"id":6328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6327,"mutability":"mutable","name":"map","nameLocation":"8667:3:12","nodeType":"VariableDeclaration","scope":6353,"src":"8645:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"},"typeName":{"id":6326,"nodeType":"UserDefinedTypeName","pathNode":{"id":6325,"name":"UintToUintMap","nameLocations":["8645:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":6147,"src":"8645:13:12"},"referencedDeclaration":6147,"src":"8645:13:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToUintMap_$6147_storage_ptr","typeString":"struct EnumerableMap.UintToUintMap"}},"visibility":"internal"}],"src":"8644:27:12"},"returnParameters":{"id":6332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6353,"src":"8695:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6329,"name":"uint256","nodeType":"ElementaryTypeName","src":"8695:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6330,"nodeType":"ArrayTypeName","src":"8695:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8694:18:12"},"scope":7026,"src":"8631:298:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.UintToAddressMap","id":6357,"members":[{"constant":false,"id":6356,"mutability":"mutable","name":"_inner","nameLocation":"9014:6:12","nodeType":"VariableDeclaration","scope":6357,"src":"8994:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6355,"nodeType":"UserDefinedTypeName","pathNode":{"id":6354,"name":"Bytes32ToBytes32Map","nameLocations":["8994:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"8994:19:12"},"referencedDeclaration":5933,"src":"8994:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"UintToAddressMap","nameLocation":"8967:16:12","nodeType":"StructDefinition","scope":7026,"src":"8960:67:12","visibility":"public"},{"body":{"id":6389,"nodeType":"Block","src":"9349:87:12","statements":[{"expression":{"arguments":[{"expression":{"id":6371,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6361,"src":"9370:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9374:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"9370:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6375,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6363,"src":"9390:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9382:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9382:7:12","typeDescriptions":{}}},"id":6376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9382:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"arguments":[{"id":6383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6365,"src":"9420:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9412:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6381,"name":"uint160","nodeType":"ElementaryTypeName","src":"9412:7:12","typeDescriptions":{}}},"id":6384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9412:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6379,"name":"uint256","nodeType":"ElementaryTypeName","src":"9404:7:12","typeDescriptions":{}}},"id":6385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9396:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9396:7:12","typeDescriptions":{}}},"id":6386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9396:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6370,"name":"set","nodeType":"Identifier","overloadedDeclarations":[5961,6174,6390,6624,6861],"referencedDeclaration":5961,"src":"9366:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":6387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9366:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6369,"id":6388,"nodeType":"Return","src":"9359:70:12"}]},"documentation":{"id":6358,"nodeType":"StructuredDocumentation","src":"9033:216:12","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":6390,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"9263:3:12","nodeType":"FunctionDefinition","parameters":{"id":6366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6361,"mutability":"mutable","name":"map","nameLocation":"9292:3:12","nodeType":"VariableDeclaration","scope":6390,"src":"9267:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6360,"nodeType":"UserDefinedTypeName","pathNode":{"id":6359,"name":"UintToAddressMap","nameLocations":["9267:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"9267:16:12"},"referencedDeclaration":6357,"src":"9267:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6363,"mutability":"mutable","name":"key","nameLocation":"9305:3:12","nodeType":"VariableDeclaration","scope":6390,"src":"9297:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6362,"name":"uint256","nodeType":"ElementaryTypeName","src":"9297:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6365,"mutability":"mutable","name":"value","nameLocation":"9318:5:12","nodeType":"VariableDeclaration","scope":6390,"src":"9310:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6364,"name":"address","nodeType":"ElementaryTypeName","src":"9310:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9266:58:12"},"returnParameters":{"id":6369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6390,"src":"9343:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6367,"name":"bool","nodeType":"ElementaryTypeName","src":"9343:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9342:6:12"},"scope":7026,"src":"9254:182:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6410,"nodeType":"Block","src":"9678:56:12","statements":[{"expression":{"arguments":[{"expression":{"id":6402,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6394,"src":"9702:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"9702:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6406,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6396,"src":"9722:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9714:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9714:7:12","typeDescriptions":{}}},"id":6407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9714:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6401,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[5985,6195,6411,6651,6879],"referencedDeclaration":5985,"src":"9695:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":6408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9695:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6400,"id":6409,"nodeType":"Return","src":"9688:39:12"}]},"documentation":{"id":6391,"nodeType":"StructuredDocumentation","src":"9442:148:12","text":" @dev Removes a value from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":6411,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"9604:6:12","nodeType":"FunctionDefinition","parameters":{"id":6397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6394,"mutability":"mutable","name":"map","nameLocation":"9636:3:12","nodeType":"VariableDeclaration","scope":6411,"src":"9611:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6393,"nodeType":"UserDefinedTypeName","pathNode":{"id":6392,"name":"UintToAddressMap","nameLocations":["9611:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"9611:16:12"},"referencedDeclaration":6357,"src":"9611:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6396,"mutability":"mutable","name":"key","nameLocation":"9649:3:12","nodeType":"VariableDeclaration","scope":6411,"src":"9641:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6395,"name":"uint256","nodeType":"ElementaryTypeName","src":"9641:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9610:43:12"},"returnParameters":{"id":6400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6411,"src":"9672:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6398,"name":"bool","nodeType":"ElementaryTypeName","src":"9672:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9671:6:12"},"scope":7026,"src":"9595:139:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6431,"nodeType":"Block","src":"9903:58:12","statements":[{"expression":{"arguments":[{"expression":{"id":6423,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6415,"src":"9929:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9933:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"9929:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6427,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6417,"src":"9949:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9941:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9941:7:12","typeDescriptions":{}}},"id":6428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9941:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6422,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"9920:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9920:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6421,"id":6430,"nodeType":"Return","src":"9913:41:12"}]},"documentation":{"id":6412,"nodeType":"StructuredDocumentation","src":"9740:68:12","text":" @dev Returns true if the key is in the map. O(1)."},"id":6432,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"9822:8:12","nodeType":"FunctionDefinition","parameters":{"id":6418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6415,"mutability":"mutable","name":"map","nameLocation":"9856:3:12","nodeType":"VariableDeclaration","scope":6432,"src":"9831:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6414,"nodeType":"UserDefinedTypeName","pathNode":{"id":6413,"name":"UintToAddressMap","nameLocations":["9831:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"9831:16:12"},"referencedDeclaration":6357,"src":"9831:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6417,"mutability":"mutable","name":"key","nameLocation":"9869:3:12","nodeType":"VariableDeclaration","scope":6432,"src":"9861:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6416,"name":"uint256","nodeType":"ElementaryTypeName","src":"9861:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9830:43:12"},"returnParameters":{"id":6421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6432,"src":"9897:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6419,"name":"bool","nodeType":"ElementaryTypeName","src":"9897:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9896:6:12"},"scope":7026,"src":"9813:148:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6446,"nodeType":"Block","src":"10122:42:12","statements":[{"expression":{"arguments":[{"expression":{"id":6442,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6436,"src":"10146:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6443,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10150:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"10146:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6441,"name":"length","nodeType":"Identifier","overloadedDeclarations":[6018,6231,6447,6693,6912],"referencedDeclaration":6018,"src":"10139:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":6444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10139:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6440,"id":6445,"nodeType":"Return","src":"10132:25:12"}]},"documentation":{"id":6433,"nodeType":"StructuredDocumentation","src":"9967:72:12","text":" @dev Returns the number of elements in the map. O(1)."},"id":6447,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"10053:6:12","nodeType":"FunctionDefinition","parameters":{"id":6437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6436,"mutability":"mutable","name":"map","nameLocation":"10085:3:12","nodeType":"VariableDeclaration","scope":6447,"src":"10060:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6435,"nodeType":"UserDefinedTypeName","pathNode":{"id":6434,"name":"UintToAddressMap","nameLocations":["10060:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"10060:16:12"},"referencedDeclaration":6357,"src":"10060:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"}],"src":"10059:30:12"},"returnParameters":{"id":6440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6447,"src":"10113:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6438,"name":"uint256","nodeType":"ElementaryTypeName","src":"10113:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10112:9:12"},"scope":7026,"src":"10044:120:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6486,"nodeType":"Block","src":"10599:134:12","statements":[{"assignments":[6461,6463],"declarations":[{"constant":false,"id":6461,"mutability":"mutable","name":"key","nameLocation":"10618:3:12","nodeType":"VariableDeclaration","scope":6486,"src":"10610:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10610:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6463,"mutability":"mutable","name":"value","nameLocation":"10631:5:12","nodeType":"VariableDeclaration","scope":6486,"src":"10623:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10623:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6469,"initialValue":{"arguments":[{"expression":{"id":6465,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6451,"src":"10643:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6466,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10647:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"10643:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6467,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6453,"src":"10655:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6464,"name":"at","nodeType":"Identifier","overloadedDeclarations":[6047,6265,6487,6733,6943],"referencedDeclaration":6047,"src":"10640:2:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":6468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10640:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"10609:52:12"},{"expression":{"components":[{"arguments":[{"id":6472,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"10687:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10679:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6470,"name":"uint256","nodeType":"ElementaryTypeName","src":"10679:7:12","typeDescriptions":{}}},"id":6473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10679:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"arguments":[{"arguments":[{"id":6480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6463,"src":"10717:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10709:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6478,"name":"uint256","nodeType":"ElementaryTypeName","src":"10709:7:12","typeDescriptions":{}}},"id":6481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10709:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10701:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6476,"name":"uint160","nodeType":"ElementaryTypeName","src":"10701:7:12","typeDescriptions":{}}},"id":6482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10701:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10693:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6474,"name":"address","nodeType":"ElementaryTypeName","src":"10693:7:12","typeDescriptions":{}}},"id":6483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10693:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10678:48:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"functionReturnParameters":6459,"id":6485,"nodeType":"Return","src":"10671:55:12"}]},"documentation":{"id":6448,"nodeType":"StructuredDocumentation","src":"10170:326:12","text":" @dev Returns the element stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":6487,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"10510:2:12","nodeType":"FunctionDefinition","parameters":{"id":6454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6451,"mutability":"mutable","name":"map","nameLocation":"10538:3:12","nodeType":"VariableDeclaration","scope":6487,"src":"10513:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6450,"nodeType":"UserDefinedTypeName","pathNode":{"id":6449,"name":"UintToAddressMap","nameLocations":["10513:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"10513:16:12"},"referencedDeclaration":6357,"src":"10513:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6453,"mutability":"mutable","name":"index","nameLocation":"10551:5:12","nodeType":"VariableDeclaration","scope":6487,"src":"10543:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6452,"name":"uint256","nodeType":"ElementaryTypeName","src":"10543:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10512:45:12"},"returnParameters":{"id":6459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6487,"src":"10581:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6455,"name":"uint256","nodeType":"ElementaryTypeName","src":"10581:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6487,"src":"10590:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6457,"name":"address","nodeType":"ElementaryTypeName","src":"10590:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10580:18:12"},"scope":7026,"src":"10501:232:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6526,"nodeType":"Block","src":"10971:141:12","statements":[{"assignments":[6501,6503],"declarations":[{"constant":false,"id":6501,"mutability":"mutable","name":"success","nameLocation":"10987:7:12","nodeType":"VariableDeclaration","scope":6526,"src":"10982:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6500,"name":"bool","nodeType":"ElementaryTypeName","src":"10982:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6503,"mutability":"mutable","name":"value","nameLocation":"11004:5:12","nodeType":"VariableDeclaration","scope":6526,"src":"10996:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10996:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6512,"initialValue":{"arguments":[{"expression":{"id":6505,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6491,"src":"11020:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11024:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"11020:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6509,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6493,"src":"11040:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11032:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11032:7:12","typeDescriptions":{}}},"id":6510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11032:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6504,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[6091,6299,6527,6773,6974],"referencedDeclaration":6091,"src":"11013:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":6511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11013:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"10981:64:12"},{"expression":{"components":[{"id":6513,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6501,"src":"11063:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"arguments":[{"arguments":[{"id":6520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6503,"src":"11096:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11088:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6518,"name":"uint256","nodeType":"ElementaryTypeName","src":"11088:7:12","typeDescriptions":{}}},"id":6521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11088:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11080:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6516,"name":"uint160","nodeType":"ElementaryTypeName","src":"11080:7:12","typeDescriptions":{}}},"id":6522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11080:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11072:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6514,"name":"address","nodeType":"ElementaryTypeName","src":"11072:7:12","typeDescriptions":{}}},"id":6523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11072:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6524,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11062:43:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_$","typeString":"tuple(bool,address)"}},"functionReturnParameters":6499,"id":6525,"nodeType":"Return","src":"11055:50:12"}]},"documentation":{"id":6488,"nodeType":"StructuredDocumentation","src":"10739:130:12","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":6527,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"10883:6:12","nodeType":"FunctionDefinition","parameters":{"id":6494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6491,"mutability":"mutable","name":"map","nameLocation":"10915:3:12","nodeType":"VariableDeclaration","scope":6527,"src":"10890:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6490,"nodeType":"UserDefinedTypeName","pathNode":{"id":6489,"name":"UintToAddressMap","nameLocations":["10890:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"10890:16:12"},"referencedDeclaration":6357,"src":"10890:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6493,"mutability":"mutable","name":"key","nameLocation":"10928:3:12","nodeType":"VariableDeclaration","scope":6527,"src":"10920:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6492,"name":"uint256","nodeType":"ElementaryTypeName","src":"10920:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10889:43:12"},"returnParameters":{"id":6499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6527,"src":"10956:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6495,"name":"bool","nodeType":"ElementaryTypeName","src":"10956:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6527,"src":"10962:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6497,"name":"address","nodeType":"ElementaryTypeName","src":"10962:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10955:15:12"},"scope":7026,"src":"10874:238:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6556,"nodeType":"Block","src":"11351:80:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":6545,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6531,"src":"11396:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11400:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"11396:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"id":6549,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6533,"src":"11416:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11408:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11408:7:12","typeDescriptions":{}}},"id":6550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11408:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6544,"name":"get","nodeType":"Identifier","overloadedDeclarations":[6127,6323,6557,6803,6995],"referencedDeclaration":6127,"src":"11392:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":6551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11392:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11384:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6542,"name":"uint256","nodeType":"ElementaryTypeName","src":"11384:7:12","typeDescriptions":{}}},"id":6552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11384:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6540,"name":"uint160","nodeType":"ElementaryTypeName","src":"11376:7:12","typeDescriptions":{}}},"id":6553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11376:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11368:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6538,"name":"address","nodeType":"ElementaryTypeName","src":"11368:7:12","typeDescriptions":{}}},"id":6554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11368:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6537,"id":6555,"nodeType":"Return","src":"11361:63:12"}]},"documentation":{"id":6528,"nodeType":"StructuredDocumentation","src":"11118:140:12","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":6557,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"11272:3:12","nodeType":"FunctionDefinition","parameters":{"id":6534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6531,"mutability":"mutable","name":"map","nameLocation":"11301:3:12","nodeType":"VariableDeclaration","scope":6557,"src":"11276:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6530,"nodeType":"UserDefinedTypeName","pathNode":{"id":6529,"name":"UintToAddressMap","nameLocations":["11276:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"11276:16:12"},"referencedDeclaration":6357,"src":"11276:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"},{"constant":false,"id":6533,"mutability":"mutable","name":"key","nameLocation":"11314:3:12","nodeType":"VariableDeclaration","scope":6557,"src":"11306:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6532,"name":"uint256","nodeType":"ElementaryTypeName","src":"11306:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11275:43:12"},"returnParameters":{"id":6537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6557,"src":"11342:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6535,"name":"address","nodeType":"ElementaryTypeName","src":"11342:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11341:9:12"},"scope":7026,"src":"11263:168:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6586,"nodeType":"Block","src":"12066:216:12","statements":[{"assignments":[6571],"declarations":[{"constant":false,"id":6571,"mutability":"mutable","name":"store","nameLocation":"12093:5:12","nodeType":"VariableDeclaration","scope":6586,"src":"12076:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12076:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6570,"nodeType":"ArrayTypeName","src":"12076:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":6576,"initialValue":{"arguments":[{"expression":{"id":6573,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6561,"src":"12106:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap storage pointer"}},"id":6574,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12110:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6356,"src":"12106:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6572,"name":"keys","nodeType":"Identifier","overloadedDeclarations":[6143,6353,6587,6833,7025],"referencedDeclaration":6143,"src":"12101:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (bytes32[] memory)"}},"id":6575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12076:41:12"},{"assignments":[6581],"declarations":[{"constant":false,"id":6581,"mutability":"mutable","name":"result","nameLocation":"12144:6:12","nodeType":"VariableDeclaration","scope":6586,"src":"12127:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6579,"name":"uint256","nodeType":"ElementaryTypeName","src":"12127:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6580,"nodeType":"ArrayTypeName","src":"12127:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":6582,"nodeType":"VariableDeclarationStatement","src":"12127:23:12"},{"AST":{"nodeType":"YulBlock","src":"12213:39:12","statements":[{"nodeType":"YulAssignment","src":"12227:15:12","value":{"name":"store","nodeType":"YulIdentifier","src":"12237:5:12"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12227:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":6581,"isOffset":false,"isSlot":false,"src":"12227:6:12","valueSize":1},{"declaration":6571,"isOffset":false,"isSlot":false,"src":"12237:5:12","valueSize":1}],"id":6583,"nodeType":"InlineAssembly","src":"12204:48:12"},{"expression":{"id":6584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6581,"src":"12269:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":6566,"id":6585,"nodeType":"Return","src":"12262:13:12"}]},"documentation":{"id":6558,"nodeType":"StructuredDocumentation","src":"11437:539:12","text":" @dev Return the an array containing all the keys\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."},"id":6587,"implemented":true,"kind":"function","modifiers":[],"name":"keys","nameLocation":"11990:4:12","nodeType":"FunctionDefinition","parameters":{"id":6562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6561,"mutability":"mutable","name":"map","nameLocation":"12020:3:12","nodeType":"VariableDeclaration","scope":6587,"src":"11995:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"},"typeName":{"id":6560,"nodeType":"UserDefinedTypeName","pathNode":{"id":6559,"name":"UintToAddressMap","nameLocations":["11995:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6357,"src":"11995:16:12"},"referencedDeclaration":6357,"src":"11995:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_UintToAddressMap_$6357_storage_ptr","typeString":"struct EnumerableMap.UintToAddressMap"}},"visibility":"internal"}],"src":"11994:30:12"},"returnParameters":{"id":6566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6587,"src":"12048:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6563,"name":"uint256","nodeType":"ElementaryTypeName","src":"12048:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6564,"nodeType":"ArrayTypeName","src":"12048:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12047:18:12"},"scope":7026,"src":"11981:301:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.AddressToUintMap","id":6591,"members":[{"constant":false,"id":6590,"mutability":"mutable","name":"_inner","nameLocation":"12367:6:12","nodeType":"VariableDeclaration","scope":6591,"src":"12347:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6589,"nodeType":"UserDefinedTypeName","pathNode":{"id":6588,"name":"Bytes32ToBytes32Map","nameLocations":["12347:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"12347:19:12"},"referencedDeclaration":5933,"src":"12347:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"AddressToUintMap","nameLocation":"12320:16:12","nodeType":"StructDefinition","scope":7026,"src":"12313:67:12","visibility":"public"},{"body":{"id":6623,"nodeType":"Block","src":"12702:87:12","statements":[{"expression":{"arguments":[{"expression":{"id":6605,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6595,"src":"12723:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6606,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12727:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"12723:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":6613,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6597,"src":"12759:3:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12751:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6611,"name":"uint160","nodeType":"ElementaryTypeName","src":"12751:7:12","typeDescriptions":{}}},"id":6614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12751:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12743:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6609,"name":"uint256","nodeType":"ElementaryTypeName","src":"12743:7:12","typeDescriptions":{}}},"id":6615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12743:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12735:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12735:7:12","typeDescriptions":{}}},"id":6616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12735:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":6619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6599,"src":"12775:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12767:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12767:7:12","typeDescriptions":{}}},"id":6620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12767:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6604,"name":"set","nodeType":"Identifier","overloadedDeclarations":[5961,6174,6390,6624,6861],"referencedDeclaration":5961,"src":"12719:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":6621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12719:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6603,"id":6622,"nodeType":"Return","src":"12712:70:12"}]},"documentation":{"id":6592,"nodeType":"StructuredDocumentation","src":"12386:216:12","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":6624,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"12616:3:12","nodeType":"FunctionDefinition","parameters":{"id":6600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6595,"mutability":"mutable","name":"map","nameLocation":"12645:3:12","nodeType":"VariableDeclaration","scope":6624,"src":"12620:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6594,"nodeType":"UserDefinedTypeName","pathNode":{"id":6593,"name":"AddressToUintMap","nameLocations":["12620:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"12620:16:12"},"referencedDeclaration":6591,"src":"12620:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6597,"mutability":"mutable","name":"key","nameLocation":"12658:3:12","nodeType":"VariableDeclaration","scope":6624,"src":"12650:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6596,"name":"address","nodeType":"ElementaryTypeName","src":"12650:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6599,"mutability":"mutable","name":"value","nameLocation":"12671:5:12","nodeType":"VariableDeclaration","scope":6624,"src":"12663:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6598,"name":"uint256","nodeType":"ElementaryTypeName","src":"12663:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12619:58:12"},"returnParameters":{"id":6603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6624,"src":"12696:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6601,"name":"bool","nodeType":"ElementaryTypeName","src":"12696:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12695:6:12"},"scope":7026,"src":"12607:182:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6650,"nodeType":"Block","src":"13031:74:12","statements":[{"expression":{"arguments":[{"expression":{"id":6636,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6628,"src":"13055:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6637,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13059:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"13055:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":6644,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6630,"src":"13091:3:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13083:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6642,"name":"uint160","nodeType":"ElementaryTypeName","src":"13083:7:12","typeDescriptions":{}}},"id":6645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13083:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13075:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6640,"name":"uint256","nodeType":"ElementaryTypeName","src":"13075:7:12","typeDescriptions":{}}},"id":6646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13075:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13067:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13067:7:12","typeDescriptions":{}}},"id":6647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13067:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6635,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[5985,6195,6411,6651,6879],"referencedDeclaration":5985,"src":"13048:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":6648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13048:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6634,"id":6649,"nodeType":"Return","src":"13041:57:12"}]},"documentation":{"id":6625,"nodeType":"StructuredDocumentation","src":"12795:148:12","text":" @dev Removes a value from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":6651,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"12957:6:12","nodeType":"FunctionDefinition","parameters":{"id":6631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6628,"mutability":"mutable","name":"map","nameLocation":"12989:3:12","nodeType":"VariableDeclaration","scope":6651,"src":"12964:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6627,"nodeType":"UserDefinedTypeName","pathNode":{"id":6626,"name":"AddressToUintMap","nameLocations":["12964:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"12964:16:12"},"referencedDeclaration":6591,"src":"12964:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6630,"mutability":"mutable","name":"key","nameLocation":"13002:3:12","nodeType":"VariableDeclaration","scope":6651,"src":"12994:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6629,"name":"address","nodeType":"ElementaryTypeName","src":"12994:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12963:43:12"},"returnParameters":{"id":6634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6651,"src":"13025:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6632,"name":"bool","nodeType":"ElementaryTypeName","src":"13025:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13024:6:12"},"scope":7026,"src":"12948:157:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6677,"nodeType":"Block","src":"13274:76:12","statements":[{"expression":{"arguments":[{"expression":{"id":6663,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6655,"src":"13300:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13304:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"13300:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":6671,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6657,"src":"13336:3:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13328:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6669,"name":"uint160","nodeType":"ElementaryTypeName","src":"13328:7:12","typeDescriptions":{}}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13328:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13320:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6667,"name":"uint256","nodeType":"ElementaryTypeName","src":"13320:7:12","typeDescriptions":{}}},"id":6673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13320:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13312:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13312:7:12","typeDescriptions":{}}},"id":6674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13312:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6662,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"13291:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13291:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6661,"id":6676,"nodeType":"Return","src":"13284:59:12"}]},"documentation":{"id":6652,"nodeType":"StructuredDocumentation","src":"13111:68:12","text":" @dev Returns true if the key is in the map. O(1)."},"id":6678,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"13193:8:12","nodeType":"FunctionDefinition","parameters":{"id":6658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6655,"mutability":"mutable","name":"map","nameLocation":"13227:3:12","nodeType":"VariableDeclaration","scope":6678,"src":"13202:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6654,"nodeType":"UserDefinedTypeName","pathNode":{"id":6653,"name":"AddressToUintMap","nameLocations":["13202:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"13202:16:12"},"referencedDeclaration":6591,"src":"13202:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6657,"mutability":"mutable","name":"key","nameLocation":"13240:3:12","nodeType":"VariableDeclaration","scope":6678,"src":"13232:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6656,"name":"address","nodeType":"ElementaryTypeName","src":"13232:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13201:43:12"},"returnParameters":{"id":6661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6678,"src":"13268:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6659,"name":"bool","nodeType":"ElementaryTypeName","src":"13268:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13267:6:12"},"scope":7026,"src":"13184:166:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6692,"nodeType":"Block","src":"13511:42:12","statements":[{"expression":{"arguments":[{"expression":{"id":6688,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6682,"src":"13535:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6689,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13539:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"13535:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6687,"name":"length","nodeType":"Identifier","overloadedDeclarations":[6018,6231,6447,6693,6912],"referencedDeclaration":6018,"src":"13528:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":6690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13528:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6686,"id":6691,"nodeType":"Return","src":"13521:25:12"}]},"documentation":{"id":6679,"nodeType":"StructuredDocumentation","src":"13356:72:12","text":" @dev Returns the number of elements in the map. O(1)."},"id":6693,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"13442:6:12","nodeType":"FunctionDefinition","parameters":{"id":6683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6682,"mutability":"mutable","name":"map","nameLocation":"13474:3:12","nodeType":"VariableDeclaration","scope":6693,"src":"13449:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6681,"nodeType":"UserDefinedTypeName","pathNode":{"id":6680,"name":"AddressToUintMap","nameLocations":["13449:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"13449:16:12"},"referencedDeclaration":6591,"src":"13449:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"}],"src":"13448:30:12"},"returnParameters":{"id":6686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6693,"src":"13502:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6684,"name":"uint256","nodeType":"ElementaryTypeName","src":"13502:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13501:9:12"},"scope":7026,"src":"13433:120:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6732,"nodeType":"Block","src":"13988:134:12","statements":[{"assignments":[6707,6709],"declarations":[{"constant":false,"id":6707,"mutability":"mutable","name":"key","nameLocation":"14007:3:12","nodeType":"VariableDeclaration","scope":6732,"src":"13999:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13999:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6709,"mutability":"mutable","name":"value","nameLocation":"14020:5:12","nodeType":"VariableDeclaration","scope":6732,"src":"14012:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14012:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6715,"initialValue":{"arguments":[{"expression":{"id":6711,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6697,"src":"14032:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14036:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"14032:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6713,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6699,"src":"14044:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6710,"name":"at","nodeType":"Identifier","overloadedDeclarations":[6047,6265,6487,6733,6943],"referencedDeclaration":6047,"src":"14029:2:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":6714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14029:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"13998:52:12"},{"expression":{"components":[{"arguments":[{"arguments":[{"arguments":[{"id":6722,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6707,"src":"14092:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14084:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6720,"name":"uint256","nodeType":"ElementaryTypeName","src":"14084:7:12","typeDescriptions":{}}},"id":6723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14084:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14076:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6718,"name":"uint160","nodeType":"ElementaryTypeName","src":"14076:7:12","typeDescriptions":{}}},"id":6724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14076:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14068:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6716,"name":"address","nodeType":"ElementaryTypeName","src":"14068:7:12","typeDescriptions":{}}},"id":6725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14068:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6709,"src":"14108:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14100:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6726,"name":"uint256","nodeType":"ElementaryTypeName","src":"14100:7:12","typeDescriptions":{}}},"id":6729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14100:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14067:48:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"functionReturnParameters":6705,"id":6731,"nodeType":"Return","src":"14060:55:12"}]},"documentation":{"id":6694,"nodeType":"StructuredDocumentation","src":"13559:326:12","text":" @dev Returns the element stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":6733,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"13899:2:12","nodeType":"FunctionDefinition","parameters":{"id":6700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6697,"mutability":"mutable","name":"map","nameLocation":"13927:3:12","nodeType":"VariableDeclaration","scope":6733,"src":"13902:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6696,"nodeType":"UserDefinedTypeName","pathNode":{"id":6695,"name":"AddressToUintMap","nameLocations":["13902:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"13902:16:12"},"referencedDeclaration":6591,"src":"13902:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6699,"mutability":"mutable","name":"index","nameLocation":"13940:5:12","nodeType":"VariableDeclaration","scope":6733,"src":"13932:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6698,"name":"uint256","nodeType":"ElementaryTypeName","src":"13932:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13901:45:12"},"returnParameters":{"id":6705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6733,"src":"13970:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6701,"name":"address","nodeType":"ElementaryTypeName","src":"13970:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6733,"src":"13979:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6703,"name":"uint256","nodeType":"ElementaryTypeName","src":"13979:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13969:18:12"},"scope":7026,"src":"13890:232:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6772,"nodeType":"Block","src":"14360:141:12","statements":[{"assignments":[6747,6749],"declarations":[{"constant":false,"id":6747,"mutability":"mutable","name":"success","nameLocation":"14376:7:12","nodeType":"VariableDeclaration","scope":6772,"src":"14371:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6746,"name":"bool","nodeType":"ElementaryTypeName","src":"14371:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6749,"mutability":"mutable","name":"value","nameLocation":"14393:5:12","nodeType":"VariableDeclaration","scope":6772,"src":"14385:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14385:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6764,"initialValue":{"arguments":[{"expression":{"id":6751,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6737,"src":"14409:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6752,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14413:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"14409:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":6759,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6739,"src":"14445:3:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14437:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6757,"name":"uint160","nodeType":"ElementaryTypeName","src":"14437:7:12","typeDescriptions":{}}},"id":6760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14437:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14429:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6755,"name":"uint256","nodeType":"ElementaryTypeName","src":"14429:7:12","typeDescriptions":{}}},"id":6761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14429:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14421:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6753,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14421:7:12","typeDescriptions":{}}},"id":6762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14421:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6750,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[6091,6299,6527,6773,6974],"referencedDeclaration":6091,"src":"14402:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":6763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14402:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"14370:82:12"},{"expression":{"components":[{"id":6765,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6747,"src":"14470:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6749,"src":"14487:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14479:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6766,"name":"uint256","nodeType":"ElementaryTypeName","src":"14479:7:12","typeDescriptions":{}}},"id":6769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14479:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6770,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14469:25:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6745,"id":6771,"nodeType":"Return","src":"14462:32:12"}]},"documentation":{"id":6734,"nodeType":"StructuredDocumentation","src":"14128:130:12","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":6773,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"14272:6:12","nodeType":"FunctionDefinition","parameters":{"id":6740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6737,"mutability":"mutable","name":"map","nameLocation":"14304:3:12","nodeType":"VariableDeclaration","scope":6773,"src":"14279:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6736,"nodeType":"UserDefinedTypeName","pathNode":{"id":6735,"name":"AddressToUintMap","nameLocations":["14279:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"14279:16:12"},"referencedDeclaration":6591,"src":"14279:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6739,"mutability":"mutable","name":"key","nameLocation":"14317:3:12","nodeType":"VariableDeclaration","scope":6773,"src":"14309:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6738,"name":"address","nodeType":"ElementaryTypeName","src":"14309:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14278:43:12"},"returnParameters":{"id":6745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6773,"src":"14345:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6741,"name":"bool","nodeType":"ElementaryTypeName","src":"14345:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6773,"src":"14351:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6743,"name":"uint256","nodeType":"ElementaryTypeName","src":"14351:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14344:15:12"},"scope":7026,"src":"14263:238:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6802,"nodeType":"Block","src":"14740:80:12","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":6787,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6777,"src":"14769:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6788,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14773:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"14769:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":6795,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6779,"src":"14805:3:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14797:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":6793,"name":"uint160","nodeType":"ElementaryTypeName","src":"14797:7:12","typeDescriptions":{}}},"id":6796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14797:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":6792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14789:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6791,"name":"uint256","nodeType":"ElementaryTypeName","src":"14789:7:12","typeDescriptions":{}}},"id":6797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14789:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14781:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14781:7:12","typeDescriptions":{}}},"id":6798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14781:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6786,"name":"get","nodeType":"Identifier","overloadedDeclarations":[6127,6323,6557,6803,6995],"referencedDeclaration":6127,"src":"14765:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":6799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14765:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14757:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6784,"name":"uint256","nodeType":"ElementaryTypeName","src":"14757:7:12","typeDescriptions":{}}},"id":6800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14757:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6783,"id":6801,"nodeType":"Return","src":"14750:63:12"}]},"documentation":{"id":6774,"nodeType":"StructuredDocumentation","src":"14507:140:12","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":6803,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"14661:3:12","nodeType":"FunctionDefinition","parameters":{"id":6780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6777,"mutability":"mutable","name":"map","nameLocation":"14690:3:12","nodeType":"VariableDeclaration","scope":6803,"src":"14665:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6776,"nodeType":"UserDefinedTypeName","pathNode":{"id":6775,"name":"AddressToUintMap","nameLocations":["14665:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"14665:16:12"},"referencedDeclaration":6591,"src":"14665:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"},{"constant":false,"id":6779,"mutability":"mutable","name":"key","nameLocation":"14703:3:12","nodeType":"VariableDeclaration","scope":6803,"src":"14695:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6778,"name":"address","nodeType":"ElementaryTypeName","src":"14695:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14664:43:12"},"returnParameters":{"id":6783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6803,"src":"14731:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6781,"name":"uint256","nodeType":"ElementaryTypeName","src":"14731:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14730:9:12"},"scope":7026,"src":"14652:168:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6832,"nodeType":"Block","src":"15455:216:12","statements":[{"assignments":[6817],"declarations":[{"constant":false,"id":6817,"mutability":"mutable","name":"store","nameLocation":"15482:5:12","nodeType":"VariableDeclaration","scope":6832,"src":"15465:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15465:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6816,"nodeType":"ArrayTypeName","src":"15465:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":6822,"initialValue":{"arguments":[{"expression":{"id":6819,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6807,"src":"15495:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap storage pointer"}},"id":6820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15499:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6590,"src":"15495:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6818,"name":"keys","nodeType":"Identifier","overloadedDeclarations":[6143,6353,6587,6833,7025],"referencedDeclaration":6143,"src":"15490:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (bytes32[] memory)"}},"id":6821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15490:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"15465:41:12"},{"assignments":[6827],"declarations":[{"constant":false,"id":6827,"mutability":"mutable","name":"result","nameLocation":"15533:6:12","nodeType":"VariableDeclaration","scope":6832,"src":"15516:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6825,"name":"address","nodeType":"ElementaryTypeName","src":"15516:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6826,"nodeType":"ArrayTypeName","src":"15516:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":6828,"nodeType":"VariableDeclarationStatement","src":"15516:23:12"},{"AST":{"nodeType":"YulBlock","src":"15602:39:12","statements":[{"nodeType":"YulAssignment","src":"15616:15:12","value":{"name":"store","nodeType":"YulIdentifier","src":"15626:5:12"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15616:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":6827,"isOffset":false,"isSlot":false,"src":"15616:6:12","valueSize":1},{"declaration":6817,"isOffset":false,"isSlot":false,"src":"15626:5:12","valueSize":1}],"id":6829,"nodeType":"InlineAssembly","src":"15593:48:12"},{"expression":{"id":6830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6827,"src":"15658:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":6812,"id":6831,"nodeType":"Return","src":"15651:13:12"}]},"documentation":{"id":6804,"nodeType":"StructuredDocumentation","src":"14826:539:12","text":" @dev Return the an array containing all the keys\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."},"id":6833,"implemented":true,"kind":"function","modifiers":[],"name":"keys","nameLocation":"15379:4:12","nodeType":"FunctionDefinition","parameters":{"id":6808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6807,"mutability":"mutable","name":"map","nameLocation":"15409:3:12","nodeType":"VariableDeclaration","scope":6833,"src":"15384:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":6806,"nodeType":"UserDefinedTypeName","pathNode":{"id":6805,"name":"AddressToUintMap","nameLocations":["15384:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"15384:16:12"},"referencedDeclaration":6591,"src":"15384:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"internal"}],"src":"15383:30:12"},"returnParameters":{"id":6812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6833,"src":"15437:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6809,"name":"address","nodeType":"ElementaryTypeName","src":"15437:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6810,"nodeType":"ArrayTypeName","src":"15437:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"15436:18:12"},"scope":7026,"src":"15370:301:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableMap.Bytes32ToUintMap","id":6837,"members":[{"constant":false,"id":6836,"mutability":"mutable","name":"_inner","nameLocation":"15756:6:12","nodeType":"VariableDeclaration","scope":6837,"src":"15736:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"},"typeName":{"id":6835,"nodeType":"UserDefinedTypeName","pathNode":{"id":6834,"name":"Bytes32ToBytes32Map","nameLocations":["15736:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":5933,"src":"15736:19:12"},"referencedDeclaration":5933,"src":"15736:19:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToBytes32Map"}},"visibility":"internal"}],"name":"Bytes32ToUintMap","nameLocation":"15709:16:12","nodeType":"StructDefinition","scope":7026,"src":"15702:67:12","visibility":"public"},{"body":{"id":6860,"nodeType":"Block","src":"16091:60:12","statements":[{"expression":{"arguments":[{"expression":{"id":6851,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6841,"src":"16112:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16116:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"16112:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6853,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6843,"src":"16124:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":6856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"16137:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16129:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":6854,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16129:7:12","typeDescriptions":{}}},"id":6857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16129:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6850,"name":"set","nodeType":"Identifier","overloadedDeclarations":[5961,6174,6390,6624,6861],"referencedDeclaration":5961,"src":"16108:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32) returns (bool)"}},"id":6858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16108:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6849,"id":6859,"nodeType":"Return","src":"16101:43:12"}]},"documentation":{"id":6838,"nodeType":"StructuredDocumentation","src":"15775:216:12","text":" @dev Adds a key-value pair to a map, or updates the value for an existing\n key. O(1).\n Returns true if the key was added to the map, that is if it was not\n already present."},"id":6861,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"16005:3:12","nodeType":"FunctionDefinition","parameters":{"id":6846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6841,"mutability":"mutable","name":"map","nameLocation":"16034:3:12","nodeType":"VariableDeclaration","scope":6861,"src":"16009:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6840,"nodeType":"UserDefinedTypeName","pathNode":{"id":6839,"name":"Bytes32ToUintMap","nameLocations":["16009:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"16009:16:12"},"referencedDeclaration":6837,"src":"16009:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6843,"mutability":"mutable","name":"key","nameLocation":"16047:3:12","nodeType":"VariableDeclaration","scope":6861,"src":"16039:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6842,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16039:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6845,"mutability":"mutable","name":"value","nameLocation":"16060:5:12","nodeType":"VariableDeclaration","scope":6861,"src":"16052:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6844,"name":"uint256","nodeType":"ElementaryTypeName","src":"16052:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16008:58:12"},"returnParameters":{"id":6849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6861,"src":"16085:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6847,"name":"bool","nodeType":"ElementaryTypeName","src":"16085:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16084:6:12"},"scope":7026,"src":"15996:155:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6878,"nodeType":"Block","src":"16393:47:12","statements":[{"expression":{"arguments":[{"expression":{"id":6873,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6865,"src":"16417:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6874,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16421:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"16417:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6875,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6867,"src":"16429:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6872,"name":"remove","nodeType":"Identifier","overloadedDeclarations":[5985,6195,6411,6651,6879],"referencedDeclaration":5985,"src":"16410:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) returns (bool)"}},"id":6876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16410:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6871,"id":6877,"nodeType":"Return","src":"16403:30:12"}]},"documentation":{"id":6862,"nodeType":"StructuredDocumentation","src":"16157:148:12","text":" @dev Removes a value from a map. O(1).\n Returns true if the key was removed from the map, that is if it was present."},"id":6879,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"16319:6:12","nodeType":"FunctionDefinition","parameters":{"id":6868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6865,"mutability":"mutable","name":"map","nameLocation":"16351:3:12","nodeType":"VariableDeclaration","scope":6879,"src":"16326:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6864,"nodeType":"UserDefinedTypeName","pathNode":{"id":6863,"name":"Bytes32ToUintMap","nameLocations":["16326:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"16326:16:12"},"referencedDeclaration":6837,"src":"16326:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6867,"mutability":"mutable","name":"key","nameLocation":"16364:3:12","nodeType":"VariableDeclaration","scope":6879,"src":"16356:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16356:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16325:43:12"},"returnParameters":{"id":6871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6879,"src":"16387:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6869,"name":"bool","nodeType":"ElementaryTypeName","src":"16387:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16386:6:12"},"scope":7026,"src":"16310:130:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6896,"nodeType":"Block","src":"16609:49:12","statements":[{"expression":{"arguments":[{"expression":{"id":6891,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6883,"src":"16635:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16639:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"16635:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6893,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6885,"src":"16647:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6890,"name":"contains","nodeType":"Identifier","overloadedDeclarations":[6003,6216,6432,6678,6897],"referencedDeclaration":6003,"src":"16626:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool)"}},"id":6894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16626:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6889,"id":6895,"nodeType":"Return","src":"16619:32:12"}]},"documentation":{"id":6880,"nodeType":"StructuredDocumentation","src":"16446:68:12","text":" @dev Returns true if the key is in the map. O(1)."},"id":6897,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"16528:8:12","nodeType":"FunctionDefinition","parameters":{"id":6886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6883,"mutability":"mutable","name":"map","nameLocation":"16562:3:12","nodeType":"VariableDeclaration","scope":6897,"src":"16537:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6882,"nodeType":"UserDefinedTypeName","pathNode":{"id":6881,"name":"Bytes32ToUintMap","nameLocations":["16537:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"16537:16:12"},"referencedDeclaration":6837,"src":"16537:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6885,"mutability":"mutable","name":"key","nameLocation":"16575:3:12","nodeType":"VariableDeclaration","scope":6897,"src":"16567:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16567:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16536:43:12"},"returnParameters":{"id":6889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6897,"src":"16603:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6887,"name":"bool","nodeType":"ElementaryTypeName","src":"16603:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16602:6:12"},"scope":7026,"src":"16519:139:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6911,"nodeType":"Block","src":"16819:42:12","statements":[{"expression":{"arguments":[{"expression":{"id":6907,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6901,"src":"16843:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16847:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"16843:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":6906,"name":"length","nodeType":"Identifier","overloadedDeclarations":[6018,6231,6447,6693,6912],"referencedDeclaration":6018,"src":"16836:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (uint256)"}},"id":6909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16836:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6905,"id":6910,"nodeType":"Return","src":"16829:25:12"}]},"documentation":{"id":6898,"nodeType":"StructuredDocumentation","src":"16664:72:12","text":" @dev Returns the number of elements in the map. O(1)."},"id":6912,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"16750:6:12","nodeType":"FunctionDefinition","parameters":{"id":6902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6901,"mutability":"mutable","name":"map","nameLocation":"16782:3:12","nodeType":"VariableDeclaration","scope":6912,"src":"16757:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6900,"nodeType":"UserDefinedTypeName","pathNode":{"id":6899,"name":"Bytes32ToUintMap","nameLocations":["16757:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"16757:16:12"},"referencedDeclaration":6837,"src":"16757:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"}],"src":"16756:30:12"},"returnParameters":{"id":6905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6912,"src":"16810:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6903,"name":"uint256","nodeType":"ElementaryTypeName","src":"16810:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16809:9:12"},"scope":7026,"src":"16741:120:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6942,"nodeType":"Block","src":"17296:107:12","statements":[{"assignments":[6926,6928],"declarations":[{"constant":false,"id":6926,"mutability":"mutable","name":"key","nameLocation":"17315:3:12","nodeType":"VariableDeclaration","scope":6942,"src":"17307:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17307:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6928,"mutability":"mutable","name":"value","nameLocation":"17328:5:12","nodeType":"VariableDeclaration","scope":6942,"src":"17320:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6927,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17320:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6934,"initialValue":{"arguments":[{"expression":{"id":6930,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6916,"src":"17340:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17344:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"17340:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6932,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6918,"src":"17352:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6929,"name":"at","nodeType":"Identifier","overloadedDeclarations":[6047,6265,6487,6733,6943],"referencedDeclaration":6047,"src":"17337:2:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256) view returns (bytes32,bytes32)"}},"id":6933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17337:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$","typeString":"tuple(bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"17306:52:12"},{"expression":{"components":[{"id":6935,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6926,"src":"17376:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":6938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"17389:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17381:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6936,"name":"uint256","nodeType":"ElementaryTypeName","src":"17381:7:12","typeDescriptions":{}}},"id":6939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17381:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6940,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17375:21:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"functionReturnParameters":6924,"id":6941,"nodeType":"Return","src":"17368:28:12"}]},"documentation":{"id":6913,"nodeType":"StructuredDocumentation","src":"16867:326:12","text":" @dev Returns the element stored at position `index` in the map. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":6943,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"17207:2:12","nodeType":"FunctionDefinition","parameters":{"id":6919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6916,"mutability":"mutable","name":"map","nameLocation":"17235:3:12","nodeType":"VariableDeclaration","scope":6943,"src":"17210:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6915,"nodeType":"UserDefinedTypeName","pathNode":{"id":6914,"name":"Bytes32ToUintMap","nameLocations":["17210:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"17210:16:12"},"referencedDeclaration":6837,"src":"17210:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6918,"mutability":"mutable","name":"index","nameLocation":"17248:5:12","nodeType":"VariableDeclaration","scope":6943,"src":"17240:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6917,"name":"uint256","nodeType":"ElementaryTypeName","src":"17240:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17209:45:12"},"returnParameters":{"id":6924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6943,"src":"17278:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17278:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6943,"src":"17287:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6922,"name":"uint256","nodeType":"ElementaryTypeName","src":"17287:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17277:18:12"},"scope":7026,"src":"17198:205:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6973,"nodeType":"Block","src":"17641:114:12","statements":[{"assignments":[6957,6959],"declarations":[{"constant":false,"id":6957,"mutability":"mutable","name":"success","nameLocation":"17657:7:12","nodeType":"VariableDeclaration","scope":6973,"src":"17652:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6956,"name":"bool","nodeType":"ElementaryTypeName","src":"17652:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6959,"mutability":"mutable","name":"value","nameLocation":"17674:5:12","nodeType":"VariableDeclaration","scope":6973,"src":"17666:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17666:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6965,"initialValue":{"arguments":[{"expression":{"id":6961,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6947,"src":"17690:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17694:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"17690:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6963,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6949,"src":"17702:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6960,"name":"tryGet","nodeType":"Identifier","overloadedDeclarations":[6091,6299,6527,6773,6974],"referencedDeclaration":6091,"src":"17683:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bool_$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bool,bytes32)"}},"id":6964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17683:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes32_$","typeString":"tuple(bool,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"17651:55:12"},{"expression":{"components":[{"id":6966,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6957,"src":"17724:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":6969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6959,"src":"17741:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17733:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6967,"name":"uint256","nodeType":"ElementaryTypeName","src":"17733:7:12","typeDescriptions":{}}},"id":6970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17733:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6971,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"17723:25:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":6955,"id":6972,"nodeType":"Return","src":"17716:32:12"}]},"documentation":{"id":6944,"nodeType":"StructuredDocumentation","src":"17409:130:12","text":" @dev Tries to returns the value associated with `key`. O(1).\n Does not revert if `key` is not in the map."},"id":6974,"implemented":true,"kind":"function","modifiers":[],"name":"tryGet","nameLocation":"17553:6:12","nodeType":"FunctionDefinition","parameters":{"id":6950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6947,"mutability":"mutable","name":"map","nameLocation":"17585:3:12","nodeType":"VariableDeclaration","scope":6974,"src":"17560:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6946,"nodeType":"UserDefinedTypeName","pathNode":{"id":6945,"name":"Bytes32ToUintMap","nameLocations":["17560:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"17560:16:12"},"referencedDeclaration":6837,"src":"17560:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6949,"mutability":"mutable","name":"key","nameLocation":"17598:3:12","nodeType":"VariableDeclaration","scope":6974,"src":"17590:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17590:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17559:43:12"},"returnParameters":{"id":6955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6974,"src":"17626:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6951,"name":"bool","nodeType":"ElementaryTypeName","src":"17626:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6974,"src":"17632:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6953,"name":"uint256","nodeType":"ElementaryTypeName","src":"17632:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17625:15:12"},"scope":7026,"src":"17544:211:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6994,"nodeType":"Block","src":"17994:53:12","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":6988,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6978,"src":"18023:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":6989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18027:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"18023:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}},{"id":6990,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6980,"src":"18035:3:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6987,"name":"get","nodeType":"Identifier","overloadedDeclarations":[6127,6323,6557,6803,6995],"referencedDeclaration":6127,"src":"18019:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32) view returns (bytes32)"}},"id":6991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18019:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18011:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6985,"name":"uint256","nodeType":"ElementaryTypeName","src":"18011:7:12","typeDescriptions":{}}},"id":6992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18011:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6984,"id":6993,"nodeType":"Return","src":"18004:36:12"}]},"documentation":{"id":6975,"nodeType":"StructuredDocumentation","src":"17761:140:12","text":" @dev Returns the value associated with `key`. O(1).\n Requirements:\n - `key` must be in the map."},"id":6995,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"17915:3:12","nodeType":"FunctionDefinition","parameters":{"id":6981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6978,"mutability":"mutable","name":"map","nameLocation":"17944:3:12","nodeType":"VariableDeclaration","scope":6995,"src":"17919:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6977,"nodeType":"UserDefinedTypeName","pathNode":{"id":6976,"name":"Bytes32ToUintMap","nameLocations":["17919:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"17919:16:12"},"referencedDeclaration":6837,"src":"17919:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"},{"constant":false,"id":6980,"mutability":"mutable","name":"key","nameLocation":"17957:3:12","nodeType":"VariableDeclaration","scope":6995,"src":"17949:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17949:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17918:43:12"},"returnParameters":{"id":6984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6995,"src":"17985:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6982,"name":"uint256","nodeType":"ElementaryTypeName","src":"17985:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17984:9:12"},"scope":7026,"src":"17906:141:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7024,"nodeType":"Block","src":"18682:216:12","statements":[{"assignments":[7009],"declarations":[{"constant":false,"id":7009,"mutability":"mutable","name":"store","nameLocation":"18709:5:12","nodeType":"VariableDeclaration","scope":7024,"src":"18692:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18692:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7008,"nodeType":"ArrayTypeName","src":"18692:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7014,"initialValue":{"arguments":[{"expression":{"id":7011,"name":"map","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6999,"src":"18722:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap storage pointer"}},"id":7012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18726:6:12","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":6836,"src":"18722:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Bytes32ToBytes32Map_$5933_storage","typeString":"struct EnumerableMap.Bytes32ToBytes32Map storage ref"}],"id":7010,"name":"keys","nodeType":"Identifier","overloadedDeclarations":[6143,6353,6587,6833,7025],"referencedDeclaration":6143,"src":"18717:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Bytes32ToBytes32Map_$5933_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableMap.Bytes32ToBytes32Map storage pointer) view returns (bytes32[] memory)"}},"id":7013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18717:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18692:41:12"},{"assignments":[7019],"declarations":[{"constant":false,"id":7019,"mutability":"mutable","name":"result","nameLocation":"18760:6:12","nodeType":"VariableDeclaration","scope":7024,"src":"18743:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18743:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7018,"nodeType":"ArrayTypeName","src":"18743:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7020,"nodeType":"VariableDeclarationStatement","src":"18743:23:12"},{"AST":{"nodeType":"YulBlock","src":"18829:39:12","statements":[{"nodeType":"YulAssignment","src":"18843:15:12","value":{"name":"store","nodeType":"YulIdentifier","src":"18853:5:12"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18843:6:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":7019,"isOffset":false,"isSlot":false,"src":"18843:6:12","valueSize":1},{"declaration":7009,"isOffset":false,"isSlot":false,"src":"18853:5:12","valueSize":1}],"id":7021,"nodeType":"InlineAssembly","src":"18820:48:12"},{"expression":{"id":7022,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7019,"src":"18885:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":7004,"id":7023,"nodeType":"Return","src":"18878:13:12"}]},"documentation":{"id":6996,"nodeType":"StructuredDocumentation","src":"18053:539:12","text":" @dev Return the an array containing all the keys\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block."},"id":7025,"implemented":true,"kind":"function","modifiers":[],"name":"keys","nameLocation":"18606:4:12","nodeType":"FunctionDefinition","parameters":{"id":7000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6999,"mutability":"mutable","name":"map","nameLocation":"18636:3:12","nodeType":"VariableDeclaration","scope":7025,"src":"18611:28:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"},"typeName":{"id":6998,"nodeType":"UserDefinedTypeName","pathNode":{"id":6997,"name":"Bytes32ToUintMap","nameLocations":["18611:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":6837,"src":"18611:16:12"},"referencedDeclaration":6837,"src":"18611:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32ToUintMap_$6837_storage_ptr","typeString":"struct EnumerableMap.Bytes32ToUintMap"}},"visibility":"internal"}],"src":"18610:30:12"},"returnParameters":{"id":7004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7025,"src":"18664:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18664:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7002,"nodeType":"ArrayTypeName","src":"18664:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"18663:18:12"},"scope":7026,"src":"18597:301:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":7027,"src":"1651:17249:12","usedErrors":[5925],"usedEvents":[]}],"src":"205:18696:12"},"id":12},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[7639]},"id":7640,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7028,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"205:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":7029,"nodeType":"StructuredDocumentation","src":"231:1098:13","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":7639,"linearizedBaseContracts":[7639],"name":"EnumerableSet","nameLocation":"1338:13:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":7037,"members":[{"constant":false,"id":7032,"mutability":"mutable","name":"_values","nameLocation":"1862:7:13","nodeType":"VariableDeclaration","scope":7037,"src":"1852:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1852:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7031,"nodeType":"ArrayTypeName","src":"1852:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":7036,"mutability":"mutable","name":"_positions","nameLocation":"2054:10:13","nodeType":"VariableDeclaration","scope":7037,"src":"2020:44:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":7035,"keyName":"value","keyNameLocation":"2036:5:13","keyType":{"id":7033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2028:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2020:33:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":7034,"name":"uint256","nodeType":"ElementaryTypeName","src":"2045:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1805:3:13","nodeType":"StructDefinition","scope":7639,"src":"1798:273:13","visibility":"public"},{"body":{"id":7078,"nodeType":"Block","src":"2310:337:13","statements":[{"condition":{"id":7052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2324:22:13","subExpression":{"arguments":[{"id":7049,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7041,"src":"2335:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":7050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7043,"src":"2340:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7048,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7182,"src":"2325:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":7051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7076,"nodeType":"Block","src":"2604:37:13","statements":[{"expression":{"hexValue":"66616c7365","id":7074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2625:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":7047,"id":7075,"nodeType":"Return","src":"2618:12:13"}]},"id":7077,"nodeType":"IfStatement","src":"2320:321:13","trueBody":{"id":7073,"nodeType":"Block","src":"2348:250:13","statements":[{"expression":{"arguments":[{"id":7058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7043,"src":"2379:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":7053,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7041,"src":"2362:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7056,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2366:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"2362:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2374:4:13","memberName":"push","nodeType":"MemberAccess","src":"2362:16:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":7059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2362:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7060,"nodeType":"ExpressionStatement","src":"2362:23:13"},{"expression":{"id":7069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":7061,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7041,"src":"2520:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7064,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2524:10:13","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":7036,"src":"2520:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":7065,"indexExpression":{"id":7063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7043,"src":"2535:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2520:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":7066,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7041,"src":"2544:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2548:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"2544:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2556:6:13","memberName":"length","nodeType":"MemberAccess","src":"2544:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2520:42:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7070,"nodeType":"ExpressionStatement","src":"2520:42:13"},{"expression":{"hexValue":"74727565","id":7071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2583:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":7047,"id":7072,"nodeType":"Return","src":"2576:11:13"}]}}]},"documentation":{"id":7038,"nodeType":"StructuredDocumentation","src":"2077:159:13","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":7079,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2250:4:13","nodeType":"FunctionDefinition","parameters":{"id":7044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7041,"mutability":"mutable","name":"set","nameLocation":"2267:3:13","nodeType":"VariableDeclaration","scope":7079,"src":"2255:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7040,"nodeType":"UserDefinedTypeName","pathNode":{"id":7039,"name":"Set","nameLocations":["2255:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"2255:3:13"},"referencedDeclaration":7037,"src":"2255:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":7043,"mutability":"mutable","name":"value","nameLocation":"2280:5:13","nodeType":"VariableDeclaration","scope":7079,"src":"2272:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7042,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2272:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2254:32:13"},"returnParameters":{"id":7047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7079,"src":"2304:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7045,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2303:6:13"},"scope":7639,"src":"2241:406:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":7162,"nodeType":"Block","src":"2887:1296:13","statements":[{"assignments":[7091],"declarations":[{"constant":false,"id":7091,"mutability":"mutable","name":"position","nameLocation":"2999:8:13","nodeType":"VariableDeclaration","scope":7162,"src":"2991:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7090,"name":"uint256","nodeType":"ElementaryTypeName","src":"2991:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7096,"initialValue":{"baseExpression":{"expression":{"id":7092,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3010:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7093,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3014:10:13","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":7036,"src":"3010:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":7095,"indexExpression":{"id":7094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"3025:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3010:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2991:40:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7097,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7091,"src":"3046:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":7098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3058:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3046:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7160,"nodeType":"Block","src":"4140:37:13","statements":[{"expression":{"hexValue":"66616c7365","id":7158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4161:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":7089,"id":7159,"nodeType":"Return","src":"4154:12:13"}]},"id":7161,"nodeType":"IfStatement","src":"3042:1135:13","trueBody":{"id":7157,"nodeType":"Block","src":"3061:1073:13","statements":[{"assignments":[7101],"declarations":[{"constant":false,"id":7101,"mutability":"mutable","name":"valueIndex","nameLocation":"3421:10:13","nodeType":"VariableDeclaration","scope":7157,"src":"3413:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7100,"name":"uint256","nodeType":"ElementaryTypeName","src":"3413:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7105,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7102,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7091,"src":"3434:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3445:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3434:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3413:33:13"},{"assignments":[7107],"declarations":[{"constant":false,"id":7107,"mutability":"mutable","name":"lastIndex","nameLocation":"3468:9:13","nodeType":"VariableDeclaration","scope":7157,"src":"3460:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7106,"name":"uint256","nodeType":"ElementaryTypeName","src":"3460:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7113,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":7108,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3480:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3484:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"3480:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3492:6:13","memberName":"length","nodeType":"MemberAccess","src":"3480:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":7111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3501:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3480:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3460:42:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7114,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7101,"src":"3521:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":7115,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7107,"src":"3535:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3521:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7141,"nodeType":"IfStatement","src":"3517:378:13","trueBody":{"id":7140,"nodeType":"Block","src":"3546:349:13","statements":[{"assignments":[7118],"declarations":[{"constant":false,"id":7118,"mutability":"mutable","name":"lastValue","nameLocation":"3572:9:13","nodeType":"VariableDeclaration","scope":7140,"src":"3564:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7123,"initialValue":{"baseExpression":{"expression":{"id":7119,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3584:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3588:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"3584:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7122,"indexExpression":{"id":7121,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7107,"src":"3596:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3584:22:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3564:42:13"},{"expression":{"id":7130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":7124,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3705:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3709:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"3705:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7128,"indexExpression":{"id":7126,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7101,"src":"3717:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3705:23:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7129,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7118,"src":"3731:9:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3705:35:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7131,"nodeType":"ExpressionStatement","src":"3705:35:13"},{"expression":{"id":7138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":7132,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3844:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3848:10:13","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":7036,"src":"3844:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":7136,"indexExpression":{"id":7134,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7118,"src":"3859:9:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3844:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7137,"name":"position","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7091,"src":"3872:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3844:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7139,"nodeType":"ExpressionStatement","src":"3844:36:13"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7142,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"3973:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3977:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"3973:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3985:3:13","memberName":"pop","nodeType":"MemberAccess","src":"3973:15:13","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":7147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3973:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7148,"nodeType":"ExpressionStatement","src":"3973:17:13"},{"expression":{"id":7153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4069:28:13","subExpression":{"baseExpression":{"expression":{"id":7149,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7083,"src":"4076:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4080:10:13","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":7036,"src":"4076:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":7152,"indexExpression":{"id":7151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7085,"src":"4091:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4076:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7154,"nodeType":"ExpressionStatement","src":"4069:28:13"},{"expression":{"hexValue":"74727565","id":7155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4119:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":7089,"id":7156,"nodeType":"Return","src":"4112:11:13"}]}}]},"documentation":{"id":7080,"nodeType":"StructuredDocumentation","src":"2653:157:13","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":7163,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2824:7:13","nodeType":"FunctionDefinition","parameters":{"id":7086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7083,"mutability":"mutable","name":"set","nameLocation":"2844:3:13","nodeType":"VariableDeclaration","scope":7163,"src":"2832:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7082,"nodeType":"UserDefinedTypeName","pathNode":{"id":7081,"name":"Set","nameLocations":["2832:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"2832:3:13"},"referencedDeclaration":7037,"src":"2832:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":7085,"mutability":"mutable","name":"value","nameLocation":"2857:5:13","nodeType":"VariableDeclaration","scope":7163,"src":"2849:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7084,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2849:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2831:32:13"},"returnParameters":{"id":7089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7163,"src":"2881:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7087,"name":"bool","nodeType":"ElementaryTypeName","src":"2881:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2880:6:13"},"scope":7639,"src":"2815:1368:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":7181,"nodeType":"Block","src":"4343:50:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":7174,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7167,"src":"4360:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7175,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4364:10:13","memberName":"_positions","nodeType":"MemberAccess","referencedDeclaration":7036,"src":"4360:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":7177,"indexExpression":{"id":7176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7169,"src":"4375:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4360:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":7178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4360:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7173,"id":7180,"nodeType":"Return","src":"4353:33:13"}]},"documentation":{"id":7164,"nodeType":"StructuredDocumentation","src":"4189:70:13","text":" @dev Returns true if the value is in the set. O(1)."},"id":7182,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4273:9:13","nodeType":"FunctionDefinition","parameters":{"id":7170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7167,"mutability":"mutable","name":"set","nameLocation":"4295:3:13","nodeType":"VariableDeclaration","scope":7182,"src":"4283:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7166,"nodeType":"UserDefinedTypeName","pathNode":{"id":7165,"name":"Set","nameLocations":["4283:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"4283:3:13"},"referencedDeclaration":7037,"src":"4283:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":7169,"mutability":"mutable","name":"value","nameLocation":"4308:5:13","nodeType":"VariableDeclaration","scope":7182,"src":"4300:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4300:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4282:32:13"},"returnParameters":{"id":7173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7182,"src":"4337:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7171,"name":"bool","nodeType":"ElementaryTypeName","src":"4337:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4336:6:13"},"scope":7639,"src":"4264:129:13","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":7195,"nodeType":"Block","src":"4539:42:13","statements":[{"expression":{"expression":{"expression":{"id":7191,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7186,"src":"4556:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"4556:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:13","memberName":"length","nodeType":"MemberAccess","src":"4556:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7190,"id":7194,"nodeType":"Return","src":"4549:25:13"}]},"documentation":{"id":7183,"nodeType":"StructuredDocumentation","src":"4399:70:13","text":" @dev Returns the number of values on the set. O(1)."},"id":7196,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:13","nodeType":"FunctionDefinition","parameters":{"id":7187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7186,"mutability":"mutable","name":"set","nameLocation":"4503:3:13","nodeType":"VariableDeclaration","scope":7196,"src":"4491:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7185,"nodeType":"UserDefinedTypeName","pathNode":{"id":7184,"name":"Set","nameLocations":["4491:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"4491:3:13"},"referencedDeclaration":7037,"src":"4491:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4490:17:13"},"returnParameters":{"id":7190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7196,"src":"4530:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7188,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:13"},"scope":7639,"src":"4474:107:13","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":7212,"nodeType":"Block","src":"4999:42:13","statements":[{"expression":{"baseExpression":{"expression":{"id":7207,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7200,"src":"5016:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"5016:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":7210,"indexExpression":{"id":7209,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7202,"src":"5028:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":7206,"id":7211,"nodeType":"Return","src":"5009:25:13"}]},"documentation":{"id":7197,"nodeType":"StructuredDocumentation","src":"4587:331:13","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":7213,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:13","nodeType":"FunctionDefinition","parameters":{"id":7203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7200,"mutability":"mutable","name":"set","nameLocation":"4948:3:13","nodeType":"VariableDeclaration","scope":7213,"src":"4936:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7199,"nodeType":"UserDefinedTypeName","pathNode":{"id":7198,"name":"Set","nameLocations":["4936:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"4936:3:13"},"referencedDeclaration":7037,"src":"4936:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":7202,"mutability":"mutable","name":"index","nameLocation":"4961:5:13","nodeType":"VariableDeclaration","scope":7213,"src":"4953:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7201,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:13"},"returnParameters":{"id":7206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7213,"src":"4990:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7204,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:13"},"scope":7639,"src":"4923:118:13","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":7226,"nodeType":"Block","src":"5655:35:13","statements":[{"expression":{"expression":{"id":7223,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7217,"src":"5672:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":7224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:13","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":7032,"src":"5672:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":7222,"id":7225,"nodeType":"Return","src":"5665:18:13"}]},"documentation":{"id":7214,"nodeType":"StructuredDocumentation","src":"5047:529:13","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":7227,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:13","nodeType":"FunctionDefinition","parameters":{"id":7218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7217,"mutability":"mutable","name":"set","nameLocation":"5610:3:13","nodeType":"VariableDeclaration","scope":7227,"src":"5598:15:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7216,"nodeType":"UserDefinedTypeName","pathNode":{"id":7215,"name":"Set","nameLocations":["5598:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"5598:3:13"},"referencedDeclaration":7037,"src":"5598:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"5597:17:13"},"returnParameters":{"id":7222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7227,"src":"5637:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7220,"nodeType":"ArrayTypeName","src":"5637:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:13"},"scope":7639,"src":"5581:109:13","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":7231,"members":[{"constant":false,"id":7230,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:13","nodeType":"VariableDeclaration","scope":7231,"src":"5743:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7229,"nodeType":"UserDefinedTypeName","pathNode":{"id":7228,"name":"Set","nameLocations":["5743:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"5743:3:13"},"referencedDeclaration":7037,"src":"5743:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:13","nodeType":"StructDefinition","scope":7639,"src":"5715:45:13","visibility":"public"},{"body":{"id":7248,"nodeType":"Block","src":"6006:47:13","statements":[{"expression":{"arguments":[{"expression":{"id":7243,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7235,"src":"6028:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"6028:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7237,"src":"6040:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7242,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"6023:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7241,"id":7247,"nodeType":"Return","src":"6016:30:13"}]},"documentation":{"id":7232,"nodeType":"StructuredDocumentation","src":"5766:159:13","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":7249,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:13","nodeType":"FunctionDefinition","parameters":{"id":7238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7235,"mutability":"mutable","name":"set","nameLocation":"5962:3:13","nodeType":"VariableDeclaration","scope":7249,"src":"5943:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7234,"nodeType":"UserDefinedTypeName","pathNode":{"id":7233,"name":"Bytes32Set","nameLocations":["5943:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"5943:10:13"},"referencedDeclaration":7231,"src":"5943:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":7237,"mutability":"mutable","name":"value","nameLocation":"5975:5:13","nodeType":"VariableDeclaration","scope":7249,"src":"5967:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:13"},"returnParameters":{"id":7241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7249,"src":"6000:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7239,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:13"},"scope":7639,"src":"5930:123:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7266,"nodeType":"Block","src":"6300:50:13","statements":[{"expression":{"arguments":[{"expression":{"id":7261,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7253,"src":"6325:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"6325:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"6337:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7260,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"6317:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7259,"id":7265,"nodeType":"Return","src":"6310:33:13"}]},"documentation":{"id":7250,"nodeType":"StructuredDocumentation","src":"6059:157:13","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":7267,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:13","nodeType":"FunctionDefinition","parameters":{"id":7256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7253,"mutability":"mutable","name":"set","nameLocation":"6256:3:13","nodeType":"VariableDeclaration","scope":7267,"src":"6237:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7252,"nodeType":"UserDefinedTypeName","pathNode":{"id":7251,"name":"Bytes32Set","nameLocations":["6237:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"6237:10:13"},"referencedDeclaration":7231,"src":"6237:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":7255,"mutability":"mutable","name":"value","nameLocation":"6269:5:13","nodeType":"VariableDeclaration","scope":7267,"src":"6261:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:13"},"returnParameters":{"id":7259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7258,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7267,"src":"6294:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7257,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:13"},"scope":7639,"src":"6221:129:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7284,"nodeType":"Block","src":"6517:52:13","statements":[{"expression":{"arguments":[{"expression":{"id":7279,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7271,"src":"6544:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"6544:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7273,"src":"6556:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7278,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7182,"src":"6534:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":7282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7277,"id":7283,"nodeType":"Return","src":"6527:35:13"}]},"documentation":{"id":7268,"nodeType":"StructuredDocumentation","src":"6356:70:13","text":" @dev Returns true if the value is in the set. O(1)."},"id":7285,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:13","nodeType":"FunctionDefinition","parameters":{"id":7274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7271,"mutability":"mutable","name":"set","nameLocation":"6468:3:13","nodeType":"VariableDeclaration","scope":7285,"src":"6449:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7270,"nodeType":"UserDefinedTypeName","pathNode":{"id":7269,"name":"Bytes32Set","nameLocations":["6449:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"6449:10:13"},"referencedDeclaration":7231,"src":"6449:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":7273,"mutability":"mutable","name":"value","nameLocation":"6481:5:13","nodeType":"VariableDeclaration","scope":7285,"src":"6473:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:13"},"returnParameters":{"id":7277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7285,"src":"6511:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7275,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:13"},"scope":7639,"src":"6431:138:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7299,"nodeType":"Block","src":"6722:43:13","statements":[{"expression":{"arguments":[{"expression":{"id":7295,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7289,"src":"6747:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"6747:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7294,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7196,"src":"6739:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":7297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7293,"id":7298,"nodeType":"Return","src":"6732:26:13"}]},"documentation":{"id":7286,"nodeType":"StructuredDocumentation","src":"6575:70:13","text":" @dev Returns the number of values in the set. O(1)."},"id":7300,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:13","nodeType":"FunctionDefinition","parameters":{"id":7290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7289,"mutability":"mutable","name":"set","nameLocation":"6685:3:13","nodeType":"VariableDeclaration","scope":7300,"src":"6666:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7288,"nodeType":"UserDefinedTypeName","pathNode":{"id":7287,"name":"Bytes32Set","nameLocations":["6666:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"6666:10:13"},"referencedDeclaration":7231,"src":"6666:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:13"},"returnParameters":{"id":7293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7300,"src":"6713:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7291,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:13"},"scope":7639,"src":"6650:115:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7317,"nodeType":"Block","src":"7190:46:13","statements":[{"expression":{"arguments":[{"expression":{"id":7312,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7304,"src":"7211:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"7211:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7314,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7306,"src":"7223:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7311,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"7207:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":7315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":7310,"id":7316,"nodeType":"Return","src":"7200:29:13"}]},"documentation":{"id":7301,"nodeType":"StructuredDocumentation","src":"6771:331:13","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":7318,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:13","nodeType":"FunctionDefinition","parameters":{"id":7307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7304,"mutability":"mutable","name":"set","nameLocation":"7138:3:13","nodeType":"VariableDeclaration","scope":7318,"src":"7119:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7303,"nodeType":"UserDefinedTypeName","pathNode":{"id":7302,"name":"Bytes32Set","nameLocations":["7119:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"7119:10:13"},"referencedDeclaration":7231,"src":"7119:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":7306,"mutability":"mutable","name":"index","nameLocation":"7151:5:13","nodeType":"VariableDeclaration","scope":7318,"src":"7143:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7305,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:13"},"returnParameters":{"id":7310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7318,"src":"7181:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:13"},"scope":7639,"src":"7107:129:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7347,"nodeType":"Block","src":"7857:219:13","statements":[{"assignments":[7332],"declarations":[{"constant":false,"id":7332,"mutability":"mutable","name":"store","nameLocation":"7884:5:13","nodeType":"VariableDeclaration","scope":7347,"src":"7867:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7331,"nodeType":"ArrayTypeName","src":"7867:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7337,"initialValue":{"arguments":[{"expression":{"id":7334,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7322,"src":"7900:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":7335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7230,"src":"7900:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7333,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7227,"src":"7892:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":7336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:13"},{"assignments":[7342],"declarations":[{"constant":false,"id":7342,"mutability":"mutable","name":"result","nameLocation":"7938:6:13","nodeType":"VariableDeclaration","scope":7347,"src":"7921:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7341,"nodeType":"ArrayTypeName","src":"7921:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7343,"nodeType":"VariableDeclarationStatement","src":"7921:23:13"},{"AST":{"nodeType":"YulBlock","src":"8007:39:13","statements":[{"nodeType":"YulAssignment","src":"8021:15:13","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":7342,"isOffset":false,"isSlot":false,"src":"8021:6:13","valueSize":1},{"declaration":7332,"isOffset":false,"isSlot":false,"src":"8031:5:13","valueSize":1}],"id":7344,"nodeType":"InlineAssembly","src":"7998:48:13"},{"expression":{"id":7345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7342,"src":"8063:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":7327,"id":7346,"nodeType":"Return","src":"8056:13:13"}]},"documentation":{"id":7319,"nodeType":"StructuredDocumentation","src":"7242:529:13","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":7348,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:13","nodeType":"FunctionDefinition","parameters":{"id":7323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7322,"mutability":"mutable","name":"set","nameLocation":"7811:3:13","nodeType":"VariableDeclaration","scope":7348,"src":"7792:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":7321,"nodeType":"UserDefinedTypeName","pathNode":{"id":7320,"name":"Bytes32Set","nameLocations":["7792:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7231,"src":"7792:10:13"},"referencedDeclaration":7231,"src":"7792:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$7231_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:13"},"returnParameters":{"id":7327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7348,"src":"7839:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7325,"nodeType":"ArrayTypeName","src":"7839:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:13"},"scope":7639,"src":"7776:300:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":7352,"members":[{"constant":false,"id":7351,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:13","nodeType":"VariableDeclaration","scope":7352,"src":"8129:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7350,"nodeType":"UserDefinedTypeName","pathNode":{"id":7349,"name":"Set","nameLocations":["8129:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"8129:3:13"},"referencedDeclaration":7037,"src":"8129:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:13","nodeType":"StructDefinition","scope":7639,"src":"8101:45:13","visibility":"public"},{"body":{"id":7378,"nodeType":"Block","src":"8392:74:13","statements":[{"expression":{"arguments":[{"expression":{"id":7364,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7356,"src":"8414:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7365,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"8414:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":7372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7358,"src":"8450:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7370,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:13","typeDescriptions":{}}},"id":7373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7368,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:13","typeDescriptions":{}}},"id":7374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:13","typeDescriptions":{}}},"id":7375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7363,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"8409:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7362,"id":7377,"nodeType":"Return","src":"8402:57:13"}]},"documentation":{"id":7353,"nodeType":"StructuredDocumentation","src":"8152:159:13","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":7379,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:13","nodeType":"FunctionDefinition","parameters":{"id":7359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7356,"mutability":"mutable","name":"set","nameLocation":"8348:3:13","nodeType":"VariableDeclaration","scope":7379,"src":"8329:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7355,"nodeType":"UserDefinedTypeName","pathNode":{"id":7354,"name":"AddressSet","nameLocations":["8329:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"8329:10:13"},"referencedDeclaration":7352,"src":"8329:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":7358,"mutability":"mutable","name":"value","nameLocation":"8361:5:13","nodeType":"VariableDeclaration","scope":7379,"src":"8353:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7357,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:13"},"returnParameters":{"id":7362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7379,"src":"8386:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7360,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:13"},"scope":7639,"src":"8316:150:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7405,"nodeType":"Block","src":"8713:77:13","statements":[{"expression":{"arguments":[{"expression":{"id":7391,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7383,"src":"8738:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"8738:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":7399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7385,"src":"8774:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7397,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:13","typeDescriptions":{}}},"id":7400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7395,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:13","typeDescriptions":{}}},"id":7401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:13","typeDescriptions":{}}},"id":7402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7390,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"8730:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7389,"id":7404,"nodeType":"Return","src":"8723:60:13"}]},"documentation":{"id":7380,"nodeType":"StructuredDocumentation","src":"8472:157:13","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":7406,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:13","nodeType":"FunctionDefinition","parameters":{"id":7386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7383,"mutability":"mutable","name":"set","nameLocation":"8669:3:13","nodeType":"VariableDeclaration","scope":7406,"src":"8650:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7382,"nodeType":"UserDefinedTypeName","pathNode":{"id":7381,"name":"AddressSet","nameLocations":["8650:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"8650:10:13"},"referencedDeclaration":7352,"src":"8650:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":7385,"mutability":"mutable","name":"value","nameLocation":"8682:5:13","nodeType":"VariableDeclaration","scope":7406,"src":"8674:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7384,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:13"},"returnParameters":{"id":7389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7406,"src":"8707:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7387,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:13"},"scope":7639,"src":"8634:156:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7432,"nodeType":"Block","src":"8957:79:13","statements":[{"expression":{"arguments":[{"expression":{"id":7418,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7410,"src":"8984:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"8984:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":7426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7412,"src":"9020:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7424,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:13","typeDescriptions":{}}},"id":7427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7422,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:13","typeDescriptions":{}}},"id":7428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:13","typeDescriptions":{}}},"id":7429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7417,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7182,"src":"8974:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":7430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7416,"id":7431,"nodeType":"Return","src":"8967:62:13"}]},"documentation":{"id":7407,"nodeType":"StructuredDocumentation","src":"8796:70:13","text":" @dev Returns true if the value is in the set. O(1)."},"id":7433,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:13","nodeType":"FunctionDefinition","parameters":{"id":7413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7410,"mutability":"mutable","name":"set","nameLocation":"8908:3:13","nodeType":"VariableDeclaration","scope":7433,"src":"8889:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7409,"nodeType":"UserDefinedTypeName","pathNode":{"id":7408,"name":"AddressSet","nameLocations":["8889:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"8889:10:13"},"referencedDeclaration":7352,"src":"8889:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":7412,"mutability":"mutable","name":"value","nameLocation":"8921:5:13","nodeType":"VariableDeclaration","scope":7433,"src":"8913:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7411,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:13"},"returnParameters":{"id":7416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7433,"src":"8951:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7414,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:13"},"scope":7639,"src":"8871:165:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7447,"nodeType":"Block","src":"9189:43:13","statements":[{"expression":{"arguments":[{"expression":{"id":7443,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7437,"src":"9214:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7444,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"9214:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7442,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7196,"src":"9206:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":7445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7441,"id":7446,"nodeType":"Return","src":"9199:26:13"}]},"documentation":{"id":7434,"nodeType":"StructuredDocumentation","src":"9042:70:13","text":" @dev Returns the number of values in the set. O(1)."},"id":7448,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:13","nodeType":"FunctionDefinition","parameters":{"id":7438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7437,"mutability":"mutable","name":"set","nameLocation":"9152:3:13","nodeType":"VariableDeclaration","scope":7448,"src":"9133:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7436,"nodeType":"UserDefinedTypeName","pathNode":{"id":7435,"name":"AddressSet","nameLocations":["9133:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"9133:10:13"},"referencedDeclaration":7352,"src":"9133:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9132:24:13"},"returnParameters":{"id":7441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7448,"src":"9180:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7439,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:13"},"scope":7639,"src":"9117:115:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7474,"nodeType":"Block","src":"9657:73:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":7466,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7452,"src":"9702:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"9702:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7468,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7454,"src":"9714:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7465,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"9698:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":7469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7463,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:13","typeDescriptions":{}}},"id":7470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7461,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:13","typeDescriptions":{}}},"id":7471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7459,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:13","typeDescriptions":{}}},"id":7472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":7458,"id":7473,"nodeType":"Return","src":"9667:56:13"}]},"documentation":{"id":7449,"nodeType":"StructuredDocumentation","src":"9238:331:13","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":7475,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:13","nodeType":"FunctionDefinition","parameters":{"id":7455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7452,"mutability":"mutable","name":"set","nameLocation":"9605:3:13","nodeType":"VariableDeclaration","scope":7475,"src":"9586:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7451,"nodeType":"UserDefinedTypeName","pathNode":{"id":7450,"name":"AddressSet","nameLocations":["9586:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"9586:10:13"},"referencedDeclaration":7352,"src":"9586:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":7454,"mutability":"mutable","name":"index","nameLocation":"9618:5:13","nodeType":"VariableDeclaration","scope":7475,"src":"9610:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7453,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:13"},"returnParameters":{"id":7458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7475,"src":"9648:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7456,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:13"},"scope":7639,"src":"9574:156:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7504,"nodeType":"Block","src":"10351:219:13","statements":[{"assignments":[7489],"declarations":[{"constant":false,"id":7489,"mutability":"mutable","name":"store","nameLocation":"10378:5:13","nodeType":"VariableDeclaration","scope":7504,"src":"10361:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7488,"nodeType":"ArrayTypeName","src":"10361:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7494,"initialValue":{"arguments":[{"expression":{"id":7491,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7479,"src":"10394:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":7492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7351,"src":"10394:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7490,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7227,"src":"10386:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":7493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:13"},{"assignments":[7499],"declarations":[{"constant":false,"id":7499,"mutability":"mutable","name":"result","nameLocation":"10432:6:13","nodeType":"VariableDeclaration","scope":7504,"src":"10415:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7497,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7498,"nodeType":"ArrayTypeName","src":"10415:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":7500,"nodeType":"VariableDeclarationStatement","src":"10415:23:13"},{"AST":{"nodeType":"YulBlock","src":"10501:39:13","statements":[{"nodeType":"YulAssignment","src":"10515:15:13","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":7499,"isOffset":false,"isSlot":false,"src":"10515:6:13","valueSize":1},{"declaration":7489,"isOffset":false,"isSlot":false,"src":"10525:5:13","valueSize":1}],"id":7501,"nodeType":"InlineAssembly","src":"10492:48:13"},{"expression":{"id":7502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7499,"src":"10557:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":7484,"id":7503,"nodeType":"Return","src":"10550:13:13"}]},"documentation":{"id":7476,"nodeType":"StructuredDocumentation","src":"9736:529:13","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":7505,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:13","nodeType":"FunctionDefinition","parameters":{"id":7480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7479,"mutability":"mutable","name":"set","nameLocation":"10305:3:13","nodeType":"VariableDeclaration","scope":7505,"src":"10286:22:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":7478,"nodeType":"UserDefinedTypeName","pathNode":{"id":7477,"name":"AddressSet","nameLocations":["10286:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":7352,"src":"10286:10:13"},"referencedDeclaration":7352,"src":"10286:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$7352_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"10285:24:13"},"returnParameters":{"id":7484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7505,"src":"10333:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":7481,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7482,"nodeType":"ArrayTypeName","src":"10333:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:13"},"scope":7639,"src":"10270:300:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":7509,"members":[{"constant":false,"id":7508,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:13","nodeType":"VariableDeclaration","scope":7509,"src":"10617:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":7507,"nodeType":"UserDefinedTypeName","pathNode":{"id":7506,"name":"Set","nameLocations":["10617:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":7037,"src":"10617:3:13"},"referencedDeclaration":7037,"src":"10617:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:13","nodeType":"StructDefinition","scope":7639,"src":"10592:42:13","visibility":"public"},{"body":{"id":7529,"nodeType":"Block","src":"10877:56:13","statements":[{"expression":{"arguments":[{"expression":{"id":7521,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"10899:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7522,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"10899:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":7525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7515,"src":"10919:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:13","typeDescriptions":{}}},"id":7526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7520,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"10894:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7519,"id":7528,"nodeType":"Return","src":"10887:39:13"}]},"documentation":{"id":7510,"nodeType":"StructuredDocumentation","src":"10640:159:13","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":7530,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:13","nodeType":"FunctionDefinition","parameters":{"id":7516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7513,"mutability":"mutable","name":"set","nameLocation":"10833:3:13","nodeType":"VariableDeclaration","scope":7530,"src":"10817:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7512,"nodeType":"UserDefinedTypeName","pathNode":{"id":7511,"name":"UintSet","nameLocations":["10817:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"10817:7:13"},"referencedDeclaration":7509,"src":"10817:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":7515,"mutability":"mutable","name":"value","nameLocation":"10846:5:13","nodeType":"VariableDeclaration","scope":7530,"src":"10838:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7514,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:13"},"returnParameters":{"id":7519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7518,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7530,"src":"10871:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7517,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:13"},"scope":7639,"src":"10804:129:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7550,"nodeType":"Block","src":"11177:59:13","statements":[{"expression":{"arguments":[{"expression":{"id":7542,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7534,"src":"11202:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"11202:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":7546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7536,"src":"11222:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:13","typeDescriptions":{}}},"id":7547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7541,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7163,"src":"11194:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":7548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7540,"id":7549,"nodeType":"Return","src":"11187:42:13"}]},"documentation":{"id":7531,"nodeType":"StructuredDocumentation","src":"10939:157:13","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":7551,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:13","nodeType":"FunctionDefinition","parameters":{"id":7537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7534,"mutability":"mutable","name":"set","nameLocation":"11133:3:13","nodeType":"VariableDeclaration","scope":7551,"src":"11117:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7533,"nodeType":"UserDefinedTypeName","pathNode":{"id":7532,"name":"UintSet","nameLocations":["11117:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"11117:7:13"},"referencedDeclaration":7509,"src":"11117:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":7536,"mutability":"mutable","name":"value","nameLocation":"11146:5:13","nodeType":"VariableDeclaration","scope":7551,"src":"11138:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7535,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:13"},"returnParameters":{"id":7540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7551,"src":"11171:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7538,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:13"},"scope":7639,"src":"11101:135:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7571,"nodeType":"Block","src":"11400:61:13","statements":[{"expression":{"arguments":[{"expression":{"id":7563,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7555,"src":"11427:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"11427:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":7567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7557,"src":"11447:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":7565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:13","typeDescriptions":{}}},"id":7568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7562,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7182,"src":"11417:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":7569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":7561,"id":7570,"nodeType":"Return","src":"11410:44:13"}]},"documentation":{"id":7552,"nodeType":"StructuredDocumentation","src":"11242:70:13","text":" @dev Returns true if the value is in the set. O(1)."},"id":7572,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:13","nodeType":"FunctionDefinition","parameters":{"id":7558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7555,"mutability":"mutable","name":"set","nameLocation":"11351:3:13","nodeType":"VariableDeclaration","scope":7572,"src":"11335:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7554,"nodeType":"UserDefinedTypeName","pathNode":{"id":7553,"name":"UintSet","nameLocations":["11335:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"11335:7:13"},"referencedDeclaration":7509,"src":"11335:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":7557,"mutability":"mutable","name":"value","nameLocation":"11364:5:13","nodeType":"VariableDeclaration","scope":7572,"src":"11356:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7556,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:13"},"returnParameters":{"id":7561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7572,"src":"11394:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7559,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:13"},"scope":7639,"src":"11317:144:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7586,"nodeType":"Block","src":"11611:43:13","statements":[{"expression":{"arguments":[{"expression":{"id":7582,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7576,"src":"11636:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7583,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"11636:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7581,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7196,"src":"11628:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":7584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7580,"id":7585,"nodeType":"Return","src":"11621:26:13"}]},"documentation":{"id":7573,"nodeType":"StructuredDocumentation","src":"11467:70:13","text":" @dev Returns the number of values in the set. O(1)."},"id":7587,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:13","nodeType":"FunctionDefinition","parameters":{"id":7577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7576,"mutability":"mutable","name":"set","nameLocation":"11574:3:13","nodeType":"VariableDeclaration","scope":7587,"src":"11558:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7575,"nodeType":"UserDefinedTypeName","pathNode":{"id":7574,"name":"UintSet","nameLocations":["11558:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"11558:7:13"},"referencedDeclaration":7509,"src":"11558:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11557:21:13"},"returnParameters":{"id":7580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7587,"src":"11602:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7578,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:13"},"scope":7639,"src":"11542:112:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7607,"nodeType":"Block","src":"12076:55:13","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":7601,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7591,"src":"12105:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"12105:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":7603,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7593,"src":"12117:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7600,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7213,"src":"12101:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":7604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7598,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:13","typeDescriptions":{}}},"id":7605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7597,"id":7606,"nodeType":"Return","src":"12086:38:13"}]},"documentation":{"id":7588,"nodeType":"StructuredDocumentation","src":"11660:331:13","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":7608,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:13","nodeType":"FunctionDefinition","parameters":{"id":7594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7591,"mutability":"mutable","name":"set","nameLocation":"12024:3:13","nodeType":"VariableDeclaration","scope":7608,"src":"12008:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7590,"nodeType":"UserDefinedTypeName","pathNode":{"id":7589,"name":"UintSet","nameLocations":["12008:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"12008:7:13"},"referencedDeclaration":7509,"src":"12008:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":7593,"mutability":"mutable","name":"index","nameLocation":"12037:5:13","nodeType":"VariableDeclaration","scope":7608,"src":"12029:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7592,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:13"},"returnParameters":{"id":7597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7608,"src":"12067:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7595,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:13"},"scope":7639,"src":"11996:135:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7637,"nodeType":"Block","src":"12749:219:13","statements":[{"assignments":[7622],"declarations":[{"constant":false,"id":7622,"mutability":"mutable","name":"store","nameLocation":"12776:5:13","nodeType":"VariableDeclaration","scope":7637,"src":"12759:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7621,"nodeType":"ArrayTypeName","src":"12759:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":7627,"initialValue":{"arguments":[{"expression":{"id":7624,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7612,"src":"12792:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":7625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:13","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":7508,"src":"12792:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$7037_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":7623,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7227,"src":"12784:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$7037_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":7626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:13"},{"assignments":[7632],"declarations":[{"constant":false,"id":7632,"mutability":"mutable","name":"result","nameLocation":"12830:6:13","nodeType":"VariableDeclaration","scope":7637,"src":"12813:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7630,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7631,"nodeType":"ArrayTypeName","src":"12813:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":7633,"nodeType":"VariableDeclarationStatement","src":"12813:23:13"},{"AST":{"nodeType":"YulBlock","src":"12899:39:13","statements":[{"nodeType":"YulAssignment","src":"12913:15:13","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":7632,"isOffset":false,"isSlot":false,"src":"12913:6:13","valueSize":1},{"declaration":7622,"isOffset":false,"isSlot":false,"src":"12923:5:13","valueSize":1}],"id":7634,"nodeType":"InlineAssembly","src":"12890:48:13"},{"expression":{"id":7635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7632,"src":"12955:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":7617,"id":7636,"nodeType":"Return","src":"12948:13:13"}]},"documentation":{"id":7609,"nodeType":"StructuredDocumentation","src":"12137:529:13","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":7638,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:13","nodeType":"FunctionDefinition","parameters":{"id":7613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7612,"mutability":"mutable","name":"set","nameLocation":"12703:3:13","nodeType":"VariableDeclaration","scope":7638,"src":"12687:19:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":7611,"nodeType":"UserDefinedTypeName","pathNode":{"id":7610,"name":"UintSet","nameLocations":["12687:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":7509,"src":"12687:7:13"},"referencedDeclaration":7509,"src":"12687:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$7509_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"12686:21:13"},"returnParameters":{"id":7617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7638,"src":"12731:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7614,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7615,"nodeType":"ArrayTypeName","src":"12731:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:13"},"scope":7639,"src":"12671:297:13","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":7640,"src":"1330:11640:13","usedErrors":[],"usedEvents":[]}],"src":"205:12766:13"},"id":13},"@openzeppelin/contracts/utils/types/Time.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","exportedSymbols":{"Math":[4156],"SafeCast":[5911],"Time":[7914]},"id":7915,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7641,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"104:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../math/Math.sol","id":7643,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7915,"sourceUnit":4157,"src":"130:38:14","symbolAliases":[{"foreign":{"id":7642,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"138:4:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"../math/SafeCast.sol","id":7645,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7915,"sourceUnit":5912,"src":"169:46:14","symbolAliases":[{"foreign":{"id":7644,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5911,"src":"177:8:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Time","contractDependencies":[],"contractKind":"library","documentation":{"id":7646,"nodeType":"StructuredDocumentation","src":"217:422:14","text":" @dev This library provides helpers for manipulating time-related objects.\n It uses the following types:\n - `uint48` for timepoints\n - `uint32` for durations\n While the library doesn't provide specific types for timepoints and duration, it does provide:\n - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n - additional helper functions"},"fullyImplemented":true,"id":7914,"linearizedBaseContracts":[7914],"name":"Time","nameLocation":"648:4:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":7648,"libraryName":{"id":7647,"name":"Time","nameLocations":["665:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":7914,"src":"665:4:14"},"nodeType":"UsingForDirective","src":"659:17:14"},{"body":{"id":7660,"nodeType":"Block","src":"802:58:14","statements":[{"expression":{"arguments":[{"expression":{"id":7656,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"837:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:9:14","memberName":"timestamp","nodeType":"MemberAccess","src":"837:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7654,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5911,"src":"819:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5911_$","typeString":"type(library SafeCast)"}},"id":7655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"828:8:14","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"819:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":7658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"819:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":7653,"id":7659,"nodeType":"Return","src":"812:41:14"}]},"documentation":{"id":7649,"nodeType":"StructuredDocumentation","src":"682:63:14","text":" @dev Get the block timestamp as a Timepoint."},"id":7661,"implemented":true,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"759:9:14","nodeType":"FunctionDefinition","parameters":{"id":7650,"nodeType":"ParameterList","parameters":[],"src":"768:2:14"},"returnParameters":{"id":7653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7661,"src":"794:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7651,"name":"uint48","nodeType":"ElementaryTypeName","src":"794:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"793:8:14"},"scope":7914,"src":"750:110:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7673,"nodeType":"Block","src":"985:55:14","statements":[{"expression":{"arguments":[{"expression":{"id":7669,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1020:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:6:14","memberName":"number","nodeType":"MemberAccess","src":"1020:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7667,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5911,"src":"1002:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5911_$","typeString":"type(library SafeCast)"}},"id":7668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1011:8:14","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":4911,"src":"1002:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":7671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1002:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":7666,"id":7672,"nodeType":"Return","src":"995:38:14"}]},"documentation":{"id":7662,"nodeType":"StructuredDocumentation","src":"866:60:14","text":" @dev Get the block number as a Timepoint."},"id":7674,"implemented":true,"kind":"function","modifiers":[],"name":"blockNumber","nameLocation":"940:11:14","nodeType":"FunctionDefinition","parameters":{"id":7663,"nodeType":"ParameterList","parameters":[],"src":"951:2:14"},"returnParameters":{"id":7666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7674,"src":"977:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7664,"name":"uint48","nodeType":"ElementaryTypeName","src":"977:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"976:8:14"},"scope":7914,"src":"931:109:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"Time.Delay","id":7676,"name":"Delay","nameLocation":"2377:5:14","nodeType":"UserDefinedValueTypeDefinition","src":"2372:22:14","underlyingType":{"id":7675,"name":"uint112","nodeType":"ElementaryTypeName","src":"2386:7:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}},{"body":{"id":7690,"nodeType":"Block","src":"2572:44:14","statements":[{"expression":{"arguments":[{"id":7687,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7679,"src":"2600:8:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":7685,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7676,"src":"2589:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$7676_$","typeString":"type(Time.Delay)"}},"id":7686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2595:4:14","memberName":"wrap","nodeType":"MemberAccess","src":"2589:10:14","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":7688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"functionReturnParameters":7684,"id":7689,"nodeType":"Return","src":"2582:27:14"}]},"documentation":{"id":7677,"nodeType":"StructuredDocumentation","src":"2400:103:14","text":" @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature"},"id":7691,"implemented":true,"kind":"function","modifiers":[],"name":"toDelay","nameLocation":"2517:7:14","nodeType":"FunctionDefinition","parameters":{"id":7680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7679,"mutability":"mutable","name":"duration","nameLocation":"2532:8:14","nodeType":"VariableDeclaration","scope":7691,"src":"2525:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7678,"name":"uint32","nodeType":"ElementaryTypeName","src":"2525:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2524:17:14"},"returnParameters":{"id":7684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7691,"src":"2565:5:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7682,"nodeType":"UserDefinedTypeName","pathNode":{"id":7681,"name":"Delay","nameLocations":["2565:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"2565:5:14"},"referencedDeclaration":7676,"src":"2565:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"2564:7:14"},"scope":7914,"src":"2508:108:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7729,"nodeType":"Block","src":"2964:180:14","statements":[{"assignments":[7707,7709,7711],"declarations":[{"constant":false,"id":7707,"mutability":"mutable","name":"valueBefore","nameLocation":"2982:11:14","nodeType":"VariableDeclaration","scope":7729,"src":"2975:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7706,"name":"uint32","nodeType":"ElementaryTypeName","src":"2975:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7709,"mutability":"mutable","name":"valueAfter","nameLocation":"3002:10:14","nodeType":"VariableDeclaration","scope":7729,"src":"2995:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7708,"name":"uint32","nodeType":"ElementaryTypeName","src":"2995:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7711,"mutability":"mutable","name":"effect","nameLocation":"3021:6:14","nodeType":"VariableDeclaration","scope":7729,"src":"3014:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7710,"name":"uint48","nodeType":"ElementaryTypeName","src":"3014:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":7715,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7712,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7695,"src":"3031:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":7713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3036:6:14","memberName":"unpack","nodeType":"MemberAccess","referencedDeclaration":7875,"src":"3031:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) pure returns (uint32,uint32,uint48)"}},"id":7714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3031:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"2974:70:14"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":7718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7716,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7711,"src":"3061:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7717,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7697,"src":"3071:9:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"3061:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":7723,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7707,"src":"3105:11:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7724,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7709,"src":"3118:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7725,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7711,"src":"3130:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":7726,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3104:33:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"id":7727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3061:76:14","trueExpression":{"components":[{"id":7719,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7709,"src":"3084:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":7720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":7721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":7722,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3083:18:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(uint32,int_const 0,int_const 0)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":7705,"id":7728,"nodeType":"Return","src":"3054:83:14"}]},"documentation":{"id":7692,"nodeType":"StructuredDocumentation","src":"2622:241:14","text":" @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered."},"id":7730,"implemented":true,"kind":"function","modifiers":[],"name":"_getFullAt","nameLocation":"2877:10:14","nodeType":"FunctionDefinition","parameters":{"id":7698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7695,"mutability":"mutable","name":"self","nameLocation":"2894:4:14","nodeType":"VariableDeclaration","scope":7730,"src":"2888:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7694,"nodeType":"UserDefinedTypeName","pathNode":{"id":7693,"name":"Delay","nameLocations":["2888:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"2888:5:14"},"referencedDeclaration":7676,"src":"2888:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":7697,"mutability":"mutable","name":"timepoint","nameLocation":"2907:9:14","nodeType":"VariableDeclaration","scope":7730,"src":"2900:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7696,"name":"uint48","nodeType":"ElementaryTypeName","src":"2900:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2887:30:14"},"returnParameters":{"id":7705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7730,"src":"2940:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7699,"name":"uint32","nodeType":"ElementaryTypeName","src":"2940:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7730,"src":"2948:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7701,"name":"uint32","nodeType":"ElementaryTypeName","src":"2948:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7730,"src":"2956:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7703,"name":"uint48","nodeType":"ElementaryTypeName","src":"2956:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2939:24:14"},"scope":7914,"src":"2868:276:14","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":7749,"nodeType":"Block","src":"3438:53:14","statements":[{"expression":{"arguments":[{"id":7744,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7734,"src":"3466:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},{"arguments":[],"expression":{"argumentTypes":[],"id":7745,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7661,"src":"3472:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":7746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3472:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":7743,"name":"_getFullAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7730,"src":"3455:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$returns$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"function (Time.Delay,uint48) pure returns (uint32,uint32,uint48)"}},"id":7747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3455:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":7742,"id":7748,"nodeType":"Return","src":"3448:36:14"}]},"documentation":{"id":7731,"nodeType":"StructuredDocumentation","src":"3150:207:14","text":" @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n effect timepoint is 0, then the pending value should not be considered."},"id":7750,"implemented":true,"kind":"function","modifiers":[],"name":"getFull","nameLocation":"3371:7:14","nodeType":"FunctionDefinition","parameters":{"id":7735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7734,"mutability":"mutable","name":"self","nameLocation":"3385:4:14","nodeType":"VariableDeclaration","scope":7750,"src":"3379:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7733,"nodeType":"UserDefinedTypeName","pathNode":{"id":7732,"name":"Delay","nameLocations":["3379:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"3379:5:14"},"referencedDeclaration":7676,"src":"3379:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3378:12:14"},"returnParameters":{"id":7742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7750,"src":"3414:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7736,"name":"uint32","nodeType":"ElementaryTypeName","src":"3414:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7750,"src":"3422:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7738,"name":"uint32","nodeType":"ElementaryTypeName","src":"3422:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7750,"src":"3430:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7740,"name":"uint48","nodeType":"ElementaryTypeName","src":"3430:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"3413:24:14"},"scope":7914,"src":"3362:129:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7767,"nodeType":"Block","src":"3604:74:14","statements":[{"assignments":[7760,null,null],"declarations":[{"constant":false,"id":7760,"mutability":"mutable","name":"delay","nameLocation":"3622:5:14","nodeType":"VariableDeclaration","scope":7767,"src":"3615:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7759,"name":"uint32","nodeType":"ElementaryTypeName","src":"3615:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},null,null],"id":7764,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7761,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7754,"src":"3635:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":7762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3640:7:14","memberName":"getFull","nodeType":"MemberAccess","referencedDeclaration":7750,"src":"3635:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) view returns (uint32,uint32,uint48)"}},"id":7763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3635:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"3614:35:14"},{"expression":{"id":7765,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7760,"src":"3666:5:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":7758,"id":7766,"nodeType":"Return","src":"3659:12:14"}]},"documentation":{"id":7751,"nodeType":"StructuredDocumentation","src":"3497:46:14","text":" @dev Get the current value."},"id":7768,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"3557:3:14","nodeType":"FunctionDefinition","parameters":{"id":7755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7754,"mutability":"mutable","name":"self","nameLocation":"3567:4:14","nodeType":"VariableDeclaration","scope":7768,"src":"3561:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7753,"nodeType":"UserDefinedTypeName","pathNode":{"id":7752,"name":"Delay","nameLocations":["3561:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"3561:5:14"},"referencedDeclaration":7676,"src":"3561:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3560:12:14"},"returnParameters":{"id":7758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7768,"src":"3596:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7756,"name":"uint32","nodeType":"ElementaryTypeName","src":"3596:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3595:8:14"},"scope":7914,"src":"3548:130:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7823,"nodeType":"Block","src":"4128:234:14","statements":[{"assignments":[7785],"declarations":[{"constant":false,"id":7785,"mutability":"mutable","name":"value","nameLocation":"4145:5:14","nodeType":"VariableDeclaration","scope":7823,"src":"4138:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7784,"name":"uint32","nodeType":"ElementaryTypeName","src":"4138:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":7789,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7786,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7772,"src":"4153:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"id":7787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4158:3:14","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":7768,"src":"4153:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint32_$attached_to$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (Time.Delay) view returns (uint32)"}},"id":7788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4138:25:14"},{"assignments":[7791],"declarations":[{"constant":false,"id":7791,"mutability":"mutable","name":"setback","nameLocation":"4180:7:14","nodeType":"VariableDeclaration","scope":7823,"src":"4173:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7790,"name":"uint32","nodeType":"ElementaryTypeName","src":"4173:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":7807,"initialValue":{"arguments":[{"arguments":[{"id":7796,"name":"minSetback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7776,"src":"4206:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":7799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7785,"src":"4218:5:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":7798,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7774,"src":"4226:8:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4218:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":7803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4256:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":7804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4218:39:14","trueExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":7802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7785,"src":"4237:5:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":7801,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7774,"src":"4245:8:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4237:16:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":7794,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"4197:4:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4156_$","typeString":"type(library Math)"}},"id":7795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4202:3:14","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3289,"src":"4197:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:61:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4190:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":7792,"name":"uint32","nodeType":"ElementaryTypeName","src":"4190:6:14","typeDescriptions":{}}},"id":7806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4190:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4173:86:14"},{"expression":{"id":7813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7808,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7782,"src":"4269:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":7812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7809,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7661,"src":"4278:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":7810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4278:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":7811,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7791,"src":"4292:7:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4278:21:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4269:30:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":7814,"nodeType":"ExpressionStatement","src":"4269:30:14"},{"expression":{"components":[{"arguments":[{"id":7816,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7785,"src":"4322:5:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7817,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7774,"src":"4329:8:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7818,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7782,"src":"4339:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":7815,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7913,"src":"4317:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$_t_uint32_$_t_uint48_$returns$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (uint32,uint32,uint48) pure returns (Time.Delay)"}},"id":7819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4317:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},{"id":7820,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7782,"src":"4348:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":7821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4316:39:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$7676_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"functionReturnParameters":7783,"id":7822,"nodeType":"Return","src":"4309:46:14"}]},"documentation":{"id":7769,"nodeType":"StructuredDocumentation","src":"3684:283:14","text":" @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n new delay becomes effective."},"id":7824,"implemented":true,"kind":"function","modifiers":[],"name":"withUpdate","nameLocation":"3981:10:14","nodeType":"FunctionDefinition","parameters":{"id":7777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7772,"mutability":"mutable","name":"self","nameLocation":"4007:4:14","nodeType":"VariableDeclaration","scope":7824,"src":"4001:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7771,"nodeType":"UserDefinedTypeName","pathNode":{"id":7770,"name":"Delay","nameLocations":["4001:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4001:5:14"},"referencedDeclaration":7676,"src":"4001:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":7774,"mutability":"mutable","name":"newValue","nameLocation":"4028:8:14","nodeType":"VariableDeclaration","scope":7824,"src":"4021:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7773,"name":"uint32","nodeType":"ElementaryTypeName","src":"4021:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7776,"mutability":"mutable","name":"minSetback","nameLocation":"4053:10:14","nodeType":"VariableDeclaration","scope":7824,"src":"4046:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7775,"name":"uint32","nodeType":"ElementaryTypeName","src":"4046:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3991:78:14"},"returnParameters":{"id":7783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7780,"mutability":"mutable","name":"updatedDelay","nameLocation":"4099:12:14","nodeType":"VariableDeclaration","scope":7824,"src":"4093:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7779,"nodeType":"UserDefinedTypeName","pathNode":{"id":7778,"name":"Delay","nameLocations":["4093:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4093:5:14"},"referencedDeclaration":7676,"src":"4093:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":7782,"mutability":"mutable","name":"effect","nameLocation":"4120:6:14","nodeType":"VariableDeclaration","scope":7824,"src":"4113:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7781,"name":"uint48","nodeType":"ElementaryTypeName","src":"4113:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4092:35:14"},"scope":7914,"src":"3972:390:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7874,"nodeType":"Block","src":"4595:212:14","statements":[{"assignments":[7838],"declarations":[{"constant":false,"id":7838,"mutability":"mutable","name":"raw","nameLocation":"4613:3:14","nodeType":"VariableDeclaration","scope":7874,"src":"4605:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":7837,"name":"uint112","nodeType":"ElementaryTypeName","src":"4605:7:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"id":7843,"initialValue":{"arguments":[{"id":7841,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7828,"src":"4632:4:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}],"expression":{"id":7839,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7676,"src":"4619:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$7676_$","typeString":"type(Time.Delay)"}},"id":7840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4625:6:14","memberName":"unwrap","nodeType":"MemberAccess","src":"4619:12:14","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_Delay_$7676_$returns$_t_uint112_$","typeString":"function (Time.Delay) pure returns (uint112)"}},"id":7842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4619:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"VariableDeclarationStatement","src":"4605:32:14"},{"expression":{"id":7849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7844,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7833,"src":"4648:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7847,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7838,"src":"4668:3:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":7846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4661:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":7845,"name":"uint32","nodeType":"ElementaryTypeName","src":"4661:6:14","typeDescriptions":{}}},"id":7848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4661:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4648:24:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":7850,"nodeType":"ExpressionStatement","src":"4648:24:14"},{"expression":{"id":7858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7851,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7831,"src":"4682:11:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7854,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7838,"src":"4703:3:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":7855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4710:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4703:9:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":7853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4696:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":7852,"name":"uint32","nodeType":"ElementaryTypeName","src":"4696:6:14","typeDescriptions":{}}},"id":7857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4696:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4682:31:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":7859,"nodeType":"ExpressionStatement","src":"4682:31:14"},{"expression":{"id":7867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7860,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7835,"src":"4723:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7863,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7838,"src":"4739:3:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":7864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4746:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"4739:9:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":7862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4732:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":7861,"name":"uint48","nodeType":"ElementaryTypeName","src":"4732:6:14","typeDescriptions":{}}},"id":7866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4732:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4723:26:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":7868,"nodeType":"ExpressionStatement","src":"4723:26:14"},{"expression":{"components":[{"id":7869,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7831,"src":"4768:11:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7870,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7833,"src":"4781:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7871,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7835,"src":"4793:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":7872,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4767:33:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":7836,"id":7873,"nodeType":"Return","src":"4760:40:14"}]},"documentation":{"id":7825,"nodeType":"StructuredDocumentation","src":"4368:117:14","text":" @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint)."},"id":7875,"implemented":true,"kind":"function","modifiers":[],"name":"unpack","nameLocation":"4499:6:14","nodeType":"FunctionDefinition","parameters":{"id":7829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7828,"mutability":"mutable","name":"self","nameLocation":"4512:4:14","nodeType":"VariableDeclaration","scope":7875,"src":"4506:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7827,"nodeType":"UserDefinedTypeName","pathNode":{"id":7826,"name":"Delay","nameLocations":["4506:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4506:5:14"},"referencedDeclaration":7676,"src":"4506:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"4505:12:14"},"returnParameters":{"id":7836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7831,"mutability":"mutable","name":"valueBefore","nameLocation":"4548:11:14","nodeType":"VariableDeclaration","scope":7875,"src":"4541:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7830,"name":"uint32","nodeType":"ElementaryTypeName","src":"4541:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7833,"mutability":"mutable","name":"valueAfter","nameLocation":"4568:10:14","nodeType":"VariableDeclaration","scope":7875,"src":"4561:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7832,"name":"uint32","nodeType":"ElementaryTypeName","src":"4561:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7835,"mutability":"mutable","name":"effect","nameLocation":"4587:6:14","nodeType":"VariableDeclaration","scope":7875,"src":"4580:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7834,"name":"uint48","nodeType":"ElementaryTypeName","src":"4580:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4540:54:14"},"scope":7914,"src":"4490:317:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7912,"nodeType":"Block","src":"4980:112:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":7892,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7882,"src":"5017:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":7891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5009:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7890,"name":"uint112","nodeType":"ElementaryTypeName","src":"5009:7:14","typeDescriptions":{}}},"id":7893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5009:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":7894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5028:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5009:21:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":7896,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5008:23:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":7902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":7899,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7878,"src":"5043:11:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":7898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5035:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7897,"name":"uint112","nodeType":"ElementaryTypeName","src":"5035:7:14","typeDescriptions":{}}},"id":7900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5035:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":7901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5059:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5035:26:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":7903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5034:28:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5008:54:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":7907,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7880,"src":"5073:10:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":7906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5065:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":7905,"name":"uint112","nodeType":"ElementaryTypeName","src":"5065:7:14","typeDescriptions":{}}},"id":7908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5008:76:14","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"expression":{"id":7888,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7676,"src":"4997:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$7676_$","typeString":"type(Time.Delay)"}},"id":7889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5003:4:14","memberName":"wrap","nodeType":"MemberAccess","src":"4997:10:14","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$7676_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":7910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4997:88:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"functionReturnParameters":7887,"id":7911,"nodeType":"Return","src":"4990:95:14"}]},"documentation":{"id":7876,"nodeType":"StructuredDocumentation","src":"4813:64:14","text":" @dev pack the components into a Delay object."},"id":7913,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"4891:4:14","nodeType":"FunctionDefinition","parameters":{"id":7883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7878,"mutability":"mutable","name":"valueBefore","nameLocation":"4903:11:14","nodeType":"VariableDeclaration","scope":7913,"src":"4896:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7877,"name":"uint32","nodeType":"ElementaryTypeName","src":"4896:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7880,"mutability":"mutable","name":"valueAfter","nameLocation":"4923:10:14","nodeType":"VariableDeclaration","scope":7913,"src":"4916:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7879,"name":"uint32","nodeType":"ElementaryTypeName","src":"4916:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7882,"mutability":"mutable","name":"effect","nameLocation":"4942:6:14","nodeType":"VariableDeclaration","scope":7913,"src":"4935:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":7881,"name":"uint48","nodeType":"ElementaryTypeName","src":"4935:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4895:54:14"},"returnParameters":{"id":7887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7913,"src":"4973:5:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"},"typeName":{"id":7885,"nodeType":"UserDefinedTypeName","pathNode":{"id":7884,"name":"Delay","nameLocations":["4973:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":7676,"src":"4973:5:14"},"referencedDeclaration":7676,"src":"4973:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$7676","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"4972:7:14"},"scope":7914,"src":"4882:210:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":7915,"src":"640:4454:14","usedErrors":[],"usedEvents":[]}],"src":"104:4991:14"},"id":14},"contracts/management/PresaleManager.sol":{"ast":{"absolutePath":"contracts/management/PresaleManager.sol","exportedSymbols":{"AccessManager":[2033],"Address":[2868],"Context":[2898],"EnumerableMap":[7026],"EnumerableSet":[7639],"IAccessManaged":[2073],"IAccessManager":[2511],"IERC20":[2589],"IERC20Metadata":[2615],"IFreezable":[8750],"Math":[4156],"Multicall":[2985],"Ownable":[147],"Pausable":[3102],"PresaleManager":[8709],"Time":[7914]},"id":8710,"license":"Private","nodeType":"SourceUnit","nodes":[{"id":7916,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"36:24:15"},{"absolutePath":"@openzeppelin/contracts/access/manager/AccessManager.sol","file":"@openzeppelin/contracts/access/manager/AccessManager.sol","id":7917,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":2034,"src":"61:66:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","id":7918,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":2616,"src":"128:75:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","file":"@openzeppelin/contracts/utils/Pausable.sol","id":7919,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":3103,"src":"204:52:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":7920,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":148,"src":"257:52:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":7921,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":2590,"src":"310:56:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableMap.sol","id":7922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":7027,"src":"367:65:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","file":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","id":7923,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":2074,"src":"433:67:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/tokens/IFreezable.sol","file":"contracts/tokens/IFreezable.sol","id":7924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8710,"sourceUnit":8751,"src":"501:41:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":7926,"name":"Ownable","nameLocations":["857:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"857:7:15"},"id":7927,"nodeType":"InheritanceSpecifier","src":"857:7:15"},{"baseName":{"id":7928,"name":"AccessManager","nameLocations":["866:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":2033,"src":"866:13:15"},"id":7929,"nodeType":"InheritanceSpecifier","src":"866:13:15"},{"baseName":{"id":7930,"name":"Pausable","nameLocations":["881:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":3102,"src":"881:8:15"},"id":7931,"nodeType":"InheritanceSpecifier","src":"881:8:15"}],"canonicalName":"PresaleManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":7925,"nodeType":"StructuredDocumentation","src":"545:283:15","text":" @title PresaleManager\n @author Ilya A. Shlyakhovoy\n @notice The simple Manager contract for presale phase during the\n mature Manager contract in development\n Only confirms execution of token functions if owner called it and\n receives the funds in the stablecoins"},"fullyImplemented":true,"id":8709,"linearizedBaseContracts":[8709,3102,2033,2511,2985,147,2898],"name":"PresaleManager","nameLocation":"839:14:15","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"ba9a91a5","id":7933,"mutability":"immutable","name":"SALT","nameLocation":"921:4:15","nodeType":"VariableDeclaration","scope":8709,"src":"896:29:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7932,"name":"uint256","nodeType":"ElementaryTypeName","src":"896:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"global":false,"id":7937,"libraryName":{"id":7934,"name":"EnumerableMap","nameLocations":["938:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":7026,"src":"938:13:15"},"nodeType":"UsingForDirective","src":"932:55:15","typeName":{"id":7936,"nodeType":"UserDefinedTypeName","pathNode":{"id":7935,"name":"EnumerableMap.AddressToUintMap","nameLocations":["956:13:15","970:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"956:30:15"},"referencedDeclaration":6591,"src":"956:30:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}}},{"errorSelector":"066f53b1","id":7939,"name":"EmptyToken","nameLocation":"999:10:15","nodeType":"ErrorDefinition","parameters":{"id":7938,"nodeType":"ParameterList","parameters":[],"src":"1009:2:15"},"src":"993:19:15"},{"errorSelector":"0ac1a492","id":7941,"name":"EmptyCurrency","nameLocation":"1023:13:15","nodeType":"ErrorDefinition","parameters":{"id":7940,"nodeType":"ParameterList","parameters":[],"src":"1036:2:15"},"src":"1017:22:15"},{"errorSelector":"783bc409","id":7943,"name":"EmptyRate","nameLocation":"1050:9:15","nodeType":"ErrorDefinition","parameters":{"id":7942,"nodeType":"ParameterList","parameters":[],"src":"1059:2:15"},"src":"1044:18:15"},{"errorSelector":"592df240","id":7947,"name":"TooBigRate","nameLocation":"1073:10:15","nodeType":"ErrorDefinition","parameters":{"id":7946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7945,"mutability":"mutable","name":"rate","nameLocation":"1092:4:15","nodeType":"VariableDeclaration","scope":7947,"src":"1084:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1084:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:14:15"},"src":"1067:31:15"},{"errorSelector":"1208b21b","id":7949,"name":"EmptyValue","nameLocation":"1109:10:15","nodeType":"ErrorDefinition","parameters":{"id":7948,"nodeType":"ParameterList","parameters":[],"src":"1119:2:15"},"src":"1103:19:15"},{"errorSelector":"5d3f476b","id":7953,"name":"CannotRedeem","nameLocation":"1133:12:15","nodeType":"ErrorDefinition","parameters":{"id":7952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7951,"mutability":"mutable","name":"currency","nameLocation":"1154:8:15","nodeType":"VariableDeclaration","scope":7953,"src":"1146:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7950,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1145:18:15"},"src":"1127:37:15"},{"errorSelector":"bbea11c9","id":7957,"name":"CannotTransfer","nameLocation":"1175:14:15","nodeType":"ErrorDefinition","parameters":{"id":7956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7955,"mutability":"mutable","name":"currency","nameLocation":"1198:8:15","nodeType":"VariableDeclaration","scope":7957,"src":"1190:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7954,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1189:18:15"},"src":"1169:39:15"},{"errorSelector":"aca8c4a3","id":7961,"name":"NotOwned","nameLocation":"1219:8:15","nodeType":"ErrorDefinition","parameters":{"id":7960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7959,"mutability":"mutable","name":"target","nameLocation":"1236:6:15","nodeType":"VariableDeclaration","scope":7961,"src":"1228:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7958,"name":"address","nodeType":"ElementaryTypeName","src":"1228:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1227:16:15"},"src":"1213:31:15"},{"errorSelector":"e0e0e082","id":7963,"name":"EmptyNewToken","nameLocation":"1255:13:15","nodeType":"ErrorDefinition","parameters":{"id":7962,"nodeType":"ParameterList","parameters":[],"src":"1268:2:15"},"src":"1249:22:15"},{"errorSelector":"623682cc","id":7965,"name":"IncorrectPosition","nameLocation":"1282:17:15","nodeType":"ErrorDefinition","parameters":{"id":7964,"nodeType":"ParameterList","parameters":[],"src":"1299:2:15"},"src":"1276:26:15"},{"errorSelector":"21d6041b","id":7975,"name":"UnsufficientBalance","nameLocation":"1313:19:15","nodeType":"ErrorDefinition","parameters":{"id":7974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7967,"mutability":"mutable","name":"buyer","nameLocation":"1341:5:15","nodeType":"VariableDeclaration","scope":7975,"src":"1333:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7966,"name":"address","nodeType":"ElementaryTypeName","src":"1333:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7969,"mutability":"mutable","name":"currency","nameLocation":"1356:8:15","nodeType":"VariableDeclaration","scope":7975,"src":"1348:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7968,"name":"address","nodeType":"ElementaryTypeName","src":"1348:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7971,"mutability":"mutable","name":"balance","nameLocation":"1374:7:15","nodeType":"VariableDeclaration","scope":7975,"src":"1366:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7973,"mutability":"mutable","name":"amount","nameLocation":"1392:6:15","nodeType":"VariableDeclaration","scope":7975,"src":"1384:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7972,"name":"uint256","nodeType":"ElementaryTypeName","src":"1384:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1332:67:15"},"src":"1307:93:15"},{"errorSelector":"e0b5be3e","id":7979,"name":"UnsufficientManagerBalance","nameLocation":"1411:26:15","nodeType":"ErrorDefinition","parameters":{"id":7978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7977,"mutability":"mutable","name":"amount","nameLocation":"1446:6:15","nodeType":"VariableDeclaration","scope":7979,"src":"1438:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7976,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1437:16:15"},"src":"1405:49:15"},{"anonymous":false,"eventSelector":"314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda","id":7989,"name":"BoughtTokens","nameLocation":"1466:12:15","nodeType":"EventDefinition","parameters":{"id":7988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7981,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1504:6:15","nodeType":"VariableDeclaration","scope":7989,"src":"1488:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7980,"name":"address","nodeType":"ElementaryTypeName","src":"1488:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7983,"indexed":true,"mutability":"mutable","name":"currency","nameLocation":"1536:8:15","nodeType":"VariableDeclaration","scope":7989,"src":"1520:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7982,"name":"address","nodeType":"ElementaryTypeName","src":"1520:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7985,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"1570:5:15","nodeType":"VariableDeclaration","scope":7989,"src":"1554:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7984,"name":"uint256","nodeType":"ElementaryTypeName","src":"1554:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7987,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1593:6:15","nodeType":"VariableDeclaration","scope":7989,"src":"1585:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1585:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1478:127:15"},"src":"1460:146:15"},{"constant":false,"id":7991,"mutability":"mutable","name":"tokenContract","nameLocation":"1641:13:15","nodeType":"VariableDeclaration","scope":8709,"src":"1633:21:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7990,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7993,"mutability":"mutable","name":"bonusPercent","nameLocation":"1668:12:15","nodeType":"VariableDeclaration","scope":8709,"src":"1660:20:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7992,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7996,"mutability":"mutable","name":"currencies","nameLocation":"1725:10:15","nodeType":"VariableDeclaration","scope":8709,"src":"1686:49:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap"},"typeName":{"id":7995,"nodeType":"UserDefinedTypeName","pathNode":{"id":7994,"name":"EnumerableMap.AddressToUintMap","nameLocations":["1686:13:15","1700:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":6591,"src":"1686:30:15"},"referencedDeclaration":6591,"src":"1686:30:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage_ptr","typeString":"struct EnumerableMap.AddressToUintMap"}},"visibility":"private"},{"body":{"id":8025,"nodeType":"Block","src":"1886:98:15","statements":[{"expression":{"id":8015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8011,"name":"bonusPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"1896:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313030","id":8012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1911:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":8013,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8002,"src":"1917:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1911:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1896:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8016,"nodeType":"ExpressionStatement","src":"1896:26:15"},{"expression":{"id":8019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8017,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"1932:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8018,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8000,"src":"1948:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1932:21:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8020,"nodeType":"ExpressionStatement","src":"1932:21:15"},{"expression":{"id":8023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8021,"name":"SALT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7933,"src":"1963:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31353434373939","id":8022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1970:7:15","typeDescriptions":{"typeIdentifier":"t_rational_1544799_by_1","typeString":"int_const 1544799"},"value":"1544799"},"src":"1963:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8024,"nodeType":"ExpressionStatement","src":"1963:14:15"}]},"id":8026,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":8005,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"1844:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":8006,"kind":"baseConstructorSpecifier","modifierName":{"id":8004,"name":"Ownable","nameLocations":["1836:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1836:7:15"},"nodeType":"ModifierInvocation","src":"1836:21:15"},{"arguments":[{"id":8008,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7998,"src":"1872:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":8009,"kind":"baseConstructorSpecifier","modifierName":{"id":8007,"name":"AccessManager","nameLocations":["1858:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":2033,"src":"1858:13:15"},"nodeType":"ModifierInvocation","src":"1858:27:15"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7998,"mutability":"mutable","name":"initialOwner","nameLocation":"1771:12:15","nodeType":"VariableDeclaration","scope":8026,"src":"1763:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7997,"name":"address","nodeType":"ElementaryTypeName","src":"1763:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8000,"mutability":"mutable","name":"token","nameLocation":"1801:5:15","nodeType":"VariableDeclaration","scope":8026,"src":"1793:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7999,"name":"address","nodeType":"ElementaryTypeName","src":"1793:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8002,"mutability":"mutable","name":"bonus","nameLocation":"1824:5:15","nodeType":"VariableDeclaration","scope":8026,"src":"1816:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8001,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:82:15"},"returnParameters":{"id":8010,"nodeType":"ParameterList","parameters":[],"src":"1886:0:15"},"scope":8709,"src":"1742:242:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":8034,"nodeType":"Block","src":"2026:25:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":8031,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"2036:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":8032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2036:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8033,"nodeType":"ExpressionStatement","src":"2036:8:15"}]},"functionSelector":"8456cb59","id":8035,"implemented":true,"kind":"function","modifiers":[{"id":8029,"kind":"modifierInvocation","modifierName":{"id":8028,"name":"onlyOwner","nameLocations":["2016:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2016:9:15"},"nodeType":"ModifierInvocation","src":"2016:9:15"}],"name":"pause","nameLocation":"1999:5:15","nodeType":"FunctionDefinition","parameters":{"id":8027,"nodeType":"ParameterList","parameters":[],"src":"2004:2:15"},"returnParameters":{"id":8030,"nodeType":"ParameterList","parameters":[],"src":"2026:0:15"},"scope":8709,"src":"1990:61:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8043,"nodeType":"Block","src":"2095:27:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":8040,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"2105:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":8041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2105:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8042,"nodeType":"ExpressionStatement","src":"2105:10:15"}]},"functionSelector":"3f4ba83a","id":8044,"implemented":true,"kind":"function","modifiers":[{"id":8038,"kind":"modifierInvocation","modifierName":{"id":8037,"name":"onlyOwner","nameLocations":["2085:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2085:9:15"},"nodeType":"ModifierInvocation","src":"2085:9:15"}],"name":"unpause","nameLocation":"2066:7:15","nodeType":"FunctionDefinition","parameters":{"id":8036,"nodeType":"ParameterList","parameters":[],"src":"2073:2:15"},"returnParameters":{"id":8039,"nodeType":"ParameterList","parameters":[],"src":"2095:0:15"},"scope":8709,"src":"2057:65:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8068,"nodeType":"Block","src":"2179:119:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8051,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2193:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2218:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2210:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8052,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:15","typeDescriptions":{}}},"id":8055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2210:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2193:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8060,"nodeType":"IfStatement","src":"2189:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8057,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"2229:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2229:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8059,"nodeType":"RevertStatement","src":"2222:19:15"}},{"expression":{"arguments":[{"id":8065,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8046,"src":"2284:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8062,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2262:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8061,"name":"IFreezable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8750,"src":"2251:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFreezable_$8750_$","typeString":"type(contract IFreezable)"}},"id":8063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2251:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFreezable_$8750","typeString":"contract IFreezable"}},"id":8064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2277:6:15","memberName":"freeze","nodeType":"MemberAccess","referencedDeclaration":8744,"src":"2251:32:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":8066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2251:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8067,"nodeType":"ExpressionStatement","src":"2251:40:15"}]},"functionSelector":"8d1fdf2f","id":8069,"implemented":true,"kind":"function","modifiers":[{"id":8049,"kind":"modifierInvocation","modifierName":{"id":8048,"name":"onlyOwner","nameLocations":["2169:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2169:9:15"},"nodeType":"ModifierInvocation","src":"2169:9:15"}],"name":"freeze","nameLocation":"2137:6:15","nodeType":"FunctionDefinition","parameters":{"id":8047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8046,"mutability":"mutable","name":"target","nameLocation":"2152:6:15","nodeType":"VariableDeclaration","scope":8069,"src":"2144:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8045,"name":"address","nodeType":"ElementaryTypeName","src":"2144:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2143:16:15"},"returnParameters":{"id":8050,"nodeType":"ParameterList","parameters":[],"src":"2179:0:15"},"scope":8709,"src":"2128:170:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8093,"nodeType":"Block","src":"2357:121:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8076,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2371:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2396:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2388:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8077,"name":"address","nodeType":"ElementaryTypeName","src":"2388:7:15","typeDescriptions":{}}},"id":8080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2388:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2371:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8085,"nodeType":"IfStatement","src":"2367:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8082,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"2407:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8084,"nodeType":"RevertStatement","src":"2400:19:15"}},{"expression":{"arguments":[{"id":8090,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8071,"src":"2464:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8087,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2440:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8086,"name":"IFreezable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8750,"src":"2429:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFreezable_$8750_$","typeString":"type(contract IFreezable)"}},"id":8088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2429:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFreezable_$8750","typeString":"contract IFreezable"}},"id":8089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2455:8:15","memberName":"unfreeze","nodeType":"MemberAccess","referencedDeclaration":8749,"src":"2429:34:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":8091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2429:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8092,"nodeType":"ExpressionStatement","src":"2429:42:15"}]},"functionSelector":"45c8b1a6","id":8094,"implemented":true,"kind":"function","modifiers":[{"id":8074,"kind":"modifierInvocation","modifierName":{"id":8073,"name":"onlyOwner","nameLocations":["2347:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2347:9:15"},"nodeType":"ModifierInvocation","src":"2347:9:15"}],"name":"unfreeze","nameLocation":"2313:8:15","nodeType":"FunctionDefinition","parameters":{"id":8072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8071,"mutability":"mutable","name":"target","nameLocation":"2330:6:15","nodeType":"VariableDeclaration","scope":8094,"src":"2322:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8070,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2321:16:15"},"returnParameters":{"id":8075,"nodeType":"ParameterList","parameters":[],"src":"2357:0:15"},"scope":8709,"src":"2304:174:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8117,"nodeType":"Block","src":"2551:94:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8103,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8096,"src":"2565:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2583:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8104,"name":"address","nodeType":"ElementaryTypeName","src":"2575:7:15","typeDescriptions":{}}},"id":8107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2565:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8112,"nodeType":"IfStatement","src":"2561:45:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8109,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"2594:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2594:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8111,"nodeType":"RevertStatement","src":"2587:19:15"}},{"expression":{"id":8115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8113,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2616:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8114,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8096,"src":"2632:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2616:22:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8116,"nodeType":"ExpressionStatement","src":"2616:22:15"}]},"functionSelector":"da2b1224","id":8118,"implemented":true,"kind":"function","modifiers":[{"id":8099,"kind":"modifierInvocation","modifierName":{"id":8098,"name":"onlyOwner","nameLocations":["2530:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2530:9:15"},"nodeType":"ModifierInvocation","src":"2530:9:15"},{"id":8101,"kind":"modifierInvocation","modifierName":{"id":8100,"name":"whenPaused","nameLocations":["2540:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"2540:10:15"},"nodeType":"ModifierInvocation","src":"2540:10:15"}],"name":"defineToken","nameLocation":"2493:11:15","nodeType":"FunctionDefinition","parameters":{"id":8097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8096,"mutability":"mutable","name":"_token","nameLocation":"2513:6:15","nodeType":"VariableDeclaration","scope":8118,"src":"2505:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8095,"name":"address","nodeType":"ElementaryTypeName","src":"2505:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2504:16:15"},"returnParameters":{"id":8102,"nodeType":"ParameterList","parameters":[],"src":"2551:0:15"},"scope":8709,"src":"2484:161:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8125,"nodeType":"Block","src":"2703:37:15","statements":[{"expression":{"id":8123,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"2720:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":8122,"id":8124,"nodeType":"Return","src":"2713:20:15"}]},"functionSelector":"21df0da7","id":8126,"implemented":true,"kind":"function","modifiers":[],"name":"getToken","nameLocation":"2660:8:15","nodeType":"FunctionDefinition","parameters":{"id":8119,"nodeType":"ParameterList","parameters":[],"src":"2668:2:15"},"returnParameters":{"id":8122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8126,"src":"2694:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8120,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:9:15"},"scope":8709,"src":"2651:89:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8193,"nodeType":"Block","src":"3151:348:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8140,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8129,"src":"3165:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3185:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3177:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8141,"name":"address","nodeType":"ElementaryTypeName","src":"3177:7:15","typeDescriptions":{}}},"id":8144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3177:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3165:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8149,"nodeType":"IfStatement","src":"3161:50:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8146,"name":"EmptyCurrency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"3196:13:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8148,"nodeType":"RevertStatement","src":"3189:22:15"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8150,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8131,"src":"3225:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3233:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3225:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8156,"nodeType":"IfStatement","src":"3221:33:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8153,"name":"EmptyRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7943,"src":"3243:9:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8155,"nodeType":"RevertStatement","src":"3236:18:15"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8157,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"3268:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3293:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3285:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8158,"name":"address","nodeType":"ElementaryTypeName","src":"3285:7:15","typeDescriptions":{}}},"id":8161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3285:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3268:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8166,"nodeType":"IfStatement","src":"3264:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8163,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"3304:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3304:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8165,"nodeType":"RevertStatement","src":"3297:19:15"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8167,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8131,"src":"3343:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":8170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3358:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":8177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":8172,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"3380:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8171,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"3365:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2615_$","typeString":"type(contract IERC20Metadata)"}},"id":8173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$2615","typeString":"contract IERC20Metadata"}},"id":8174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3395:8:15","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"3365:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":8175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":8176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3408:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3365:44:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":8178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3364:46:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3358:52:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3350:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8168,"name":"uint256","nodeType":"ElementaryTypeName","src":"3350:7:15","typeDescriptions":{}}},"id":8180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3350:61:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3343:68:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8186,"nodeType":"IfStatement","src":"3326:119:15","trueBody":{"errorCall":{"arguments":[{"id":8183,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8131,"src":"3440:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8182,"name":"TooBigRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7947,"src":"3429:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":8184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3429:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8185,"nodeType":"RevertStatement","src":"3422:23:15"}},{"expression":{"arguments":[{"id":8189,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8129,"src":"3477:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8190,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8131,"src":"3487:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8187,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"3462:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3473:3:15","memberName":"set","nodeType":"MemberAccess","referencedDeclaration":6624,"src":"3462:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address,uint256) returns (bool)"}},"id":8191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":8139,"id":8192,"nodeType":"Return","src":"3455:37:15"}]},"documentation":{"id":8127,"nodeType":"StructuredDocumentation","src":"2746:283:15","text":" Define or change new allowed currency with rate. Rate cannot be more than 100\n  tokens for the 1 currency unit. Rate is nominated in token decimals\n @param currency  the address of the currency token\n @param rate the exchange rate to token"},"functionSelector":"2bdb7097","id":8194,"implemented":true,"kind":"function","modifiers":[{"id":8134,"kind":"modifierInvocation","modifierName":{"id":8133,"name":"onlyOwner","nameLocations":["3115:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"3115:9:15"},"nodeType":"ModifierInvocation","src":"3115:9:15"},{"id":8136,"kind":"modifierInvocation","modifierName":{"id":8135,"name":"whenPaused","nameLocations":["3125:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"3125:10:15"},"nodeType":"ModifierInvocation","src":"3125:10:15"}],"name":"setRate","nameLocation":"3044:7:15","nodeType":"FunctionDefinition","parameters":{"id":8132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8129,"mutability":"mutable","name":"currency","nameLocation":"3069:8:15","nodeType":"VariableDeclaration","scope":8194,"src":"3061:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8128,"name":"address","nodeType":"ElementaryTypeName","src":"3061:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8131,"mutability":"mutable","name":"rate","nameLocation":"3095:4:15","nodeType":"VariableDeclaration","scope":8194,"src":"3087:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8130,"name":"uint256","nodeType":"ElementaryTypeName","src":"3087:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3051:54:15"},"returnParameters":{"id":8139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8194,"src":"3145:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8137,"name":"bool","nodeType":"ElementaryTypeName","src":"3145:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3144:6:15"},"scope":8709,"src":"3035:464:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8224,"nodeType":"Block","src":"3572:162:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8201,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8196,"src":"3586:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3606:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3598:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8202,"name":"address","nodeType":"ElementaryTypeName","src":"3598:7:15","typeDescriptions":{}}},"id":8205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3598:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3586:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8210,"nodeType":"IfStatement","src":"3582:50:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8207,"name":"EmptyCurrency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"3617:13:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3617:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8209,"nodeType":"RevertStatement","src":"3610:22:15"}},{"condition":{"id":8215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3646:30:15","subExpression":{"arguments":[{"id":8213,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8196,"src":"3667:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8211,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"3647:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3658:8:15","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":6678,"src":"3647:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (bool)"}},"id":8214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3647:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8218,"nodeType":"IfStatement","src":"3642:44:15","trueBody":{"expression":{"hexValue":"30","id":8216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3685:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":8200,"id":8217,"nodeType":"Return","src":"3678:8:15"}},{"expression":{"arguments":[{"id":8221,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8196,"src":"3718:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8219,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"3703:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3714:3:15","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":6803,"src":"3703:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_address_$returns$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (uint256)"}},"id":8222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3703:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8200,"id":8223,"nodeType":"Return","src":"3696:31:15"}]},"functionSelector":"37cef791","id":8225,"implemented":true,"kind":"function","modifiers":[],"name":"getRate","nameLocation":"3514:7:15","nodeType":"FunctionDefinition","parameters":{"id":8197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8196,"mutability":"mutable","name":"currency","nameLocation":"3530:8:15","nodeType":"VariableDeclaration","scope":8225,"src":"3522:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8195,"name":"address","nodeType":"ElementaryTypeName","src":"3522:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3521:18:15"},"returnParameters":{"id":8200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8225,"src":"3563:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8198,"name":"uint256","nodeType":"ElementaryTypeName","src":"3563:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3562:9:15"},"scope":8709,"src":"3505:229:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8248,"nodeType":"Block","src":"3810:118:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8234,"name":"ratePos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8227,"src":"3824:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8235,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"3835:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3846:6:15","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":6693,"src":"3835:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer) view returns (uint256)"}},"id":8237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3835:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3824:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8242,"nodeType":"IfStatement","src":"3820:62:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8239,"name":"IncorrectPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7965,"src":"3863:17:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8241,"nodeType":"RevertStatement","src":"3856:26:15"}},{"expression":{"arguments":[{"id":8245,"name":"ratePos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8227,"src":"3913:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8243,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"3899:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3910:2:15","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":6733,"src":"3899:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_uint256_$returns$_t_address_$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,uint256) view returns (address,uint256)"}},"id":8246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3899:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"functionReturnParameters":8233,"id":8247,"nodeType":"Return","src":"3892:29:15"}]},"functionSelector":"e0886f90","id":8249,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"3749:2:15","nodeType":"FunctionDefinition","parameters":{"id":8228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8227,"mutability":"mutable","name":"ratePos","nameLocation":"3760:7:15","nodeType":"VariableDeclaration","scope":8249,"src":"3752:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8226,"name":"uint256","nodeType":"ElementaryTypeName","src":"3752:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3751:17:15"},"returnParameters":{"id":8233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8249,"src":"3792:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8229,"name":"address","nodeType":"ElementaryTypeName","src":"3792:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8249,"src":"3801:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8231,"name":"uint256","nodeType":"ElementaryTypeName","src":"3801:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3791:18:15"},"scope":8709,"src":"3740:188:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8258,"nodeType":"Block","src":"3984:43:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8254,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"4001:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4012:6:15","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":6693,"src":"4001:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer) view returns (uint256)"}},"id":8256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4001:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8253,"id":8257,"nodeType":"Return","src":"3994:26:15"}]},"functionSelector":"1f7b6d32","id":8259,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"3943:6:15","nodeType":"FunctionDefinition","parameters":{"id":8250,"nodeType":"ParameterList","parameters":[],"src":"3949:2:15"},"returnParameters":{"id":8253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8259,"src":"3975:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8251,"name":"uint256","nodeType":"ElementaryTypeName","src":"3975:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3974:9:15"},"scope":8709,"src":"3934:93:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8283,"nodeType":"Block","src":"4125:113:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8268,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8261,"src":"4139:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4159:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4151:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8269,"name":"address","nodeType":"ElementaryTypeName","src":"4151:7:15","typeDescriptions":{}}},"id":8272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4151:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4139:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8277,"nodeType":"IfStatement","src":"4135:50:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8274,"name":"EmptyCurrency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"4170:13:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4170:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8276,"nodeType":"RevertStatement","src":"4163:22:15"}},{"expression":{"arguments":[{"id":8280,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8261,"src":"4222:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8278,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"4202:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4213:8:15","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":6678,"src":"4202:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,address) view returns (bool)"}},"id":8281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4202:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":8267,"id":8282,"nodeType":"Return","src":"4195:36:15"}]},"functionSelector":"e0781b7a","id":8284,"implemented":true,"kind":"function","modifiers":[{"id":8264,"kind":"modifierInvocation","modifierName":{"id":8263,"name":"whenNotPaused","nameLocations":["4096:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"4096:13:15"},"nodeType":"ModifierInvocation","src":"4096:13:15"}],"name":"hasRate","nameLocation":"4042:7:15","nodeType":"FunctionDefinition","parameters":{"id":8262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8261,"mutability":"mutable","name":"currency","nameLocation":"4067:8:15","nodeType":"VariableDeclaration","scope":8284,"src":"4059:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8260,"name":"address","nodeType":"ElementaryTypeName","src":"4059:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4049:32:15"},"returnParameters":{"id":8267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8284,"src":"4119:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8265,"name":"bool","nodeType":"ElementaryTypeName","src":"4119:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4118:6:15"},"scope":8709,"src":"4033:205:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8299,"nodeType":"Block","src":"4307:43:15","statements":[{"expression":{"id":8297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8293,"name":"bonusPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"4317:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313030","id":8294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4332:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":8295,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8286,"src":"4338:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4332:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4317:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8298,"nodeType":"ExpressionStatement","src":"4317:26:15"}]},"functionSelector":"0b98f975","id":8300,"implemented":true,"kind":"function","modifiers":[{"id":8289,"kind":"modifierInvocation","modifierName":{"id":8288,"name":"onlyOwner","nameLocations":["4286:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4286:9:15"},"nodeType":"ModifierInvocation","src":"4286:9:15"},{"id":8291,"kind":"modifierInvocation","modifierName":{"id":8290,"name":"whenPaused","nameLocations":["4296:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"4296:10:15"},"nodeType":"ModifierInvocation","src":"4296:10:15"}],"name":"setBonus","nameLocation":"4253:8:15","nodeType":"FunctionDefinition","parameters":{"id":8287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8286,"mutability":"mutable","name":"bonus","nameLocation":"4270:5:15","nodeType":"VariableDeclaration","scope":8300,"src":"4262:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8285,"name":"uint256","nodeType":"ElementaryTypeName","src":"4262:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4261:15:15"},"returnParameters":{"id":8292,"nodeType":"ParameterList","parameters":[],"src":"4307:0:15"},"scope":8709,"src":"4244:106:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8309,"nodeType":"Block","src":"4408:42:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8305,"name":"bonusPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"4425:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313030","id":8306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4440:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"4425:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8304,"id":8308,"nodeType":"Return","src":"4418:25:15"}]},"functionSelector":"8bdff161","id":8310,"implemented":true,"kind":"function","modifiers":[],"name":"getBonus","nameLocation":"4365:8:15","nodeType":"FunctionDefinition","parameters":{"id":8301,"nodeType":"ParameterList","parameters":[],"src":"4373:2:15"},"returnParameters":{"id":8304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8310,"src":"4399:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8302,"name":"uint256","nodeType":"ElementaryTypeName","src":"4399:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4398:9:15"},"scope":8709,"src":"4356:94:15","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[340],"body":{"id":8344,"nodeType":"Block","src":"4625:138:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8324,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8312,"src":"4639:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":8325,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"4649:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":8326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4649:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4639:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8332,"nodeType":"IfStatement","src":"4635:39:15","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":8328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4666:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":8329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4672:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":8330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4665:9:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":8323,"id":8331,"nodeType":"Return","src":"4658:16:15"}},{"assignments":[8334,null],"declarations":[{"constant":false,"id":8334,"mutability":"mutable","name":"found","nameLocation":"4690:5:15","nodeType":"VariableDeclaration","scope":8344,"src":"4685:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8333,"name":"bool","nodeType":"ElementaryTypeName","src":"4685:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":8339,"initialValue":{"arguments":[{"id":8336,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"4710:10:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":8337,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8312,"src":"4722:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":8335,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"4702:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$_t_uint32_$","typeString":"function (uint64,address) view returns (bool,uint32)"}},"id":8338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"4684:45:15"},{"expression":{"components":[{"id":8340,"name":"found","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8334,"src":"4747:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"30","id":8341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4754:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":8342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4746:10:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":8323,"id":8343,"nodeType":"Return","src":"4739:17:15"}]},"functionSelector":"b7009613","id":8345,"implemented":true,"kind":"function","modifiers":[],"name":"canCall","nameLocation":"4470:7:15","nodeType":"FunctionDefinition","overrides":{"id":8318,"nodeType":"OverrideSpecifier","overrides":[],"src":"4577:8:15"},"parameters":{"id":8317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8312,"mutability":"mutable","name":"caller","nameLocation":"4495:6:15","nodeType":"VariableDeclaration","scope":8345,"src":"4487:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8311,"name":"address","nodeType":"ElementaryTypeName","src":"4487:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8314,"mutability":"mutable","name":"target","nameLocation":"4519:6:15","nodeType":"VariableDeclaration","scope":8345,"src":"4511:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8313,"name":"address","nodeType":"ElementaryTypeName","src":"4511:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8316,"mutability":"mutable","name":"selector","nameLocation":"4542:8:15","nodeType":"VariableDeclaration","scope":8345,"src":"4535:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":8315,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4535:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4477:79:15"},"returnParameters":{"id":8323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8320,"mutability":"mutable","name":"immediate","nameLocation":"4600:9:15","nodeType":"VariableDeclaration","scope":8345,"src":"4595:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8319,"name":"bool","nodeType":"ElementaryTypeName","src":"4595:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":8322,"mutability":"mutable","name":"delay","nameLocation":"4618:5:15","nodeType":"VariableDeclaration","scope":8345,"src":"4611:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":8321,"name":"uint32","nodeType":"ElementaryTypeName","src":"4611:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4594:30:15"},"scope":8709,"src":"4461:302:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":8410,"nodeType":"Block","src":"4881:449:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8354,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"4895:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4915:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4907:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8355,"name":"address","nodeType":"ElementaryTypeName","src":"4907:7:15","typeDescriptions":{}}},"id":8358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4907:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4895:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8363,"nodeType":"IfStatement","src":"4891:50:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8360,"name":"EmptyCurrency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"4926:13:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4926:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8362,"nodeType":"RevertStatement","src":"4919:22:15"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8349,"src":"4955:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4964:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4955:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8370,"nodeType":"IfStatement","src":"4951:35:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8367,"name":"EmptyValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7949,"src":"4974:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4974:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8369,"nodeType":"RevertStatement","src":"4967:19:15"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8371,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"5000:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5025:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5017:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8372,"name":"address","nodeType":"ElementaryTypeName","src":"5017:7:15","typeDescriptions":{}}},"id":8375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5000:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8380,"nodeType":"IfStatement","src":"4996:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8377,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"5036:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5036:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8379,"nodeType":"RevertStatement","src":"5029:19:15"}},{"assignments":[8382],"declarations":[{"constant":false,"id":8382,"mutability":"mutable","name":"decimals","nameLocation":"5161:8:15","nodeType":"VariableDeclaration","scope":8410,"src":"5153:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8381,"name":"uint256","nodeType":"ElementaryTypeName","src":"5153:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8390,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":8389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":8384,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"5187:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8383,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"5172:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2615_$","typeString":"type(contract IERC20Metadata)"}},"id":8385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5172:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$2615","typeString":"contract IERC20Metadata"}},"id":8386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5197:8:15","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":2614,"src":"5172:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":8387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5172:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":8388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5210:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5172:39:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"5153:58:15"},{"assignments":[8392],"declarations":[{"constant":false,"id":8392,"mutability":"mutable","name":"rate","nameLocation":"5229:4:15","nodeType":"VariableDeclaration","scope":8410,"src":"5221:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8391,"name":"uint256","nodeType":"ElementaryTypeName","src":"5221:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8397,"initialValue":{"arguments":[{"id":8395,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8347,"src":"5249:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8393,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5236:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}},"id":8394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5241:7:15","memberName":"getRate","nodeType":"MemberAccess","referencedDeclaration":8225,"src":"5236:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5236:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5221:37:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8398,"name":"rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8392,"src":"5276:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":8399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8349,"src":"5283:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5276:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":8401,"name":"bonusPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7993,"src":"5291:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5276:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":8403,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5275:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":8404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5308:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":8405,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8382,"src":"5314:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5308:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":8407,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5307:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5275:48:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8353,"id":8409,"nodeType":"Return","src":"5268:55:15"}]},"functionSelector":"a7cd2448","id":8411,"implemented":true,"kind":"function","modifiers":[],"name":"getResultAmount","nameLocation":"4778:15:15","nodeType":"FunctionDefinition","parameters":{"id":8350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8347,"mutability":"mutable","name":"currency","nameLocation":"4811:8:15","nodeType":"VariableDeclaration","scope":8411,"src":"4803:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8346,"name":"address","nodeType":"ElementaryTypeName","src":"4803:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8349,"mutability":"mutable","name":"value","nameLocation":"4837:5:15","nodeType":"VariableDeclaration","scope":8411,"src":"4829:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8348,"name":"uint256","nodeType":"ElementaryTypeName","src":"4829:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4793:55:15"},"returnParameters":{"id":8353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8411,"src":"4872:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8351,"name":"uint256","nodeType":"ElementaryTypeName","src":"4872:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4871:9:15"},"scope":8709,"src":"4769:561:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8511,"nodeType":"Block","src":"5420:728:15","statements":[{"assignments":[8423],"declarations":[{"constant":false,"id":8423,"mutability":"mutable","name":"amount","nameLocation":"5438:6:15","nodeType":"VariableDeclaration","scope":8511,"src":"5430:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8422,"name":"uint256","nodeType":"ElementaryTypeName","src":"5430:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8429,"initialValue":{"arguments":[{"id":8426,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8413,"src":"5468:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"5478:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8424,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5447:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}},"id":8425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5452:15:15","memberName":"getResultAmount","nodeType":"MemberAccess","referencedDeclaration":8411,"src":"5447:20:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":8428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5430:54:15"},{"assignments":[8431],"declarations":[{"constant":false,"id":8431,"mutability":"mutable","name":"buyerBalance","nameLocation":"5502:12:15","nodeType":"VariableDeclaration","scope":8511,"src":"5494:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8430,"name":"uint256","nodeType":"ElementaryTypeName","src":"5494:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8439,"initialValue":{"arguments":[{"expression":{"id":8436,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5545:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5549:6:15","memberName":"sender","nodeType":"MemberAccess","src":"5545:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8433,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8413,"src":"5525:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8432,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"5518:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5535:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"5518:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5518:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5494:62:15"},{"assignments":[8441],"declarations":[{"constant":false,"id":8441,"mutability":"mutable","name":"managerBalance","nameLocation":"5574:14:15","nodeType":"VariableDeclaration","scope":8511,"src":"5566:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8440,"name":"uint256","nodeType":"ElementaryTypeName","src":"5566:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8451,"initialValue":{"arguments":[{"arguments":[{"id":8448,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5632:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5624:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8446,"name":"address","nodeType":"ElementaryTypeName","src":"5624:7:15","typeDescriptions":{}}},"id":8449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5624:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8443,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"5599:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8442,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"5592:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5614:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"5592:31:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5566:72:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8452,"name":"buyerBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8431,"src":"5653:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"5668:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5653:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8463,"nodeType":"IfStatement","src":"5648:108:15","trueBody":{"errorCall":{"arguments":[{"expression":{"id":8456,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5714:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5718:6:15","memberName":"sender","nodeType":"MemberAccess","src":"5714:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8458,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8413,"src":"5726:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8459,"name":"buyerBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8431,"src":"5736:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"5750:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8455,"name":"UnsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7975,"src":"5694:19:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) pure"}},"id":8461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5694:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8462,"nodeType":"RevertStatement","src":"5687:69:15"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8464,"name":"managerBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8441,"src":"5771:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":8465,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8423,"src":"5788:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5771:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8471,"nodeType":"IfStatement","src":"5766:83:15","trueBody":{"errorCall":{"arguments":[{"id":8468,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8423,"src":"5842:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8467,"name":"UnsufficientManagerBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7979,"src":"5815:26:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":8469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5815:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8470,"nodeType":"RevertStatement","src":"5808:41:15"}},{"condition":{"id":8484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5863:64:15","subExpression":{"arguments":[{"expression":{"id":8476,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5894:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5898:6:15","memberName":"sender","nodeType":"MemberAccess","src":"5894:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":8480,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5914:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5906:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8478,"name":"address","nodeType":"ElementaryTypeName","src":"5906:7:15","typeDescriptions":{}}},"id":8481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5906:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"5921:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8473,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8413,"src":"5871:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8472,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"5864:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5864:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5881:12:15","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2588,"src":"5864:29:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":8483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5864:63:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8487,"nodeType":"IfStatement","src":"5859:94:15","trueBody":{"expression":{"hexValue":"66616c7365","id":8485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5948:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":8421,"id":8486,"nodeType":"Return","src":"5941:12:15"}},{"assignments":[8489],"declarations":[{"constant":false,"id":8489,"mutability":"mutable","name":"transferred","nameLocation":"5968:11:15","nodeType":"VariableDeclaration","scope":8511,"src":"5963:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8488,"name":"bool","nodeType":"ElementaryTypeName","src":"5963:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":8498,"initialValue":{"arguments":[{"expression":{"id":8494,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6013:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6017:6:15","memberName":"sender","nodeType":"MemberAccess","src":"6013:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8496,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8423,"src":"6025:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8491,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"5989:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8490,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"5982:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6004:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2556,"src":"5982:30:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:50:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"5963:69:15"},{"condition":{"id":8499,"name":"transferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8489,"src":"6046:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8508,"nodeType":"IfStatement","src":"6042:71:15","trueBody":{"eventCall":{"arguments":[{"expression":{"id":8501,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6077:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6081:6:15","memberName":"sender","nodeType":"MemberAccess","src":"6077:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8503,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8413,"src":"6089:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8415,"src":"6099:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8505,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8423,"src":"6106:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8500,"name":"BoughtTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7989,"src":"6064:12:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":8506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6064:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8507,"nodeType":"EmitStatement","src":"6059:54:15"}},{"expression":{"id":8509,"name":"transferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8489,"src":"6130:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":8421,"id":8510,"nodeType":"Return","src":"6123:18:15"}]},"functionSelector":"cce7ec13","id":8512,"implemented":true,"kind":"function","modifiers":[{"id":8418,"kind":"modifierInvocation","modifierName":{"id":8417,"name":"whenNotPaused","nameLocations":["5391:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"5391:13:15"},"nodeType":"ModifierInvocation","src":"5391:13:15"}],"name":"buy","nameLocation":"5345:3:15","nodeType":"FunctionDefinition","parameters":{"id":8416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8413,"mutability":"mutable","name":"currency","nameLocation":"5357:8:15","nodeType":"VariableDeclaration","scope":8512,"src":"5349:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8412,"name":"address","nodeType":"ElementaryTypeName","src":"5349:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8415,"mutability":"mutable","name":"value","nameLocation":"5375:5:15","nodeType":"VariableDeclaration","scope":8512,"src":"5367:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8414,"name":"uint256","nodeType":"ElementaryTypeName","src":"5367:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5348:33:15"},"returnParameters":{"id":8421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8512,"src":"5414:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8419,"name":"bool","nodeType":"ElementaryTypeName","src":"5414:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5413:6:15"},"scope":8709,"src":"5336:812:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8537,"nodeType":"Block","src":"6223:112:15","statements":[{"condition":{"id":8523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6237:23:15","subExpression":{"arguments":[{"id":8521,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8514,"src":"6251:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":8519,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6238:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}},"id":8520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6243:7:15","memberName":"hasRate","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"6238:12:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":8522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6238:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8526,"nodeType":"IfStatement","src":"6233:37:15","trueBody":{"expression":{"hexValue":"30","id":8524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6269:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":8518,"id":8525,"nodeType":"Return","src":"6262:8:15"}},{"expression":{"arguments":[{"arguments":[{"id":8533,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6322:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6314:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8531,"name":"address","nodeType":"ElementaryTypeName","src":"6314:7:15","typeDescriptions":{}}},"id":8534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6314:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8528,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8514,"src":"6294:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8527,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"6287:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6287:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6304:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"6287:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6287:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8518,"id":8536,"nodeType":"Return","src":"6280:48:15"}]},"functionSelector":"70a08231","id":8538,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"6163:9:15","nodeType":"FunctionDefinition","parameters":{"id":8515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8514,"mutability":"mutable","name":"currency","nameLocation":"6181:8:15","nodeType":"VariableDeclaration","scope":8538,"src":"6173:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8513,"name":"address","nodeType":"ElementaryTypeName","src":"6173:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6172:18:15"},"returnParameters":{"id":8518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8538,"src":"6214:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8516,"name":"uint256","nodeType":"ElementaryTypeName","src":"6214:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6213:9:15"},"scope":8709,"src":"6154:181:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8570,"nodeType":"Block","src":"6418:194:15","statements":[{"condition":{"id":8564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6445:120:15","subExpression":{"arguments":[{"id":8553,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8542,"src":"6489:3:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":8560,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6545:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6537:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8558,"name":"address","nodeType":"ElementaryTypeName","src":"6537:7:15","typeDescriptions":{}}},"id":8561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6537:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8555,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8540,"src":"6517:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8554,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"6510:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6510:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6527:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"6510:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6510:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8550,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8540,"src":"6453:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8549,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"6446:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6446:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6463:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2556,"src":"6446:25:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6446:119:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8569,"nodeType":"IfStatement","src":"6428:177:15","trueBody":{"errorCall":{"arguments":[{"id":8566,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8540,"src":"6596:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8565,"name":"CannotRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7953,"src":"6583:12:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":8567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8568,"nodeType":"RevertStatement","src":"6576:29:15"}}]},"functionSelector":"bba06f27","id":8571,"implemented":true,"kind":"function","modifiers":[{"id":8545,"kind":"modifierInvocation","modifierName":{"id":8544,"name":"onlyOwner","nameLocations":["6397:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"6397:9:15"},"nodeType":"ModifierInvocation","src":"6397:9:15"},{"id":8547,"kind":"modifierInvocation","modifierName":{"id":8546,"name":"whenPaused","nameLocations":["6407:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"6407:10:15"},"nodeType":"ModifierInvocation","src":"6407:10:15"}],"name":"redeem","nameLocation":"6350:6:15","nodeType":"FunctionDefinition","parameters":{"id":8543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8540,"mutability":"mutable","name":"currency","nameLocation":"6365:8:15","nodeType":"VariableDeclaration","scope":8571,"src":"6357:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8539,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8542,"mutability":"mutable","name":"_to","nameLocation":"6383:3:15","nodeType":"VariableDeclaration","scope":8571,"src":"6375:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8541,"name":"address","nodeType":"ElementaryTypeName","src":"6375:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6356:31:15"},"returnParameters":{"id":8548,"nodeType":"ParameterList","parameters":[],"src":"6418:0:15"},"scope":8709,"src":"6341:271:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8597,"nodeType":"Block","src":"6711:135:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8580,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"6725:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6750:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6742:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8581,"name":"address","nodeType":"ElementaryTypeName","src":"6742:7:15","typeDescriptions":{}}},"id":8584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6742:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6725:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8589,"nodeType":"IfStatement","src":"6721:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8586,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"6761:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6761:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8588,"nodeType":"RevertStatement","src":"6754:19:15"}},{"expression":{"arguments":[{"id":8594,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8573,"src":"6826:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8591,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"6798:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8590,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"6783:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManaged_$2073_$","typeString":"type(contract IAccessManaged)"}},"id":8592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6783:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessManaged_$2073","typeString":"contract IAccessManaged"}},"id":8593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6813:12:15","memberName":"setAuthority","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"6783:42:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":8595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6783:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8596,"nodeType":"ExpressionStatement","src":"6783:56:15"}]},"functionSelector":"3078db6c","id":8598,"implemented":true,"kind":"function","modifiers":[{"id":8576,"kind":"modifierInvocation","modifierName":{"id":8575,"name":"onlyOwner","nameLocations":["6690:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"6690:9:15"},"nodeType":"ModifierInvocation","src":"6690:9:15"},{"id":8578,"kind":"modifierInvocation","modifierName":{"id":8577,"name":"whenPaused","nameLocations":["6700:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"6700:10:15"},"nodeType":"ModifierInvocation","src":"6700:10:15"}],"name":"transferAuthority","nameLocation":"6627:17:15","nodeType":"FunctionDefinition","parameters":{"id":8574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8573,"mutability":"mutable","name":"newAuthority","nameLocation":"6662:12:15","nodeType":"VariableDeclaration","scope":8598,"src":"6654:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8572,"name":"address","nodeType":"ElementaryTypeName","src":"6654:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6644:36:15"},"returnParameters":{"id":8579,"nodeType":"ParameterList","parameters":[],"src":"6711:0:15"},"scope":8709,"src":"6618:228:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8707,"nodeType":"Block","src":"6964:722:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8609,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"6978:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7003:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6995:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8610,"name":"address","nodeType":"ElementaryTypeName","src":"6995:7:15","typeDescriptions":{}}},"id":8613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6995:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6978:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8618,"nodeType":"IfStatement","src":"6974:52:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":8615,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"7014:10:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":8616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7014:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8617,"nodeType":"RevertStatement","src":"7007:19:15"}},{"expression":{"arguments":[{"id":8623,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8602,"src":"7079:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8620,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"7051:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8619,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"7036:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManaged_$2073_$","typeString":"type(contract IAccessManaged)"}},"id":8621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7036:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessManaged_$2073","typeString":"contract IAccessManaged"}},"id":8622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7066:12:15","memberName":"setAuthority","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"7036:42:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":8624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7036:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8625,"nodeType":"ExpressionStatement","src":"7036:56:15"},{"condition":{"id":8641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7119:139:15","subExpression":{"arguments":[{"id":8630,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8602,"src":"7168:12:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":8637,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7238:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7230:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8635,"name":"address","nodeType":"ElementaryTypeName","src":"7230:7:15","typeDescriptions":{}}},"id":8638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7230:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8632,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"7205:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8631,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7198:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7198:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7220:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"7198:31:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7198:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8627,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"7127:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8626,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7120:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7120:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7142:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2556,"src":"7120:30:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7120:138:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8646,"nodeType":"IfStatement","src":"7102:203:15","trueBody":{"errorCall":{"arguments":[{"id":8643,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7991,"src":"7291:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8642,"name":"CannotTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"7276:14:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":8644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8645,"nodeType":"RevertStatement","src":"7269:36:15"}},{"assignments":[8648],"declarations":[{"constant":false,"id":8648,"mutability":"mutable","name":"i","nameLocation":"7324:1:15","nodeType":"VariableDeclaration","scope":8707,"src":"7316:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8647,"name":"uint256","nodeType":"ElementaryTypeName","src":"7316:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8649,"nodeType":"VariableDeclarationStatement","src":"7316:9:15"},{"assignments":[8651],"declarations":[{"constant":false,"id":8651,"mutability":"mutable","name":"balance","nameLocation":"7343:7:15","nodeType":"VariableDeclaration","scope":8707,"src":"7335:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8650,"name":"uint256","nodeType":"ElementaryTypeName","src":"7335:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8652,"nodeType":"VariableDeclarationStatement","src":"7335:15:15"},{"body":{"id":8701,"nodeType":"Block","src":"7402:251:15","statements":[{"assignments":[8666,null],"declarations":[{"constant":false,"id":8666,"mutability":"mutable","name":"currency","nameLocation":"7425:8:15","nodeType":"VariableDeclaration","scope":8701,"src":"7417:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8665,"name":"address","nodeType":"ElementaryTypeName","src":"7417:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":8671,"initialValue":{"arguments":[{"id":8669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"7453:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":8667,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"7439:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7450:2:15","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":6733,"src":"7439:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$_t_uint256_$returns$_t_address_$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer,uint256) view returns (address,uint256)"}},"id":8670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7439:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7416:39:15"},{"expression":{"id":8682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8672,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8651,"src":"7469:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":8679,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7514:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PresaleManager_$8709","typeString":"contract PresaleManager"}],"id":8678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7506:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8677,"name":"address","nodeType":"ElementaryTypeName","src":"7506:7:15","typeDescriptions":{}}},"id":8680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7506:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":8674,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8666,"src":"7486:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8673,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7479:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7479:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7496:9:15","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":2546,"src":"7479:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":8681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7479:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7469:51:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8683,"nodeType":"ExpressionStatement","src":"7469:51:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":8695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8684,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8651,"src":"7538:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":8685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7548:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7538:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":8694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7553:40:15","subExpression":{"arguments":[{"id":8691,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8600,"src":"7580:3:15","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":8692,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8651,"src":"7585:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8688,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8666,"src":"7561:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8687,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"7554:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2589_$","typeString":"type(contract IERC20)"}},"id":8689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7554:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2589","typeString":"contract IERC20"}},"id":8690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7571:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2556,"src":"7554:25:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":8693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7554:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7538:55:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8700,"nodeType":"IfStatement","src":"7534:108:15","trueBody":{"errorCall":{"arguments":[{"id":8697,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8666,"src":"7633:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8696,"name":"CannotTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7957,"src":"7618:14:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":8698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7618:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8699,"nodeType":"RevertStatement","src":"7611:31:15"}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8657,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"7372:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8658,"name":"currencies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7996,"src":"7376:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressToUintMap_$6591_storage","typeString":"struct EnumerableMap.AddressToUintMap storage ref"}},"id":8659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7387:6:15","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":6693,"src":"7376:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressToUintMap_$6591_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_AddressToUintMap_$6591_storage_ptr_$","typeString":"function (struct EnumerableMap.AddressToUintMap storage pointer) view returns (uint256)"}},"id":8660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7376:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7372:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8702,"initializationExpression":{"expression":{"id":8655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8653,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"7365:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":8654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7369:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7365:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8656,"nodeType":"ExpressionStatement","src":"7365:5:15"},"loopExpression":{"expression":{"id":8663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7397:3:15","subExpression":{"id":8662,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8648,"src":"7397:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8664,"nodeType":"ExpressionStatement","src":"7397:3:15"},"nodeType":"ForStatement","src":"7360:293:15"},{"expression":{"arguments":[{"id":8704,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8600,"src":"7675:3:15","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":8703,"name":"selfdestruct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-21,"src":"7662:12:15","typeDescriptions":{"typeIdentifier":"t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$","typeString":"function (address payable)"}},"id":8705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7662:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8706,"nodeType":"ExpressionStatement","src":"7662:17:15"}]},"functionSelector":"62b40f9f","id":8708,"implemented":true,"kind":"function","modifiers":[{"id":8605,"kind":"modifierInvocation","modifierName":{"id":8604,"name":"onlyOwner","nameLocations":["6943:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"6943:9:15"},"nodeType":"ModifierInvocation","src":"6943:9:15"},{"id":8607,"kind":"modifierInvocation","modifierName":{"id":8606,"name":"whenPaused","nameLocations":["6953:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":3035,"src":"6953:10:15"},"nodeType":"ModifierInvocation","src":"6953:10:15"}],"name":"destroy","nameLocation":"6861:7:15","nodeType":"FunctionDefinition","parameters":{"id":8603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8600,"mutability":"mutable","name":"_to","nameLocation":"6894:3:15","nodeType":"VariableDeclaration","scope":8708,"src":"6878:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":8599,"name":"address","nodeType":"ElementaryTypeName","src":"6878:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":8602,"mutability":"mutable","name":"newAuthority","nameLocation":"6915:12:15","nodeType":"VariableDeclaration","scope":8708,"src":"6907:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8601,"name":"address","nodeType":"ElementaryTypeName","src":"6907:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6868:65:15"},"returnParameters":{"id":8608,"nodeType":"ParameterList","parameters":[],"src":"6964:0:15"},"scope":8709,"src":"6852:834:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":8710,"src":"830:6858:15","usedErrors":[13,18,2187,2191,2195,2199,2203,2207,2209,2215,2223,2227,2237,2241,2623,2628,2631,3007,3010,4166,5925,7939,7941,7943,7947,7949,7953,7957,7961,7963,7965,7975,7979],"usedEvents":[24,2094,2101,2108,2115,2128,2135,2142,2149,2158,2165,2174,2183,2999,3004,7989]}],"src":"36:7653:15"},"id":15},"contracts/tokens/IFreezable.sol":{"ast":{"absolutePath":"contracts/tokens/IFreezable.sol","exportedSymbols":{"IFreezable":[8750]},"id":8751,"license":"Private","nodeType":"SourceUnit","nodes":[{"id":8711,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"36:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IFreezable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8750,"linearizedBaseContracts":[8750],"name":"IFreezable","nameLocation":"72:10:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":8712,"nodeType":"StructuredDocumentation","src":"89:119:16","text":" @dev Indicates an error when freezed address called function\n @param account Address who calls"},"errorSelector":"8e8697df","id":8716,"name":"EnforcedFreeze","nameLocation":"219:14:16","nodeType":"ErrorDefinition","parameters":{"id":8715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8714,"mutability":"mutable","name":"account","nameLocation":"242:7:16","nodeType":"VariableDeclaration","scope":8716,"src":"234:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8713,"name":"address","nodeType":"ElementaryTypeName","src":"234:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"233:17:16"},"src":"213:38:16"},{"documentation":{"id":8717,"nodeType":"StructuredDocumentation","src":"257:80:16","text":" @dev The operation failed because the address is not freezed."},"errorSelector":"0911d4c7","id":8721,"name":"ExpectedFreeze","nameLocation":"348:14:16","nodeType":"ErrorDefinition","parameters":{"id":8720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8719,"mutability":"mutable","name":"account","nameLocation":"371:7:16","nodeType":"VariableDeclaration","scope":8721,"src":"363:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8718,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"362:17:16"},"src":"342:38:16"},{"anonymous":false,"documentation":{"id":8722,"nodeType":"StructuredDocumentation","src":"386:74:16","text":" @dev Emitted when the freeze is triggered by `account`."},"eventSelector":"0de8364a528e5ca2869160b20c375fe85b4e98d24a9cb48b4dc49c5f76d05b24","id":8726,"name":"Freezed","nameLocation":"471:7:16","nodeType":"EventDefinition","parameters":{"id":8725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8724,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"495:7:16","nodeType":"VariableDeclaration","scope":8726,"src":"479:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8723,"name":"address","nodeType":"ElementaryTypeName","src":"479:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"478:25:16"},"src":"465:39:16"},{"anonymous":false,"documentation":{"id":8727,"nodeType":"StructuredDocumentation","src":"510:71:16","text":" @dev Emitted when the freeze is lifted by `account`."},"eventSelector":"4d1fe3cc0f516ce2cfc5e83d52ee28af7f55376b18f58e7081c5fd25d8eeb1df","id":8731,"name":"Unfreezed","nameLocation":"592:9:16","nodeType":"EventDefinition","parameters":{"id":8730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8729,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"618:7:16","nodeType":"VariableDeclaration","scope":8731,"src":"602:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8728,"name":"address","nodeType":"ElementaryTypeName","src":"602:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"601:25:16"},"src":"586:41:16"},{"documentation":{"id":8732,"nodeType":"StructuredDocumentation","src":"633:162:16","text":" @dev Returns true if the address is freezed, and false otherwise.\n Requirements:\n  @param target The verified address"},"functionSelector":"406f11f5","id":8739,"implemented":false,"kind":"function","modifiers":[],"name":"freezed","nameLocation":"809:7:16","nodeType":"FunctionDefinition","parameters":{"id":8735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8734,"mutability":"mutable","name":"target","nameLocation":"825:6:16","nodeType":"VariableDeclaration","scope":8739,"src":"817:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8733,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"816:16:16"},"returnParameters":{"id":8738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8739,"src":"856:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8736,"name":"bool","nodeType":"ElementaryTypeName","src":"856:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"855:6:16"},"scope":8750,"src":"800:62:16","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8d1fdf2f","id":8744,"implemented":false,"kind":"function","modifiers":[],"name":"freeze","nameLocation":"877:6:16","nodeType":"FunctionDefinition","parameters":{"id":8742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8741,"mutability":"mutable","name":"target","nameLocation":"892:6:16","nodeType":"VariableDeclaration","scope":8744,"src":"884:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8740,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"883:16:16"},"returnParameters":{"id":8743,"nodeType":"ParameterList","parameters":[],"src":"908:0:16"},"scope":8750,"src":"868:41:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"45c8b1a6","id":8749,"implemented":false,"kind":"function","modifiers":[],"name":"unfreeze","nameLocation":"924:8:16","nodeType":"FunctionDefinition","parameters":{"id":8747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8746,"mutability":"mutable","name":"target","nameLocation":"941:6:16","nodeType":"VariableDeclaration","scope":8749,"src":"933:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8745,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"932:16:16"},"returnParameters":{"id":8748,"nodeType":"ParameterList","parameters":[],"src":"957:0:16"},"scope":8750,"src":"915:43:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":8751,"src":"62:898:16","usedErrors":[8716,8721],"usedEvents":[8726,8731]}],"src":"36:925:16"},"id":16}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/AccessManager.sol":{"AccessManager":{"abi":[{"inputs":[{"internalType":"address","name":"initialAdmin","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerAlreadyScheduled","type":"error"},{"inputs":[],"name":"AccessManagerBadConfirmation","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerExpired","type":"error"},{"inputs":[{"internalType":"address","name":"initialAdmin","type":"address"}],"name":"AccessManagerInvalidInitialAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AccessManagerLockedAccount","type":"error"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerLockedRole","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotReady","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotScheduled","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCall","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCancel","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AccessManagerUnauthorizedConsume","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"schedule","type":"uint48"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"OperationScheduled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"admin","type":"uint64"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"RoleGrantDelayChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"},{"indexed":false,"internalType":"bool","name":"newMember","type":"bool"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"RoleGuardianChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"string","name":"label","type":"string"}],"name":"RoleLabel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"TargetAdminDelayUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"closed","type":"bool"}],"name":"TargetClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"TargetFunctionRoleUpdated","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_ROLE","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"canCall","outputs":[{"internalType":"bool","name":"immediate","type":"bool"},{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"cancel","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"consumeScheduledOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"execute","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"expiration","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"getAccess","outputs":[{"internalType":"uint48","name":"since","type":"uint48"},{"internalType":"uint32","name":"currentDelay","type":"uint32"},{"internalType":"uint32","name":"pendingDelay","type":"uint32"},{"internalType":"uint48","name":"effect","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getNonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleAdmin","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGrantDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGuardian","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getSchedule","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"getTargetAdminDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getTargetFunctionRole","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"isMember","type":"bool"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"hashOperation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"isTargetClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"string","name":"label","type":"string"}],"name":"labelRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minSetback","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint48","name":"when","type":"uint48"}],"name":"schedule","outputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"},{"internalType":"uint32","name":"nonce","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setGrantDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"admin","type":"uint64"}],"name":"setRoleAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"setRoleGuardian","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setTargetAdminDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"closed","type":"bool"}],"name":"setTargetClosed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"setTargetFunctionRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"address","name":"newAuthority","type":"address"}],"name":"updateAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"AccessManager is a central contract to store the permissions of a system. A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted} modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be effectively restricted. The restriction rules for such functions are defined in terms of \"roles\" identified by an `uint64` and scoped by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}). For each target contract, admins can configure the following without any delay: * The target's {AccessManaged-authority} via {updateAuthority}. * Close or open a target via {setTargetClosed} keeping the permissions intact. * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}. By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise. Additionally, each role has the following configuration options restricted to this manager's admins: * A role's admin role via {setRoleAdmin} who can grant or revoke roles. * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations. * A delay in which a role takes effect after being granted through {setGrantDelay}. * A delay of any target's admin action via {setTargetAdminDelay}. * A role label for discoverability purposes with {labelRole}. Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions restricted to each role's admin (see {getRoleAdmin}). Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that they will be highly secured (e.g., a multisig or a well-configured DAO). NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of the return data are a boolean as expected by that interface. NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}. Users will be able to interact with these contracts through the {execute} function, following the access rules registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions will be {AccessManager} itself. WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or {{AccessControl-renounceRole}}.","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}]},"events":{"OperationCanceled(bytes32,uint32)":{"details":"A scheduled operation was canceled."},"OperationExecuted(bytes32,uint32)":{"details":"A scheduled operation was executed."},"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)":{"details":"A delayed operation was scheduled."},"RoleAdminChanged(uint64,uint64)":{"details":"Role acting as admin over a given `roleId` is updated."},"RoleGrantDelayChanged(uint64,uint32,uint48)":{"details":"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"RoleGranted(uint64,address,uint32,uint48,bool)":{"details":"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated."},"RoleGuardianChanged(uint64,uint64)":{"details":"Role acting as guardian over a given `roleId` is updated."},"RoleLabel(uint64,string)":{"details":"Informational labelling for a roleId."},"RoleRevoked(uint64,address)":{"details":"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"TargetAdminDelayUpdated(address,uint32,uint48)":{"details":"Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"TargetClosed(address,bool)":{"details":"Target mode is updated (true = closed, false = open)."},"TargetFunctionRoleUpdated(address,bytes4,uint64)":{"details":"Role required to invoke `selector` on `target` is updated to `roleId`."}},"kind":"dev","methods":{"canCall(address,address,bytes4)":{"details":"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead."},"cancel(address,address,bytes)":{"details":"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event."},"consumeScheduledOp(address,bytes)":{"details":"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event."},"execute(address,bytes)":{"details":"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"expiration()":{"details":"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage."},"getAccess(uint64,address)":{"details":"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"getNonce(bytes32)":{"details":"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled."},"getRoleAdmin(uint64)":{"details":"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role."},"getRoleGrantDelay(uint64)":{"details":"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"getRoleGuardian(uint64)":{"details":"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role."},"getSchedule(bytes32)":{"details":"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled."},"getTargetAdminDelay(address)":{"details":"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"getTargetFunctionRole(address,bytes4)":{"details":"Get the role required to call a function."},"grantRole(uint64,address,uint32)":{"details":"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event."},"hasRole(uint64,address)":{"details":"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details."},"hashOperation(address,address,bytes)":{"details":"Hashing function for delayed operations."},"isTargetClosed(address)":{"details":"Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"labelRole(uint64,string)":{"details":"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event."},"minSetback()":{"details":"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days."},"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."},"renounceRole(uint64,address)":{"details":"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role."},"revokeRole(uint64,address)":{"details":"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role."},"schedule(address,bytes,uint48)":{"details":"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding."},"setGrantDelay(uint64,uint32)":{"details":"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event."},"setRoleAdmin(uint64,uint64)":{"details":"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event"},"setRoleGuardian(uint64,uint64)":{"details":"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event"},"setTargetAdminDelay(address,uint32)":{"details":"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event."},"setTargetClosed(address,bool)":{"details":"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event."},"setTargetFunctionRole(address,bytes4[],uint64)":{"details":"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector."},"updateAuthority(address,address)":{"details":"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin"}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_273":{"entryPoint":null,"id":273,"parameterSlots":1,"returnSlots":0},"@_getFullAt_7730":{"entryPoint":1084,"id":7730,"parameterSlots":2,"returnSlots":3},"@_grantRole_777":{"entryPoint":123,"id":777,"parameterSlots":4,"returnSlots":1},"@getFull_7750":{"entryPoint":1046,"id":7750,"parameterSlots":1,"returnSlots":3},"@get_7768":{"entryPoint":987,"id":7768,"parameterSlots":1,"returnSlots":1},"@max_3289":{"entryPoint":1020,"id":3289,"parameterSlots":2,"returnSlots":1},"@pack_7913":{"entryPoint":null,"id":7913,"parameterSlots":3,"returnSlots":1},"@timestamp_7661":{"entryPoint":722,"id":7661,"parameterSlots":0,"returnSlots":1},"@toDelay_7691":{"entryPoint":740,"id":7691,"parameterSlots":1,"returnSlots":1},"@toUint48_4911":{"entryPoint":930,"id":4911,"parameterSlots":1,"returnSlots":1},"@unpack_7875":{"entryPoint":null,"id":7875,"parameterSlots":1,"returnSlots":3},"@withUpdate_7824":{"entryPoint":749,"id":7824,"parameterSlots":3,"returnSlots":2},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":1167,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint48":{"entryPoint":1232,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint32":{"entryPoint":1273,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1210,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1851:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:17","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:17"},"nodeType":"YulFunctionCall","src":"143:12:17"},"nodeType":"YulExpressionStatement","src":"143:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:17"},"nodeType":"YulFunctionCall","src":"112:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:17"},"nodeType":"YulFunctionCall","src":"108:32:17"},"nodeType":"YulIf","src":"105:52:17"},{"nodeType":"YulVariableDeclaration","src":"166:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:17"},"nodeType":"YulFunctionCall","src":"179:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:17"},"nodeType":"YulFunctionCall","src":"260:12:17"},"nodeType":"YulExpressionStatement","src":"260:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:17"},"nodeType":"YulFunctionCall","src":"239:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:17"},"nodeType":"YulFunctionCall","src":"235:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:17"},"nodeType":"YulFunctionCall","src":"224:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:17"},"nodeType":"YulFunctionCall","src":"214:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:17"},"nodeType":"YulFunctionCall","src":"207:50:17"},"nodeType":"YulIf","src":"204:70:17"},{"nodeType":"YulAssignment","src":"283:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:17"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:17","type":""}],"src":"14:290:17"},{"body":{"nodeType":"YulBlock","src":"410:102:17","statements":[{"nodeType":"YulAssignment","src":"420:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"432:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"443:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"428:3:17"},"nodeType":"YulFunctionCall","src":"428:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"420:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"493:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"498:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"489:3:17"},"nodeType":"YulFunctionCall","src":"489:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"502:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"485:3:17"},"nodeType":"YulFunctionCall","src":"485:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"473:3:17"},"nodeType":"YulFunctionCall","src":"473:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"455:6:17"},"nodeType":"YulFunctionCall","src":"455:51:17"},"nodeType":"YulExpressionStatement","src":"455:51:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"379:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"390:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"401:4:17","type":""}],"src":"309:203:17"},{"body":{"nodeType":"YulBlock","src":"616:101:17","statements":[{"nodeType":"YulAssignment","src":"626:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"638:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"649:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"634:3:17"},"nodeType":"YulFunctionCall","src":"634:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"626:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"668:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"683:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"699:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"703:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"695:3:17"},"nodeType":"YulFunctionCall","src":"695:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"707:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"691:3:17"},"nodeType":"YulFunctionCall","src":"691:18:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"679:3:17"},"nodeType":"YulFunctionCall","src":"679:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"661:6:17"},"nodeType":"YulFunctionCall","src":"661:50:17"},"nodeType":"YulExpressionStatement","src":"661:50:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"585:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"596:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"607:4:17","type":""}],"src":"517:200:17"},{"body":{"nodeType":"YulBlock","src":"754:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"771:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"778:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"783:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"774:3:17"},"nodeType":"YulFunctionCall","src":"774:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"764:6:17"},"nodeType":"YulFunctionCall","src":"764:31:17"},"nodeType":"YulExpressionStatement","src":"764:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"811:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"814:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"804:6:17"},"nodeType":"YulFunctionCall","src":"804:15:17"},"nodeType":"YulExpressionStatement","src":"804:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"835:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"838:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"828:6:17"},"nodeType":"YulFunctionCall","src":"828:15:17"},"nodeType":"YulExpressionStatement","src":"828:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"722:127:17"},{"body":{"nodeType":"YulBlock","src":"901:129:17","statements":[{"nodeType":"YulVariableDeclaration","src":"911:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"921:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"915:2:17","type":""}]},{"nodeType":"YulAssignment","src":"944:34:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"959:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"962:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"955:3:17"},"nodeType":"YulFunctionCall","src":"955:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"971:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"974:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"967:3:17"},"nodeType":"YulFunctionCall","src":"967:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"951:3:17"},"nodeType":"YulFunctionCall","src":"951:27:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"944:3:17"}]},{"body":{"nodeType":"YulBlock","src":"1002:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1004:16:17"},"nodeType":"YulFunctionCall","src":"1004:18:17"},"nodeType":"YulExpressionStatement","src":"1004:18:17"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"993:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"998:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"990:2:17"},"nodeType":"YulFunctionCall","src":"990:11:17"},"nodeType":"YulIf","src":"987:37:17"}]},"name":"checked_add_t_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"884:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"887:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"893:3:17","type":""}],"src":"854:176:17"},{"body":{"nodeType":"YulBlock","src":"1182:216:17","statements":[{"nodeType":"YulAssignment","src":"1192:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1204:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1215:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1200:3:17"},"nodeType":"YulFunctionCall","src":"1200:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1192:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1234:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1249:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1257:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1245:3:17"},"nodeType":"YulFunctionCall","src":"1245:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1227:6:17"},"nodeType":"YulFunctionCall","src":"1227:42:17"},"nodeType":"YulExpressionStatement","src":"1227:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1289:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1300:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1285:3:17"},"nodeType":"YulFunctionCall","src":"1285:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1309:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1317:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1305:3:17"},"nodeType":"YulFunctionCall","src":"1305:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1278:6:17"},"nodeType":"YulFunctionCall","src":"1278:55:17"},"nodeType":"YulExpressionStatement","src":"1278:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1353:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1364:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1349:3:17"},"nodeType":"YulFunctionCall","src":"1349:18:17"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1383:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1376:6:17"},"nodeType":"YulFunctionCall","src":"1376:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1369:6:17"},"nodeType":"YulFunctionCall","src":"1369:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1342:6:17"},"nodeType":"YulFunctionCall","src":"1342:50:17"},"nodeType":"YulExpressionStatement","src":"1342:50:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1135:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1146:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1154:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1162:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1173:4:17","type":""}],"src":"1035:363:17"},{"body":{"nodeType":"YulBlock","src":"1451:127:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1461:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1471:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1465:2:17","type":""}]},{"nodeType":"YulAssignment","src":"1490:35:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1506:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1509:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1502:3:17"},"nodeType":"YulFunctionCall","src":"1502:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"1518:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1521:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1514:3:17"},"nodeType":"YulFunctionCall","src":"1514:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1498:3:17"},"nodeType":"YulFunctionCall","src":"1498:27:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1490:4:17"}]},{"body":{"nodeType":"YulBlock","src":"1550:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1552:16:17"},"nodeType":"YulFunctionCall","src":"1552:18:17"},"nodeType":"YulExpressionStatement","src":"1552:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"1540:4:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1546:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1537:2:17"},"nodeType":"YulFunctionCall","src":"1537:12:17"},"nodeType":"YulIf","src":"1534:38:17"}]},"name":"checked_sub_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1433:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"1436:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1442:4:17","type":""}],"src":"1403:175:17"},{"body":{"nodeType":"YulBlock","src":"1719:130:17","statements":[{"nodeType":"YulAssignment","src":"1729:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1741:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1752:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1737:3:17"},"nodeType":"YulFunctionCall","src":"1737:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1729:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1771:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1786:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1794:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1782:3:17"},"nodeType":"YulFunctionCall","src":"1782:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1764:6:17"},"nodeType":"YulFunctionCall","src":"1764:36:17"},"nodeType":"YulExpressionStatement","src":"1764:36:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1820:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1831:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1816:3:17"},"nodeType":"YulFunctionCall","src":"1816:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"1836:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1809:6:17"},"nodeType":"YulFunctionCall","src":"1809:34:17"},"nodeType":"YulExpressionStatement","src":"1809:34:17"}]},"name":"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1680:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1691:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1699:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1710:4:17","type":""}],"src":"1583:266:17"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint48(x, y) -> sum\n    {\n        let _1 := 0xffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function checked_sub_t_uint32(x, y) -> diff\n    {\n        let _1 := 0xffffffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162002f8338038062002f8383398101604081905262000034916200048f565b6001600160a01b0381166200006457604051630409d6d160e11b8152600060048201526024015b60405180910390fd5b6200007360008281806200007b565b505062000519565b60006002600160401b03196001600160401b03861601620000bb5760405163061c6a4360e21b81526001600160401b03861660048201526024016200005b565b6001600160401b03851660009081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff1615908115620001ba5763ffffffff85166200010a620002d2565b620001169190620004d0565b905060405180604001604052808265ffffffffffff168152602001620001488663ffffffff16620002e460201b60201c565b6001600160701b039081169091526001600160401b03891660009081526001602090815260408083206001600160a01b038c16845282529091208351815494909201519092166601000000000000026001600160a01b031990931665ffffffffffff9091161791909117905562000264565b6001600160401b03871660009081526001602090815260408083206001600160a01b038a168452909152812054620002099166010000000000009091046001600160701b0316908690620002ed565b6001600160401b03891660009081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316660100000000000002600160301b600160a01b03199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000620002df42620003a2565b905090565b63ffffffff1690565b60008080620003056001600160701b038716620003db565b90506000620003488563ffffffff168763ffffffff168463ffffffff1611620003305760006200033c565b6200033c8885620004f9565b63ffffffff16620003fc565b905063ffffffff81166200035b620002d2565b620003679190620004d0565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b600065ffffffffffff821115620003d7576040516306dfcc6560e41b815260306004820152602481018390526044016200005b565b5090565b600080620003f26001600160701b03841662000416565b5090949350505050565b60008183116200040d57816200040f565b825b9392505050565b600080806200042f8462000429620002d2565b6200043c565b9250925092509193909250565b600080806001600160501b03602086901c166001600160701b03861665ffffffffffff604088901c81169087168111156200047a578282826200047f565b816000805b9550955095505050509250925092565b600060208284031215620004a257600080fd5b81516001600160a01b03811681146200040f57600080fd5b634e487b7160e01b600052601160045260246000fd5b65ffffffffffff818116838216019080821115620004f257620004f2620004ba565b5092915050565b63ffffffff828116828216039080821115620004f257620004f2620004ba565b612a5a80620005296000396000f3fe6080604052600436106101e35760003560e01c80636d5115bd11610102578063b700961311610095578063d22b598911610064578063d22b5989146106bf578063d6bb62c6146106df578063f801a698146106ff578063fe0776f51461073957600080fd5b8063b70096131461062d578063b7d2b16214610669578063cc1b6c8114610689578063d1f856ee1461069f57600080fd5b8063a166aa89116100d1578063a166aa891461055f578063a64d95ce146105b2578063abd9bd2a146105d2578063ac9650d81461060057600080fd5b80636d5115bd146104b457806375b238fc1461050a578063853551b81461051f57806394c7d7ee1461053f57600080fd5b806330cae1871161017a5780634665096d116101495780634665096d146104215780634c1da1e2146104375780635296295214610457578063530dd4561461047757600080fd5b806330cae187146103725780633adc277a146103925780633ca7c02a146103c95780634136a33c146103e457600080fd5b806318ff183c116101b657806318ff183c146102c55780631cff79cd146102e557806325c471a0146102f85780633078f1141461031857600080fd5b806308d6122d146101e85780630b0a93ba1461020a57806312be872714610270578063167bd395146102a5575b600080fd5b3480156101f457600080fd5b506102086102033660046122d2565b610759565b005b34801561021657600080fd5b50610253610225366004612338565b6001600160401b03908116600090815260016020819052604090912001546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561027c57600080fd5b5061029061028b366004612338565b6107b4565b60405163ffffffff9091168152602001610267565b3480156102b157600080fd5b506102086102c0366004612353565b6107ef565b3480156102d157600080fd5b506102086102e0366004612391565b610805565b6102906102f3366004612400565b61086c565b34801561030457600080fd5b50610208610313366004612468565b6109d9565b34801561032457600080fd5b506103386103333660046124ad565b6109fb565b604051610267949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b34801561037e57600080fd5b5061020861038d3660046124c9565b610a63565b34801561039e57600080fd5b506103b26103ad3660046124fc565b610a75565b60405165ffffffffffff9091168152602001610267565b3480156103d557600080fd5b506102536001600160401b0381565b3480156103f057600080fd5b506102906103ff3660046124fc565b6000908152600260205260409020546601000000000000900463ffffffff1690565b34801561042d57600080fd5b5062093a80610290565b34801561044357600080fd5b50610290610452366004612515565b610aa8565b34801561046357600080fd5b506102086104723660046124c9565b610ad6565b34801561048357600080fd5b50610253610492366004612338565b6001600160401b03908116600090815260016020819052604090912001541690565b3480156104c057600080fd5b506102536104cf366004612548565b6001600160a01b0382166000908152602081815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b34801561051657600080fd5b50610253600081565b34801561052b57600080fd5b5061020861053a366004612576565b610ae8565b34801561054b57600080fd5b5061020861055a366004612400565b610b7f565b34801561056b57600080fd5b506105a261057a366004612515565b6001600160a01b0316600090815260208190526040902060010154600160701b900460ff1690565b6040519015158152602001610267565b3480156105be57600080fd5b506102086105cd366004612594565b610c2b565b3480156105de57600080fd5b506105f26105ed3660046125be565b610c3d565b604051908152602001610267565b34801561060c57600080fd5b5061062061061b366004612622565b610c76565b6040516102679190612687565b34801561063957600080fd5b5061064d610648366004612701565b610d68565b60408051921515835263ffffffff909116602083015201610267565b34801561067557600080fd5b506102086106843660046124ad565b610e68565b34801561069557600080fd5b5062069780610290565b3480156106ab57600080fd5b5061064d6106ba3660046124ad565b610e7f565b3480156106cb57600080fd5b506102086106da36600461274c565b610efc565b3480156106eb57600080fd5b506102906106fa3660046125be565b610f0e565b34801561070b57600080fd5b5061071f61071a36600461276a565b61109d565b6040805192835263ffffffff909116602083015201610267565b34801561074557600080fd5b506102086107543660046124ad565b6111e5565b61076161120e565b60005b828110156107ad5761079d85858584818110610782576107826127dc565b905060200201602081019061079791906127f2565b84611289565b6107a681612825565b9050610764565b5050505050565b6001600160401b0381166000908152600160208190526040822001546107e990600160801b90046001600160701b031661130b565b92915050565b6107f761120e565b610801828261132a565b5050565b61080d61120e565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b15801561085057600080fd5b505af1158015610864573d6000803e3d6000fd5b505050505050565b600033818061087d838888886113db565b9150915081158015610893575063ffffffff8116155b156108e65782876108a4888861142e565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b60006108f484898989610c3d565b9050600063ffffffff831615158061091b575061091082610a75565b65ffffffffffff1615155b1561092c5761092982611446565b90505b60035461097f8a61093d8b8b61142e565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b6003819055506109c78a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250611549915050565b506003559450505050505b9392505050565b6109e161120e565b6109f583836109ef866107b4565b846115e6565b50505050565b6001600160401b03821660009081526001602090815260408083206001600160a01b03851684529091528120805465ffffffffffff811692918291829190610a5590660100000000000090046001600160701b0316611852565b969991985096509350505050565b610a6b61120e565b6108018282611875565b60008181526002602052604081205465ffffffffffff16610a9581611919565b610a9f57806109d2565b60009392505050565b6001600160a01b0381166000908152602081905260408120600101546107e9906001600160701b031661130b565b610ade61120e565b6108018282611948565b610af061120e565b6001600160401b0383161580610b0e57506001600160401b03838116145b15610b375760405163061c6a4360e21b81526001600160401b03841660048201526024016108dd565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051610b72929190612867565b60405180910390a2505050565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190612883565b6001600160e01b03191614610c1757604051630641fee960e31b81526001600160a01b03821660048201526024016108dd565b6107ad610c2685838686610c3d565b611446565b610c3361120e565b61080182826119ff565b600084848484604051602001610c5694939291906128a0565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115610ca057610ca06128f7565b604051908082528060200260200182016040528015610cd357816020015b6060815260200190600190039081610cbe5790505b50915060005b83811015610d6057610d3030868684818110610cf757610cf76127dc565b9050602002810190610d09919061290d565b85604051602001610d1c93929190612953565b604051602081830303815290604052611b1e565b838281518110610d4257610d426127dc565b60200260200101819052508080610d5890612825565b915050610cd9565b505092915050565b6001600160a01b0382166000908152602081905260408120600101548190600160701b900460ff1615610da057506000905080610e60565b306001600160a01b03861603610dfc57604080516001600160a01b0386166020808301919091526001600160e01b031986168284015282518083038401815260609092019092528051910120600354145b600091509150610e60565b6001600160a01b0384166000908152602081815260408083206001600160e01b0319871684529091528120546001600160401b03169080610e3d8389610e7f565b9150915081610e4e57600080610e58565b63ffffffff811615815b945094505050505b935093915050565b610e7061120e565b610e7a8282611b94565b505050565b60008067fffffffffffffffe196001600160401b03851601610ea75750600190506000610ef5565b600080610eb486866109fb565b5050915091508165ffffffffffff16600014158015610eea5750610ed6611c8e565b65ffffffffffff168265ffffffffffff1611155b93509150610ef59050565b9250929050565b610f0461120e565b6108018282611c9e565b60003381610f1c858561142e565b90506000610f2c88888888610c3d565b60008181526002602052604081205491925065ffffffffffff9091169003610f6a5760405163060a299b60e41b8152600481018290526024016108dd565b826001600160a01b0316886001600160a01b031614611038576000610f90600085610e7f565b506001600160a01b0389166000908152602081815260408083206001600160e01b03198816845290915281205491925090610fdd90610fd7906001600160401b0316610225565b86610e7f565b50905081158015610fec575080155b1561103557604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b0319851660648201526084016108dd565b50505b600081815260026020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b60008033816110ae828989896113db565b91505060008163ffffffff166110c2611c8e565b6110cc919061297a565b905063ffffffff82161580611103575060008665ffffffffffff1611801561110357508065ffffffffffff168665ffffffffffff16105b156111145782896108a48a8a61142e565b61112e8665ffffffffffff168265ffffffffffff16611d5b565b955061113c838a8a8a610c3d565b945061114785611d71565b60008581526002602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b4906111d1908a9088908f908f908f906129a0565b60405180910390a350505094509492505050565b6001600160a01b0381163314610e7057604051635f159e6360e01b815260040160405180910390fd5b3360008061121d838236611dbe565b9150915081610e7a578063ffffffff166000036112795760006112408136611eb7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b038216602482015290925060440190506108dd565b6109f5610c268430600036610c3d565b6001600160a01b0383166000818152602081815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b600080611320836001600160701b0316611852565b5090949350505050565b306001600160a01b0383160361135e57604051630b40d17960e31b81526001600160a01b03831660048201526024016108dd565b6001600160a01b038216600081815260208190526040908190206001018054841515600160701b026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb138906113cf90841515815260200190565b60405180910390a25050565b600080306001600160a01b03861603611402576113f9868585611dbe565b91509150611425565b6004831061141e576114198686610648878761142e565b6113f9565b5060009050805b94509492505050565b600061143d60048284866128cd565b6109d2916129e6565b60008181526002602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036114925760405163060a299b60e41b8152600481018590526024016108dd565b61149a611c8e565b65ffffffffffff168265ffffffffffff1611156114cd57604051630c65b5bd60e11b8152600481018590526024016108dd565b6114d682611919565b156114f757604051631e2975b960e21b8152600481018590526024016108dd565b600084815260026020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561156e5760405163cd78605960e01b81523060048201526024016108dd565b600080856001600160a01b0316848660405161158a9190612a14565b60006040518083038185875af1925050503d80600081146115c7576040519150601f19603f3d011682016040523d82523d6000602084013e6115cc565b606091505b50915091506115dc8683836120a0565b9695505050505050565b600067fffffffffffffffe196001600160401b038616016116255760405163061c6a4360e21b81526001600160401b03861660048201526024016108dd565b6001600160401b03851660009081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff1615908115611727578463ffffffff16611671611c8e565b61167b919061297a565b905060405180604001604052808265ffffffffffff1681526020016116a98663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526001602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff909116179190911790556117e4565b6001600160401b03871660009081526001602090815260408083206001600160a01b038a1684529091528120546117749166010000000000009091046001600160701b03169086906120fc565b6001600160401b03891660009081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b600080600061186884611863611c8e565b6121a6565b9250925092509193909250565b6001600160401b038216158061189357506001600160401b03828116145b156118bc5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b038281166000818152600160208190526040808320909101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000611923611c8e565b65ffffffffffff1661193862093a808461297a565b65ffffffffffff16111592915050565b6001600160401b038216158061196657506001600160401b03828116145b1561198f5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b03828116600081815260016020819052604080832090910180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b67fffffffffffffffe196001600160401b03831601611a3c5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b038216600090815260016020819052604082200154611a7690600160801b90046001600160701b031683620697806120fc565b6001600160401b0385166000818152600160208190526040918290200180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890610b72908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051611b3b9190612a14565b600060405180830381855af49150503d8060008114611b76576040519150601f19603f3d011682016040523d82523d6000602084013e611b7b565b606091505b5091509150611b8b8583836120a0565b95945050505050565b600067fffffffffffffffe196001600160401b03841601611bd35760405163061c6a4360e21b81526001600160401b03841660048201526024016108dd565b6001600160401b03831660009081526001602090815260408083206001600160a01b038616845290915281205465ffffffffffff169003611c16575060006107e9565b6001600160401b03831660008181526001602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b6000611c99426121fa565b905090565b6001600160a01b038216600090815260208190526040812060010154611cd1906001600160701b031683620697806120fc565b6001600160a01b0385166000818152602081815260409182902060010180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101610b72565b6000818311611d6a57816109d2565b5090919050565b60008181526002602052604090205465ffffffffffff168015801590611d9d5750611d9b81611919565b155b156108015760405163813e945960e01b8152600481018390526024016108dd565b6000806004831015611dd557506000905080610e60565b306001600160a01b03861603611e3957610df130611df3868661142e565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206003541490565b6000806000611e488787611eb7565b92509250925082611e625760008094509450505050610e60565b600080611e6f848b610e7f565b9150915081611e8957600080965096505050505050610e60565b611e9f8363ffffffff168263ffffffff16611d5b565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015611ed257506000915081905080612099565b6000611ede868661142e565b90506001600160e01b031981166310a6aa3760e31b1480611f0f57506001600160e01b031981166330cae18760e01b145b80611f2a57506001600160e01b0319811663294b14a960e11b145b80611f4557506001600160e01b03198116635326cae760e11b145b80611f6057506001600160e01b0319811663d22b598960e01b145b15611f7657600160008093509350935050612099565b6001600160e01b0319811663063fc60f60e21b1480611fa557506001600160e01b0319811663167bd39560e01b145b80611fc057506001600160e01b031981166308d6122d60e01b145b15612002576000611fd560246004888a6128cd565b810190611fe29190612515565b90506000611fef82610aa8565b6001965060009550935061209992505050565b6001600160e01b0319811663012e238d60e51b148061203157506001600160e01b03198116635be958b160e11b145b1561208c57600061204660246004888a6128cd565b8101906120539190612338565b9050600161207d826001600160401b03908116600090815260016020819052604090912001541690565b60009450945094505050612099565b6000806000935093509350505b9250925092565b6060826120b5576120b082612231565b6109d2565b81511580156120cc57506001600160a01b0384163b155b156120f557604051639996b31560e01b81526001600160a01b03851660048201526024016108dd565b50806109d2565b6000806000612113866001600160701b031661130b565b905060006121508563ffffffff168763ffffffff168463ffffffff161161213b576000612145565b6121458885612a30565b63ffffffff16611d5b565b90508063ffffffff16612161611c8e565b61216b919061297a565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c81169087168111156121e5578282826121ea565b816000805b9550955095505050509250925092565b600065ffffffffffff82111561222d576040516306dfcc6560e41b815260306004820152602481018390526044016108dd565b5090565b8051156122415780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b038116811461225a57600080fd5b60008083601f84011261228457600080fd5b5081356001600160401b0381111561229b57600080fd5b6020830191508360208260051b8501011115610ef557600080fd5b80356001600160401b03811681146122cd57600080fd5b919050565b600080600080606085870312156122e857600080fd5b84356122f38161225d565b935060208501356001600160401b0381111561230e57600080fd5b61231a87828801612272565b909450925061232d9050604086016122b6565b905092959194509250565b60006020828403121561234a57600080fd5b6109d2826122b6565b6000806040838503121561236657600080fd5b82356123718161225d565b91506020830135801515811461238657600080fd5b809150509250929050565b600080604083850312156123a457600080fd5b82356123af8161225d565b915060208301356123868161225d565b60008083601f8401126123d157600080fd5b5081356001600160401b038111156123e857600080fd5b602083019150836020828501011115610ef557600080fd5b60008060006040848603121561241557600080fd5b83356124208161225d565b925060208401356001600160401b0381111561243b57600080fd5b612447868287016123bf565b9497909650939450505050565b803563ffffffff811681146122cd57600080fd5b60008060006060848603121561247d57600080fd5b612486846122b6565b925060208401356124968161225d565b91506124a460408501612454565b90509250925092565b600080604083850312156124c057600080fd5b6123af836122b6565b600080604083850312156124dc57600080fd5b6124e5836122b6565b91506124f3602084016122b6565b90509250929050565b60006020828403121561250e57600080fd5b5035919050565b60006020828403121561252757600080fd5b81356109d28161225d565b6001600160e01b03198116811461225a57600080fd5b6000806040838503121561255b57600080fd5b82356125668161225d565b9150602083013561238681612532565b60008060006040848603121561258b57600080fd5b612420846122b6565b600080604083850312156125a757600080fd5b6125b0836122b6565b91506124f360208401612454565b600080600080606085870312156125d457600080fd5b84356125df8161225d565b935060208501356125ef8161225d565b925060408501356001600160401b0381111561260a57600080fd5b612616878288016123bf565b95989497509550505050565b6000806020838503121561263557600080fd5b82356001600160401b0381111561264b57600080fd5b61265785828601612272565b90969095509350505050565b60005b8381101561267e578181015183820152602001612666565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156126f457878503603f19018452815180518087526126d5818989018a8501612663565b601f01601f1916959095018601945092850192908501906001016126ae565b5092979650505050505050565b60008060006060848603121561271657600080fd5b83356127218161225d565b925060208401356127318161225d565b9150604084013561274181612532565b809150509250925092565b6000806040838503121561275f57600080fd5b82356125b08161225d565b6000806000806060858703121561278057600080fd5b843561278b8161225d565b935060208501356001600160401b038111156127a657600080fd5b6127b2878288016123bf565b909450925050604085013565ffffffffffff811681146127d157600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561280457600080fd5b81356109d281612532565b634e487b7160e01b600052601160045260246000fd5b6000600182016128375761283761280f565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061287b60208301848661283e565b949350505050565b60006020828403121561289557600080fd5b81516109d281612532565b60006001600160a01b038087168352808616602084015250606060408301526115dc60608301848661283e565b600080858511156128dd57600080fd5b838611156128ea57600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261292457600080fd5b8301803591506001600160401b0382111561293e57600080fd5b602001915036819003821315610ef557600080fd5b828482376000838201600081528351612970818360208801612663565b0195945050505050565b65ffffffffffff8181168382160190808211156129995761299961280f565b5092915050565b65ffffffffffff8616815260006001600160a01b038087166020840152808616604084015250608060608301526129db60808301848661283e565b979650505050505050565b6001600160e01b03198135818116916004851015610d605760049490940360031b84901b1690921692915050565b60008251612a26818460208701612663565b9190910192915050565b63ffffffff8281168282160390808211156129995761299961280f56fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2F83 CODESIZE SUB DUP1 PUSH3 0x2F83 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x48F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x64 JUMPI PUSH1 0x40 MLOAD PUSH4 0x409D6D1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x73 PUSH1 0x0 DUP3 DUP2 DUP1 PUSH3 0x7B JUMP JUMPDEST POP POP PUSH3 0x519 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH3 0xBB JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0x5B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH3 0x1BA JUMPI PUSH4 0xFFFFFFFF DUP6 AND PUSH3 0x10A PUSH3 0x2D2 JUMP JUMPDEST PUSH3 0x116 SWAP2 SWAP1 PUSH3 0x4D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x148 DUP7 PUSH4 0xFFFFFFFF AND PUSH3 0x2E4 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH3 0x209 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH3 0x2ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2DF TIMESTAMP PUSH3 0x3A2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0x305 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH3 0x3DB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x348 DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH3 0x330 JUMPI PUSH1 0x0 PUSH3 0x33C JUMP JUMPDEST PUSH3 0x33C DUP9 DUP6 PUSH3 0x4F9 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH3 0x3FC JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH3 0x35B PUSH3 0x2D2 JUMP JUMPDEST PUSH3 0x367 SWAP2 SWAP1 PUSH3 0x4D0 JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x3D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x5B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x3F2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND PUSH3 0x416 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH3 0x40D JUMPI DUP2 PUSH3 0x40F JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0x42F DUP5 PUSH3 0x429 PUSH3 0x2D2 JUMP JUMPDEST PUSH3 0x43C JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH3 0x47A JUMPI DUP3 DUP3 DUP3 PUSH3 0x47F JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0x4F2 JUMPI PUSH3 0x4F2 PUSH3 0x4BA JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0x4F2 JUMPI PUSH3 0x4F2 PUSH3 0x4BA JUMP JUMPDEST PUSH2 0x2A5A DUP1 PUSH3 0x529 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6D5115BD GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xB7009613 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD22B5989 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD22B5989 EQ PUSH2 0x6BF JUMPI DUP1 PUSH4 0xD6BB62C6 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xF801A698 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0xFE0776F5 EQ PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7009613 EQ PUSH2 0x62D JUMPI DUP1 PUSH4 0xB7D2B162 EQ PUSH2 0x669 JUMPI DUP1 PUSH4 0xCC1B6C81 EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xD1F856EE EQ PUSH2 0x69F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA166AA89 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA166AA89 EQ PUSH2 0x55F JUMPI DUP1 PUSH4 0xA64D95CE EQ PUSH2 0x5B2 JUMPI DUP1 PUSH4 0xABD9BD2A EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6D5115BD EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0x853551B8 EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0x94C7D7EE EQ PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x30CAE187 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4665096D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4665096D EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x4C1DA1E2 EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x52962952 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x530DD456 EQ PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x30CAE187 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x3ADC277A EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x4136A33C EQ PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18FF183C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x18FF183C EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0x25C471A0 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x3078F114 EQ PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D6122D EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0xB0A93BA EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x12BE8727 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x167BD395 EQ PUSH2 0x2A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x22D2 JUMP JUMPDEST PUSH2 0x759 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH9 0x10000000000000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2353 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2391 JUMP JUMPDEST PUSH2 0x805 JUMP JUMPDEST PUSH2 0x290 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2400 JUMP JUMPDEST PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0x9D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x338 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x24FC JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x93A80 PUSH2 0x290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x2515 JUMP JUMPDEST PUSH2 0xAA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0xAD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x492 CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2548 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x2576 JUMP JUMPDEST PUSH2 0xAE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x55A CALLDATASIZE PUSH1 0x4 PUSH2 0x2400 JUMP JUMPDEST PUSH2 0xB7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A2 PUSH2 0x57A CALLDATASIZE PUSH1 0x4 PUSH2 0x2515 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x5CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2594 JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F2 PUSH2 0x5ED CALLDATASIZE PUSH1 0x4 PUSH2 0x25BE JUMP JUMPDEST PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x620 PUSH2 0x61B CALLDATASIZE PUSH1 0x4 PUSH2 0x2622 JUMP JUMPDEST PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x2687 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64D PUSH2 0x648 CALLDATASIZE PUSH1 0x4 PUSH2 0x2701 JUMP JUMPDEST PUSH2 0xD68 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xE68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x69780 PUSH2 0x290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64D PUSH2 0x6BA CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xE7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x274C JUMP JUMPDEST PUSH2 0xEFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x25BE JUMP JUMPDEST PUSH2 0xF0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F PUSH2 0x71A CALLDATASIZE PUSH1 0x4 PUSH2 0x276A JUMP JUMPDEST PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x11E5 JUMP JUMPDEST PUSH2 0x761 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7AD JUMPI PUSH2 0x79D DUP6 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x782 JUMPI PUSH2 0x782 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x797 SWAP2 SWAP1 PUSH2 0x27F2 JUMP JUMPDEST DUP5 PUSH2 0x1289 JUMP JUMPDEST PUSH2 0x7A6 DUP2 PUSH2 0x2825 JUMP JUMPDEST SWAP1 POP PUSH2 0x764 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x7E9 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7F7 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x132A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x80D PUSH2 0x120E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x864 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 DUP1 PUSH2 0x87D DUP4 DUP9 DUP9 DUP9 PUSH2 0x13DB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x893 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x8E6 JUMPI DUP3 DUP8 PUSH2 0x8A4 DUP9 DUP9 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x81C6F24B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8F4 DUP5 DUP10 DUP10 DUP10 PUSH2 0xC3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x91B JUMPI POP PUSH2 0x910 DUP3 PUSH2 0xA75 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x92C JUMPI PUSH2 0x929 DUP3 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x97F DUP11 PUSH2 0x93D DUP12 DUP12 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH2 0x9C7 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP CALLVALUE SWAP3 POP PUSH2 0x1549 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x3 SSTORE SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x9E1 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x9F5 DUP4 DUP4 PUSH2 0x9EF DUP7 PUSH2 0x7B4 JUMP JUMPDEST DUP5 PUSH2 0x15E6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0xA55 SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x1852 JUMP JUMPDEST SWAP7 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA6B PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1875 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0xA95 DUP2 PUSH2 0x1919 JUMP JUMPDEST PUSH2 0xA9F JUMPI DUP1 PUSH2 0x9D2 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7E9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST PUSH2 0xADE PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1948 JUMP JUMPDEST PUSH2 0xAF0 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0xB0E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0xB37 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH32 0x1256F5B5ECB89CAEC12DB449738F2FBCD1BA5806CF38F35413F4E5C15BF6A450 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xB72 SWAP3 SWAP2 SWAP1 PUSH2 0x2867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x8FB36037 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP4 SWAP2 PUSH4 0x8FB36037 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBE4 SWAP2 SWAP1 PUSH2 0x2883 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH4 0x641FEE9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x7AD PUSH2 0xC26 DUP6 DUP4 DUP7 DUP7 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC33 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x19FF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC56 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xCA0 JUMPI PUSH2 0xCA0 PUSH2 0x28F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCD3 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCBE JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD60 JUMPI PUSH2 0xD30 ADDRESS DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xCF7 JUMPI PUSH2 0xCF7 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xD09 SWAP2 SWAP1 PUSH2 0x290D JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD1C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2953 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1B1E JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD42 JUMPI PUSH2 0xD42 PUSH2 0x27DC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xD58 SWAP1 PUSH2 0x2825 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCD9 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xDA0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xE60 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0xDFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 DUP5 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SLOAD EQ JUMPDEST PUSH1 0x0 SWAP2 POP SWAP2 POP PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP1 PUSH2 0xE3D DUP4 DUP10 PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 PUSH2 0xE58 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO DUP2 JUMPDEST SWAP5 POP SWAP5 POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE70 PUSH2 0x120E JUMP JUMPDEST PUSH2 0xE7A DUP3 DUP3 PUSH2 0x1B94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND ADD PUSH2 0xEA7 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0xEF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB4 DUP7 DUP7 PUSH2 0x9FB JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0xEEA JUMPI POP PUSH2 0xED6 PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0xEF5 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xF1C DUP6 DUP6 PUSH2 0x142E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF2C DUP9 DUP9 DUP9 DUP9 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 SUB PUSH2 0xF6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1038 JUMPI PUSH1 0x0 PUSH2 0xF90 PUSH1 0x0 DUP6 PUSH2 0xE7F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xFDD SWAP1 PUSH2 0xFD7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x225 JUMP JUMPDEST DUP7 PUSH2 0xE7F JUMP JUMPDEST POP SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xFEC JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x1035 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFF89D47 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP1 DUP13 AND PUSH1 0x24 DUP4 ADD MSTORE DUP11 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP3 SWAP2 DUP5 SWAP2 PUSH32 0xBD9AC67A6E2F6463B80927326310338BCBB4BDB7936CE1365EA3E01067E7B9F7 SWAP2 LOG3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER DUP2 PUSH2 0x10AE DUP3 DUP10 DUP10 DUP10 PUSH2 0x13DB JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x10C2 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x10CC SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x1103 JUMPI POP PUSH1 0x0 DUP7 PUSH6 0xFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x1103 JUMPI POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP7 PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x1114 JUMPI DUP3 DUP10 PUSH2 0x8A4 DUP11 DUP11 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x112E DUP7 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST SWAP6 POP PUSH2 0x113C DUP4 DUP11 DUP11 DUP11 PUSH2 0xC3D JUMP JUMPDEST SWAP5 POP PUSH2 0x1147 DUP6 PUSH2 0x1D71 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND OR PUSH7 0x1000000000000 SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD SWAP1 DUP2 AND SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP1 SWAP6 POP DUP7 SWAP1 PUSH32 0x82A2DA5DEE54EA8021C6545B4444620291E07EE83BE6DD57EDB175062715F3B4 SWAP1 PUSH2 0x11D1 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5F159E63 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x121D DUP4 DUP3 CALLDATASIZE PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE7A JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x1279 JUMPI PUSH1 0x0 PUSH2 0x1240 DUP2 CALLDATASIZE PUSH2 0x1EB7 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xF07E038F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x9F5 PUSH2 0xC26 DUP5 ADDRESS PUSH1 0x0 CALLDATASIZE PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP3 DUP4 MSTORE SWAP3 SWAP2 PUSH32 0x9EA6790C7DADFD01C9F8B9762B3682607AF2C7E79E05A9F9FDF5580DDE949151 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1320 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x1852 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x135E JUMPI PUSH1 0x40 MLOAD PUSH4 0xB40D179 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP5 ISZERO ISZERO PUSH1 0x1 PUSH1 0x70 SHL MUL PUSH15 0xFF0000000000000000000000000000 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE MLOAD PUSH32 0x90D4E7BB7E5D933792B3562E1741306F8BE94837E1348DACEF9B6F1DF56EB138 SWAP1 PUSH2 0x13CF SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1402 JUMPI PUSH2 0x13F9 DUP7 DUP6 DUP6 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x4 DUP4 LT PUSH2 0x141E JUMPI PUSH2 0x1419 DUP7 DUP7 PUSH2 0x648 DUP8 DUP8 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x13F9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143D PUSH1 0x4 DUP3 DUP5 DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x9D2 SWAP2 PUSH2 0x29E6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 DUP4 SUB PUSH2 0x1492 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x149A PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x14CD JUMPI PUSH1 0x40 MLOAD PUSH4 0xC65B5BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x14D6 DUP3 PUSH2 0x1919 JUMP JUMPDEST ISZERO PUSH2 0x14F7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E2975B9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD PUSH4 0xFFFFFFFF DUP4 AND SWAP2 DUP7 SWAP2 PUSH32 0x76A2A46953689D4861A5D3F6ED883AD7E6AF674A21F8E162707159FC9DDE614D SWAP2 SWAP1 LOG3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x156E JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x158A SWAP2 SWAP1 PUSH2 0x2A14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x15DC DUP7 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH2 0x1625 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH2 0x1727 JUMPI DUP5 PUSH4 0xFFFFFFFF AND PUSH2 0x1671 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16A9 DUP7 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x1774 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000FFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1868 DUP5 PUSH2 0x1863 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x21A6 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x1893 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x18BC JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP5 DUP7 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD PUSH32 0x1FD6DD7631312DFAC2205B52913F99DE03B4D7E381D5D27D3DBFE0713E6E6340 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1923 PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1938 PUSH3 0x93A80 DUP5 PUSH2 0x297A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND GT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x1966 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x198F JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP6 DUP8 AND SWAP6 DUP7 MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7A8059630B897B5DE4C08ADE69F8B90C3EAD1F8596D62D10B6C4D14A0AFB4AE2 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ADD PUSH2 0x1A3C JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x1A76 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH32 0xFFFF0000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xFEB69018EE8B8FD50EA86348F1267D07673379F72CFFDECCEC63853EE8CE8B48 SWAP1 PUSH2 0xB72 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1B3B SWAP2 SWAP1 PUSH2 0x2A14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1B76 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1B8B DUP6 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND ADD PUSH2 0x1BD3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP1 SUB PUSH2 0x1C16 JUMPI POP PUSH1 0x0 PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD SWAP1 SWAP3 SWAP2 PUSH32 0xF229BAA593AF28C41B1D16B748CD7688F0C83AAF92D4BE41C44005DEFE84C166 SWAP2 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C99 TIMESTAMP PUSH2 0x21FA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1CD1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP1 MLOAD PUSH4 0xFFFFFFFF DUP8 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP4 POP SWAP2 PUSH32 0xA56B76017453F399EC2327BA00375DBFB1FD070FF854341AD6191E6A2E2DE19C SWAP2 ADD PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x1D6A JUMPI DUP2 PUSH2 0x9D2 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D9D JUMPI POP PUSH2 0x1D9B DUP2 PUSH2 0x1919 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x801 JUMPI PUSH1 0x40 MLOAD PUSH4 0x813E9459 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x1DD5 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xE60 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1E39 JUMPI PUSH2 0xDF1 ADDRESS PUSH2 0x1DF3 DUP7 DUP7 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E48 DUP8 DUP8 PUSH2 0x1EB7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH2 0x1E62 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E6F DUP5 DUP12 PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1E89 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0xE60 JUMP JUMPDEST PUSH2 0x1E9F DUP4 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x4 DUP5 LT ISZERO PUSH2 0x1ED2 JUMPI POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EDE DUP7 DUP7 PUSH2 0x142E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x10A6AA37 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x1F0F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x30CAE187 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1F2A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x294B14A9 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x1F45 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5326CAE7 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x1F60 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xD22B5989 PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x1F76 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x63FC60F PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1FA5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x167BD395 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1FC0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x8D6122D PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x2002 JUMPI PUSH1 0x0 PUSH2 0x1FD5 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x28CD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1FE2 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FEF DUP3 PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x1 SWAP7 POP PUSH1 0x0 SWAP6 POP SWAP4 POP PUSH2 0x2099 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x12E238D PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x2031 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5BE958B1 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x208C JUMPI PUSH1 0x0 PUSH2 0x2046 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x28CD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2053 SWAP2 SWAP1 PUSH2 0x2338 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH2 0x207D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x20B5 JUMPI PUSH2 0x20B0 DUP3 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x9D2 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x20CC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x20F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST POP DUP1 PUSH2 0x9D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2113 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2150 DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x213B JUMPI PUSH1 0x0 PUSH2 0x2145 JUMP JUMPDEST PUSH2 0x2145 DUP9 DUP6 PUSH2 0x2A30 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2161 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x216B SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH2 0x21E5 JUMPI DUP3 DUP3 DUP3 PUSH2 0x21EA JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x222D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x8DD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2241 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x229B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x22CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x22F3 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x230E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x231A DUP8 DUP3 DUP9 ADD PUSH2 0x2272 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x232D SWAP1 POP PUSH1 0x40 DUP7 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x234A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D2 DUP3 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2371 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23AF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2386 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x23D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x23E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2420 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2447 DUP7 DUP3 DUP8 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2486 DUP5 PUSH2 0x22B6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2496 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH2 0x24A4 PUSH1 0x40 DUP6 ADD PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23AF DUP4 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24E5 DUP4 PUSH2 0x22B6 JUMP JUMPDEST SWAP2 POP PUSH2 0x24F3 PUSH1 0x20 DUP5 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x250E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9D2 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x255B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2566 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2386 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2420 DUP5 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25B0 DUP4 PUSH2 0x22B6 JUMP JUMPDEST SWAP2 POP PUSH2 0x24F3 PUSH1 0x20 DUP5 ADD PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x25DF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x25EF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x260A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2616 DUP8 DUP3 DUP9 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2657 DUP6 DUP3 DUP7 ADD PUSH2 0x2272 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x267E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2666 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x26F4 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x26D5 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x2663 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x26AE JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2721 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2731 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2741 DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x275F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25B0 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x278B DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27B2 DUP8 DUP3 DUP9 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x27D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9D2 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2837 JUMPI PUSH2 0x2837 PUSH2 0x280F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x287B PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9D2 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x15DC PUSH1 0x60 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x28DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x28EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x293E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD PUSH1 0x0 DUP2 MSTORE DUP4 MLOAD PUSH2 0x2970 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2663 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2999 JUMPI PUSH2 0x2999 PUSH2 0x280F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x29DB PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0xD60 JUMPI PUSH1 0x4 SWAP5 SWAP1 SWAP5 SUB PUSH1 0x3 SHL DUP5 SWAP1 SHL AND SWAP1 SWAP3 AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2A26 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2663 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2999 JUMPI PUSH2 0x2999 PUSH2 0x280F JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"3726:25635:1:-:0;;;5965:283;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;6013:26:1;;6009:108;;6062:44;;-1:-1:-1;;;6062:44:1;;6103:1;6062:44;;;455:51:17;428:18;;6062:44:1;;;;;;;;6009:108;6199:42;5259:16;6222:12;5259:16;;6199:10;:42::i;:::-;;5965:283;3726:25635;;11229:1061;11387:4;-1:-1:-1;;;;;;;;;;;11407:21:1;;;11403:90;;11451:31;;-1:-1:-1;;;11451:31:1;;-1:-1:-1;;;;;679:31:17;;11451::1;;;661:50:17;634:18;;11451:31:1;517:200:17;11403:90:1;-1:-1:-1;;;;;11520:14:1;;11503;11520;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11520:31:1;;;;;;;;;:37;;;:42;;11595:585;;;;11632:29;;;:16;:14;:16::i;:::-;:29;;;;:::i;:::-;11624:37;;11709:55;;;;;;;;11724:5;11709:55;;;;;;11738:24;:14;:22;;;;;:24;;:::i;:::-;-1:-1:-1;;;;;11709:55:1;;;;;;-1:-1:-1;;;;;11675:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11675:31:1;;;;;;;;;:89;;;;;;;;;;;;;;-1:-1:-1;;;;;;11675:89:1;;;;;;;;;;;;;;11595:585;;;-1:-1:-1;;;;;12056:14:1;;12154:1;12056:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12056:31:1;;;;;;;;;:37;:113;;:37;;;;-1:-1:-1;;;;;12056:37:1;;12122:14;;12056:48;:113::i;:::-;-1:-1:-1;;;;;12008:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12008:31:1;;;;;;;;;12007:162;;-1:-1:-1;;;;;12007:162:1;;;;;-1:-1:-1;;;;;;;;12007:162:1;;;;;;;;;;;-1:-1:-1;11595:585:1;12195:62;;;1257:10:17;1245:23;;1227:42;;1317:14;1305:27;;1300:2;1285:18;;1278:55;1376:14;;1369:22;1349:18;;;1342:50;12195:62:1;;-1:-1:-1;;;;;12195:62:1;;;-1:-1:-1;;;;;12195:62:1;;;;;;;;1215:2:17;12195:62:1;;;-1:-1:-1;12274:9:1;11229:1061;-1:-1:-1;;;;;11229:1061:1:o;750:110:14:-;794:6;819:34;837:15;819:17;:34::i;:::-;812:41;;750:110;:::o;2508:108::-;2589:20;;;2508:108::o;3972:390::-;4093:18;;;4153:10;-1:-1:-1;;;;;4153:8:14;;;:10::i;:::-;4138:25;;4173:14;4197:61;4206:10;4197:61;;4226:8;4218:16;;:5;:16;;;:39;;4256:1;4218:39;;;4237:16;4245:8;4237:5;:16;:::i;:::-;4197:61;;:8;:61::i;:::-;4173:86;-1:-1:-1;4278:21:14;;;:11;:9;:11::i;:::-;:21;;;;:::i;:::-;4269:30;-1:-1:-1;5065:19:14;;;5059:2;5035:26;;;;;5028:2;5009:21;;;;;5008:54;:76;4309:46;;;;3972:390;;;;;;:::o;14291:213:11:-;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:11;;14447:2;14416:41;;;1764:36:17;1816:18;;;1809:34;;;1737:18;;14416:41:11;1583:266:17;14365:103:11;-1:-1:-1;14491:5:11;14291:213::o;3548:130:14:-;3596:6;;3635:14;-1:-1:-1;;;;;3635:12:14;;;:14::i;:::-;-1:-1:-1;3614:35:14;;3548:130;-1:-1:-1;;;;3548:130:14:o;2382:104:10:-;2440:7;2470:1;2466;:5;:13;;2478:1;2466:13;;;2474:1;2466:13;2459:20;2382:104;-1:-1:-1;;;2382:104:10:o;3362:129:14:-;3414:6;;;3455:29;3466:4;3472:11;:9;:11::i;:::-;3455:10;:29::i;:::-;3448:36;;;;;;3362:129;;;;;:::o;2868:276::-;2940:6;;;-1:-1:-1;;;;;4710:2:14;4703:9;;;;-1:-1:-1;;;;;3031:11:14;;4739:9;4746:2;4739:9;;;;;;3061:19;;;;;:76;;3105:11;3118:10;3130:6;3061:76;;;3084:10;3096:1;3099;3061:76;3054:83;;;;;;;;;2868:276;;;;;:::o;14:290:17:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:17;;214:42;;204:70;;270:1;267;260:12;722:127;783:10;778:3;774:20;771:1;764:31;814:4;811:1;804:15;838:4;835:1;828:15;854:176;921:14;955:10;;;967;;;951:27;;990:11;;;987:37;;;1004:18;;:::i;:::-;987:37;854:176;;;;:::o;1403:175::-;1471:10;1514;;;1502;;;1498:27;;1537:12;;;1534:38;;;1552:18;;:::i;1583:266::-;3726:25635:1;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_213":{"entryPoint":null,"id":213,"parameterSlots":0,"returnSlots":0},"@PUBLIC_ROLE_220":{"entryPoint":null,"id":220,"parameterSlots":0,"returnSlots":0},"@_canCallExtended_1865":{"entryPoint":5083,"id":1865,"parameterSlots":4,"returnSlots":2},"@_canCallSelf_1960":{"entryPoint":7614,"id":1960,"parameterSlots":3,"returnSlots":2},"@_checkAuthorized_1673":{"entryPoint":4622,"id":1673,"parameterSlots":0,"returnSlots":0},"@_checkNotScheduled_1277":{"entryPoint":7537,"id":1277,"parameterSlots":1,"returnSlots":0},"@_checkSelector_2013":{"entryPoint":5166,"id":2013,"parameterSlots":2,"returnSlots":1},"@_consumeScheduledOp_1579":{"entryPoint":5190,"id":1579,"parameterSlots":1,"returnSlots":1},"@_contextSuffixLength_2897":{"entryPoint":null,"id":2897,"parameterSlots":0,"returnSlots":1},"@_getAdminRestrictions_1820":{"entryPoint":7863,"id":1820,"parameterSlots":2,"returnSlots":3},"@_getFullAt_7730":{"entryPoint":8614,"id":7730,"parameterSlots":2,"returnSlots":3},"@_grantRole_777":{"entryPoint":5606,"id":777,"parameterSlots":4,"returnSlots":1},"@_hashExecutionId_2032":{"entryPoint":null,"id":2032,"parameterSlots":2,"returnSlots":1},"@_isExecuting_1978":{"entryPoint":null,"id":1978,"parameterSlots":2,"returnSlots":1},"@_isExpired_1996":{"entryPoint":6425,"id":1996,"parameterSlots":1,"returnSlots":1},"@_msgData_2889":{"entryPoint":null,"id":2889,"parameterSlots":0,"returnSlots":2},"@_msgSender_2880":{"entryPoint":null,"id":2880,"parameterSlots":0,"returnSlots":1},"@_revert_2867":{"entryPoint":8753,"id":2867,"parameterSlots":1,"returnSlots":0},"@_revokeRole_825":{"entryPoint":7060,"id":825,"parameterSlots":2,"returnSlots":1},"@_setGrantDelay_937":{"entryPoint":6655,"id":937,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_859":{"entryPoint":6261,"id":859,"parameterSlots":2,"returnSlots":0},"@_setRoleGuardian_893":{"entryPoint":6472,"id":893,"parameterSlots":2,"returnSlots":0},"@_setTargetAdminDelay_1049":{"entryPoint":7326,"id":1049,"parameterSlots":2,"returnSlots":0},"@_setTargetClosed_1098":{"entryPoint":4906,"id":1098,"parameterSlots":2,"returnSlots":0},"@_setTargetFunctionRole_998":{"entryPoint":4745,"id":998,"parameterSlots":3,"returnSlots":0},"@canCall_340":{"entryPoint":3432,"id":340,"parameterSlots":3,"returnSlots":2},"@cancel_1477":{"entryPoint":3854,"id":1477,"parameterSlots":4,"returnSlots":1},"@consumeScheduledOp_1514":{"entryPoint":2943,"id":1514,"parameterSlots":3,"returnSlots":0},"@execute_1375":{"entryPoint":2156,"id":1375,"parameterSlots":3,"returnSlots":1},"@expiration_349":{"entryPoint":null,"id":349,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_2735":{"entryPoint":5449,"id":2735,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_2787":{"entryPoint":6942,"id":2787,"parameterSlots":2,"returnSlots":1},"@getAccess_498":{"entryPoint":2555,"id":498,"parameterSlots":2,"returnSlots":4},"@getFull_7750":{"entryPoint":6226,"id":7750,"parameterSlots":1,"returnSlots":3},"@getNonce_1135":{"entryPoint":null,"id":1135,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_420":{"entryPoint":null,"id":420,"parameterSlots":1,"returnSlots":1},"@getRoleGrantDelay_450":{"entryPoint":1972,"id":450,"parameterSlots":1,"returnSlots":1},"@getRoleGuardian_434":{"entryPoint":null,"id":434,"parameterSlots":1,"returnSlots":1},"@getSchedule_1121":{"entryPoint":2677,"id":1121,"parameterSlots":1,"returnSlots":1},"@getTargetAdminDelay_406":{"entryPoint":2728,"id":406,"parameterSlots":1,"returnSlots":1},"@getTargetFunctionRole_390":{"entryPoint":null,"id":390,"parameterSlots":2,"returnSlots":1},"@get_7768":{"entryPoint":4875,"id":7768,"parameterSlots":1,"returnSlots":1},"@grantRole_593":{"entryPoint":2521,"id":593,"parameterSlots":3,"returnSlots":0},"@hasRole_542":{"entryPoint":3711,"id":542,"parameterSlots":2,"returnSlots":2},"@hashOperation_1601":{"entryPoint":3133,"id":1601,"parameterSlots":4,"returnSlots":1},"@isTargetClosed_372":{"entryPoint":null,"id":372,"parameterSlots":1,"returnSlots":1},"@labelRole_571":{"entryPoint":2792,"id":571,"parameterSlots":3,"returnSlots":0},"@max_3289":{"entryPoint":7515,"id":3289,"parameterSlots":2,"returnSlots":1},"@minSetback_358":{"entryPoint":null,"id":358,"parameterSlots":0,"returnSlots":1},"@multicall_2984":{"entryPoint":3190,"id":2984,"parameterSlots":2,"returnSlots":1},"@pack_7913":{"entryPoint":null,"id":7913,"parameterSlots":3,"returnSlots":1},"@renounceRole_632":{"entryPoint":4581,"id":632,"parameterSlots":2,"returnSlots":0},"@revokeRole_609":{"entryPoint":3688,"id":609,"parameterSlots":2,"returnSlots":0},"@schedule_1249":{"entryPoint":4253,"id":1249,"parameterSlots":4,"returnSlots":2},"@setGrantDelay_680":{"entryPoint":3115,"id":680,"parameterSlots":2,"returnSlots":0},"@setRoleAdmin_648":{"entryPoint":2659,"id":648,"parameterSlots":2,"returnSlots":0},"@setRoleGuardian_664":{"entryPoint":2774,"id":664,"parameterSlots":2,"returnSlots":0},"@setTargetAdminDelay_1014":{"entryPoint":3836,"id":1014,"parameterSlots":2,"returnSlots":0},"@setTargetClosed_1065":{"entryPoint":2031,"id":1065,"parameterSlots":2,"returnSlots":0},"@setTargetFunctionRole_972":{"entryPoint":1881,"id":972,"parameterSlots":4,"returnSlots":0},"@timestamp_7661":{"entryPoint":7310,"id":7661,"parameterSlots":0,"returnSlots":1},"@toDelay_7691":{"entryPoint":null,"id":7691,"parameterSlots":1,"returnSlots":1},"@toUint48_4911":{"entryPoint":8698,"id":4911,"parameterSlots":1,"returnSlots":1},"@unpack_7875":{"entryPoint":null,"id":7875,"parameterSlots":1,"returnSlots":3},"@updateAuthority_1619":{"entryPoint":2053,"id":1619,"parameterSlots":2,"returnSlots":0},"@verifyCallResultFromTarget_2827":{"entryPoint":8352,"id":2827,"parameterSlots":3,"returnSlots":1},"@withUpdate_7824":{"entryPoint":8444,"id":7824,"parameterSlots":3,"returnSlots":2},"abi_decode_array_bytes4_dyn_calldata":{"entryPoint":8818,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":9151,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":9493,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":9105,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_bytes4":{"entryPoint":9985,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr":{"entryPoint":9662,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64":{"entryPoint":8914,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":9043,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes4":{"entryPoint":9544,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_calldata_ptr":{"entryPoint":9216,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48":{"entryPoint":10090,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_uint32":{"entryPoint":10060,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":9762,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":9468,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":10226,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":10371,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64":{"entryPoint":9016,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64t_address":{"entryPoint":9389,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_addresst_uint32":{"entryPoint":9320,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64t_string_calldata_ptr":{"entryPoint":9590,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64t_uint32":{"entryPoint":9620,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint64":{"entryPoint":9417,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint32":{"entryPoint":9300,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":8886,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":10302,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10579,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10400,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10343,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10656,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":10509,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":10445,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint48":{"entryPoint":10618,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint32":{"entryPoint":10800,"id":null,"parameterSlots":2,"returnSlots":1},"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4":{"entryPoint":10726,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":9827,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":10277,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10255,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10204,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10487,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":8797,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":9522,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:20365:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:109:17","statements":[{"body":{"nodeType":"YulBlock","src":"146:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"155:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"158:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"148:6:17"},"nodeType":"YulFunctionCall","src":"148:12:17"},"nodeType":"YulExpressionStatement","src":"148:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"100:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:17"},"nodeType":"YulFunctionCall","src":"89:54:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:17"},"nodeType":"YulFunctionCall","src":"79:65:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:17"},"nodeType":"YulFunctionCall","src":"72:73:17"},"nodeType":"YulIf","src":"69:93:17"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:17","type":""}],"src":"14:154:17"},{"body":{"nodeType":"YulBlock","src":"256:283:17","statements":[{"body":{"nodeType":"YulBlock","src":"305:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"314:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"307:6:17"},"nodeType":"YulFunctionCall","src":"307:12:17"},"nodeType":"YulExpressionStatement","src":"307:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"284:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"292:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"280:3:17"},"nodeType":"YulFunctionCall","src":"280:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"299:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"276:3:17"},"nodeType":"YulFunctionCall","src":"276:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"269:6:17"},"nodeType":"YulFunctionCall","src":"269:35:17"},"nodeType":"YulIf","src":"266:55:17"},{"nodeType":"YulAssignment","src":"330:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"353:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"340:12:17"},"nodeType":"YulFunctionCall","src":"340:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"330:6:17"}]},{"body":{"nodeType":"YulBlock","src":"403:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"415:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"405:6:17"},"nodeType":"YulFunctionCall","src":"405:12:17"},"nodeType":"YulExpressionStatement","src":"405:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"375:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"383:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"372:2:17"},"nodeType":"YulFunctionCall","src":"372:30:17"},"nodeType":"YulIf","src":"369:50:17"},{"nodeType":"YulAssignment","src":"428:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"444:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"452:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:17"},"nodeType":"YulFunctionCall","src":"440:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"428:8:17"}]},{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"480:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"492:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"495:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"488:3:17"},"nodeType":"YulFunctionCall","src":"488:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"476:3:17"},"nodeType":"YulFunctionCall","src":"476:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"472:3:17"},"nodeType":"YulFunctionCall","src":"472:38:17"},{"name":"end","nodeType":"YulIdentifier","src":"512:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"469:2:17"},"nodeType":"YulFunctionCall","src":"469:47:17"},"nodeType":"YulIf","src":"466:67:17"}]},"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"219:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"227:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"235:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"245:6:17","type":""}],"src":"173:366:17"},{"body":{"nodeType":"YulBlock","src":"592:123:17","statements":[{"nodeType":"YulAssignment","src":"602:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"624:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"611:12:17"},"nodeType":"YulFunctionCall","src":"611:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"602:5:17"}]},{"body":{"nodeType":"YulBlock","src":"693:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"702:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"705:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"695:6:17"},"nodeType":"YulFunctionCall","src":"695:12:17"},"nodeType":"YulExpressionStatement","src":"695:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"653:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"664:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"671:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"660:3:17"},"nodeType":"YulFunctionCall","src":"660:30:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"650:2:17"},"nodeType":"YulFunctionCall","src":"650:41:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"643:6:17"},"nodeType":"YulFunctionCall","src":"643:49:17"},"nodeType":"YulIf","src":"640:69:17"}]},"name":"abi_decode_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"571:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"582:5:17","type":""}],"src":"544:171:17"},{"body":{"nodeType":"YulBlock","src":"857:505:17","statements":[{"body":{"nodeType":"YulBlock","src":"903:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:17"},"nodeType":"YulFunctionCall","src":"905:12:17"},"nodeType":"YulExpressionStatement","src":"905:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"874:3:17"},"nodeType":"YulFunctionCall","src":"874:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"899:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"870:3:17"},"nodeType":"YulFunctionCall","src":"870:32:17"},"nodeType":"YulIf","src":"867:52:17"},{"nodeType":"YulVariableDeclaration","src":"928:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"941:12:17"},"nodeType":"YulFunctionCall","src":"941:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"932:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"998:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"973:24:17"},"nodeType":"YulFunctionCall","src":"973:31:17"},"nodeType":"YulExpressionStatement","src":"973:31:17"},{"nodeType":"YulAssignment","src":"1013:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"1023:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1013:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"1037:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1068:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1079:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1064:3:17"},"nodeType":"YulFunctionCall","src":"1064:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1051:12:17"},"nodeType":"YulFunctionCall","src":"1051:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1041:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1126:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1135:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1138:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1128:6:17"},"nodeType":"YulFunctionCall","src":"1128:12:17"},"nodeType":"YulExpressionStatement","src":"1128:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1098:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1106:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1095:2:17"},"nodeType":"YulFunctionCall","src":"1095:30:17"},"nodeType":"YulIf","src":"1092:50:17"},{"nodeType":"YulVariableDeclaration","src":"1151:95:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:17"},"nodeType":"YulFunctionCall","src":"1214:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1238:7:17"}],"functionName":{"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulIdentifier","src":"1177:36:17"},"nodeType":"YulFunctionCall","src":"1177:69:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"1155:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"1165:8:17","type":""}]},{"nodeType":"YulAssignment","src":"1255:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1265:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1255:6:17"}]},{"nodeType":"YulAssignment","src":"1282:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1292:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1282:6:17"}]},{"nodeType":"YulAssignment","src":"1309:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1341:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1352:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1337:3:17"},"nodeType":"YulFunctionCall","src":"1337:18:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"1319:17:17"},"nodeType":"YulFunctionCall","src":"1319:37:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1309:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"799:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"810:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"822:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"830:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"838:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"846:6:17","type":""}],"src":"720:642:17"},{"body":{"nodeType":"YulBlock","src":"1436:115:17","statements":[{"body":{"nodeType":"YulBlock","src":"1482:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1491:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:17"},"nodeType":"YulFunctionCall","src":"1484:12:17"},"nodeType":"YulExpressionStatement","src":"1484:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1457:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1466:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1453:3:17"},"nodeType":"YulFunctionCall","src":"1453:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1478:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1449:3:17"},"nodeType":"YulFunctionCall","src":"1449:32:17"},"nodeType":"YulIf","src":"1446:52:17"},{"nodeType":"YulAssignment","src":"1507:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"1517:17:17"},"nodeType":"YulFunctionCall","src":"1517:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1507:6:17"}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1402:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1413:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1425:6:17","type":""}],"src":"1367:184:17"},{"body":{"nodeType":"YulBlock","src":"1655:101:17","statements":[{"nodeType":"YulAssignment","src":"1665:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1677:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1688:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1673:3:17"},"nodeType":"YulFunctionCall","src":"1673:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1665:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1707:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1722:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1730:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1718:3:17"},"nodeType":"YulFunctionCall","src":"1718:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1700:6:17"},"nodeType":"YulFunctionCall","src":"1700:50:17"},"nodeType":"YulExpressionStatement","src":"1700:50:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1624:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1635:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1646:4:17","type":""}],"src":"1556:200:17"},{"body":{"nodeType":"YulBlock","src":"1860:93:17","statements":[{"nodeType":"YulAssignment","src":"1870:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1882:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1893:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1878:3:17"},"nodeType":"YulFunctionCall","src":"1878:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1870:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1912:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1927:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1935:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1923:3:17"},"nodeType":"YulFunctionCall","src":"1923:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1905:6:17"},"nodeType":"YulFunctionCall","src":"1905:42:17"},"nodeType":"YulExpressionStatement","src":"1905:42:17"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1829:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1840:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1851:4:17","type":""}],"src":"1761:192:17"},{"body":{"nodeType":"YulBlock","src":"2042:332:17","statements":[{"body":{"nodeType":"YulBlock","src":"2088:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2097:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2100:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2090:6:17"},"nodeType":"YulFunctionCall","src":"2090:12:17"},"nodeType":"YulExpressionStatement","src":"2090:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2063:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2072:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2059:3:17"},"nodeType":"YulFunctionCall","src":"2059:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2084:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2055:3:17"},"nodeType":"YulFunctionCall","src":"2055:32:17"},"nodeType":"YulIf","src":"2052:52:17"},{"nodeType":"YulVariableDeclaration","src":"2113:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2139:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2126:12:17"},"nodeType":"YulFunctionCall","src":"2126:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2117:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2183:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2158:24:17"},"nodeType":"YulFunctionCall","src":"2158:31:17"},"nodeType":"YulExpressionStatement","src":"2158:31:17"},{"nodeType":"YulAssignment","src":"2198:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"2208:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2198:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2222:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2254:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2265:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2250:3:17"},"nodeType":"YulFunctionCall","src":"2250:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2237:12:17"},"nodeType":"YulFunctionCall","src":"2237:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2226:7:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2326:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2335:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2338:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2328:6:17"},"nodeType":"YulFunctionCall","src":"2328:12:17"},"nodeType":"YulExpressionStatement","src":"2328:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2291:7:17"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2314:7:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2307:6:17"},"nodeType":"YulFunctionCall","src":"2307:15:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2300:6:17"},"nodeType":"YulFunctionCall","src":"2300:23:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2288:2:17"},"nodeType":"YulFunctionCall","src":"2288:36:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2281:6:17"},"nodeType":"YulFunctionCall","src":"2281:44:17"},"nodeType":"YulIf","src":"2278:64:17"},{"nodeType":"YulAssignment","src":"2351:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2361:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2351:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2000:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2011:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2023:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2031:6:17","type":""}],"src":"1958:416:17"},{"body":{"nodeType":"YulBlock","src":"2466:301:17","statements":[{"body":{"nodeType":"YulBlock","src":"2512:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2521:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2524:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2514:6:17"},"nodeType":"YulFunctionCall","src":"2514:12:17"},"nodeType":"YulExpressionStatement","src":"2514:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2487:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2496:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2483:3:17"},"nodeType":"YulFunctionCall","src":"2483:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2508:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2479:3:17"},"nodeType":"YulFunctionCall","src":"2479:32:17"},"nodeType":"YulIf","src":"2476:52:17"},{"nodeType":"YulVariableDeclaration","src":"2537:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2563:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2550:12:17"},"nodeType":"YulFunctionCall","src":"2550:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2541:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2607:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2582:24:17"},"nodeType":"YulFunctionCall","src":"2582:31:17"},"nodeType":"YulExpressionStatement","src":"2582:31:17"},{"nodeType":"YulAssignment","src":"2622:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"2632:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2622:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2646:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2678:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2689:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2674:3:17"},"nodeType":"YulFunctionCall","src":"2674:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2661:12:17"},"nodeType":"YulFunctionCall","src":"2661:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2650:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2727:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2702:24:17"},"nodeType":"YulFunctionCall","src":"2702:33:17"},"nodeType":"YulExpressionStatement","src":"2702:33:17"},{"nodeType":"YulAssignment","src":"2744:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2754:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2744:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2424:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2435:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2447:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2455:6:17","type":""}],"src":"2379:388:17"},{"body":{"nodeType":"YulBlock","src":"2844:275:17","statements":[{"body":{"nodeType":"YulBlock","src":"2893:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2902:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2905:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2895:6:17"},"nodeType":"YulFunctionCall","src":"2895:12:17"},"nodeType":"YulExpressionStatement","src":"2895:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2872:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2880:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2868:3:17"},"nodeType":"YulFunctionCall","src":"2868:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"2887:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2864:3:17"},"nodeType":"YulFunctionCall","src":"2864:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2857:6:17"},"nodeType":"YulFunctionCall","src":"2857:35:17"},"nodeType":"YulIf","src":"2854:55:17"},{"nodeType":"YulAssignment","src":"2918:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2941:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2928:12:17"},"nodeType":"YulFunctionCall","src":"2928:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2918:6:17"}]},{"body":{"nodeType":"YulBlock","src":"2991:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3000:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3003:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2993:6:17"},"nodeType":"YulFunctionCall","src":"2993:12:17"},"nodeType":"YulExpressionStatement","src":"2993:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2963:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2971:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2960:2:17"},"nodeType":"YulFunctionCall","src":"2960:30:17"},"nodeType":"YulIf","src":"2957:50:17"},{"nodeType":"YulAssignment","src":"3016:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3032:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3040:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3028:3:17"},"nodeType":"YulFunctionCall","src":"3028:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3016:8:17"}]},{"body":{"nodeType":"YulBlock","src":"3097:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3106:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3109:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3099:6:17"},"nodeType":"YulFunctionCall","src":"3099:12:17"},"nodeType":"YulExpressionStatement","src":"3099:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3068:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"3076:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3064:3:17"},"nodeType":"YulFunctionCall","src":"3064:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"3085:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3060:3:17"},"nodeType":"YulFunctionCall","src":"3060:30:17"},{"name":"end","nodeType":"YulIdentifier","src":"3092:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3057:2:17"},"nodeType":"YulFunctionCall","src":"3057:39:17"},"nodeType":"YulIf","src":"3054:59:17"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2807:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"2815:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2823:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"2833:6:17","type":""}],"src":"2772:347:17"},{"body":{"nodeType":"YulBlock","src":"3230:438:17","statements":[{"body":{"nodeType":"YulBlock","src":"3276:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3288:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3278:6:17"},"nodeType":"YulFunctionCall","src":"3278:12:17"},"nodeType":"YulExpressionStatement","src":"3278:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3260:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3247:3:17"},"nodeType":"YulFunctionCall","src":"3247:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3272:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3243:3:17"},"nodeType":"YulFunctionCall","src":"3243:32:17"},"nodeType":"YulIf","src":"3240:52:17"},{"nodeType":"YulVariableDeclaration","src":"3301:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3327:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3314:12:17"},"nodeType":"YulFunctionCall","src":"3314:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3305:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3371:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3346:24:17"},"nodeType":"YulFunctionCall","src":"3346:31:17"},"nodeType":"YulExpressionStatement","src":"3346:31:17"},{"nodeType":"YulAssignment","src":"3386:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"3396:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3386:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"3410:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3441:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3452:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:17"},"nodeType":"YulFunctionCall","src":"3437:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3424:12:17"},"nodeType":"YulFunctionCall","src":"3424:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3414:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3499:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3508:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3511:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3501:6:17"},"nodeType":"YulFunctionCall","src":"3501:12:17"},"nodeType":"YulExpressionStatement","src":"3501:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3471:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3479:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3468:2:17"},"nodeType":"YulFunctionCall","src":"3468:30:17"},"nodeType":"YulIf","src":"3465:50:17"},{"nodeType":"YulVariableDeclaration","src":"3524:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"3591:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3576:3:17"},"nodeType":"YulFunctionCall","src":"3576:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3600:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"3550:25:17"},"nodeType":"YulFunctionCall","src":"3550:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"3528:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"3538:8:17","type":""}]},{"nodeType":"YulAssignment","src":"3617:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3627:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3617:6:17"}]},{"nodeType":"YulAssignment","src":"3644:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3654:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3644:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3180:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3191:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3203:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3211:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3219:6:17","type":""}],"src":"3124:544:17"},{"body":{"nodeType":"YulBlock","src":"3721:115:17","statements":[{"nodeType":"YulAssignment","src":"3731:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3753:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:17"},"nodeType":"YulFunctionCall","src":"3740:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3731:5:17"}]},{"body":{"nodeType":"YulBlock","src":"3814:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3823:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3826:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3816:6:17"},"nodeType":"YulFunctionCall","src":"3816:12:17"},"nodeType":"YulExpressionStatement","src":"3816:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3782:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3793:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3800:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3789:3:17"},"nodeType":"YulFunctionCall","src":"3789:22:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3779:2:17"},"nodeType":"YulFunctionCall","src":"3779:33:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3772:6:17"},"nodeType":"YulFunctionCall","src":"3772:41:17"},"nodeType":"YulIf","src":"3769:61:17"}]},"name":"abi_decode_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3700:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3711:5:17","type":""}],"src":"3673:163:17"},{"body":{"nodeType":"YulBlock","src":"3943:289:17","statements":[{"body":{"nodeType":"YulBlock","src":"3989:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3998:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4001:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3991:6:17"},"nodeType":"YulFunctionCall","src":"3991:12:17"},"nodeType":"YulExpressionStatement","src":"3991:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3964:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3973:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3960:3:17"},"nodeType":"YulFunctionCall","src":"3960:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3985:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3956:3:17"},"nodeType":"YulFunctionCall","src":"3956:32:17"},"nodeType":"YulIf","src":"3953:52:17"},{"nodeType":"YulAssignment","src":"4014:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4042:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"4024:17:17"},"nodeType":"YulFunctionCall","src":"4024:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4014:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4061:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4091:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4102:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4087:3:17"},"nodeType":"YulFunctionCall","src":"4087:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4074:12:17"},"nodeType":"YulFunctionCall","src":"4074:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4065:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4140:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4115:24:17"},"nodeType":"YulFunctionCall","src":"4115:31:17"},"nodeType":"YulExpressionStatement","src":"4115:31:17"},{"nodeType":"YulAssignment","src":"4155:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"4165:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4155:6:17"}]},{"nodeType":"YulAssignment","src":"4179:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4222:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:17"},"nodeType":"YulFunctionCall","src":"4207:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"4189:17:17"},"nodeType":"YulFunctionCall","src":"4189:37:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4179:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_addresst_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3893:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3904:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3916:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3924:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3932:6:17","type":""}],"src":"3841:391:17"},{"body":{"nodeType":"YulBlock","src":"4323:233:17","statements":[{"body":{"nodeType":"YulBlock","src":"4369:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4378:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4381:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4371:6:17"},"nodeType":"YulFunctionCall","src":"4371:12:17"},"nodeType":"YulExpressionStatement","src":"4371:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4344:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4353:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4340:3:17"},"nodeType":"YulFunctionCall","src":"4340:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4365:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4336:3:17"},"nodeType":"YulFunctionCall","src":"4336:32:17"},"nodeType":"YulIf","src":"4333:52:17"},{"nodeType":"YulAssignment","src":"4394:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4422:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"4404:17:17"},"nodeType":"YulFunctionCall","src":"4404:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4394:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4441:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4471:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4482:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4467:3:17"},"nodeType":"YulFunctionCall","src":"4467:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4454:12:17"},"nodeType":"YulFunctionCall","src":"4454:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4445:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4520:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4495:24:17"},"nodeType":"YulFunctionCall","src":"4495:31:17"},"nodeType":"YulExpressionStatement","src":"4495:31:17"},{"nodeType":"YulAssignment","src":"4535:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"4545:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4535:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4281:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4292:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4304:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4312:6:17","type":""}],"src":"4237:319:17"},{"body":{"nodeType":"YulBlock","src":"4738:304:17","statements":[{"nodeType":"YulAssignment","src":"4748:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4760:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4771:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4756:3:17"},"nodeType":"YulFunctionCall","src":"4756:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4748:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"4784:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4794:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4788:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4824:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4839:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4847:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4835:3:17"},"nodeType":"YulFunctionCall","src":"4835:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4817:6:17"},"nodeType":"YulFunctionCall","src":"4817:34:17"},"nodeType":"YulExpressionStatement","src":"4817:34:17"},{"nodeType":"YulVariableDeclaration","src":"4860:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4870:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4864:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4900:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4911:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4896:3:17"},"nodeType":"YulFunctionCall","src":"4896:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4920:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4928:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4916:3:17"},"nodeType":"YulFunctionCall","src":"4916:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4889:6:17"},"nodeType":"YulFunctionCall","src":"4889:43:17"},"nodeType":"YulExpressionStatement","src":"4889:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4952:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4963:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4948:3:17"},"nodeType":"YulFunctionCall","src":"4948:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4972:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4980:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4968:3:17"},"nodeType":"YulFunctionCall","src":"4968:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4941:6:17"},"nodeType":"YulFunctionCall","src":"4941:43:17"},"nodeType":"YulExpressionStatement","src":"4941:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5004:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5015:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5000:3:17"},"nodeType":"YulFunctionCall","src":"5000:18:17"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5024:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5032:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5020:3:17"},"nodeType":"YulFunctionCall","src":"5020:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4993:6:17"},"nodeType":"YulFunctionCall","src":"4993:43:17"},"nodeType":"YulExpressionStatement","src":"4993:43:17"}]},"name":"abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4683:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4694:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4702:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4710:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4718:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4729:4:17","type":""}],"src":"4561:481:17"},{"body":{"nodeType":"YulBlock","src":"5132:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"5178:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5187:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5190:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5180:6:17"},"nodeType":"YulFunctionCall","src":"5180:12:17"},"nodeType":"YulExpressionStatement","src":"5180:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5153:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5162:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5149:3:17"},"nodeType":"YulFunctionCall","src":"5149:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5174:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5145:3:17"},"nodeType":"YulFunctionCall","src":"5145:32:17"},"nodeType":"YulIf","src":"5142:52:17"},{"nodeType":"YulAssignment","src":"5203:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5231:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"5213:17:17"},"nodeType":"YulFunctionCall","src":"5213:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5203:6:17"}]},{"nodeType":"YulAssignment","src":"5250:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5282:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5278:3:17"},"nodeType":"YulFunctionCall","src":"5278:18:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"5260:17:17"},"nodeType":"YulFunctionCall","src":"5260:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5250:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5090:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5101:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5113:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5121:6:17","type":""}],"src":"5047:256:17"},{"body":{"nodeType":"YulBlock","src":"5378:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"5424:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5433:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5436:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5426:6:17"},"nodeType":"YulFunctionCall","src":"5426:12:17"},"nodeType":"YulExpressionStatement","src":"5426:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5399:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5408:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5395:3:17"},"nodeType":"YulFunctionCall","src":"5395:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5420:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5391:3:17"},"nodeType":"YulFunctionCall","src":"5391:32:17"},"nodeType":"YulIf","src":"5388:52:17"},{"nodeType":"YulAssignment","src":"5449:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5472:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5459:12:17"},"nodeType":"YulFunctionCall","src":"5459:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5449:6:17"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5344:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5355:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5367:6:17","type":""}],"src":"5308:180:17"},{"body":{"nodeType":"YulBlock","src":"5592:97:17","statements":[{"nodeType":"YulAssignment","src":"5602:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5614:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5625:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5610:3:17"},"nodeType":"YulFunctionCall","src":"5610:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5602:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5644:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5659:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5667:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5655:3:17"},"nodeType":"YulFunctionCall","src":"5655:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5637:6:17"},"nodeType":"YulFunctionCall","src":"5637:46:17"},"nodeType":"YulExpressionStatement","src":"5637:46:17"}]},"name":"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5561:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5572:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5583:4:17","type":""}],"src":"5493:196:17"},{"body":{"nodeType":"YulBlock","src":"5764:177:17","statements":[{"body":{"nodeType":"YulBlock","src":"5810:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5819:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5822:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5812:6:17"},"nodeType":"YulFunctionCall","src":"5812:12:17"},"nodeType":"YulExpressionStatement","src":"5812:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5785:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5794:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5781:3:17"},"nodeType":"YulFunctionCall","src":"5781:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5806:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5777:3:17"},"nodeType":"YulFunctionCall","src":"5777:32:17"},"nodeType":"YulIf","src":"5774:52:17"},{"nodeType":"YulVariableDeclaration","src":"5835:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5861:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5848:12:17"},"nodeType":"YulFunctionCall","src":"5848:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5839:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5905:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5880:24:17"},"nodeType":"YulFunctionCall","src":"5880:31:17"},"nodeType":"YulExpressionStatement","src":"5880:31:17"},{"nodeType":"YulAssignment","src":"5920:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"5930:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5920:6:17"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5730:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5741:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5753:6:17","type":""}],"src":"5694:247:17"},{"body":{"nodeType":"YulBlock","src":"5990:87:17","statements":[{"body":{"nodeType":"YulBlock","src":"6055:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6064:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6067:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6057:6:17"},"nodeType":"YulFunctionCall","src":"6057:12:17"},"nodeType":"YulExpressionStatement","src":"6057:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6013:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6024:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6035:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6040:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6031:3:17"},"nodeType":"YulFunctionCall","src":"6031:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6020:3:17"},"nodeType":"YulFunctionCall","src":"6020:32:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6010:2:17"},"nodeType":"YulFunctionCall","src":"6010:43:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6003:6:17"},"nodeType":"YulFunctionCall","src":"6003:51:17"},"nodeType":"YulIf","src":"6000:71:17"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5979:5:17","type":""}],"src":"5946:131:17"},{"body":{"nodeType":"YulBlock","src":"6168:300:17","statements":[{"body":{"nodeType":"YulBlock","src":"6214:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6223:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6226:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6216:6:17"},"nodeType":"YulFunctionCall","src":"6216:12:17"},"nodeType":"YulExpressionStatement","src":"6216:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6189:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6198:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6185:3:17"},"nodeType":"YulFunctionCall","src":"6185:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6210:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6181:3:17"},"nodeType":"YulFunctionCall","src":"6181:32:17"},"nodeType":"YulIf","src":"6178:52:17"},{"nodeType":"YulVariableDeclaration","src":"6239:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6265:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6252:12:17"},"nodeType":"YulFunctionCall","src":"6252:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6243:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6309:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6284:24:17"},"nodeType":"YulFunctionCall","src":"6284:31:17"},"nodeType":"YulExpressionStatement","src":"6284:31:17"},{"nodeType":"YulAssignment","src":"6324:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"6334:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6324:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6348:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6380:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6391:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6376:3:17"},"nodeType":"YulFunctionCall","src":"6376:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6363:12:17"},"nodeType":"YulFunctionCall","src":"6363:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6352:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6428:7:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"6404:23:17"},"nodeType":"YulFunctionCall","src":"6404:32:17"},"nodeType":"YulExpressionStatement","src":"6404:32:17"},{"nodeType":"YulAssignment","src":"6445:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6455:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6445:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6126:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6137:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6149:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6157:6:17","type":""}],"src":"6082:386:17"},{"body":{"nodeType":"YulBlock","src":"6579:376:17","statements":[{"body":{"nodeType":"YulBlock","src":"6625:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6634:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6637:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6627:6:17"},"nodeType":"YulFunctionCall","src":"6627:12:17"},"nodeType":"YulExpressionStatement","src":"6627:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6600:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6596:3:17"},"nodeType":"YulFunctionCall","src":"6596:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6621:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6592:3:17"},"nodeType":"YulFunctionCall","src":"6592:32:17"},"nodeType":"YulIf","src":"6589:52:17"},{"nodeType":"YulAssignment","src":"6650:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6678:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"6660:17:17"},"nodeType":"YulFunctionCall","src":"6660:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6650:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6697:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6728:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6739:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6724:3:17"},"nodeType":"YulFunctionCall","src":"6724:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6711:12:17"},"nodeType":"YulFunctionCall","src":"6711:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"6786:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6795:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6798:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6788:6:17"},"nodeType":"YulFunctionCall","src":"6788:12:17"},"nodeType":"YulExpressionStatement","src":"6788:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6758:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6766:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6755:2:17"},"nodeType":"YulFunctionCall","src":"6755:30:17"},"nodeType":"YulIf","src":"6752:50:17"},{"nodeType":"YulVariableDeclaration","src":"6811:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6867:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6878:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6863:3:17"},"nodeType":"YulFunctionCall","src":"6863:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6887:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"6837:25:17"},"nodeType":"YulFunctionCall","src":"6837:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"6815:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"6825:8:17","type":""}]},{"nodeType":"YulAssignment","src":"6904:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6914:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6904:6:17"}]},{"nodeType":"YulAssignment","src":"6931:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"6941:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6931:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6529:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6540:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6552:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6560:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6568:6:17","type":""}],"src":"6473:482:17"},{"body":{"nodeType":"YulBlock","src":"7055:92:17","statements":[{"nodeType":"YulAssignment","src":"7065:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7077:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7088:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7073:3:17"},"nodeType":"YulFunctionCall","src":"7073:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7065:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7107:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7132:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7125:6:17"},"nodeType":"YulFunctionCall","src":"7125:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7118:6:17"},"nodeType":"YulFunctionCall","src":"7118:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7100:6:17"},"nodeType":"YulFunctionCall","src":"7100:41:17"},"nodeType":"YulExpressionStatement","src":"7100:41:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7024:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7035:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7046:4:17","type":""}],"src":"6960:187:17"},{"body":{"nodeType":"YulBlock","src":"7237:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"7283:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7292:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7295:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7285:6:17"},"nodeType":"YulFunctionCall","src":"7285:12:17"},"nodeType":"YulExpressionStatement","src":"7285:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7258:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7267:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7254:3:17"},"nodeType":"YulFunctionCall","src":"7254:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7279:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7250:3:17"},"nodeType":"YulFunctionCall","src":"7250:32:17"},"nodeType":"YulIf","src":"7247:52:17"},{"nodeType":"YulAssignment","src":"7308:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7336:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"7318:17:17"},"nodeType":"YulFunctionCall","src":"7318:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7308:6:17"}]},{"nodeType":"YulAssignment","src":"7355:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7387:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7398:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7383:3:17"},"nodeType":"YulFunctionCall","src":"7383:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"7365:17:17"},"nodeType":"YulFunctionCall","src":"7365:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7355:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7195:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7206:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7218:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7226:6:17","type":""}],"src":"7152:256:17"},{"body":{"nodeType":"YulBlock","src":"7536:562:17","statements":[{"body":{"nodeType":"YulBlock","src":"7582:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7591:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7594:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7584:6:17"},"nodeType":"YulFunctionCall","src":"7584:12:17"},"nodeType":"YulExpressionStatement","src":"7584:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7557:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7566:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7553:3:17"},"nodeType":"YulFunctionCall","src":"7553:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7578:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7549:3:17"},"nodeType":"YulFunctionCall","src":"7549:32:17"},"nodeType":"YulIf","src":"7546:52:17"},{"nodeType":"YulVariableDeclaration","src":"7607:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7633:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7620:12:17"},"nodeType":"YulFunctionCall","src":"7620:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7611:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7677:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7652:24:17"},"nodeType":"YulFunctionCall","src":"7652:31:17"},"nodeType":"YulExpressionStatement","src":"7652:31:17"},{"nodeType":"YulAssignment","src":"7692:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"7702:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7692:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"7716:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7748:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7759:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7744:3:17"},"nodeType":"YulFunctionCall","src":"7744:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7731:12:17"},"nodeType":"YulFunctionCall","src":"7731:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7720:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"7797:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7772:24:17"},"nodeType":"YulFunctionCall","src":"7772:33:17"},"nodeType":"YulExpressionStatement","src":"7772:33:17"},{"nodeType":"YulAssignment","src":"7814:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"7824:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7814:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"7840:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7871:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7882:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7867:3:17"},"nodeType":"YulFunctionCall","src":"7867:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7854:12:17"},"nodeType":"YulFunctionCall","src":"7854:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7844:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7929:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7938:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7941:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7931:6:17"},"nodeType":"YulFunctionCall","src":"7931:12:17"},"nodeType":"YulExpressionStatement","src":"7931:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7901:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7909:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7898:2:17"},"nodeType":"YulFunctionCall","src":"7898:30:17"},"nodeType":"YulIf","src":"7895:50:17"},{"nodeType":"YulVariableDeclaration","src":"7954:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8010:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8021:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8006:3:17"},"nodeType":"YulFunctionCall","src":"8006:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8030:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"7980:25:17"},"nodeType":"YulFunctionCall","src":"7980:58:17"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"7958:8:17","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"7968:8:17","type":""}]},{"nodeType":"YulAssignment","src":"8047:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8057:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8047:6:17"}]},{"nodeType":"YulAssignment","src":"8074:18:17","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8084:8:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8074:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7478:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7489:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7501:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7509:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7517:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7525:6:17","type":""}],"src":"7413:685:17"},{"body":{"nodeType":"YulBlock","src":"8204:76:17","statements":[{"nodeType":"YulAssignment","src":"8214:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8226:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8237:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:17"},"nodeType":"YulFunctionCall","src":"8222:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8214:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8256:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"8267:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8249:6:17"},"nodeType":"YulFunctionCall","src":"8249:25:17"},"nodeType":"YulExpressionStatement","src":"8249:25:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8173:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8184:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8195:4:17","type":""}],"src":"8103:177:17"},{"body":{"nodeType":"YulBlock","src":"8401:331:17","statements":[{"body":{"nodeType":"YulBlock","src":"8447:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8456:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8459:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8449:6:17"},"nodeType":"YulFunctionCall","src":"8449:12:17"},"nodeType":"YulExpressionStatement","src":"8449:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8422:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8431:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8418:3:17"},"nodeType":"YulFunctionCall","src":"8418:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8443:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8414:3:17"},"nodeType":"YulFunctionCall","src":"8414:32:17"},"nodeType":"YulIf","src":"8411:52:17"},{"nodeType":"YulVariableDeclaration","src":"8472:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8499:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8486:12:17"},"nodeType":"YulFunctionCall","src":"8486:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8476:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8552:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8561:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8564:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8554:6:17"},"nodeType":"YulFunctionCall","src":"8554:12:17"},"nodeType":"YulExpressionStatement","src":"8554:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8524:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8532:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8521:2:17"},"nodeType":"YulFunctionCall","src":"8521:30:17"},"nodeType":"YulIf","src":"8518:50:17"},{"nodeType":"YulVariableDeclaration","src":"8577:95:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8644:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8655:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8640:3:17"},"nodeType":"YulFunctionCall","src":"8640:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8664:7:17"}],"functionName":{"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulIdentifier","src":"8603:36:17"},"nodeType":"YulFunctionCall","src":"8603:69:17"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"8581:8:17","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"8591:8:17","type":""}]},{"nodeType":"YulAssignment","src":"8681:18:17","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"8691:8:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8681:6:17"}]},{"nodeType":"YulAssignment","src":"8708:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"8718:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8708:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8359:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8370:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8382:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8390:6:17","type":""}],"src":"8285:447:17"},{"body":{"nodeType":"YulBlock","src":"8803:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8813:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8822:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8817:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8882:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8907:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"8912:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8903:3:17"},"nodeType":"YulFunctionCall","src":"8903:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8926:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"8931:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8922:3:17"},"nodeType":"YulFunctionCall","src":"8922:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8916:5:17"},"nodeType":"YulFunctionCall","src":"8916:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8896:6:17"},"nodeType":"YulFunctionCall","src":"8896:39:17"},"nodeType":"YulExpressionStatement","src":"8896:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8843:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"8846:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8840:2:17"},"nodeType":"YulFunctionCall","src":"8840:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8854:19:17","statements":[{"nodeType":"YulAssignment","src":"8856:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8865:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"8868:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8861:3:17"},"nodeType":"YulFunctionCall","src":"8861:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8856:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"8836:3:17","statements":[]},"src":"8832:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8965:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"8970:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8961:3:17"},"nodeType":"YulFunctionCall","src":"8961:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"8979:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8954:6:17"},"nodeType":"YulFunctionCall","src":"8954:27:17"},"nodeType":"YulExpressionStatement","src":"8954:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8781:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8786:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"8791:6:17","type":""}],"src":"8737:250:17"},{"body":{"nodeType":"YulBlock","src":"9161:843:17","statements":[{"nodeType":"YulVariableDeclaration","src":"9171:12:17","value":{"kind":"number","nodeType":"YulLiteral","src":"9181:2:17","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9175:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9192:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9210:9:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9221:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9206:3:17"},"nodeType":"YulFunctionCall","src":"9206:18:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"9196:6:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9240:9:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9251:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9233:6:17"},"nodeType":"YulFunctionCall","src":"9233:21:17"},"nodeType":"YulExpressionStatement","src":"9233:21:17"},{"nodeType":"YulVariableDeclaration","src":"9263:17:17","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"9274:6:17"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"9267:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9289:27:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9309:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9303:5:17"},"nodeType":"YulFunctionCall","src":"9303:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9293:6:17","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"9332:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"9340:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9325:6:17"},"nodeType":"YulFunctionCall","src":"9325:22:17"},"nodeType":"YulExpressionStatement","src":"9325:22:17"},{"nodeType":"YulAssignment","src":"9356:25:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9367:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9378:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9363:3:17"},"nodeType":"YulFunctionCall","src":"9363:18:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9356:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"9390:53:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9412:9:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9427:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"9430:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9423:3:17"},"nodeType":"YulFunctionCall","src":"9423:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9408:3:17"},"nodeType":"YulFunctionCall","src":"9408:30:17"},{"kind":"number","nodeType":"YulLiteral","src":"9440:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9404:3:17"},"nodeType":"YulFunctionCall","src":"9404:39:17"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"9394:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9452:29:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9470:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9478:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9466:3:17"},"nodeType":"YulFunctionCall","src":"9466:15:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"9456:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9490:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"9499:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9494:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"9558:417:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9579:3:17"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9592:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"9600:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9588:3:17"},"nodeType":"YulFunctionCall","src":"9588:22:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9616:2:17","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9612:3:17"},"nodeType":"YulFunctionCall","src":"9612:7:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9584:3:17"},"nodeType":"YulFunctionCall","src":"9584:36:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9572:6:17"},"nodeType":"YulFunctionCall","src":"9572:49:17"},"nodeType":"YulExpressionStatement","src":"9572:49:17"},{"nodeType":"YulVariableDeclaration","src":"9634:23:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9650:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9644:5:17"},"nodeType":"YulFunctionCall","src":"9644:13:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9638:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9670:25:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9692:2:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9686:5:17"},"nodeType":"YulFunctionCall","src":"9686:9:17"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"9674:8:17","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9715:6:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"9723:8:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9708:6:17"},"nodeType":"YulFunctionCall","src":"9708:24:17"},"nodeType":"YulExpressionStatement","src":"9708:24:17"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9784:2:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9788:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9780:3:17"},"nodeType":"YulFunctionCall","src":"9780:11:17"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9797:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9805:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9793:3:17"},"nodeType":"YulFunctionCall","src":"9793:15:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"9810:8:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9745:34:17"},"nodeType":"YulFunctionCall","src":"9745:74:17"},"nodeType":"YulExpressionStatement","src":"9745:74:17"},{"nodeType":"YulAssignment","src":"9832:63:17","value":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9850:6:17"},{"arguments":[{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"9866:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"9876:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9862:3:17"},"nodeType":"YulFunctionCall","src":"9862:17:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9885:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9881:3:17"},"nodeType":"YulFunctionCall","src":"9881:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9858:3:17"},"nodeType":"YulFunctionCall","src":"9858:31:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9846:3:17"},"nodeType":"YulFunctionCall","src":"9846:44:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9892:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9842:3:17"},"nodeType":"YulFunctionCall","src":"9842:53:17"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9832:6:17"}]},{"nodeType":"YulAssignment","src":"9908:25:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9922:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9930:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9918:3:17"},"nodeType":"YulFunctionCall","src":"9918:15:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9908:6:17"}]},{"nodeType":"YulAssignment","src":"9946:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9957:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9962:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9953:3:17"},"nodeType":"YulFunctionCall","src":"9953:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9946:3:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9520:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"9523:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9517:2:17"},"nodeType":"YulFunctionCall","src":"9517:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9531:18:17","statements":[{"nodeType":"YulAssignment","src":"9533:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9542:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"9545:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9538:3:17"},"nodeType":"YulFunctionCall","src":"9538:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9533:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"9513:3:17","statements":[]},"src":"9509:466:17"},{"nodeType":"YulAssignment","src":"9984:14:17","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"9992:6:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9984:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9130:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9141:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9152:4:17","type":""}],"src":"8992:1012:17"},{"body":{"nodeType":"YulBlock","src":"10112:424:17","statements":[{"body":{"nodeType":"YulBlock","src":"10158:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10167:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10170:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10160:6:17"},"nodeType":"YulFunctionCall","src":"10160:12:17"},"nodeType":"YulExpressionStatement","src":"10160:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10133:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10142:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10129:3:17"},"nodeType":"YulFunctionCall","src":"10129:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"10154:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10125:3:17"},"nodeType":"YulFunctionCall","src":"10125:32:17"},"nodeType":"YulIf","src":"10122:52:17"},{"nodeType":"YulVariableDeclaration","src":"10183:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10209:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10196:12:17"},"nodeType":"YulFunctionCall","src":"10196:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10187:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10253:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10228:24:17"},"nodeType":"YulFunctionCall","src":"10228:31:17"},"nodeType":"YulExpressionStatement","src":"10228:31:17"},{"nodeType":"YulAssignment","src":"10268:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"10278:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10268:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"10292:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10324:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10335:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10320:3:17"},"nodeType":"YulFunctionCall","src":"10320:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10307:12:17"},"nodeType":"YulFunctionCall","src":"10307:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10296:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10373:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10348:24:17"},"nodeType":"YulFunctionCall","src":"10348:33:17"},"nodeType":"YulExpressionStatement","src":"10348:33:17"},{"nodeType":"YulAssignment","src":"10390:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"10400:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10390:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"10416:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10448:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10459:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10444:3:17"},"nodeType":"YulFunctionCall","src":"10444:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10431:12:17"},"nodeType":"YulFunctionCall","src":"10431:32:17"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"10420:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"10496:7:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10472:23:17"},"nodeType":"YulFunctionCall","src":"10472:32:17"},"nodeType":"YulExpressionStatement","src":"10472:32:17"},{"nodeType":"YulAssignment","src":"10513:17:17","value":{"name":"value_2","nodeType":"YulIdentifier","src":"10523:7:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10513:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10062:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10073:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10085:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10093:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10101:6:17","type":""}],"src":"10009:527:17"},{"body":{"nodeType":"YulBlock","src":"10662:152:17","statements":[{"nodeType":"YulAssignment","src":"10672:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10684:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10695:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10680:3:17"},"nodeType":"YulFunctionCall","src":"10680:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10672:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10714:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10739:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10732:6:17"},"nodeType":"YulFunctionCall","src":"10732:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10725:6:17"},"nodeType":"YulFunctionCall","src":"10725:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10707:6:17"},"nodeType":"YulFunctionCall","src":"10707:41:17"},"nodeType":"YulExpressionStatement","src":"10707:41:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10768:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10779:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10764:3:17"},"nodeType":"YulFunctionCall","src":"10764:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10788:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"10796:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10784:3:17"},"nodeType":"YulFunctionCall","src":"10784:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10757:6:17"},"nodeType":"YulFunctionCall","src":"10757:51:17"},"nodeType":"YulExpressionStatement","src":"10757:51:17"}]},"name":"abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10623:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10634:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10642:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10653:4:17","type":""}],"src":"10541:273:17"},{"body":{"nodeType":"YulBlock","src":"10905:233:17","statements":[{"body":{"nodeType":"YulBlock","src":"10951:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10960:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10963:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10953:6:17"},"nodeType":"YulFunctionCall","src":"10953:12:17"},"nodeType":"YulExpressionStatement","src":"10953:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10926:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10935:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10922:3:17"},"nodeType":"YulFunctionCall","src":"10922:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"10947:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10918:3:17"},"nodeType":"YulFunctionCall","src":"10918:32:17"},"nodeType":"YulIf","src":"10915:52:17"},{"nodeType":"YulVariableDeclaration","src":"10976:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11002:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10989:12:17"},"nodeType":"YulFunctionCall","src":"10989:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10980:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11046:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11021:24:17"},"nodeType":"YulFunctionCall","src":"11021:31:17"},"nodeType":"YulExpressionStatement","src":"11021:31:17"},{"nodeType":"YulAssignment","src":"11061:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"11071:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11061:6:17"}]},{"nodeType":"YulAssignment","src":"11085:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11117:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11128:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11113:3:17"},"nodeType":"YulFunctionCall","src":"11113:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"11095:17:17"},"nodeType":"YulFunctionCall","src":"11095:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11085:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10863:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10874:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10886:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10894:6:17","type":""}],"src":"10819:319:17"},{"body":{"nodeType":"YulBlock","src":"11265:598:17","statements":[{"body":{"nodeType":"YulBlock","src":"11311:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11320:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11323:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11313:6:17"},"nodeType":"YulFunctionCall","src":"11313:12:17"},"nodeType":"YulExpressionStatement","src":"11313:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11286:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11295:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11282:3:17"},"nodeType":"YulFunctionCall","src":"11282:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"11307:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11278:3:17"},"nodeType":"YulFunctionCall","src":"11278:32:17"},"nodeType":"YulIf","src":"11275:52:17"},{"nodeType":"YulVariableDeclaration","src":"11336:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11362:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11349:12:17"},"nodeType":"YulFunctionCall","src":"11349:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11340:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11406:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11381:24:17"},"nodeType":"YulFunctionCall","src":"11381:31:17"},"nodeType":"YulExpressionStatement","src":"11381:31:17"},{"nodeType":"YulAssignment","src":"11421:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"11431:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11421:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"11445:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11476:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11487:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11472:3:17"},"nodeType":"YulFunctionCall","src":"11472:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11459:12:17"},"nodeType":"YulFunctionCall","src":"11459:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11449:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"11534:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11543:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11546:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11536:6:17"},"nodeType":"YulFunctionCall","src":"11536:12:17"},"nodeType":"YulExpressionStatement","src":"11536:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11506:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11514:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11503:2:17"},"nodeType":"YulFunctionCall","src":"11503:30:17"},"nodeType":"YulIf","src":"11500:50:17"},{"nodeType":"YulVariableDeclaration","src":"11559:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11615:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"11626:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11611:3:17"},"nodeType":"YulFunctionCall","src":"11611:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11635:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"11585:25:17"},"nodeType":"YulFunctionCall","src":"11585:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"11563:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"11573:8:17","type":""}]},{"nodeType":"YulAssignment","src":"11652:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"11662:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11652:6:17"}]},{"nodeType":"YulAssignment","src":"11679:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"11689:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11679:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"11706:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11738:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11749:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11734:3:17"},"nodeType":"YulFunctionCall","src":"11734:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11721:12:17"},"nodeType":"YulFunctionCall","src":"11721:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11710:7:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"11815:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11824:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11827:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11817:6:17"},"nodeType":"YulFunctionCall","src":"11817:12:17"},"nodeType":"YulExpressionStatement","src":"11817:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11775:7:17"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11788:7:17"},{"kind":"number","nodeType":"YulLiteral","src":"11797:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11784:3:17"},"nodeType":"YulFunctionCall","src":"11784:28:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11772:2:17"},"nodeType":"YulFunctionCall","src":"11772:41:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11765:6:17"},"nodeType":"YulFunctionCall","src":"11765:49:17"},"nodeType":"YulIf","src":"11762:69:17"},{"nodeType":"YulAssignment","src":"11840:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11850:7:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11840:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11207:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11218:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11230:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11238:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11246:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11254:6:17","type":""}],"src":"11143:720:17"},{"body":{"nodeType":"YulBlock","src":"11995:136:17","statements":[{"nodeType":"YulAssignment","src":"12005:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12017:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12028:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12013:3:17"},"nodeType":"YulFunctionCall","src":"12013:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12005:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12047:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"12058:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12040:6:17"},"nodeType":"YulFunctionCall","src":"12040:25:17"},"nodeType":"YulExpressionStatement","src":"12040:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12085:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12096:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12081:3:17"},"nodeType":"YulFunctionCall","src":"12081:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12105:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12113:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12101:3:17"},"nodeType":"YulFunctionCall","src":"12101:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12074:6:17"},"nodeType":"YulFunctionCall","src":"12074:51:17"},"nodeType":"YulExpressionStatement","src":"12074:51:17"}]},"name":"abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11956:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11967:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11975:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11986:4:17","type":""}],"src":"11868:263:17"},{"body":{"nodeType":"YulBlock","src":"12168:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12185:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12192:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12197:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12188:3:17"},"nodeType":"YulFunctionCall","src":"12188:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12178:6:17"},"nodeType":"YulFunctionCall","src":"12178:31:17"},"nodeType":"YulExpressionStatement","src":"12178:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12225:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12228:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12218:6:17"},"nodeType":"YulFunctionCall","src":"12218:15:17"},"nodeType":"YulExpressionStatement","src":"12218:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12249:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12252:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12242:6:17"},"nodeType":"YulFunctionCall","src":"12242:15:17"},"nodeType":"YulExpressionStatement","src":"12242:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"12136:127:17"},{"body":{"nodeType":"YulBlock","src":"12337:176:17","statements":[{"body":{"nodeType":"YulBlock","src":"12383:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12392:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12395:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12385:6:17"},"nodeType":"YulFunctionCall","src":"12385:12:17"},"nodeType":"YulExpressionStatement","src":"12385:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12358:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"12367:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12354:3:17"},"nodeType":"YulFunctionCall","src":"12354:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"12379:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12350:3:17"},"nodeType":"YulFunctionCall","src":"12350:32:17"},"nodeType":"YulIf","src":"12347:52:17"},{"nodeType":"YulVariableDeclaration","src":"12408:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12434:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12421:12:17"},"nodeType":"YulFunctionCall","src":"12421:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12412:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12477:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"12453:23:17"},"nodeType":"YulFunctionCall","src":"12453:30:17"},"nodeType":"YulExpressionStatement","src":"12453:30:17"},{"nodeType":"YulAssignment","src":"12492:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"12502:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12492:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12303:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12314:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12326:6:17","type":""}],"src":"12268:245:17"},{"body":{"nodeType":"YulBlock","src":"12550:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12567:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12574:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12579:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12570:3:17"},"nodeType":"YulFunctionCall","src":"12570:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12560:6:17"},"nodeType":"YulFunctionCall","src":"12560:31:17"},"nodeType":"YulExpressionStatement","src":"12560:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12607:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12610:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12600:6:17"},"nodeType":"YulFunctionCall","src":"12600:15:17"},"nodeType":"YulExpressionStatement","src":"12600:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12631:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12634:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12624:6:17"},"nodeType":"YulFunctionCall","src":"12624:15:17"},"nodeType":"YulExpressionStatement","src":"12624:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12518:127:17"},{"body":{"nodeType":"YulBlock","src":"12697:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"12728:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12730:16:17"},"nodeType":"YulFunctionCall","src":"12730:18:17"},"nodeType":"YulExpressionStatement","src":"12730:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12713:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12724:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12720:3:17"},"nodeType":"YulFunctionCall","src":"12720:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12710:2:17"},"nodeType":"YulFunctionCall","src":"12710:17:17"},"nodeType":"YulIf","src":"12707:43:17"},{"nodeType":"YulAssignment","src":"12759:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12770:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"12777:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12766:3:17"},"nodeType":"YulFunctionCall","src":"12766:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12759:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12679:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12689:3:17","type":""}],"src":"12650:135:17"},{"body":{"nodeType":"YulBlock","src":"12891:125:17","statements":[{"nodeType":"YulAssignment","src":"12901:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12913:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12924:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12909:3:17"},"nodeType":"YulFunctionCall","src":"12909:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12901:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12943:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12958:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12966:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12954:3:17"},"nodeType":"YulFunctionCall","src":"12954:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12936:6:17"},"nodeType":"YulFunctionCall","src":"12936:74:17"},"nodeType":"YulExpressionStatement","src":"12936:74:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12860:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12871:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12882:4:17","type":""}],"src":"12790:226:17"},{"body":{"nodeType":"YulBlock","src":"13176:268:17","statements":[{"nodeType":"YulAssignment","src":"13186:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13198:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13209:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13194:3:17"},"nodeType":"YulFunctionCall","src":"13194:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13186:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"13221:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"13231:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13225:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13289:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13304:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"13312:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13300:3:17"},"nodeType":"YulFunctionCall","src":"13300:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13282:6:17"},"nodeType":"YulFunctionCall","src":"13282:34:17"},"nodeType":"YulExpressionStatement","src":"13282:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13336:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13347:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13332:3:17"},"nodeType":"YulFunctionCall","src":"13332:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13356:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"13364:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13352:3:17"},"nodeType":"YulFunctionCall","src":"13352:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13325:6:17"},"nodeType":"YulFunctionCall","src":"13325:43:17"},"nodeType":"YulExpressionStatement","src":"13325:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13388:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13399:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13384:3:17"},"nodeType":"YulFunctionCall","src":"13384:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13408:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13420:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13425:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13416:3:17"},"nodeType":"YulFunctionCall","src":"13416:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13404:3:17"},"nodeType":"YulFunctionCall","src":"13404:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13377:6:17"},"nodeType":"YulFunctionCall","src":"13377:61:17"},"nodeType":"YulExpressionStatement","src":"13377:61:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13129:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13140:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13148:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13156:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13167:4:17","type":""}],"src":"13021:423:17"},{"body":{"nodeType":"YulBlock","src":"13516:200:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13533:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"13538:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13526:6:17"},"nodeType":"YulFunctionCall","src":"13526:19:17"},"nodeType":"YulExpressionStatement","src":"13526:19:17"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13571:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13576:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13567:3:17"},"nodeType":"YulFunctionCall","src":"13567:14:17"},{"name":"start","nodeType":"YulIdentifier","src":"13583:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"13590:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"13554:12:17"},"nodeType":"YulFunctionCall","src":"13554:43:17"},"nodeType":"YulExpressionStatement","src":"13554:43:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13621:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"13626:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13617:3:17"},"nodeType":"YulFunctionCall","src":"13617:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"13635:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13613:3:17"},"nodeType":"YulFunctionCall","src":"13613:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"13642:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13606:6:17"},"nodeType":"YulFunctionCall","src":"13606:38:17"},"nodeType":"YulExpressionStatement","src":"13606:38:17"},{"nodeType":"YulAssignment","src":"13653:57:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13668:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13681:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13689:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13677:3:17"},"nodeType":"YulFunctionCall","src":"13677:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13698:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13694:3:17"},"nodeType":"YulFunctionCall","src":"13694:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13673:3:17"},"nodeType":"YulFunctionCall","src":"13673:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13664:3:17"},"nodeType":"YulFunctionCall","src":"13664:39:17"},{"kind":"number","nodeType":"YulLiteral","src":"13705:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13660:3:17"},"nodeType":"YulFunctionCall","src":"13660:50:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13653:3:17"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"13485:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"13492:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13500:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13508:3:17","type":""}],"src":"13449:267:17"},{"body":{"nodeType":"YulBlock","src":"13852:116:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13869:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13880:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13862:6:17"},"nodeType":"YulFunctionCall","src":"13862:21:17"},"nodeType":"YulExpressionStatement","src":"13862:21:17"},{"nodeType":"YulAssignment","src":"13892:70:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13927:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"13935:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13947:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13958:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13943:3:17"},"nodeType":"YulFunctionCall","src":"13943:18:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"13900:26:17"},"nodeType":"YulFunctionCall","src":"13900:62:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13892:4:17"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13813:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13824:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13832:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13843:4:17","type":""}],"src":"13721:247:17"},{"body":{"nodeType":"YulBlock","src":"14053:169:17","statements":[{"body":{"nodeType":"YulBlock","src":"14099:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14108:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14111:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14101:6:17"},"nodeType":"YulFunctionCall","src":"14101:12:17"},"nodeType":"YulExpressionStatement","src":"14101:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14074:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"14083:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14070:3:17"},"nodeType":"YulFunctionCall","src":"14070:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"14095:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14066:3:17"},"nodeType":"YulFunctionCall","src":"14066:32:17"},"nodeType":"YulIf","src":"14063:52:17"},{"nodeType":"YulVariableDeclaration","src":"14124:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14143:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14137:5:17"},"nodeType":"YulFunctionCall","src":"14137:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14128:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14186:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"14162:23:17"},"nodeType":"YulFunctionCall","src":"14162:30:17"},"nodeType":"YulExpressionStatement","src":"14162:30:17"},{"nodeType":"YulAssignment","src":"14201:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"14211:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14201:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14019:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14030:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14042:6:17","type":""}],"src":"13973:249:17"},{"body":{"nodeType":"YulBlock","src":"14412:281:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14422:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"14432:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14426:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14490:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14505:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"14513:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14501:3:17"},"nodeType":"YulFunctionCall","src":"14501:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14483:6:17"},"nodeType":"YulFunctionCall","src":"14483:34:17"},"nodeType":"YulExpressionStatement","src":"14483:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14537:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14548:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14533:3:17"},"nodeType":"YulFunctionCall","src":"14533:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14557:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"14565:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14553:3:17"},"nodeType":"YulFunctionCall","src":"14553:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14526:6:17"},"nodeType":"YulFunctionCall","src":"14526:43:17"},"nodeType":"YulExpressionStatement","src":"14526:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14589:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14600:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14585:3:17"},"nodeType":"YulFunctionCall","src":"14585:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"14605:2:17","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14578:6:17"},"nodeType":"YulFunctionCall","src":"14578:30:17"},"nodeType":"YulExpressionStatement","src":"14578:30:17"},{"nodeType":"YulAssignment","src":"14617:70:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14652:6:17"},{"name":"value3","nodeType":"YulIdentifier","src":"14660:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14672:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14683:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14668:3:17"},"nodeType":"YulFunctionCall","src":"14668:18:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"14625:26:17"},"nodeType":"YulFunctionCall","src":"14625:62:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14617:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14357:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14368:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14376:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14384:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14392:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14403:4:17","type":""}],"src":"14227:466:17"},{"body":{"nodeType":"YulBlock","src":"14747:79:17","statements":[{"nodeType":"YulAssignment","src":"14757:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14769:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"14772:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14765:3:17"},"nodeType":"YulFunctionCall","src":"14765:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14757:4:17"}]},{"body":{"nodeType":"YulBlock","src":"14798:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14800:16:17"},"nodeType":"YulFunctionCall","src":"14800:18:17"},"nodeType":"YulExpressionStatement","src":"14800:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"14789:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"14795:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14786:2:17"},"nodeType":"YulFunctionCall","src":"14786:11:17"},"nodeType":"YulIf","src":"14783:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14729:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"14732:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14738:4:17","type":""}],"src":"14698:128:17"},{"body":{"nodeType":"YulBlock","src":"14961:201:17","statements":[{"body":{"nodeType":"YulBlock","src":"14999:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15008:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15011:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15001:6:17"},"nodeType":"YulFunctionCall","src":"15001:12:17"},"nodeType":"YulExpressionStatement","src":"15001:12:17"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14977:10:17"},{"name":"endIndex","nodeType":"YulIdentifier","src":"14989:8:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14974:2:17"},"nodeType":"YulFunctionCall","src":"14974:24:17"},"nodeType":"YulIf","src":"14971:44:17"},{"body":{"nodeType":"YulBlock","src":"15048:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15057:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15060:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15050:6:17"},"nodeType":"YulFunctionCall","src":"15050:12:17"},"nodeType":"YulExpressionStatement","src":"15050:12:17"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15030:8:17"},{"name":"length","nodeType":"YulIdentifier","src":"15040:6:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15027:2:17"},"nodeType":"YulFunctionCall","src":"15027:20:17"},"nodeType":"YulIf","src":"15024:40:17"},{"nodeType":"YulAssignment","src":"15073:36:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15090:6:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15098:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15086:3:17"},"nodeType":"YulFunctionCall","src":"15086:23:17"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"15073:9:17"}]},{"nodeType":"YulAssignment","src":"15118:38:17","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15135:8:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15145:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15131:3:17"},"nodeType":"YulFunctionCall","src":"15131:25:17"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"15118:9:17"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14895:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"14903:6:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14911:10:17","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"14923:8:17","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"14936:9:17","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"14947:9:17","type":""}],"src":"14831:331:17"},{"body":{"nodeType":"YulBlock","src":"15199:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15216:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15223:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15228:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15219:3:17"},"nodeType":"YulFunctionCall","src":"15219:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15209:6:17"},"nodeType":"YulFunctionCall","src":"15209:31:17"},"nodeType":"YulExpressionStatement","src":"15209:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15256:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15259:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15249:6:17"},"nodeType":"YulFunctionCall","src":"15249:15:17"},"nodeType":"YulExpressionStatement","src":"15249:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15280:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15283:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15273:6:17"},"nodeType":"YulFunctionCall","src":"15273:15:17"},"nodeType":"YulExpressionStatement","src":"15273:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"15167:127:17"},{"body":{"nodeType":"YulBlock","src":"15393:427:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15403:51:17","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"15442:11:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15429:12:17"},"nodeType":"YulFunctionCall","src":"15429:25:17"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"15407:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"15543:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15552:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15555:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15545:6:17"},"nodeType":"YulFunctionCall","src":"15545:12:17"},"nodeType":"YulExpressionStatement","src":"15545:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"15477:18:17"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"15505:12:17"},"nodeType":"YulFunctionCall","src":"15505:14:17"},{"name":"base_ref","nodeType":"YulIdentifier","src":"15521:8:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15501:3:17"},"nodeType":"YulFunctionCall","src":"15501:29:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15536:2:17","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15532:3:17"},"nodeType":"YulFunctionCall","src":"15532:7:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15497:3:17"},"nodeType":"YulFunctionCall","src":"15497:43:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15473:3:17"},"nodeType":"YulFunctionCall","src":"15473:68:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15466:6:17"},"nodeType":"YulFunctionCall","src":"15466:76:17"},"nodeType":"YulIf","src":"15463:96:17"},{"nodeType":"YulVariableDeclaration","src":"15568:47:17","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"15586:8:17"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"15596:18:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15582:3:17"},"nodeType":"YulFunctionCall","src":"15582:33:17"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"15572:6:17","type":""}]},{"nodeType":"YulAssignment","src":"15624:30:17","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"15647:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15634:12:17"},"nodeType":"YulFunctionCall","src":"15634:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15624:6:17"}]},{"body":{"nodeType":"YulBlock","src":"15697:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15706:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15709:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15699:6:17"},"nodeType":"YulFunctionCall","src":"15699:12:17"},"nodeType":"YulExpressionStatement","src":"15699:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15669:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"15677:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15666:2:17"},"nodeType":"YulFunctionCall","src":"15666:30:17"},"nodeType":"YulIf","src":"15663:50:17"},{"nodeType":"YulAssignment","src":"15722:25:17","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"15734:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"15742:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15730:3:17"},"nodeType":"YulFunctionCall","src":"15730:17:17"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"15722:4:17"}]},{"body":{"nodeType":"YulBlock","src":"15798:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15807:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15810:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15800:6:17"},"nodeType":"YulFunctionCall","src":"15800:12:17"},"nodeType":"YulExpressionStatement","src":"15800:12:17"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"15763:4:17"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"15773:12:17"},"nodeType":"YulFunctionCall","src":"15773:14:17"},{"name":"length","nodeType":"YulIdentifier","src":"15789:6:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15769:3:17"},"nodeType":"YulFunctionCall","src":"15769:27:17"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"15759:3:17"},"nodeType":"YulFunctionCall","src":"15759:38:17"},"nodeType":"YulIf","src":"15756:58:17"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"15350:8:17","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"15360:11:17","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"15376:4:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"15382:6:17","type":""}],"src":"15299:521:17"},{"body":{"nodeType":"YulBlock","src":"16018:247:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16041:3:17"},{"name":"value0","nodeType":"YulIdentifier","src":"16046:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"16054:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16028:12:17"},"nodeType":"YulFunctionCall","src":"16028:33:17"},"nodeType":"YulExpressionStatement","src":"16028:33:17"},{"nodeType":"YulVariableDeclaration","src":"16070:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16084:3:17"},{"name":"value1","nodeType":"YulIdentifier","src":"16089:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16080:3:17"},"nodeType":"YulFunctionCall","src":"16080:16:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16074:2:17","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16112:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"16116:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16105:6:17"},"nodeType":"YulFunctionCall","src":"16105:13:17"},"nodeType":"YulExpressionStatement","src":"16105:13:17"},{"nodeType":"YulVariableDeclaration","src":"16127:27:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16147:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16141:5:17"},"nodeType":"YulFunctionCall","src":"16141:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16131:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16202:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16210:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16198:3:17"},"nodeType":"YulFunctionCall","src":"16198:17:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16217:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"16221:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16163:34:17"},"nodeType":"YulFunctionCall","src":"16163:65:17"},"nodeType":"YulExpressionStatement","src":"16163:65:17"},{"nodeType":"YulAssignment","src":"16237:22:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16248:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"16252:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16244:3:17"},"nodeType":"YulFunctionCall","src":"16244:15:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16237:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15978:3:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15983:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15991:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15999:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16010:3:17","type":""}],"src":"15825:440:17"},{"body":{"nodeType":"YulBlock","src":"16453:321:17","statements":[{"nodeType":"YulAssignment","src":"16463:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16475:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16486:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16471:3:17"},"nodeType":"YulFunctionCall","src":"16471:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16463:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"16499:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16509:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16503:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16567:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16582:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16590:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16578:3:17"},"nodeType":"YulFunctionCall","src":"16578:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16560:6:17"},"nodeType":"YulFunctionCall","src":"16560:34:17"},"nodeType":"YulExpressionStatement","src":"16560:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16614:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16625:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16610:3:17"},"nodeType":"YulFunctionCall","src":"16610:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16634:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16642:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16630:3:17"},"nodeType":"YulFunctionCall","src":"16630:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16603:6:17"},"nodeType":"YulFunctionCall","src":"16603:43:17"},"nodeType":"YulExpressionStatement","src":"16603:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16666:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16677:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16662:3:17"},"nodeType":"YulFunctionCall","src":"16662:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16686:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16694:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16682:3:17"},"nodeType":"YulFunctionCall","src":"16682:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16655:6:17"},"nodeType":"YulFunctionCall","src":"16655:43:17"},"nodeType":"YulExpressionStatement","src":"16655:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16718:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16729:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16714:3:17"},"nodeType":"YulFunctionCall","src":"16714:18:17"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16738:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16750:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"16755:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16746:3:17"},"nodeType":"YulFunctionCall","src":"16746:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16734:3:17"},"nodeType":"YulFunctionCall","src":"16734:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16707:6:17"},"nodeType":"YulFunctionCall","src":"16707:61:17"},"nodeType":"YulExpressionStatement","src":"16707:61:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16398:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16409:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16417:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16425:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16433:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16444:4:17","type":""}],"src":"16270:504:17"},{"body":{"nodeType":"YulBlock","src":"16826:129:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16836:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16846:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16840:2:17","type":""}]},{"nodeType":"YulAssignment","src":"16869:34:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16884:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16887:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16880:3:17"},"nodeType":"YulFunctionCall","src":"16880:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16896:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16899:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16892:3:17"},"nodeType":"YulFunctionCall","src":"16892:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16876:3:17"},"nodeType":"YulFunctionCall","src":"16876:27:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"16869:3:17"}]},{"body":{"nodeType":"YulBlock","src":"16927:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16929:16:17"},"nodeType":"YulFunctionCall","src":"16929:18:17"},"nodeType":"YulExpressionStatement","src":"16929:18:17"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"16918:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"16923:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16915:2:17"},"nodeType":"YulFunctionCall","src":"16915:11:17"},"nodeType":"YulIf","src":"16912:37:17"}]},"name":"checked_add_t_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16809:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"16812:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"16818:3:17","type":""}],"src":"16779:176:17"},{"body":{"nodeType":"YulBlock","src":"17171:347:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17188:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17203:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17211:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17199:3:17"},"nodeType":"YulFunctionCall","src":"17199:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17181:6:17"},"nodeType":"YulFunctionCall","src":"17181:46:17"},"nodeType":"YulExpressionStatement","src":"17181:46:17"},{"nodeType":"YulVariableDeclaration","src":"17236:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17246:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17240:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17308:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17319:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17304:3:17"},"nodeType":"YulFunctionCall","src":"17304:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17328:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"17336:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17324:3:17"},"nodeType":"YulFunctionCall","src":"17324:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17297:6:17"},"nodeType":"YulFunctionCall","src":"17297:43:17"},"nodeType":"YulExpressionStatement","src":"17297:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17360:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17371:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17356:3:17"},"nodeType":"YulFunctionCall","src":"17356:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17380:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"17388:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17376:3:17"},"nodeType":"YulFunctionCall","src":"17376:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17349:6:17"},"nodeType":"YulFunctionCall","src":"17349:43:17"},"nodeType":"YulExpressionStatement","src":"17349:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17412:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17423:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17408:3:17"},"nodeType":"YulFunctionCall","src":"17408:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"17428:3:17","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17401:6:17"},"nodeType":"YulFunctionCall","src":"17401:31:17"},"nodeType":"YulExpressionStatement","src":"17401:31:17"},{"nodeType":"YulAssignment","src":"17441:71:17","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17476:6:17"},{"name":"value4","nodeType":"YulIdentifier","src":"17484:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17496:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17507:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17492:3:17"},"nodeType":"YulFunctionCall","src":"17492:19:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"17449:26:17"},"nodeType":"YulFunctionCall","src":"17449:63:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17441:4:17"}]}]},"name":"abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17108:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17119:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17127:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17135:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17143:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17151:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17162:4:17","type":""}],"src":"16960:558:17"},{"body":{"nodeType":"YulBlock","src":"17650:193:17","statements":[{"nodeType":"YulAssignment","src":"17660:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17672:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17683:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17668:3:17"},"nodeType":"YulFunctionCall","src":"17668:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17660:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17702:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17717:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17725:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17713:3:17"},"nodeType":"YulFunctionCall","src":"17713:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17695:6:17"},"nodeType":"YulFunctionCall","src":"17695:74:17"},"nodeType":"YulExpressionStatement","src":"17695:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17789:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17800:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:17"},"nodeType":"YulFunctionCall","src":"17785:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17809:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17817:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17805:3:17"},"nodeType":"YulFunctionCall","src":"17805:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17778:6:17"},"nodeType":"YulFunctionCall","src":"17778:59:17"},"nodeType":"YulExpressionStatement","src":"17778:59:17"}]},"name":"abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17611:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17622:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17630:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17641:4:17","type":""}],"src":"17523:320:17"},{"body":{"nodeType":"YulBlock","src":"17947:103:17","statements":[{"nodeType":"YulAssignment","src":"17957:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17969:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17980:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17965:3:17"},"nodeType":"YulFunctionCall","src":"17965:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17957:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17999:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18014:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18026:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18031:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18022:3:17"},"nodeType":"YulFunctionCall","src":"18022:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18010:3:17"},"nodeType":"YulFunctionCall","src":"18010:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17992:6:17"},"nodeType":"YulFunctionCall","src":"17992:52:17"},"nodeType":"YulExpressionStatement","src":"17992:52:17"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17916:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17927:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17938:4:17","type":""}],"src":"17848:202:17"},{"body":{"nodeType":"YulBlock","src":"18155:223:17","statements":[{"nodeType":"YulVariableDeclaration","src":"18165:29:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"18188:5:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18175:12:17"},"nodeType":"YulFunctionCall","src":"18175:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18169:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18203:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18217:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18222:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18213:3:17"},"nodeType":"YulFunctionCall","src":"18213:20:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"18207:2:17","type":""}]},{"nodeType":"YulAssignment","src":"18242:20:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"18255:2:17"},{"name":"_2","nodeType":"YulIdentifier","src":"18259:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18251:3:17"},"nodeType":"YulFunctionCall","src":"18251:11:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18242:5:17"}]},{"body":{"nodeType":"YulBlock","src":"18293:79:17","statements":[{"nodeType":"YulAssignment","src":"18307:55:17","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"18324:2:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18336:1:17","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18343:1:17","type":"","value":"4"},{"name":"len","nodeType":"YulIdentifier","src":"18346:3:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18339:3:17"},"nodeType":"YulFunctionCall","src":"18339:11:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18332:3:17"},"nodeType":"YulFunctionCall","src":"18332:19:17"},{"name":"_2","nodeType":"YulIdentifier","src":"18353:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18328:3:17"},"nodeType":"YulFunctionCall","src":"18328:28:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18320:3:17"},"nodeType":"YulFunctionCall","src":"18320:37:17"},{"name":"_2","nodeType":"YulIdentifier","src":"18359:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18316:3:17"},"nodeType":"YulFunctionCall","src":"18316:46:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18307:5:17"}]}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"18277:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"18282:1:17","type":"","value":"4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18274:2:17"},"nodeType":"YulFunctionCall","src":"18274:10:17"},"nodeType":"YulIf","src":"18271:101:17"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"18130:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"18137:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18145:5:17","type":""}],"src":"18055:323:17"},{"body":{"nodeType":"YulBlock","src":"18510:195:17","statements":[{"nodeType":"YulAssignment","src":"18520:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18532:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18543:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18528:3:17"},"nodeType":"YulFunctionCall","src":"18528:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18520:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18562:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18577:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"18585:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18573:3:17"},"nodeType":"YulFunctionCall","src":"18573:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18555:6:17"},"nodeType":"YulFunctionCall","src":"18555:74:17"},"nodeType":"YulExpressionStatement","src":"18555:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18649:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18660:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18645:3:17"},"nodeType":"YulFunctionCall","src":"18645:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18669:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18681:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18686:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18677:3:17"},"nodeType":"YulFunctionCall","src":"18677:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18665:3:17"},"nodeType":"YulFunctionCall","src":"18665:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18638:6:17"},"nodeType":"YulFunctionCall","src":"18638:61:17"},"nodeType":"YulExpressionStatement","src":"18638:61:17"}]},"name":"abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18471:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18482:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18490:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18501:4:17","type":""}],"src":"18383:322:17"},{"body":{"nodeType":"YulBlock","src":"18847:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"18857:27:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18877:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18871:5:17"},"nodeType":"YulFunctionCall","src":"18871:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18861:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18932:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"18940:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18928:3:17"},"nodeType":"YulFunctionCall","src":"18928:17:17"},{"name":"pos","nodeType":"YulIdentifier","src":"18947:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"18952:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"18893:34:17"},"nodeType":"YulFunctionCall","src":"18893:66:17"},"nodeType":"YulExpressionStatement","src":"18893:66:17"},{"nodeType":"YulAssignment","src":"18968:23:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18979:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"18984:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18975:3:17"},"nodeType":"YulFunctionCall","src":"18975:16:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18968:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18823:3:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18828:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18839:3:17","type":""}],"src":"18710:287:17"},{"body":{"nodeType":"YulBlock","src":"19149:216:17","statements":[{"nodeType":"YulAssignment","src":"19159:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19171:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19182:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19167:3:17"},"nodeType":"YulFunctionCall","src":"19167:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19159:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19201:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19216:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19224:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19212:3:17"},"nodeType":"YulFunctionCall","src":"19212:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19194:6:17"},"nodeType":"YulFunctionCall","src":"19194:42:17"},"nodeType":"YulExpressionStatement","src":"19194:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19256:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19267:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19252:3:17"},"nodeType":"YulFunctionCall","src":"19252:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19276:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19284:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19272:3:17"},"nodeType":"YulFunctionCall","src":"19272:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19245:6:17"},"nodeType":"YulFunctionCall","src":"19245:55:17"},"nodeType":"YulExpressionStatement","src":"19245:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19320:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19331:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19316:3:17"},"nodeType":"YulFunctionCall","src":"19316:18:17"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19350:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19343:6:17"},"nodeType":"YulFunctionCall","src":"19343:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19336:6:17"},"nodeType":"YulFunctionCall","src":"19336:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19309:6:17"},"nodeType":"YulFunctionCall","src":"19309:50:17"},"nodeType":"YulExpressionStatement","src":"19309:50:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19102:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19113:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19121:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19129:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19140:4:17","type":""}],"src":"19002:363:17"},{"body":{"nodeType":"YulBlock","src":"19495:157:17","statements":[{"nodeType":"YulAssignment","src":"19505:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19517:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19528:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19513:3:17"},"nodeType":"YulFunctionCall","src":"19513:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19505:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19547:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19562:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19570:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19558:3:17"},"nodeType":"YulFunctionCall","src":"19558:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19540:6:17"},"nodeType":"YulFunctionCall","src":"19540:42:17"},"nodeType":"YulExpressionStatement","src":"19540:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19602:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19613:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19598:3:17"},"nodeType":"YulFunctionCall","src":"19598:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19622:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19630:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19618:3:17"},"nodeType":"YulFunctionCall","src":"19618:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19591:6:17"},"nodeType":"YulFunctionCall","src":"19591:55:17"},"nodeType":"YulExpressionStatement","src":"19591:55:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19456:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19467:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19475:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19486:4:17","type":""}],"src":"19370:282:17"},{"body":{"nodeType":"YulBlock","src":"19735:177:17","statements":[{"body":{"nodeType":"YulBlock","src":"19781:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19790:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19793:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19783:6:17"},"nodeType":"YulFunctionCall","src":"19783:12:17"},"nodeType":"YulExpressionStatement","src":"19783:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19756:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"19765:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19752:3:17"},"nodeType":"YulFunctionCall","src":"19752:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"19777:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19748:3:17"},"nodeType":"YulFunctionCall","src":"19748:32:17"},"nodeType":"YulIf","src":"19745:52:17"},{"nodeType":"YulVariableDeclaration","src":"19806:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19832:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19819:12:17"},"nodeType":"YulFunctionCall","src":"19819:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19810:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19876:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"19851:24:17"},"nodeType":"YulFunctionCall","src":"19851:31:17"},"nodeType":"YulExpressionStatement","src":"19851:31:17"},{"nodeType":"YulAssignment","src":"19891:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"19901:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19891:6:17"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19701:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19712:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19724:6:17","type":""}],"src":"19657:255:17"},{"body":{"nodeType":"YulBlock","src":"19965:127:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19975:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19985:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19979:2:17","type":""}]},{"nodeType":"YulAssignment","src":"20004:35:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"20020:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"20023:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20016:3:17"},"nodeType":"YulFunctionCall","src":"20016:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"20032:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"20035:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20028:3:17"},"nodeType":"YulFunctionCall","src":"20028:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20012:3:17"},"nodeType":"YulFunctionCall","src":"20012:27:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"20004:4:17"}]},{"body":{"nodeType":"YulBlock","src":"20064:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20066:16:17"},"nodeType":"YulFunctionCall","src":"20066:18:17"},"nodeType":"YulExpressionStatement","src":"20066:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"20054:4:17"},{"name":"_1","nodeType":"YulIdentifier","src":"20060:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20051:2:17"},"nodeType":"YulFunctionCall","src":"20051:12:17"},"nodeType":"YulIf","src":"20048:38:17"}]},"name":"checked_sub_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19947:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"19950:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"19956:4:17","type":""}],"src":"19917:175:17"},{"body":{"nodeType":"YulBlock","src":"20233:130:17","statements":[{"nodeType":"YulAssignment","src":"20243:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20255:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20266:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20251:3:17"},"nodeType":"YulFunctionCall","src":"20251:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20243:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20285:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20300:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"20308:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20296:3:17"},"nodeType":"YulFunctionCall","src":"20296:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20278:6:17"},"nodeType":"YulFunctionCall","src":"20278:36:17"},"nodeType":"YulExpressionStatement","src":"20278:36:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20334:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20345:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20330:3:17"},"nodeType":"YulFunctionCall","src":"20330:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"20350:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20323:6:17"},"nodeType":"YulFunctionCall","src":"20323:34:17"},"nodeType":"YulExpressionStatement","src":"20323:34:17"}]},"name":"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20194:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20205:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20213:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20224:4:17","type":""}],"src":"20097:266:17"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_array_bytes4_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes4_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := abi_decode_uint64(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint64t_addresst_uint32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := abi_decode_uint32(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint64t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffff\n        mstore(headStart, and(value0, _1))\n        let _2 := 0xffffffff\n        mstore(add(headStart, 32), and(value1, _2))\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_decode_tuple_t_uint64t_uint64(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        value1 := abi_decode_uint64(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes4(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bytes4(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint64t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint64t_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        value1 := abi_decode_uint32(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes4_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _2 := mload(srcPtr)\n            let length_1 := mload(_2)\n            mstore(tail_2, length_1)\n            copy_memory_to_memory_with_cleanup(add(_2, _1), add(tail_2, _1), length_1)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), not(31))), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes4(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_bytes4(value_2)\n        value2 := value_2\n    }\n    function abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint32(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let value_1 := calldataload(add(headStart, 64))\n        if iszero(eq(value_1, and(value_1, 0xffffffffffff))) { revert(0, 0) }\n        value3 := value_1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, shl(224, 0xffffffff)))\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string_calldata(value2, value3, add(headStart, 96))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        let length := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), _1, length)\n        end := add(_1, length)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, shl(224, 0xffffffff)))\n    }\n    function checked_add_t_uint48(x, y) -> sum\n    {\n        let _1 := 0xffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffff))\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string_calldata(value3, value4, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4(array, len) -> value\n    {\n        let _1 := calldataload(array)\n        let _2 := shl(224, 0xffffffff)\n        value := and(_1, _2)\n        if lt(len, 4)\n        {\n            value := and(and(_1, shl(shl(3, sub(4, len)), _2)), _2)\n        }\n    }\n    function abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint32(x, y) -> diff\n    {\n        let _1 := 0xffffffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101e35760003560e01c80636d5115bd11610102578063b700961311610095578063d22b598911610064578063d22b5989146106bf578063d6bb62c6146106df578063f801a698146106ff578063fe0776f51461073957600080fd5b8063b70096131461062d578063b7d2b16214610669578063cc1b6c8114610689578063d1f856ee1461069f57600080fd5b8063a166aa89116100d1578063a166aa891461055f578063a64d95ce146105b2578063abd9bd2a146105d2578063ac9650d81461060057600080fd5b80636d5115bd146104b457806375b238fc1461050a578063853551b81461051f57806394c7d7ee1461053f57600080fd5b806330cae1871161017a5780634665096d116101495780634665096d146104215780634c1da1e2146104375780635296295214610457578063530dd4561461047757600080fd5b806330cae187146103725780633adc277a146103925780633ca7c02a146103c95780634136a33c146103e457600080fd5b806318ff183c116101b657806318ff183c146102c55780631cff79cd146102e557806325c471a0146102f85780633078f1141461031857600080fd5b806308d6122d146101e85780630b0a93ba1461020a57806312be872714610270578063167bd395146102a5575b600080fd5b3480156101f457600080fd5b506102086102033660046122d2565b610759565b005b34801561021657600080fd5b50610253610225366004612338565b6001600160401b03908116600090815260016020819052604090912001546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561027c57600080fd5b5061029061028b366004612338565b6107b4565b60405163ffffffff9091168152602001610267565b3480156102b157600080fd5b506102086102c0366004612353565b6107ef565b3480156102d157600080fd5b506102086102e0366004612391565b610805565b6102906102f3366004612400565b61086c565b34801561030457600080fd5b50610208610313366004612468565b6109d9565b34801561032457600080fd5b506103386103333660046124ad565b6109fb565b604051610267949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b34801561037e57600080fd5b5061020861038d3660046124c9565b610a63565b34801561039e57600080fd5b506103b26103ad3660046124fc565b610a75565b60405165ffffffffffff9091168152602001610267565b3480156103d557600080fd5b506102536001600160401b0381565b3480156103f057600080fd5b506102906103ff3660046124fc565b6000908152600260205260409020546601000000000000900463ffffffff1690565b34801561042d57600080fd5b5062093a80610290565b34801561044357600080fd5b50610290610452366004612515565b610aa8565b34801561046357600080fd5b506102086104723660046124c9565b610ad6565b34801561048357600080fd5b50610253610492366004612338565b6001600160401b03908116600090815260016020819052604090912001541690565b3480156104c057600080fd5b506102536104cf366004612548565b6001600160a01b0382166000908152602081815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b34801561051657600080fd5b50610253600081565b34801561052b57600080fd5b5061020861053a366004612576565b610ae8565b34801561054b57600080fd5b5061020861055a366004612400565b610b7f565b34801561056b57600080fd5b506105a261057a366004612515565b6001600160a01b0316600090815260208190526040902060010154600160701b900460ff1690565b6040519015158152602001610267565b3480156105be57600080fd5b506102086105cd366004612594565b610c2b565b3480156105de57600080fd5b506105f26105ed3660046125be565b610c3d565b604051908152602001610267565b34801561060c57600080fd5b5061062061061b366004612622565b610c76565b6040516102679190612687565b34801561063957600080fd5b5061064d610648366004612701565b610d68565b60408051921515835263ffffffff909116602083015201610267565b34801561067557600080fd5b506102086106843660046124ad565b610e68565b34801561069557600080fd5b5062069780610290565b3480156106ab57600080fd5b5061064d6106ba3660046124ad565b610e7f565b3480156106cb57600080fd5b506102086106da36600461274c565b610efc565b3480156106eb57600080fd5b506102906106fa3660046125be565b610f0e565b34801561070b57600080fd5b5061071f61071a36600461276a565b61109d565b6040805192835263ffffffff909116602083015201610267565b34801561074557600080fd5b506102086107543660046124ad565b6111e5565b61076161120e565b60005b828110156107ad5761079d85858584818110610782576107826127dc565b905060200201602081019061079791906127f2565b84611289565b6107a681612825565b9050610764565b5050505050565b6001600160401b0381166000908152600160208190526040822001546107e990600160801b90046001600160701b031661130b565b92915050565b6107f761120e565b610801828261132a565b5050565b61080d61120e565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b15801561085057600080fd5b505af1158015610864573d6000803e3d6000fd5b505050505050565b600033818061087d838888886113db565b9150915081158015610893575063ffffffff8116155b156108e65782876108a4888861142e565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b60006108f484898989610c3d565b9050600063ffffffff831615158061091b575061091082610a75565b65ffffffffffff1615155b1561092c5761092982611446565b90505b60035461097f8a61093d8b8b61142e565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b6003819055506109c78a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250611549915050565b506003559450505050505b9392505050565b6109e161120e565b6109f583836109ef866107b4565b846115e6565b50505050565b6001600160401b03821660009081526001602090815260408083206001600160a01b03851684529091528120805465ffffffffffff811692918291829190610a5590660100000000000090046001600160701b0316611852565b969991985096509350505050565b610a6b61120e565b6108018282611875565b60008181526002602052604081205465ffffffffffff16610a9581611919565b610a9f57806109d2565b60009392505050565b6001600160a01b0381166000908152602081905260408120600101546107e9906001600160701b031661130b565b610ade61120e565b6108018282611948565b610af061120e565b6001600160401b0383161580610b0e57506001600160401b03838116145b15610b375760405163061c6a4360e21b81526001600160401b03841660048201526024016108dd565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051610b72929190612867565b60405180910390a2505050565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa158015610bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be49190612883565b6001600160e01b03191614610c1757604051630641fee960e31b81526001600160a01b03821660048201526024016108dd565b6107ad610c2685838686610c3d565b611446565b610c3361120e565b61080182826119ff565b600084848484604051602001610c5694939291906128a0565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115610ca057610ca06128f7565b604051908082528060200260200182016040528015610cd357816020015b6060815260200190600190039081610cbe5790505b50915060005b83811015610d6057610d3030868684818110610cf757610cf76127dc565b9050602002810190610d09919061290d565b85604051602001610d1c93929190612953565b604051602081830303815290604052611b1e565b838281518110610d4257610d426127dc565b60200260200101819052508080610d5890612825565b915050610cd9565b505092915050565b6001600160a01b0382166000908152602081905260408120600101548190600160701b900460ff1615610da057506000905080610e60565b306001600160a01b03861603610dfc57604080516001600160a01b0386166020808301919091526001600160e01b031986168284015282518083038401815260609092019092528051910120600354145b600091509150610e60565b6001600160a01b0384166000908152602081815260408083206001600160e01b0319871684529091528120546001600160401b03169080610e3d8389610e7f565b9150915081610e4e57600080610e58565b63ffffffff811615815b945094505050505b935093915050565b610e7061120e565b610e7a8282611b94565b505050565b60008067fffffffffffffffe196001600160401b03851601610ea75750600190506000610ef5565b600080610eb486866109fb565b5050915091508165ffffffffffff16600014158015610eea5750610ed6611c8e565b65ffffffffffff168265ffffffffffff1611155b93509150610ef59050565b9250929050565b610f0461120e565b6108018282611c9e565b60003381610f1c858561142e565b90506000610f2c88888888610c3d565b60008181526002602052604081205491925065ffffffffffff9091169003610f6a5760405163060a299b60e41b8152600481018290526024016108dd565b826001600160a01b0316886001600160a01b031614611038576000610f90600085610e7f565b506001600160a01b0389166000908152602081815260408083206001600160e01b03198816845290915281205491925090610fdd90610fd7906001600160401b0316610225565b86610e7f565b50905081158015610fec575080155b1561103557604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b0319851660648201526084016108dd565b50505b600081815260026020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b60008033816110ae828989896113db565b91505060008163ffffffff166110c2611c8e565b6110cc919061297a565b905063ffffffff82161580611103575060008665ffffffffffff1611801561110357508065ffffffffffff168665ffffffffffff16105b156111145782896108a48a8a61142e565b61112e8665ffffffffffff168265ffffffffffff16611d5b565b955061113c838a8a8a610c3d565b945061114785611d71565b60008581526002602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b4906111d1908a9088908f908f908f906129a0565b60405180910390a350505094509492505050565b6001600160a01b0381163314610e7057604051635f159e6360e01b815260040160405180910390fd5b3360008061121d838236611dbe565b9150915081610e7a578063ffffffff166000036112795760006112408136611eb7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b038216602482015290925060440190506108dd565b6109f5610c268430600036610c3d565b6001600160a01b0383166000818152602081815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b600080611320836001600160701b0316611852565b5090949350505050565b306001600160a01b0383160361135e57604051630b40d17960e31b81526001600160a01b03831660048201526024016108dd565b6001600160a01b038216600081815260208190526040908190206001018054841515600160701b026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb138906113cf90841515815260200190565b60405180910390a25050565b600080306001600160a01b03861603611402576113f9868585611dbe565b91509150611425565b6004831061141e576114198686610648878761142e565b6113f9565b5060009050805b94509492505050565b600061143d60048284866128cd565b6109d2916129e6565b60008181526002602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036114925760405163060a299b60e41b8152600481018590526024016108dd565b61149a611c8e565b65ffffffffffff168265ffffffffffff1611156114cd57604051630c65b5bd60e11b8152600481018590526024016108dd565b6114d682611919565b156114f757604051631e2975b960e21b8152600481018590526024016108dd565b600084815260026020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561156e5760405163cd78605960e01b81523060048201526024016108dd565b600080856001600160a01b0316848660405161158a9190612a14565b60006040518083038185875af1925050503d80600081146115c7576040519150601f19603f3d011682016040523d82523d6000602084013e6115cc565b606091505b50915091506115dc8683836120a0565b9695505050505050565b600067fffffffffffffffe196001600160401b038616016116255760405163061c6a4360e21b81526001600160401b03861660048201526024016108dd565b6001600160401b03851660009081526001602090815260408083206001600160a01b038816845290915281205465ffffffffffff1615908115611727578463ffffffff16611671611c8e565b61167b919061297a565b905060405180604001604052808265ffffffffffff1681526020016116a98663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526001602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff909116179190911790556117e4565b6001600160401b03871660009081526001602090815260408083206001600160a01b038a1684529091528120546117749166010000000000009091046001600160701b03169086906120fc565b6001600160401b03891660009081526001602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b600080600061186884611863611c8e565b6121a6565b9250925092509193909250565b6001600160401b038216158061189357506001600160401b03828116145b156118bc5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b038281166000818152600160208190526040808320909101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000611923611c8e565b65ffffffffffff1661193862093a808461297a565b65ffffffffffff16111592915050565b6001600160401b038216158061196657506001600160401b03828116145b1561198f5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b03828116600081815260016020819052604080832090910180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b67fffffffffffffffe196001600160401b03831601611a3c5760405163061c6a4360e21b81526001600160401b03831660048201526024016108dd565b6001600160401b038216600090815260016020819052604082200154611a7690600160801b90046001600160701b031683620697806120fc565b6001600160401b0385166000818152600160208190526040918290200180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890610b72908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051611b3b9190612a14565b600060405180830381855af49150503d8060008114611b76576040519150601f19603f3d011682016040523d82523d6000602084013e611b7b565b606091505b5091509150611b8b8583836120a0565b95945050505050565b600067fffffffffffffffe196001600160401b03841601611bd35760405163061c6a4360e21b81526001600160401b03841660048201526024016108dd565b6001600160401b03831660009081526001602090815260408083206001600160a01b038616845290915281205465ffffffffffff169003611c16575060006107e9565b6001600160401b03831660008181526001602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b6000611c99426121fa565b905090565b6001600160a01b038216600090815260208190526040812060010154611cd1906001600160701b031683620697806120fc565b6001600160a01b0385166000818152602081815260409182902060010180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101610b72565b6000818311611d6a57816109d2565b5090919050565b60008181526002602052604090205465ffffffffffff168015801590611d9d5750611d9b81611919565b155b156108015760405163813e945960e01b8152600481018390526024016108dd565b6000806004831015611dd557506000905080610e60565b306001600160a01b03861603611e3957610df130611df3868661142e565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206003541490565b6000806000611e488787611eb7565b92509250925082611e625760008094509450505050610e60565b600080611e6f848b610e7f565b9150915081611e8957600080965096505050505050610e60565b611e9f8363ffffffff168263ffffffff16611d5b565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015611ed257506000915081905080612099565b6000611ede868661142e565b90506001600160e01b031981166310a6aa3760e31b1480611f0f57506001600160e01b031981166330cae18760e01b145b80611f2a57506001600160e01b0319811663294b14a960e11b145b80611f4557506001600160e01b03198116635326cae760e11b145b80611f6057506001600160e01b0319811663d22b598960e01b145b15611f7657600160008093509350935050612099565b6001600160e01b0319811663063fc60f60e21b1480611fa557506001600160e01b0319811663167bd39560e01b145b80611fc057506001600160e01b031981166308d6122d60e01b145b15612002576000611fd560246004888a6128cd565b810190611fe29190612515565b90506000611fef82610aa8565b6001965060009550935061209992505050565b6001600160e01b0319811663012e238d60e51b148061203157506001600160e01b03198116635be958b160e11b145b1561208c57600061204660246004888a6128cd565b8101906120539190612338565b9050600161207d826001600160401b03908116600090815260016020819052604090912001541690565b60009450945094505050612099565b6000806000935093509350505b9250925092565b6060826120b5576120b082612231565b6109d2565b81511580156120cc57506001600160a01b0384163b155b156120f557604051639996b31560e01b81526001600160a01b03851660048201526024016108dd565b50806109d2565b6000806000612113866001600160701b031661130b565b905060006121508563ffffffff168763ffffffff168463ffffffff161161213b576000612145565b6121458885612a30565b63ffffffff16611d5b565b90508063ffffffff16612161611c8e565b61216b919061297a565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c81169087168111156121e5578282826121ea565b816000805b9550955095505050509250925092565b600065ffffffffffff82111561222d576040516306dfcc6560e41b815260306004820152602481018390526044016108dd565b5090565b8051156122415780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b038116811461225a57600080fd5b60008083601f84011261228457600080fd5b5081356001600160401b0381111561229b57600080fd5b6020830191508360208260051b8501011115610ef557600080fd5b80356001600160401b03811681146122cd57600080fd5b919050565b600080600080606085870312156122e857600080fd5b84356122f38161225d565b935060208501356001600160401b0381111561230e57600080fd5b61231a87828801612272565b909450925061232d9050604086016122b6565b905092959194509250565b60006020828403121561234a57600080fd5b6109d2826122b6565b6000806040838503121561236657600080fd5b82356123718161225d565b91506020830135801515811461238657600080fd5b809150509250929050565b600080604083850312156123a457600080fd5b82356123af8161225d565b915060208301356123868161225d565b60008083601f8401126123d157600080fd5b5081356001600160401b038111156123e857600080fd5b602083019150836020828501011115610ef557600080fd5b60008060006040848603121561241557600080fd5b83356124208161225d565b925060208401356001600160401b0381111561243b57600080fd5b612447868287016123bf565b9497909650939450505050565b803563ffffffff811681146122cd57600080fd5b60008060006060848603121561247d57600080fd5b612486846122b6565b925060208401356124968161225d565b91506124a460408501612454565b90509250925092565b600080604083850312156124c057600080fd5b6123af836122b6565b600080604083850312156124dc57600080fd5b6124e5836122b6565b91506124f3602084016122b6565b90509250929050565b60006020828403121561250e57600080fd5b5035919050565b60006020828403121561252757600080fd5b81356109d28161225d565b6001600160e01b03198116811461225a57600080fd5b6000806040838503121561255b57600080fd5b82356125668161225d565b9150602083013561238681612532565b60008060006040848603121561258b57600080fd5b612420846122b6565b600080604083850312156125a757600080fd5b6125b0836122b6565b91506124f360208401612454565b600080600080606085870312156125d457600080fd5b84356125df8161225d565b935060208501356125ef8161225d565b925060408501356001600160401b0381111561260a57600080fd5b612616878288016123bf565b95989497509550505050565b6000806020838503121561263557600080fd5b82356001600160401b0381111561264b57600080fd5b61265785828601612272565b90969095509350505050565b60005b8381101561267e578181015183820152602001612666565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156126f457878503603f19018452815180518087526126d5818989018a8501612663565b601f01601f1916959095018601945092850192908501906001016126ae565b5092979650505050505050565b60008060006060848603121561271657600080fd5b83356127218161225d565b925060208401356127318161225d565b9150604084013561274181612532565b809150509250925092565b6000806040838503121561275f57600080fd5b82356125b08161225d565b6000806000806060858703121561278057600080fd5b843561278b8161225d565b935060208501356001600160401b038111156127a657600080fd5b6127b2878288016123bf565b909450925050604085013565ffffffffffff811681146127d157600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561280457600080fd5b81356109d281612532565b634e487b7160e01b600052601160045260246000fd5b6000600182016128375761283761280f565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061287b60208301848661283e565b949350505050565b60006020828403121561289557600080fd5b81516109d281612532565b60006001600160a01b038087168352808616602084015250606060408301526115dc60608301848661283e565b600080858511156128dd57600080fd5b838611156128ea57600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261292457600080fd5b8301803591506001600160401b0382111561293e57600080fd5b602001915036819003821315610ef557600080fd5b828482376000838201600081528351612970818360208801612663565b0195945050505050565b65ffffffffffff8181168382160190808211156129995761299961280f565b5092915050565b65ffffffffffff8616815260006001600160a01b038087166020840152808616604084015250608060608301526129db60808301848661283e565b979650505050505050565b6001600160e01b03198135818116916004851015610d605760049490940360031b84901b1690921692915050565b60008251612a26818460208701612663565b9190910192915050565b63ffffffff8281168282160390808211156129995761299961280f56fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6D5115BD GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xB7009613 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD22B5989 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD22B5989 EQ PUSH2 0x6BF JUMPI DUP1 PUSH4 0xD6BB62C6 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xF801A698 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0xFE0776F5 EQ PUSH2 0x739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7009613 EQ PUSH2 0x62D JUMPI DUP1 PUSH4 0xB7D2B162 EQ PUSH2 0x669 JUMPI DUP1 PUSH4 0xCC1B6C81 EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xD1F856EE EQ PUSH2 0x69F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA166AA89 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA166AA89 EQ PUSH2 0x55F JUMPI DUP1 PUSH4 0xA64D95CE EQ PUSH2 0x5B2 JUMPI DUP1 PUSH4 0xABD9BD2A EQ PUSH2 0x5D2 JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6D5115BD EQ PUSH2 0x4B4 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x50A JUMPI DUP1 PUSH4 0x853551B8 EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0x94C7D7EE EQ PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x30CAE187 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4665096D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4665096D EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x4C1DA1E2 EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x52962952 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x530DD456 EQ PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x30CAE187 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x3ADC277A EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x4136A33C EQ PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18FF183C GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x18FF183C EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0x25C471A0 EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x3078F114 EQ PUSH2 0x318 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D6122D EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0xB0A93BA EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x12BE8727 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x167BD395 EQ PUSH2 0x2A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x22D2 JUMP JUMPDEST PUSH2 0x759 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH9 0x10000000000000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2353 JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2391 JUMP JUMPDEST PUSH2 0x805 JUMP JUMPDEST PUSH2 0x290 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2400 JUMP JUMPDEST PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x2468 JUMP JUMPDEST PUSH2 0x9D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x338 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x9FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x24FC JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x93A80 PUSH2 0x290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x2515 JUMP JUMPDEST PUSH2 0xAA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x24C9 JUMP JUMPDEST PUSH2 0xAD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x492 CALLDATASIZE PUSH1 0x4 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x2548 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x2576 JUMP JUMPDEST PUSH2 0xAE8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x55A CALLDATASIZE PUSH1 0x4 PUSH2 0x2400 JUMP JUMPDEST PUSH2 0xB7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A2 PUSH2 0x57A CALLDATASIZE PUSH1 0x4 PUSH2 0x2515 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x5CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2594 JUMP JUMPDEST PUSH2 0xC2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F2 PUSH2 0x5ED CALLDATASIZE PUSH1 0x4 PUSH2 0x25BE JUMP JUMPDEST PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x620 PUSH2 0x61B CALLDATASIZE PUSH1 0x4 PUSH2 0x2622 JUMP JUMPDEST PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x267 SWAP2 SWAP1 PUSH2 0x2687 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64D PUSH2 0x648 CALLDATASIZE PUSH1 0x4 PUSH2 0x2701 JUMP JUMPDEST PUSH2 0xD68 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xE68 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x69780 PUSH2 0x290 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64D PUSH2 0x6BA CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0xE7F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x274C JUMP JUMPDEST PUSH2 0xEFC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x290 PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x25BE JUMP JUMPDEST PUSH2 0xF0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F PUSH2 0x71A CALLDATASIZE PUSH1 0x4 PUSH2 0x276A JUMP JUMPDEST PUSH2 0x109D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AD JUMP JUMPDEST PUSH2 0x11E5 JUMP JUMPDEST PUSH2 0x761 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7AD JUMPI PUSH2 0x79D DUP6 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x782 JUMPI PUSH2 0x782 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x797 SWAP2 SWAP1 PUSH2 0x27F2 JUMP JUMPDEST DUP5 PUSH2 0x1289 JUMP JUMPDEST PUSH2 0x7A6 DUP2 PUSH2 0x2825 JUMP JUMPDEST SWAP1 POP PUSH2 0x764 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x7E9 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7F7 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x132A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x80D PUSH2 0x120E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x864 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 DUP1 PUSH2 0x87D DUP4 DUP9 DUP9 DUP9 PUSH2 0x13DB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x893 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x8E6 JUMPI DUP3 DUP8 PUSH2 0x8A4 DUP9 DUP9 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x81C6F24B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8F4 DUP5 DUP10 DUP10 DUP10 PUSH2 0xC3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x91B JUMPI POP PUSH2 0x910 DUP3 PUSH2 0xA75 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x92C JUMPI PUSH2 0x929 DUP3 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x97F DUP11 PUSH2 0x93D DUP12 DUP12 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH2 0x9C7 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP CALLVALUE SWAP3 POP PUSH2 0x1549 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x3 SSTORE SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x9E1 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x9F5 DUP4 DUP4 PUSH2 0x9EF DUP7 PUSH2 0x7B4 JUMP JUMPDEST DUP5 PUSH2 0x15E6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0xA55 SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x1852 JUMP JUMPDEST SWAP7 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA6B PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1875 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0xA95 DUP2 PUSH2 0x1919 JUMP JUMPDEST PUSH2 0xA9F JUMPI DUP1 PUSH2 0x9D2 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7E9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST PUSH2 0xADE PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1948 JUMP JUMPDEST PUSH2 0xAF0 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0xB0E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0xB37 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH32 0x1256F5B5ECB89CAEC12DB449738F2FBCD1BA5806CF38F35413F4E5C15BF6A450 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xB72 SWAP3 SWAP2 SWAP1 PUSH2 0x2867 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x8FB36037 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP4 SWAP2 PUSH4 0x8FB36037 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBE4 SWAP2 SWAP1 PUSH2 0x2883 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0xC17 JUMPI PUSH1 0x40 MLOAD PUSH4 0x641FEE9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x7AD PUSH2 0xC26 DUP6 DUP4 DUP7 DUP7 PUSH2 0xC3D JUMP JUMPDEST PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC33 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x19FF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC56 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x28A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xCA0 JUMPI PUSH2 0xCA0 PUSH2 0x28F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCD3 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCBE JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD60 JUMPI PUSH2 0xD30 ADDRESS DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xCF7 JUMPI PUSH2 0xCF7 PUSH2 0x27DC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xD09 SWAP2 SWAP1 PUSH2 0x290D JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD1C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2953 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1B1E JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD42 JUMPI PUSH2 0xD42 PUSH2 0x27DC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xD58 SWAP1 PUSH2 0x2825 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCD9 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xDA0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xE60 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0xDFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 DUP5 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SLOAD EQ JUMPDEST PUSH1 0x0 SWAP2 POP SWAP2 POP PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP1 PUSH2 0xE3D DUP4 DUP10 PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 PUSH2 0xE58 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO DUP2 JUMPDEST SWAP5 POP SWAP5 POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE70 PUSH2 0x120E JUMP JUMPDEST PUSH2 0xE7A DUP3 DUP3 PUSH2 0x1B94 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND ADD PUSH2 0xEA7 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0xEF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB4 DUP7 DUP7 PUSH2 0x9FB JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0xEEA JUMPI POP PUSH2 0xED6 PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0xEF5 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x120E JUMP JUMPDEST PUSH2 0x801 DUP3 DUP3 PUSH2 0x1C9E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xF1C DUP6 DUP6 PUSH2 0x142E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF2C DUP9 DUP9 DUP9 DUP9 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 SUB PUSH2 0xF6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1038 JUMPI PUSH1 0x0 PUSH2 0xF90 PUSH1 0x0 DUP6 PUSH2 0xE7F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xFDD SWAP1 PUSH2 0xFD7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x225 JUMP JUMPDEST DUP7 PUSH2 0xE7F JUMP JUMPDEST POP SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xFEC JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x1035 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFF89D47 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP1 DUP13 AND PUSH1 0x24 DUP4 ADD MSTORE DUP11 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DD JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP3 SWAP2 DUP5 SWAP2 PUSH32 0xBD9AC67A6E2F6463B80927326310338BCBB4BDB7936CE1365EA3E01067E7B9F7 SWAP2 LOG3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER DUP2 PUSH2 0x10AE DUP3 DUP10 DUP10 DUP10 PUSH2 0x13DB JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x10C2 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x10CC SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x1103 JUMPI POP PUSH1 0x0 DUP7 PUSH6 0xFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x1103 JUMPI POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP7 PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x1114 JUMPI DUP3 DUP10 PUSH2 0x8A4 DUP11 DUP11 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x112E DUP7 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST SWAP6 POP PUSH2 0x113C DUP4 DUP11 DUP11 DUP11 PUSH2 0xC3D JUMP JUMPDEST SWAP5 POP PUSH2 0x1147 DUP6 PUSH2 0x1D71 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND OR PUSH7 0x1000000000000 SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD SWAP1 DUP2 AND SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP1 SWAP6 POP DUP7 SWAP1 PUSH32 0x82A2DA5DEE54EA8021C6545B4444620291E07EE83BE6DD57EDB175062715F3B4 SWAP1 PUSH2 0x11D1 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xE70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5F159E63 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x121D DUP4 DUP3 CALLDATASIZE PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE7A JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x1279 JUMPI PUSH1 0x0 PUSH2 0x1240 DUP2 CALLDATASIZE PUSH2 0x1EB7 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xF07E038F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x9F5 PUSH2 0xC26 DUP5 ADDRESS PUSH1 0x0 CALLDATASIZE PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP3 DUP4 MSTORE SWAP3 SWAP2 PUSH32 0x9EA6790C7DADFD01C9F8B9762B3682607AF2C7E79E05A9F9FDF5580DDE949151 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1320 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x1852 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x135E JUMPI PUSH1 0x40 MLOAD PUSH4 0xB40D179 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP5 ISZERO ISZERO PUSH1 0x1 PUSH1 0x70 SHL MUL PUSH15 0xFF0000000000000000000000000000 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE MLOAD PUSH32 0x90D4E7BB7E5D933792B3562E1741306F8BE94837E1348DACEF9B6F1DF56EB138 SWAP1 PUSH2 0x13CF SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1402 JUMPI PUSH2 0x13F9 DUP7 DUP6 DUP6 PUSH2 0x1DBE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1425 JUMP JUMPDEST PUSH1 0x4 DUP4 LT PUSH2 0x141E JUMPI PUSH2 0x1419 DUP7 DUP7 PUSH2 0x648 DUP8 DUP8 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x13F9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143D PUSH1 0x4 DUP3 DUP5 DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x9D2 SWAP2 PUSH2 0x29E6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 DUP4 SUB PUSH2 0x1492 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x149A PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x14CD JUMPI PUSH1 0x40 MLOAD PUSH4 0xC65B5BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x14D6 DUP3 PUSH2 0x1919 JUMP JUMPDEST ISZERO PUSH2 0x14F7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E2975B9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD PUSH4 0xFFFFFFFF DUP4 AND SWAP2 DUP7 SWAP2 PUSH32 0x76A2A46953689D4861A5D3F6ED883AD7E6AF674A21F8E162707159FC9DDE614D SWAP2 SWAP1 LOG3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x156E JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x158A SWAP2 SWAP1 PUSH2 0x2A14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15C7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15CC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x15DC DUP7 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH2 0x1625 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH2 0x1727 JUMPI DUP5 PUSH4 0xFFFFFFFF AND PUSH2 0x1671 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x167B SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16A9 DUP7 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x1774 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000FFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1868 DUP5 PUSH2 0x1863 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x21A6 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x1893 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x18BC JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP5 DUP7 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD PUSH32 0x1FD6DD7631312DFAC2205B52913F99DE03B4D7E381D5D27D3DBFE0713E6E6340 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1923 PUSH2 0x1C8E JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1938 PUSH3 0x93A80 DUP5 PUSH2 0x297A JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND GT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x1966 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x198F JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP6 DUP8 AND SWAP6 DUP7 MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7A8059630B897B5DE4C08ADE69F8B90C3EAD1F8596D62D10B6C4D14A0AFB4AE2 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ADD PUSH2 0x1A3C JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x1A76 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH32 0xFFFF0000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xFEB69018EE8B8FD50EA86348F1267D07673379F72CFFDECCEC63853EE8CE8B48 SWAP1 PUSH2 0xB72 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1B3B SWAP2 SWAP1 PUSH2 0x2A14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1B76 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1B8B DUP6 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND ADD PUSH2 0x1BD3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP1 SUB PUSH2 0x1C16 JUMPI POP PUSH1 0x0 PUSH2 0x7E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD SWAP1 SWAP3 SWAP2 PUSH32 0xF229BAA593AF28C41B1D16B748CD7688F0C83AAF92D4BE41C44005DEFE84C166 SWAP2 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C99 TIMESTAMP PUSH2 0x21FA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1CD1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP1 MLOAD PUSH4 0xFFFFFFFF DUP8 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP4 POP SWAP2 PUSH32 0xA56B76017453F399EC2327BA00375DBFB1FD070FF854341AD6191E6A2E2DE19C SWAP2 ADD PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x1D6A JUMPI DUP2 PUSH2 0x9D2 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1D9D JUMPI POP PUSH2 0x1D9B DUP2 PUSH2 0x1919 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x801 JUMPI PUSH1 0x40 MLOAD PUSH4 0x813E9459 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x1DD5 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xE60 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1E39 JUMPI PUSH2 0xDF1 ADDRESS PUSH2 0x1DF3 DUP7 DUP7 PUSH2 0x142E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E48 DUP8 DUP8 PUSH2 0x1EB7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH2 0x1E62 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E6F DUP5 DUP12 PUSH2 0xE7F JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1E89 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0xE60 JUMP JUMPDEST PUSH2 0x1E9F DUP4 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x4 DUP5 LT ISZERO PUSH2 0x1ED2 JUMPI POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EDE DUP7 DUP7 PUSH2 0x142E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x10A6AA37 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x1F0F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x30CAE187 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1F2A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x294B14A9 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x1F45 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5326CAE7 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x1F60 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xD22B5989 PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x1F76 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x63FC60F PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x1FA5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x167BD395 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x1FC0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x8D6122D PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x2002 JUMPI PUSH1 0x0 PUSH2 0x1FD5 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x28CD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1FE2 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FEF DUP3 PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x1 SWAP7 POP PUSH1 0x0 SWAP6 POP SWAP4 POP PUSH2 0x2099 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x12E238D PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x2031 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5BE958B1 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x208C JUMPI PUSH1 0x0 PUSH2 0x2046 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x28CD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2053 SWAP2 SWAP1 PUSH2 0x2338 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH2 0x207D DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0x2099 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x20B5 JUMPI PUSH2 0x20B0 DUP3 PUSH2 0x2231 JUMP JUMPDEST PUSH2 0x9D2 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x20CC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x20F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8DD JUMP JUMPDEST POP DUP1 PUSH2 0x9D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2113 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x130B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2150 DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x213B JUMPI PUSH1 0x0 PUSH2 0x2145 JUMP JUMPDEST PUSH2 0x2145 DUP9 DUP6 PUSH2 0x2A30 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0x1D5B JUMP JUMPDEST SWAP1 POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x2161 PUSH2 0x1C8E JUMP JUMPDEST PUSH2 0x216B SWAP2 SWAP1 PUSH2 0x297A JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH2 0x21E5 JUMPI DUP3 DUP3 DUP3 PUSH2 0x21EA JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x222D JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x8DD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x2241 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x229B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x22CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x22F3 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x230E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x231A DUP8 DUP3 DUP9 ADD PUSH2 0x2272 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x232D SWAP1 POP PUSH1 0x40 DUP7 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x234A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D2 DUP3 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2366 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2371 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23AF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2386 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x23D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x23E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2420 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x243B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2447 DUP7 DUP3 DUP8 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x247D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2486 DUP5 PUSH2 0x22B6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2496 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH2 0x24A4 PUSH1 0x40 DUP6 ADD PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23AF DUP4 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x24E5 DUP4 PUSH2 0x22B6 JUMP JUMPDEST SWAP2 POP PUSH2 0x24F3 PUSH1 0x20 DUP5 ADD PUSH2 0x22B6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x250E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9D2 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x225A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x255B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2566 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2386 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x258B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2420 DUP5 PUSH2 0x22B6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x25B0 DUP4 PUSH2 0x22B6 JUMP JUMPDEST SWAP2 POP PUSH2 0x24F3 PUSH1 0x20 DUP5 ADD PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x25DF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x25EF DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x260A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2616 DUP8 DUP3 DUP9 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2635 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2657 DUP6 DUP3 DUP7 ADD PUSH2 0x2272 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x267E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2666 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x26F4 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x26D5 DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x2663 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x26AE JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2721 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2731 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2741 DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x275F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25B0 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2780 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x278B DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x27A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27B2 DUP8 DUP3 DUP9 ADD PUSH2 0x23BF JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x27D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9D2 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2837 JUMPI PUSH2 0x2837 PUSH2 0x280F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x287B PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2895 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9D2 DUP2 PUSH2 0x2532 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x15DC PUSH1 0x60 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x28DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x28EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x293E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xEF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD PUSH1 0x0 DUP2 MSTORE DUP4 MLOAD PUSH2 0x2970 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2663 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2999 JUMPI PUSH2 0x2999 PUSH2 0x280F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x29DB PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x283E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0xD60 JUMPI PUSH1 0x4 SWAP5 SWAP1 SWAP5 SUB PUSH1 0x3 SHL DUP5 SWAP1 SHL AND SWAP1 SWAP3 AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2A26 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2663 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2999 JUMPI PUSH2 0x2999 PUSH2 0x280F JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"3726:25635:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14835:291;;;;;;;;;;-1:-1:-1;14835:291:1;;;;;:::i;:::-;;:::i;:::-;;8220:124;;;;;;;;;;-1:-1:-1;8220:124:1;;;;;:::i;:::-;-1:-1:-1;;;;;8314:14:1;;;8289:6;8314:14;;;:6;:14;;;;;;;;:23;;;;;;;8220:124;;;;-1:-1:-1;;;;;1718:31:17;;;1700:50;;1688:2;1673:18;8220:124:1;;;;;;;;8385:134;;;;;;;;;;-1:-1:-1;8385:134:1;;;;;:::i;:::-;;:::i;:::-;;;1935:10:17;1923:23;;;1905:42;;1893:2;1878:18;8385:134:1;1761:192:17;16304:133:1;;;;;;;;;;-1:-1:-1;16304:133:1;;;;;:::i;:::-;;:::i;23564:159::-;;;;;;;;;;-1:-1:-1;23564:159:1;;;;;:::i;:::-;;:::i;19509:1240::-;;;;;;:::i;:::-;;:::i;9884:191::-;;;;;;;;;;-1:-1:-1;9884:191:1;;;;;:::i;:::-;;:::i;8560:408::-;;;;;;;;;;-1:-1:-1;8560:408:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;4794:14:17;4835:15;;;4817:34;;4870:10;4916:15;;;4911:2;4896:18;;4889:43;4968:15;;;;4963:2;4948:18;;4941:43;5020:15;;5015:2;5000:18;;4993:43;4771:3;4756:19;;4561:481;10572:126:1;;;;;;;;;;-1:-1:-1;10572:126:1;;;;;:::i;:::-;;:::i;17036:184::-;;;;;;;;;;-1:-1:-1;17036:184:1;;;;;:::i;:::-;;:::i;:::-;;;5667:14:17;5655:27;;;5637:46;;5625:2;5610:18;17036:184:1;5493:196:17;5286:53:1;;;;;;;;;;;;-1:-1:-1;;;;;5286:53:1;;17261:111;;;;;;;;;;-1:-1:-1;17261:111:1;;;;;:::i;:::-;17320:6;17345:14;;;:10;:14;;;;;:20;;;;;;;17261:111;7252:90;;;;;;;;;;-1:-1:-1;7328:7:1;7252:90;;7881:139;;;;;;;;;;-1:-1:-1;7881:139:1;;;;;:::i;:::-;;:::i;10739:138::-;;;;;;;;;;-1:-1:-1;10739:138:1;;;;;:::i;:::-;;:::i;8061:118::-;;;;;;;;;;-1:-1:-1;8061:118:1;;;;;:::i;:::-;-1:-1:-1;;;;;8152:14:1;;;8127:6;8152:14;;;:6;:14;;;;;;;;:20;;;;8061:118;7676:164;;;;;;;;;;-1:-1:-1;7676:164:1;;;;;:::i;:::-;-1:-1:-1;;;;;7794:16:1;;7769:6;7794:16;;;;;;;;;;;-1:-1:-1;;;;;;7794:39:1;;;;;;;;;;-1:-1:-1;;;;;7794:39:1;7676:164;;;;;5223:52;;;;;;;;;;;;5259:16;5223:52;;9587:256;;;;;;;;;;-1:-1:-1;9587:256:1;;;;;:::i;:::-;;:::i;21939:376::-;;;;;;;;;;-1:-1:-1;21939:376:1;;;;;:::i;:::-;;:::i;7513:122::-;;;;;;;;;;-1:-1:-1;7513:122:1;;;;;:::i;:::-;-1:-1:-1;;;;;7605:16:1;7582:4;7605:16;;;;;;;;;;:23;;;-1:-1:-1;;;7605:23:1;;;;;7513:122;;;;7125:14:17;;7118:22;7100:41;;7088:2;7073:18;7513:122:1;6960:187:17;10918:134:1;;;;;;;;;;-1:-1:-1;10918:134:1;;;;;:::i;:::-;;:::i;23222:181::-;;;;;;;;;;-1:-1:-1;23222:181:1;;;;;:::i;:::-;;:::i;:::-;;;8249:25:17;;;8237:2;8222:18;23222:181:1;8103:177:17;1208:484:8;;;;;;;;;;-1:-1:-1;1208:484:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6409:802:1:-;;;;;;;;;;-1:-1:-1;6409:802:1;;;;;:::i;:::-;;:::i;:::-;;;;10732:14:17;;10725:22;10707:41;;10796:10;10784:23;;;10779:2;10764:18;;10757:51;10680:18;6409:802:1;10541:273:17;10116:127:1;;;;;;;;;;-1:-1:-1;10116:127:1;;;;;:::i;:::-;;:::i;7383:89::-;;;;;;;;;;-1:-1:-1;7459:6:1;7383:89;;9009:418;;;;;;;;;;-1:-1:-1;9009:418:1;;;;;:::i;:::-;;:::i;15554:147::-;;;;;;;;;;-1:-1:-1;15554:147:1;;;;;:::i;:::-;;:::i;20790:1108::-;;;;;;;;;;-1:-1:-1;20790:1108:1;;;;;:::i;:::-;;:::i;17413:1365::-;;;;;;;;;;-1:-1:-1;17413:1365:1;;;;;:::i;:::-;;:::i;:::-;;;;12040:25:17;;;12113:10;12101:23;;;12096:2;12081:18;;12074:51;12013:18;17413:1365:1;11868:263:17;10284:247:1;;;;;;;;;;-1:-1:-1;10284:247:1;;;;;:::i;:::-;;:::i;14835:291::-;5923:18;:16;:18::i;:::-;15001:9:::1;14996:124;15016:20:::0;;::::1;14996:124;;;15057:52;15080:6;15088:9;;15098:1;15088:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;15102:6;15057:22;:52::i;:::-;15038:3;::::0;::::1;:::i;:::-;;;14996:124;;;;14835:291:::0;;;;:::o;8385:134::-;-1:-1:-1;;;;;8481:14:1;;8456:6;8481:14;;;:6;:14;;;;;;;:25;;:31;;-1:-1:-1;;;8481:25:1;;-1:-1:-1;;;;;8481:25:1;:29;:31::i;:::-;8474:38;8385:134;-1:-1:-1;;8385:134:1:o;16304:133::-;5923:18;:16;:18::i;:::-;16398:32:::1;16415:6;16423;16398:16;:32::i;:::-;16304:133:::0;;:::o;23564:159::-;5923:18;:16;:18::i;:::-;23667:49:::1;::::0;-1:-1:-1;;;23667:49:1;;-1:-1:-1;;;;;12954:55:17;;;23667:49:1::1;::::0;::::1;12936:74:17::0;23667:35:1;::::1;::::0;::::1;::::0;12909:18:17;;23667:49:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;23564:159:::0;;:::o;19509:1240::-;19595:6;735:10:7;19595:6:1;;19768:38;735:10:7;19793:6:1;19801:4;;19768:16;:38::i;:::-;19733:73;;;;19869:9;19868:10;:26;;;;-1:-1:-1;19882:12:1;;;;19868:26;19864:131;;;19947:6;19955;19963:20;19978:4;;19963:14;:20::i;:::-;19917:67;;-1:-1:-1;;;19917:67:1;;-1:-1:-1;;;;;13300:15:17;;;19917:67:1;;;13282:34:17;13352:15;;;;13332:18;;;13325:43;-1:-1:-1;;;;;;13404:33:17;13384:18;;;13377:61;13194:18;;19917:67:1;;;;;;;;19864:131;20005:19;20027:35;20041:6;20049;20057:4;;20027:13;:35::i;:::-;20005:57;-1:-1:-1;20072:12:1;20264;;;;;;:45;;;20280:24;20292:11;20280;:24::i;:::-;:29;;;;20264:45;20260:116;;;20333:32;20353:11;20333:19;:32::i;:::-;20325:40;;20260:116;20468:12;;20505:46;20522:6;20530:20;20545:4;;20530:14;:20::i;:::-;29323:28;;;-1:-1:-1;;;;;18573:55:17;;;;29323:28:1;;;;18555:74:17;;;;-1:-1:-1;;;;;;18665:33:17;;;;18645:18;;;18638:61;29323:28:1;;;;;;;;;18528:18:17;;;;29323:28:1;;29313:39;;;;;;29206:153;20505:46;20490:12;:61;;;;20586:54;20616:6;20624:4;;20586:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20630:9:1;;-1:-1:-1;20586:29:1;;-1:-1:-1;;20586:54:1:i;:::-;-1:-1:-1;20687:12:1;:32;20737:5;-1:-1:-1;;;;;19509:1240:1;;;;;;:::o;9884:191::-;5923:18;:16;:18::i;:::-;9998:70:::1;10009:6;10017:7;10026:25;10044:6;10026:17;:25::i;:::-;10053:14;9998:10;:70::i;:::-;;9884:191:::0;;;:::o;8560:408::-;-1:-1:-1;;;;;8767:14:1;;8662:12;8767:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;8767:31:1;;;;;;;;;8817:12;;;;;;8662;;;;;8767:31;8878:22;;:12;;;-1:-1:-1;;;;;8878:12:1;:20;:22::i;:::-;8560:408;;8839:61;;-1:-1:-1;8839:61:1;-1:-1:-1;8560:408:1;-1:-1:-1;;;;8560:408:1:o;10572:126::-;5923:18;:16;:18::i;:::-;10663:28:::1;10677:6;10685:5;10663:13;:28::i;17036:184::-:0;17098:6;17135:14;;;:10;:14;;;;;:24;;;17176:21;17135:24;17176:10;:21::i;:::-;:37;;17204:9;17176:37;;;17200:1;17169:44;17036:184;-1:-1:-1;;;17036:184:1:o;7881:139::-;-1:-1:-1;;;;;7980:16:1;;7955:6;7980:16;;;;;;;;;;:27;;;:33;;-1:-1:-1;;;;;7980:27:1;:31;:33::i;10739:138::-;5923:18;:16;:18::i;:::-;10836:34:::1;10853:6;10861:8;10836:16;:34::i;9587:256::-:0;5923:18;:16;:18::i;:::-;-1:-1:-1;;;;;9688:20:1;::::1;::::0;;:45:::1;;-1:-1:-1::0;;;;;;9712:21:1;;::::1;;9688:45;9684:114;;;9756:31;::::0;-1:-1:-1;;;9756:31:1;;-1:-1:-1;;;;;1718:31:17;;9756::1::1;::::0;::::1;1700:50:17::0;1673:18;;9756:31:1::1;1556:200:17::0;9684:114:1::1;9822:6;-1:-1:-1::0;;;;;9812:24:1::1;;9830:5;;9812:24;;;;;;;:::i;:::-;;;;;;;;9587:256:::0;;;:::o;21939:376::-;22072:47;;;-1:-1:-1;;;22072:47:1;;;;;735:10:7;;22123:46:1;735:10:7;;22123:46:1;;22072:47;;;;;;;;;;;;;;;735:10:7;22072:47:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;22072:97:1;;22068:175;;22192:40;;-1:-1:-1;;;22192:40:1;;-1:-1:-1;;;;;12954:55:17;;22192:40:1;;;12936:74:17;12909:18;;22192:40:1;12790:226:17;22068:175:1;22252:56;22272:35;22286:6;22294;22302:4;;22272:13;:35::i;:::-;22252:19;:56::i;10918:134::-;5923:18;:16;:18::i;:::-;11013:32:::1;11028:6;11036:8;11013:14;:32::i;23222:181::-:0;23327:7;23374:6;23382;23390:4;;23363:32;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;23353:43;;;;;;23346:50;;23222:181;;;;;;:::o;1208:484:8:-;1374:12;;;1310:20;1374:12;;;;;;;;1276:22;;1485:4;-1:-1:-1;;;;;1473:24:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1463:34;;1512:9;1507:155;1527:15;;;1507:155;;;1576:75;1613:4;1633;;1638:1;1633:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1642;1620:30;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1576:28;:75::i;:::-;1563:7;1571:1;1563:10;;;;;;;;:::i;:::-;;;;;;:88;;;;1544:3;;;;;:::i;:::-;;;;1507:155;;;;1671:14;1208:484;;;;:::o;6409:802:1:-;-1:-1:-1;;;;;7605:16:1;;6534:14;7605:16;;;;;;;;;;:23;;;6534:14;;-1:-1:-1;;;7605:23:1;;;;6574:631;;;-1:-1:-1;6624:5:1;;-1:-1:-1;6624:5:1;6616:17;;6574:631;6672:4;-1:-1:-1;;;;;6654:23:1;;;6650:555;;29323:28;;;-1:-1:-1;;;;;18573:55:17;;29323:28:1;;;;18555:74:17;;;;-1:-1:-1;;;;;;18665:33:17;;18645:18;;;18638:61;29323:28:1;;;;;;;;;18528:18:17;;;;29323:28:1;;;29313:39;;;;;28611:12;;:50;6920:30;6952:1;6912:42;;;;;;6650:555;-1:-1:-1;;;;;7794:16:1;;6985:13;7794:16;;;;;;;;;;;-1:-1:-1;;;;;;7794:39:1;;;;;;;;;;-1:-1:-1;;;;;7794:39:1;;6985:13;7093:23;7794:39;7109:6;7093:7;:23::i;:::-;7054:62;;;;7137:8;:57;;7185:5;7192:1;7137:57;;;7149:17;;;;:12;7137:57;7130:64;;;;;;;6650:555;6409:802;;;;;;:::o;10116:127::-;5923:18;:16;:18::i;:::-;10208:28:::1;10220:6;10228:7;10208:11;:28::i;:::-;;10116:127:::0;;:::o;9009:418::-;9109:13;;-1:-1:-1;;;;;;;9161:21:1;;;9157:264;;-1:-1:-1;9206:4:1;;-1:-1:-1;9212:1:1;9198:16;;9157:264;9246:19;9267;9294:26;9304:6;9312:7;9294:9;:26::i;:::-;9245:75;;;;;;9342:12;:17;;9358:1;9342:17;;:53;;;;;9379:16;:14;:16::i;:::-;9363:32;;:12;:32;;;;9342:53;9334:76;-1:-1:-1;9397:12:1;-1:-1:-1;9334:76:1;;-1:-1:-1;9334:76:1;9157:264;9009:418;;;;;:::o;15554:147::-;5923:18;:16;:18::i;:::-;15656:38:::1;15677:6;15685:8;15656:20;:38::i;20790:1108::-:0;20883:6;735:10:7;20883:6:1;20961:20;20976:4;;20961:14;:20::i;:::-;20943:38;;20992:19;21014:35;21028:6;21036;21044:4;;21014:13;:35::i;:::-;21063:23;;;;:10;:23;;;;;:33;20992:57;;-1:-1:-1;21063:33:1;;;;:38;;21059:614;;21124:38;;-1:-1:-1;;;21124:38:1;;;;;8249:25:17;;;8222:18;;21124:38:1;8103:177:17;21059:614:1;21193:9;-1:-1:-1;;;;;21183:19:1;:6;-1:-1:-1;;;;;21183:19:1;;21179:494;;21352:12;21370:30;5259:16;21390:9;21370:7;:30::i;:::-;-1:-1:-1;;;;;;7794:16:1;;21415:15;7794:16;;;;;;;;;;;-1:-1:-1;;;;;;7794:39:1;;;;;;;;;;21351:49;;-1:-1:-1;21415:15:1;21436:76;;21444:56;;-1:-1:-1;;;;;7794:39:1;21460;7676:164;21444:56;21502:9;21436:7;:76::i;:::-;21414:98;;;21531:7;21530:8;:23;;;;;21543:10;21542:11;21530:23;21526:137;;;21580:68;;-1:-1:-1;;;21580:68:1;;-1:-1:-1;;;;;16578:15:17;;;21580:68:1;;;16560:34:17;16630:15;;;16610:18;;;16603:43;16682:15;;16662:18;;;16655:43;-1:-1:-1;;;;;;16734:33:17;;16714:18;;;16707:61;16471:19;;21580:68:1;16270:504:17;21526:137:1;21204:469;;21179:494;21690:23;;;;:10;:23;;;;;;21683:40;;-1:-1:-1;;21683:40:1;;;;;21831:37;;21787:29;;;;;;;;;21690:23;;21831:37;;;21886:5;20790:1108;-1:-1:-1;;;;;;;;20790:1108:1:o;17413:1365::-;17535:19;;735:10:7;17535:19:1;17721:38;735:10:7;17746:6:1;17754:4;;17721:16;:38::i;:::-;17700:59;;;17770:14;17806:7;17787:26;;:16;:14;:16::i;:::-;:26;;;;:::i;:::-;17770:43;-1:-1:-1;17912:12:1;;;;;:44;;;17936:1;17929:4;:8;;;:26;;;;;17948:7;17941:14;;:4;:14;;;17929:26;17908:149;;;18009:6;18017;18025:20;18040:4;;18025:14;:20::i;17908:149::-;18129:23;18138:4;18129:23;;18144:7;18129:23;;:8;:23::i;:::-;18115:38;;18273:35;18287:6;18295;18303:4;;18273:13;:35::i;:::-;18259:49;;18319:31;18338:11;18319:18;:31::i;:::-;18472:23;;;;:10;:23;;;;;;;:29;;18525:40;;;-1:-1:-1;;18575:37:1;;;18472:29;;;;;;;;;18504:1;18472:33;18575:37;;;;;;;;;;;;;18627:66;;18472:33;;-1:-1:-1;18472:23:1;;18627:66;;;;18525:40;;18672:6;;18680;;18688:4;;;;18627:66;:::i;:::-;;;;;;;;17570:1208;;;17413:1365;;;;;;;:::o;10284:247::-;-1:-1:-1;;;;;10378:34:1;;735:10:7;10378:34:1;10374:102;;10435:30;;-1:-1:-1;;;10435:30:1;;;;;;;;;;;23943:503;735:10:7;23989:14:1;;24061:32;735:10:7;23989:14:1;809::7;24061:12:1;:32::i;:::-;24028:65;;;;24108:9;24103:337;;24137:5;:10;;24146:1;24137:10;24133:297;;24170:19;24195:33;24170:19;809:14:7;24195:21:1;:33::i;:::-;-1:-1:-1;24253:54:1;;-1:-1:-1;;;24253:54:1;;-1:-1:-1;;;;;17713:55:17;;24253:54:1;;;17695:74:17;-1:-1:-1;;;;;17805:31:17;;17785:18;;;17778:59;24167:61:1;;-1:-1:-1;17668:18:17;;;-1:-1:-1;24253:54:1;17523:320:17;24133:297:1;24346:69;24366:48;24380:6;24396:4;809:14:7;;23222:181:1;:::i;15285:228::-;-1:-1:-1;;;;;15392:16:1;;:8;:16;;;;;;;;;;;-1:-1:-1;;;;;;15392:39:1;;;;;;;;;;;;:48;;-1:-1:-1;;15392:48:1;-1:-1:-1;;;;;15392:48:1;;;;;;;;15455:51;;17992:52:17;;;15392:48:1;:16;15455:51;;17965:18:17;15455:51:1;;;;;;;15285:228;;;:::o;3548:130:14:-;3596:6;3615:12;3635:14;:4;-1:-1:-1;;;;;3635:12:14;;:14::i;:::-;-1:-1:-1;3614:35:14;;3548:130;-1:-1:-1;;;;3548:130:14:o;16607:268:1:-;16711:4;-1:-1:-1;;;;;16693:23:1;;;16689:95;;16739:34;;-1:-1:-1;;;16739:34:1;;-1:-1:-1;;;;;12954:55:17;;16739:34:1;;;12936:74:17;12909:18;;16739:34:1;12790:226:17;16689:95:1;-1:-1:-1;;;;;16793:16:1;;:8;:16;;;;;;;;;;;;:23;;:32;;;;;-1:-1:-1;;;16793:32:1;-1:-1:-1;;16793:32:1;;;;;;16840:28;;;;;16819:6;7125:14:17;7118:22;7100:41;;7088:2;7073:18;;6960:187;16840:28:1;;;;;;;;16607:268;;:::o;26911:378::-;27042:14;;27104:4;-1:-1:-1;;;;;27086:23:1;;;27082:201;;27132:26;27145:6;27153:4;;27132:12;:26::i;:::-;27125:33;;;;;;27082:201;27210:1;27196:15;;:76;;27227:45;27235:6;27243;27251:20;27266:4;;27251:14;:20::i;27227:45::-;27196:76;;;-1:-1:-1;27215:5:1;;-1:-1:-1;27215:5:1;27082:201;26911:378;;;;;;;:::o;29016:116::-;29083:6;29115:9;29122:1;29083:6;29115:4;;:9;:::i;:::-;29108:17;;;:::i;22505:676::-;22581:6;22618:23;;;:10;:23;;;;;:33;;;;;22676:29;;;;;22720:14;;;22716:294;;22757:38;;-1:-1:-1;;;22757:38:1;;;;;8249:25:17;;;8222:18;;22757:38:1;8103:177:17;22716:294:1;22828:16;:14;:16::i;:::-;22816:28;;:9;:28;;;22812:198;;;22867:34;;-1:-1:-1;;;22867:34:1;;;;;8249:25:17;;;8222:18;;22867:34:1;8103:177:17;22812:198:1;22922:21;22933:9;22922:10;:21::i;:::-;22918:92;;;22966:33;;-1:-1:-1;;;22966:33:1;;;;;8249:25:17;;;8222:18;;22966:33:1;8103:177:17;22918:92:1;23027:23;;;;:10;:23;;;;;;23020:40;;-1:-1:-1;;23020:40:1;;;23114:37;;;;;23038:11;;23114:37;;23027:23;23114:37;23169:5;22505:676;-1:-1:-1;;;22505:676:1:o;3180:392:6:-;3279:12;3331:5;3307:21;:29;3303:108;;;3359:41;;-1:-1:-1;;;3359:41:6;;3394:4;3359:41;;;12936:74:17;12909:18;;3359:41:6;12790:226:17;3303:108:6;3421:12;3435:23;3462:6;-1:-1:-1;;;;;3462:11:6;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;:::-;3503:62;3180:392;-1:-1:-1;;;;;;3180:392:6:o;11229:1061:1:-;11387:4;-1:-1:-1;;;;;;;11407:21:1;;;11403:90;;11451:31;;-1:-1:-1;;;11451:31:1;;-1:-1:-1;;;;;1718:31:17;;11451::1;;;1700:50:17;1673:18;;11451:31:1;1556:200:17;11403:90:1;-1:-1:-1;;;;;11520:14:1;;11503;11520;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11520:31:1;;;;;;;;;:37;;;:42;;11595:585;;;;11651:10;11632:29;;:16;:14;:16::i;:::-;:29;;;;:::i;:::-;11624:37;;11709:55;;;;;;;;11724:5;11709:55;;;;;;11738:24;:14;:22;;2589:20:14;;;2508:108;11738:24:1;-1:-1:-1;;;;;11709:55:1;;;;;;-1:-1:-1;;;;;11675:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11675:31:1;;;;;;;;;:89;;;;;;;;;;;;;;-1:-1:-1;;11675:89:1;;;;;;;;;;;;;;11595:585;;;-1:-1:-1;;;;;12056:14:1;;12154:1;12056:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12056:31:1;;;;;;;;;:37;:113;;:37;;;;-1:-1:-1;;;;;12056:37:1;;12122:14;;12056:48;:113::i;:::-;-1:-1:-1;;;;;12008:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12008:31:1;;;;;;;;;12007:162;;-1:-1:-1;;;;;12007:162:1;;;;;;;;;;;;;;;;;-1:-1:-1;11595:585:1;12195:62;;;19224:10:17;19212:23;;19194:42;;19284:14;19272:27;;19267:2;19252:18;;19245:55;19343:14;;19336:22;19316:18;;;19309:50;12195:62:1;;-1:-1:-1;;;;;12195:62:1;;;-1:-1:-1;;;;;12195:62:1;;;;;;;;19182:2:17;12195:62:1;;;-1:-1:-1;12274:9:1;11229:1061;-1:-1:-1;;;;;11229:1061:1:o;3362:129:14:-;3414:6;3422;3430;3455:29;3466:4;3472:11;:9;:11::i;:::-;3455:10;:29::i;:::-;3448:36;;;;;;3362:129;;;;;:::o;13246:285:1:-;-1:-1:-1;;;;;13329:20:1;;;;:45;;-1:-1:-1;;;;;;13353:21:1;;;;13329:45;13325:114;;;13397:31;;-1:-1:-1;;;13397:31:1;;-1:-1:-1;;;;;1718:31:17;;13397::1;;;1700:50:17;1673:18;;13397:31:1;1556:200:17;13325:114:1;-1:-1:-1;;;;;13449:14:1;;;;;;;:6;:14;;;;;;;;:20;;;:28;;-1:-1:-1;;13449:28:1;;;;;;;;;13493:31;;;13449:14;13493:31;13246:285;;:::o;28772:134::-;28832:4;28883:16;:14;:16::i;:::-;28855:44;;:24;7328:7;28855:9;:24;:::i;:::-;:44;;;;;28772:134;-1:-1:-1;;28772:134:1:o;13850:303::-;-1:-1:-1;;;;;13939:20:1;;;;:45;;-1:-1:-1;;;;;;13963:21:1;;;;13939:45;13935:114;;;14007:31;;-1:-1:-1;;;14007:31:1;;-1:-1:-1;;;;;1718:31:17;;14007::1;;;1700:50:17;1673:18;;14007:31:1;1556:200:17;13935:114:1;-1:-1:-1;;;;;14059:14:1;;;;;;;:6;:14;;;;;;;;:23;;;:34;;-1:-1:-1;;14059:34:1;;;;;;;;;;;14109:37;;;14059:14;14109:37;13850:303;;:::o;14300:374::-;-1:-1:-1;;;;;;;14387:21:1;;;14383:90;;14431:31;;-1:-1:-1;;;14431:31:1;;-1:-1:-1;;;;;1718:31:17;;14431::1;;;1700:50:17;1673:18;;14431:31:1;1556:200:17;14383:90:1;-1:-1:-1;;;;;14544:14:1;;14483:13;14544:14;;;:6;:14;;;;;;;:25;;:60;;-1:-1:-1;;;14544:25:1;;-1:-1:-1;;;;;14544:25:1;14581:8;7459:6;14544:36;:60::i;:::-;-1:-1:-1;;;;;14507:14:1;;;;;;:6;:14;;;;;;;;;:25;14506:98;;-1:-1:-1;;;;;14506:98:1;;;-1:-1:-1;;;14506:98:1;;;;;;;;;;;;14620:47;;14506:98;;-1:-1:-1;14620:47:1;;;;14650:8;;14506:98;;19570:10:17;19558:23;;;;19540:42;;19630:14;19618:27;19613:2;19598:18;;19591:55;19528:2;19513:18;;19370:282;4106:253:6;4189:12;4214;4228:23;4255:6;-1:-1:-1;;;;;4255:19:6;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;:::-;4290:62;4106:253;-1:-1:-1;;;;;4106:253:6:o;12551:400:1:-;12630:4;-1:-1:-1;;;;;;;12650:21:1;;;12646:90;;12694:31;;-1:-1:-1;;;12694:31:1;;-1:-1:-1;;;;;1718:31:17;;12694::1;;;1700:50:17;1673:18;;12694:31:1;1556:200:17;12646:90:1;-1:-1:-1;;;;;12750:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12750:31:1;;;;;;;;;:37;;;:42;;12746:85;;-1:-1:-1;12815:5:1;12808:12;;12746:85;-1:-1:-1;;;;;12848:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12848:31:1;;;;;;;;;;12841:38;;-1:-1:-1;;12841:38:1;;;12895:28;12848:31;;:14;12895:28;;;-1:-1:-1;12940:4:1;12551:400;;;;:::o;750:110:14:-;794:6;819:34;837:15;819:17;:34::i;:::-;812:41;;750:110;:::o;15856:287:1:-;-1:-1:-1;;;;;16009:16:1;;15946:13;16009:16;;;;;;;;;;:27;;;:62;;-1:-1:-1;;;;;16009:27:1;16048:8;7459:6;16009:38;:62::i;:::-;-1:-1:-1;;;;;15970:16:1;;:8;:16;;;;;;;;;;;;:27;;15969:102;;-1:-1:-1;;15969:102:1;-1:-1:-1;;;;;15969:102:1;;;;;;;;;;;16087:49;;19570:10:17;19558:23;;19540:42;;19630:14;19618:27;;19598:18;;;19591:55;;;;15969:102:1;;-1:-1:-1;15970:16:1;16087:49;;19513:18:17;16087:49:1;19370:282:17;2382:104:10;2440:7;2470:1;2466;:5;:13;;2478:1;2466:13;;;-1:-1:-1;2474:1:10;;2382:104;-1:-1:-1;2382:104:10:o;18967:272:1:-;19039:20;19062:23;;;:10;:23;;;;;:33;;;19109:18;;;;;:48;;;19132:25;19143:13;19132:10;:25::i;:::-;19131:26;19109:48;19105:128;;;19180:42;;-1:-1:-1;;;19180:42:1;;;;;8249:25:17;;;8222:18;;19180:42:1;8103:177:17;27399:992:1;27480:14;;27538:1;27524:15;;27520:63;;;-1:-1:-1;27563:5:1;;-1:-1:-1;27563:5:1;27555:17;;27520:63;27615:4;-1:-1:-1;;;;;27597:23:1;;;27593:334;;27863:49;27884:4;27891:20;27906:4;;27891:14;:20::i;:::-;29323:28;;;-1:-1:-1;;;;;18573:55:17;;;;29323:28:1;;;;18555:74:17;;;;-1:-1:-1;;;;;;18665:33:17;;;;18645:18;;;18638:61;29323:28:1;;;;;;;;;18528:18:17;;;;29323:28:1;;29313:39;;;;;28611:12;;:50;;28511:157;27593:334;27938:12;27952:13;27967:21;27992:27;28014:4;;27992:21;:27::i;:::-;27937:82;;;;;;28034:7;28029:56;;28065:5;28072:1;28057:17;;;;;;;;;28029:56;28096:11;28109:21;28134:23;28142:6;28150;28134:7;:23::i;:::-;28095:62;;;;28172:6;28167:55;;28202:5;28209:1;28194:17;;;;;;;;;;;28167:55;28307:40;28316:14;28307:40;;28332:14;28307:40;;:8;:40::i;:::-;28366:10;;;;;;;-1:-1:-1;27399:992:1;-1:-1:-1;;;;;;;;;27399:992:1:o;24852:1628::-;24940:15;;;25028:1;25014:15;;25010:66;;;-1:-1:-1;25053:5:1;;-1:-1:-1;25053:5:1;;-1:-1:-1;25053:5:1;25045:20;;25010:66;25086:15;25104:20;25119:4;;25104:14;:20::i;:::-;25086:38;-1:-1:-1;;;;;;;25244:35:1;;-1:-1:-1;;;25244:35:1;;:89;;-1:-1:-1;;;;;;;25295:38:1;;-1:-1:-1;;;25295:38:1;25244:89;:146;;;-1:-1:-1;;;;;;;25349:41:1;;-1:-1:-1;;;25349:41:1;25244:146;:201;;;-1:-1:-1;;;;;;;25406:39:1;;-1:-1:-1;;;25406:39:1;25244:201;:262;;;-1:-1:-1;;;;;;;25461:45:1;;-1:-1:-1;;;25461:45:1;25244:262;25227:343;;;25539:4;5259:16;25557:1;25531:28;;;;;;;;;25227:343;-1:-1:-1;;;;;;25677:41:1;;-1:-1:-1;;;25677:41:1;;:98;;-1:-1:-1;;;;;;;25734:41:1;;-1:-1:-1;;;25734:41:1;25677:98;:161;;;-1:-1:-1;;;;;;;25791:47:1;;-1:-1:-1;;;25791:47:1;25677:161;25660:414;;;25906:14;25934:15;25944:4;25939;25934;;:15;:::i;:::-;25923:38;;;;;;;:::i;:::-;25906:55;;25975:12;25990:27;26010:6;25990:19;:27::i;:::-;26039:4;;-1:-1:-1;5259:16:1;;-1:-1:-1;25975:42:1;-1:-1:-1;26031:32:1;;-1:-1:-1;;;26031:32:1;25660:414;-1:-1:-1;;;;;;26193:35:1;;-1:-1:-1;;;26193:35:1;;:75;;-1:-1:-1;;;;;;;26232:36:1;;-1:-1:-1;;;26232:36:1;26193:75;26189:254;;;26327:13;26354:15;26364:4;26359;26354;;:15;:::i;:::-;26343:37;;;;;;;:::i;:::-;26327:53;;26402:4;26408:20;26421:6;-1:-1:-1;;;;;8152:14:1;;;8127:6;8152:14;;;:6;:14;;;;;;;;:20;;;;8061:118;26408:20;26430:1;26394:38;;;;;;;;;;26189:254;26461:5;26468:1;26471;26453:20;;;;;;;24852:1628;;;;;;:::o;4625:582:6:-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5045:17;;:22;:49;;;;-1:-1:-1;;;;;;5071:18:6;;;:23;5045:49;5041:119;;;5121:24;;-1:-1:-1;;;5121:24:6;;-1:-1:-1;;;;;12954:55:17;;5121:24:6;;;12936:74:17;12909:18;;5121:24:6;12790:226:17;5041:119:6;-1:-1:-1;5180:10:6;5173:17;;3972:390:14;4093:18;4113:13;4138:12;4153:10;:4;-1:-1:-1;;;;;4153:8:14;;:10::i;:::-;4138:25;;4173:14;4197:61;4206:10;4197:61;;4226:8;4218:16;;:5;:16;;;:39;;4256:1;4218:39;;;4237:16;4245:8;4237:5;:16;:::i;:::-;4197:61;;:8;:61::i;:::-;4173:86;;4292:7;4278:21;;:11;:9;:11::i;:::-;:21;;;;:::i;:::-;4269:30;-1:-1:-1;5065:19:14;;;5059:2;5035:26;;;;;5028:2;5009:21;;;;;5008:54;:76;4309:46;;;;3972:390;;;;;;:::o;2868:276::-;2940:6;;;4703:9;4710:2;4703:9;;;;-1:-1:-1;;;;;3031:11:14;;4739:9;4746:2;4739:9;;;;;;3061:19;;;;;:76;;3105:11;3118:10;3130:6;3061:76;;;3084:10;3096:1;3099;3061:76;3054:83;;;;;;;;;2868:276;;;;;:::o;14291:213:11:-;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:11;;14447:2;14416:41;;;20278:36:17;20330:18;;;20323:34;;;20251:18;;14416:41:11;20097:266:17;14365:103:11;-1:-1:-1;14491:5:11;14291:213::o;5743:516:6:-;5874:17;;:21;5870:383;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;-1:-1:-1;;;6225:17:6;;;;;;;;;;;5870:383;5743:516;:::o;14:154:17:-;-1:-1:-1;;;;;93:5:17;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:366;235:8;245:6;299:3;292:4;284:6;280:17;276:27;266:55;;317:1;314;307:12;266:55;-1:-1:-1;340:20:17;;-1:-1:-1;;;;;372:30:17;;369:50;;;415:1;412;405:12;369:50;452:4;444:6;440:17;428:29;;512:3;505:4;495:6;492:1;488:14;480:6;476:27;472:38;469:47;466:67;;;529:1;526;519:12;544:171;611:20;;-1:-1:-1;;;;;660:30:17;;650:41;;640:69;;705:1;702;695:12;640:69;544:171;;;:::o;720:642::-;822:6;830;838;846;899:2;887:9;878:7;874:23;870:32;867:52;;;915:1;912;905:12;867:52;954:9;941:23;973:31;998:5;973:31;:::i;:::-;1023:5;-1:-1:-1;1079:2:17;1064:18;;1051:32;-1:-1:-1;;;;;1095:30:17;;1092:50;;;1138:1;1135;1128:12;1092:50;1177:69;1238:7;1229:6;1218:9;1214:22;1177:69;:::i;:::-;1265:8;;-1:-1:-1;1151:95:17;-1:-1:-1;1319:37:17;;-1:-1:-1;1352:2:17;1337:18;;1319:37;:::i;:::-;1309:47;;720:642;;;;;;;:::o;1367:184::-;1425:6;1478:2;1466:9;1457:7;1453:23;1449:32;1446:52;;;1494:1;1491;1484:12;1446:52;1517:28;1535:9;1517:28;:::i;1958:416::-;2023:6;2031;2084:2;2072:9;2063:7;2059:23;2055:32;2052:52;;;2100:1;2097;2090:12;2052:52;2139:9;2126:23;2158:31;2183:5;2158:31;:::i;:::-;2208:5;-1:-1:-1;2265:2:17;2250:18;;2237:32;2307:15;;2300:23;2288:36;;2278:64;;2338:1;2335;2328:12;2278:64;2361:7;2351:17;;;1958:416;;;;;:::o;2379:388::-;2447:6;2455;2508:2;2496:9;2487:7;2483:23;2479:32;2476:52;;;2524:1;2521;2514:12;2476:52;2563:9;2550:23;2582:31;2607:5;2582:31;:::i;:::-;2632:5;-1:-1:-1;2689:2:17;2674:18;;2661:32;2702:33;2661:32;2702:33;:::i;2772:347::-;2823:8;2833:6;2887:3;2880:4;2872:6;2868:17;2864:27;2854:55;;2905:1;2902;2895:12;2854:55;-1:-1:-1;2928:20:17;;-1:-1:-1;;;;;2960:30:17;;2957:50;;;3003:1;3000;2993:12;2957:50;3040:4;3032:6;3028:17;3016:29;;3092:3;3085:4;3076:6;3068;3064:19;3060:30;3057:39;3054:59;;;3109:1;3106;3099:12;3124:544;3203:6;3211;3219;3272:2;3260:9;3251:7;3247:23;3243:32;3240:52;;;3288:1;3285;3278:12;3240:52;3327:9;3314:23;3346:31;3371:5;3346:31;:::i;:::-;3396:5;-1:-1:-1;3452:2:17;3437:18;;3424:32;-1:-1:-1;;;;;3468:30:17;;3465:50;;;3511:1;3508;3501:12;3465:50;3550:58;3600:7;3591:6;3580:9;3576:22;3550:58;:::i;:::-;3124:544;;3627:8;;-1:-1:-1;3524:84:17;;-1:-1:-1;;;;3124:544:17:o;3673:163::-;3740:20;;3800:10;3789:22;;3779:33;;3769:61;;3826:1;3823;3816:12;3841:391;3916:6;3924;3932;3985:2;3973:9;3964:7;3960:23;3956:32;3953:52;;;4001:1;3998;3991:12;3953:52;4024:28;4042:9;4024:28;:::i;:::-;4014:38;;4102:2;4091:9;4087:18;4074:32;4115:31;4140:5;4115:31;:::i;:::-;4165:5;-1:-1:-1;4189:37:17;4222:2;4207:18;;4189:37;:::i;:::-;4179:47;;3841:391;;;;;:::o;4237:319::-;4304:6;4312;4365:2;4353:9;4344:7;4340:23;4336:32;4333:52;;;4381:1;4378;4371:12;4333:52;4404:28;4422:9;4404:28;:::i;5047:256::-;5113:6;5121;5174:2;5162:9;5153:7;5149:23;5145:32;5142:52;;;5190:1;5187;5180:12;5142:52;5213:28;5231:9;5213:28;:::i;:::-;5203:38;;5260:37;5293:2;5282:9;5278:18;5260:37;:::i;:::-;5250:47;;5047:256;;;;;:::o;5308:180::-;5367:6;5420:2;5408:9;5399:7;5395:23;5391:32;5388:52;;;5436:1;5433;5426:12;5388:52;-1:-1:-1;5459:23:17;;5308:180;-1:-1:-1;5308:180:17:o;5694:247::-;5753:6;5806:2;5794:9;5785:7;5781:23;5777:32;5774:52;;;5822:1;5819;5812:12;5774:52;5861:9;5848:23;5880:31;5905:5;5880:31;:::i;5946:131::-;-1:-1:-1;;;;;;6020:32:17;;6010:43;;6000:71;;6067:1;6064;6057:12;6082:386;6149:6;6157;6210:2;6198:9;6189:7;6185:23;6181:32;6178:52;;;6226:1;6223;6216:12;6178:52;6265:9;6252:23;6284:31;6309:5;6284:31;:::i;:::-;6334:5;-1:-1:-1;6391:2:17;6376:18;;6363:32;6404;6363;6404;:::i;6473:482::-;6552:6;6560;6568;6621:2;6609:9;6600:7;6596:23;6592:32;6589:52;;;6637:1;6634;6627:12;6589:52;6660:28;6678:9;6660:28;:::i;7152:256::-;7218:6;7226;7279:2;7267:9;7258:7;7254:23;7250:32;7247:52;;;7295:1;7292;7285:12;7247:52;7318:28;7336:9;7318:28;:::i;:::-;7308:38;;7365:37;7398:2;7387:9;7383:18;7365:37;:::i;7413:685::-;7501:6;7509;7517;7525;7578:2;7566:9;7557:7;7553:23;7549:32;7546:52;;;7594:1;7591;7584:12;7546:52;7633:9;7620:23;7652:31;7677:5;7652:31;:::i;:::-;7702:5;-1:-1:-1;7759:2:17;7744:18;;7731:32;7772:33;7731:32;7772:33;:::i;:::-;7824:7;-1:-1:-1;7882:2:17;7867:18;;7854:32;-1:-1:-1;;;;;7898:30:17;;7895:50;;;7941:1;7938;7931:12;7895:50;7980:58;8030:7;8021:6;8010:9;8006:22;7980:58;:::i;:::-;7413:685;;;;-1:-1:-1;8057:8:17;-1:-1:-1;;;;7413:685:17:o;8285:447::-;8382:6;8390;8443:2;8431:9;8422:7;8418:23;8414:32;8411:52;;;8459:1;8456;8449:12;8411:52;8499:9;8486:23;-1:-1:-1;;;;;8524:6:17;8521:30;8518:50;;;8564:1;8561;8554:12;8518:50;8603:69;8664:7;8655:6;8644:9;8640:22;8603:69;:::i;:::-;8691:8;;8577:95;;-1:-1:-1;8285:447:17;-1:-1:-1;;;;8285:447:17:o;8737:250::-;8822:1;8832:113;8846:6;8843:1;8840:13;8832:113;;;8922:11;;;8916:18;8903:11;;;8896:39;8868:2;8861:10;8832:113;;;-1:-1:-1;;8979:1:17;8961:16;;8954:27;8737:250::o;8992:1012::-;9152:4;9181:2;9221;9210:9;9206:18;9251:2;9240:9;9233:21;9274:6;9309;9303:13;9340:6;9332;9325:22;9378:2;9367:9;9363:18;9356:25;;9440:2;9430:6;9427:1;9423:14;9412:9;9408:30;9404:39;9390:53;;9478:2;9470:6;9466:15;9499:1;9509:466;9523:6;9520:1;9517:13;9509:466;;;9588:22;;;-1:-1:-1;;9584:36:17;9572:49;;9644:13;;9686:9;;9708:24;;;9745:74;9686:9;9793:15;;;9780:11;;;9745:74;:::i;:::-;9885:2;9862:17;-1:-1:-1;;9858:31:17;9846:44;;;;9842:53;;;-1:-1:-1;9953:12:17;;;;9918:15;;;;9545:1;9538:9;9509:466;;;-1:-1:-1;9992:6:17;;8992:1012;-1:-1:-1;;;;;;;8992:1012:17:o;10009:527::-;10085:6;10093;10101;10154:2;10142:9;10133:7;10129:23;10125:32;10122:52;;;10170:1;10167;10160:12;10122:52;10209:9;10196:23;10228:31;10253:5;10228:31;:::i;:::-;10278:5;-1:-1:-1;10335:2:17;10320:18;;10307:32;10348:33;10307:32;10348:33;:::i;:::-;10400:7;-1:-1:-1;10459:2:17;10444:18;;10431:32;10472;10431;10472;:::i;:::-;10523:7;10513:17;;;10009:527;;;;;:::o;10819:319::-;10886:6;10894;10947:2;10935:9;10926:7;10922:23;10918:32;10915:52;;;10963:1;10960;10953:12;10915:52;11002:9;10989:23;11021:31;11046:5;11021:31;:::i;11143:720::-;11230:6;11238;11246;11254;11307:2;11295:9;11286:7;11282:23;11278:32;11275:52;;;11323:1;11320;11313:12;11275:52;11362:9;11349:23;11381:31;11406:5;11381:31;:::i;:::-;11431:5;-1:-1:-1;11487:2:17;11472:18;;11459:32;-1:-1:-1;;;;;11503:30:17;;11500:50;;;11546:1;11543;11536:12;11500:50;11585:58;11635:7;11626:6;11615:9;11611:22;11585:58;:::i;:::-;11662:8;;-1:-1:-1;11559:84:17;-1:-1:-1;;11749:2:17;11734:18;;11721:32;11797:14;11784:28;;11772:41;;11762:69;;11827:1;11824;11817:12;11762:69;11143:720;;;;-1:-1:-1;11143:720:17;;-1:-1:-1;;11143:720:17:o;12136:127::-;12197:10;12192:3;12188:20;12185:1;12178:31;12228:4;12225:1;12218:15;12252:4;12249:1;12242:15;12268:245;12326:6;12379:2;12367:9;12358:7;12354:23;12350:32;12347:52;;;12395:1;12392;12385:12;12347:52;12434:9;12421:23;12453:30;12477:5;12453:30;:::i;12518:127::-;12579:10;12574:3;12570:20;12567:1;12560:31;12610:4;12607:1;12600:15;12634:4;12631:1;12624:15;12650:135;12689:3;12710:17;;;12707:43;;12730:18;;:::i;:::-;-1:-1:-1;12777:1:17;12766:13;;12650:135::o;13449:267::-;13538:6;13533:3;13526:19;13590:6;13583:5;13576:4;13571:3;13567:14;13554:43;-1:-1:-1;13642:1:17;13617:16;;;13635:4;13613:27;;;13606:38;;;;13698:2;13677:15;;;-1:-1:-1;;13673:29:17;13664:39;;;13660:50;;13449:267::o;13721:247::-;13880:2;13869:9;13862:21;13843:4;13900:62;13958:2;13947:9;13943:18;13935:6;13927;13900:62;:::i;:::-;13892:70;13721:247;-1:-1:-1;;;;13721:247:17:o;13973:249::-;14042:6;14095:2;14083:9;14074:7;14070:23;14066:32;14063:52;;;14111:1;14108;14101:12;14063:52;14143:9;14137:16;14162:30;14186:5;14162:30;:::i;14227:466::-;14403:4;-1:-1:-1;;;;;14513:2:17;14505:6;14501:15;14490:9;14483:34;14565:2;14557:6;14553:15;14548:2;14537:9;14533:18;14526:43;;14605:2;14600;14589:9;14585:18;14578:30;14625:62;14683:2;14672:9;14668:18;14660:6;14652;14625:62;:::i;14831:331::-;14936:9;14947;14989:8;14977:10;14974:24;14971:44;;;15011:1;15008;15001:12;14971:44;15040:6;15030:8;15027:20;15024:40;;;15060:1;15057;15050:12;15024:40;-1:-1:-1;;15086:23:17;;;15131:25;;;;;-1:-1:-1;14831:331:17:o;15167:127::-;15228:10;15223:3;15219:20;15216:1;15209:31;15259:4;15256:1;15249:15;15283:4;15280:1;15273:15;15299:521;15376:4;15382:6;15442:11;15429:25;15536:2;15532:7;15521:8;15505:14;15501:29;15497:43;15477:18;15473:68;15463:96;;15555:1;15552;15545:12;15463:96;15582:33;;15634:20;;;-1:-1:-1;;;;;;15666:30:17;;15663:50;;;15709:1;15706;15699:12;15663:50;15742:4;15730:17;;-1:-1:-1;15773:14:17;15769:27;;;15759:38;;15756:58;;;15810:1;15807;15800:12;15825:440;16054:6;16046;16041:3;16028:33;16010:3;16089:6;16084:3;16080:16;16116:1;16112:2;16105:13;16147:6;16141:13;16163:65;16221:6;16217:2;16210:4;16202:6;16198:17;16163:65;:::i;:::-;16244:15;;15825:440;-1:-1:-1;;;;;15825:440:17:o;16779:176::-;16846:14;16880:10;;;16892;;;16876:27;;16915:11;;;16912:37;;;16929:18;;:::i;:::-;16912:37;16779:176;;;;:::o;16960:558::-;17211:14;17203:6;17199:27;17188:9;17181:46;17162:4;-1:-1:-1;;;;;17336:2:17;17328:6;17324:15;17319:2;17308:9;17304:18;17297:43;17388:2;17380:6;17376:15;17371:2;17360:9;17356:18;17349:43;;17428:3;17423:2;17412:9;17408:18;17401:31;17449:63;17507:3;17496:9;17492:19;17484:6;17476;17449:63;:::i;:::-;17441:71;16960:558;-1:-1:-1;;;;;;;16960:558:17:o;18055:323::-;-1:-1:-1;;;;;;18175:19:17;;18251:11;;;;18282:1;18274:10;;18271:101;;;18343:1;18339:11;;;;18336:1;18332:19;18328:28;;;18320:37;18316:46;;;;18055:323;-1:-1:-1;;18055:323:17:o;18710:287::-;18839:3;18877:6;18871:13;18893:66;18952:6;18947:3;18940:4;18932:6;18928:17;18893:66;:::i;:::-;18975:16;;;;;18710:287;-1:-1:-1;;18710:287:17:o;19917:175::-;19985:10;20028;;;20016;;;20012:27;;20051:12;;;20048:38;;;20066:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"2168400","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"273","PUBLIC_ROLE()":"307","canCall(address,address,bytes4)":"infinite","cancel(address,address,bytes)":"infinite","consumeScheduledOp(address,bytes)":"infinite","execute(address,bytes)":"infinite","expiration()":"246","getAccess(uint64,address)":"3388","getNonce(bytes32)":"2576","getRoleAdmin(uint64)":"2679","getRoleGrantDelay(uint64)":"3115","getRoleGuardian(uint64)":"2648","getSchedule(bytes32)":"2818","getTargetAdminDelay(address)":"3068","getTargetFunctionRole(address,bytes4)":"infinite","grantRole(uint64,address,uint32)":"infinite","hasRole(uint64,address)":"infinite","hashOperation(address,address,bytes)":"infinite","isTargetClosed(address)":"2614","labelRole(uint64,string)":"infinite","minSetback()":"290","multicall(bytes[])":"infinite","renounceRole(uint64,address)":"28873","revokeRole(uint64,address)":"infinite","schedule(address,bytes,uint48)":"1815","setGrantDelay(uint64,uint32)":"infinite","setRoleAdmin(uint64,uint64)":"infinite","setRoleGuardian(uint64,uint64)":"infinite","setTargetAdminDelay(address,uint32)":"infinite","setTargetClosed(address,bool)":"infinite","setTargetFunctionRole(address,bytes4[],uint64)":"infinite","updateAuthority(address,address)":"infinite"},"internal":{"_canCallExtended(address,address,bytes calldata)":"infinite","_canCallSelf(address,bytes calldata)":"infinite","_checkAuthorized()":"infinite","_checkNotScheduled(bytes32)":"infinite","_checkSelector(bytes calldata)":"251","_consumeScheduledOp(bytes32)":"infinite","_getAdminRestrictions(bytes calldata)":"infinite","_grantRole(uint64,address,uint32,uint32)":"infinite","_hashExecutionId(address,bytes4)":"infinite","_isExecuting(address,bytes4)":"infinite","_isExpired(uint48)":"infinite","_revokeRole(uint64,address)":"infinite","_setGrantDelay(uint64,uint32)":"infinite","_setRoleAdmin(uint64,uint64)":"infinite","_setRoleGuardian(uint64,uint64)":"infinite","_setTargetAdminDelay(address,uint32)":"infinite","_setTargetClosed(address,bool)":"infinite","_setTargetFunctionRole(address,bytes4,uint64)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PUBLIC_ROLE()":"3ca7c02a","canCall(address,address,bytes4)":"b7009613","cancel(address,address,bytes)":"d6bb62c6","consumeScheduledOp(address,bytes)":"94c7d7ee","execute(address,bytes)":"1cff79cd","expiration()":"4665096d","getAccess(uint64,address)":"3078f114","getNonce(bytes32)":"4136a33c","getRoleAdmin(uint64)":"530dd456","getRoleGrantDelay(uint64)":"12be8727","getRoleGuardian(uint64)":"0b0a93ba","getSchedule(bytes32)":"3adc277a","getTargetAdminDelay(address)":"4c1da1e2","getTargetFunctionRole(address,bytes4)":"6d5115bd","grantRole(uint64,address,uint32)":"25c471a0","hasRole(uint64,address)":"d1f856ee","hashOperation(address,address,bytes)":"abd9bd2a","isTargetClosed(address)":"a166aa89","labelRole(uint64,string)":"853551b8","minSetback()":"cc1b6c81","multicall(bytes[])":"ac9650d8","renounceRole(uint64,address)":"fe0776f5","revokeRole(uint64,address)":"b7d2b162","schedule(address,bytes,uint48)":"f801a698","setGrantDelay(uint64,uint32)":"a64d95ce","setRoleAdmin(uint64,uint64)":"30cae187","setRoleGuardian(uint64,uint64)":"52962952","setTargetAdminDelay(address,uint32)":"d22b5989","setTargetClosed(address,bool)":"167bd395","setTargetFunctionRole(address,bytes4[],uint64)":"08d6122d","updateAuthority(address,address)":"18ff183c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManagerBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"AccessManagerInvalidInitialAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessManagerLockedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerLockedRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCancel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AccessManagerUnauthorizedConsume\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"RoleGrantDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMember\",\"type\":\"bool\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"RoleGuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RoleLabel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"TargetAdminDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"TargetClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"TargetFunctionRoleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"immediate\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"consumeScheduledOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"currentDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pendingDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"effect\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGrantDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGuardian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getTargetAdminDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getTargetFunctionRole\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isTargetClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSetback\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"when\",\"type\":\"uint48\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setGrantDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"setRoleGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setTargetAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setTargetClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"setTargetFunctionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"AccessManager is a central contract to store the permissions of a system. A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted} modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be effectively restricted. The restriction rules for such functions are defined in terms of \\\"roles\\\" identified by an `uint64` and scoped by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}). For each target contract, admins can configure the following without any delay: * The target's {AccessManaged-authority} via {updateAuthority}. * Close or open a target via {setTargetClosed} keeping the permissions intact. * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}. By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise. Additionally, each role has the following configuration options restricted to this manager's admins: * A role's admin role via {setRoleAdmin} who can grant or revoke roles. * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations. * A delay in which a role takes effect after being granted through {setGrantDelay}. * A delay of any target's admin action via {setTargetAdminDelay}. * A role label for discoverability purposes with {labelRole}. Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions restricted to each role's admin (see {getRoleAdmin}). Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that they will be highly secured (e.g., a multisig or a well-configured DAO). NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of the return data are a boolean as expected by that interface. NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}. Users will be able to interact with these contracts through the {execute} function, following the access rules registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions will be {AccessManager} itself. WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or {{AccessControl-renounceRole}}.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"OperationCanceled(bytes32,uint32)\":{\"details\":\"A scheduled operation was canceled.\"},\"OperationExecuted(bytes32,uint32)\":{\"details\":\"A scheduled operation was executed.\"},\"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)\":{\"details\":\"A delayed operation was scheduled.\"},\"RoleAdminChanged(uint64,uint64)\":{\"details\":\"Role acting as admin over a given `roleId` is updated.\"},\"RoleGrantDelayChanged(uint64,uint32,uint48)\":{\"details\":\"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\"},\"RoleGranted(uint64,address,uint32,uint48,bool)\":{\"details\":\"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated.\"},\"RoleGuardianChanged(uint64,uint64)\":{\"details\":\"Role acting as guardian over a given `roleId` is updated.\"},\"RoleLabel(uint64,string)\":{\"details\":\"Informational labelling for a roleId.\"},\"RoleRevoked(uint64,address)\":{\"details\":\"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\"},\"TargetAdminDelayUpdated(address,uint32,uint48)\":{\"details\":\"Admin delay for a given `target` will be updated to `delay` when `since` is reached.\"},\"TargetClosed(address,bool)\":{\"details\":\"Target mode is updated (true = closed, false = open).\"},\"TargetFunctionRoleUpdated(address,bytes4,uint64)\":{\"details\":\"Role required to invoke `selector` on `target` is updated to `roleId`.\"}},\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead.\"},\"cancel(address,address,bytes)\":{\"details\":\"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event.\"},\"consumeScheduledOp(address,bytes)\":{\"details\":\"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event.\"},\"execute(address,bytes)\":{\"details\":\"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed.\"},\"expiration()\":{\"details\":\"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage.\"},\"getAccess(uint64,address)\":{\"details\":\"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\"},\"getNonce(bytes32)\":{\"details\":\"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled.\"},\"getRoleAdmin(uint64)\":{\"details\":\"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role.\"},\"getRoleGrantDelay(uint64)\":{\"details\":\"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\"},\"getRoleGuardian(uint64)\":{\"details\":\"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role.\"},\"getSchedule(bytes32)\":{\"details\":\"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled.\"},\"getTargetAdminDelay(address)\":{\"details\":\"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\"},\"getTargetFunctionRole(address,bytes4)\":{\"details\":\"Get the role required to call a function.\"},\"grantRole(uint64,address,uint32)\":{\"details\":\"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event.\"},\"hasRole(uint64,address)\":{\"details\":\"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details.\"},\"hashOperation(address,address,bytes)\":{\"details\":\"Hashing function for delayed operations.\"},\"isTargetClosed(address)\":{\"details\":\"Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\"},\"labelRole(uint64,string)\":{\"details\":\"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event.\"},\"minSetback()\":{\"details\":\"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"renounceRole(uint64,address)\":{\"details\":\"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role.\"},\"revokeRole(uint64,address)\":{\"details\":\"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role.\"},\"schedule(address,bytes,uint48)\":{\"details\":\"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding.\"},\"setGrantDelay(uint64,uint32)\":{\"details\":\"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event.\"},\"setRoleAdmin(uint64,uint64)\":{\"details\":\"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event\"},\"setRoleGuardian(uint64,uint64)\":{\"details\":\"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event\"},\"setTargetAdminDelay(address,uint32)\":{\"details\":\"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event.\"},\"setTargetClosed(address,bool)\":{\"details\":\"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event.\"},\"setTargetFunctionRole(address,bytes4[],uint64)\":{\"details\":\"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector.\"},\"updateAuthority(address,address)\":{\"details\":\"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/AccessManager.sol\":\"AccessManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Multicall} from \\\"../../utils/Multicall.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev AccessManager is a central contract to store the permissions of a system.\\n *\\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\\n * effectively restricted.\\n *\\n * The restriction rules for such functions are defined in terms of \\\"roles\\\" identified by an `uint64` and scoped\\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\\n *\\n * For each target contract, admins can configure the following without any delay:\\n *\\n * * The target's {AccessManaged-authority} via {updateAuthority}.\\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\\n *\\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\\n * Additionally, each role has the following configuration options restricted to this manager's admins:\\n *\\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\\n * * A delay of any target's admin action via {setTargetAdminDelay}.\\n * * A role label for discoverability purposes with {labelRole}.\\n *\\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\\n * restricted to each role's admin (see {getRoleAdmin}).\\n *\\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\\n *\\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\\n * the return data are a boolean as expected by that interface.\\n *\\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\\n * will be {AccessManager} itself.\\n *\\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\\n * mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\\n * {{AccessControl-renounceRole}}.\\n */\\ncontract AccessManager is Context, Multicall, IAccessManager {\\n    using Time for *;\\n\\n    // Structure that stores the details for a target contract.\\n    struct TargetConfig {\\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\\n        Time.Delay adminDelay;\\n        bool closed;\\n    }\\n\\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\\n    struct Access {\\n        // Timepoint at which the user gets the permission.\\n        // If this is either 0 or in the future, then the role permission is not available.\\n        uint48 since;\\n        // Delay for execution. Only applies to restricted() / execute() calls.\\n        Time.Delay delay;\\n    }\\n\\n    // Structure that stores the details of a role.\\n    struct Role {\\n        // Members of the role.\\n        mapping(address user => Access access) members;\\n        // Admin who can grant or revoke permissions.\\n        uint64 admin;\\n        // Guardian who can cancel operations targeting functions that need this role.\\n        uint64 guardian;\\n        // Delay in which the role takes effect after being granted.\\n        Time.Delay grantDelay;\\n    }\\n\\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\\n    struct Schedule {\\n        // Moment at which the operation can be executed.\\n        uint48 timepoint;\\n        // Operation nonce to allow third-party contracts to identify the operation.\\n        uint32 nonce;\\n    }\\n\\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\\n\\n    mapping(address target => TargetConfig mode) private _targets;\\n    mapping(uint64 roleId => Role) private _roles;\\n    mapping(bytes32 operationId => Schedule) private _schedules;\\n\\n    // Used to identify operations that are currently being executed via {execute}.\\n    // This should be transient storage when supported by the EVM.\\n    bytes32 private _executionId;\\n\\n    /**\\n     * @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\\n     * {_getAdminRestrictions}.\\n     */\\n    modifier onlyAuthorized() {\\n        _checkAuthorized();\\n        _;\\n    }\\n\\n    constructor(address initialAdmin) {\\n        if (initialAdmin == address(0)) {\\n            revert AccessManagerInvalidInitialAdmin(address(0));\\n        }\\n\\n        // admin is active immediately and without any execution delay.\\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\\n    }\\n\\n    // =================================================== GETTERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) public view virtual returns (bool immediate, uint32 delay) {\\n        if (isTargetClosed(target)) {\\n            return (false, 0);\\n        } else if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(target, selector), 0);\\n        } else {\\n            uint64 roleId = getTargetFunctionRole(target, selector);\\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function expiration() public view virtual returns (uint32) {\\n        return 1 weeks;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function minSetback() public view virtual returns (uint32) {\\n        return 5 days;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function isTargetClosed(address target) public view virtual returns (bool) {\\n        return _targets[target].closed;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\\n        return _targets[target].allowedRoles[selector];\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\\n        return _targets[target].adminDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].admin;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].guardian;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\\n        return _roles[roleId].grantDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\\n        Access storage access = _roles[roleId].members[account];\\n\\n        since = access.since;\\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\\n\\n        return (since, currentDelay, pendingDelay, effect);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hasRole(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\\n        if (roleId == PUBLIC_ROLE) {\\n            return (true, 0);\\n        } else {\\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\\n        }\\n    }\\n\\n    // =============================================== ROLE MANAGEMENT ===============================================\\n    /// @inheritdoc IAccessManager\\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n        emit RoleLabel(roleId, label);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\\n        _revokeRole(roleId, account);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessManagerBadConfirmation();\\n        }\\n        _revokeRole(roleId, callerConfirmation);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\\n        _setRoleAdmin(roleId, admin);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\\n        _setRoleGuardian(roleId, guardian);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\\n        _setGrantDelay(roleId, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function _grantRole(\\n        uint64 roleId,\\n        address account,\\n        uint32 grantDelay,\\n        uint32 executionDelay\\n    ) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        bool newMember = _roles[roleId].members[account].since == 0;\\n        uint48 since;\\n\\n        if (newMember) {\\n            since = Time.timestamp() + grantDelay;\\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\\n        } else {\\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\\n            // any change to the execution delay within the duration of the role admin delay.\\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\\n                executionDelay,\\n                0\\n            );\\n        }\\n\\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\\n        return newMember;\\n    }\\n\\n    /**\\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\\n     * Returns true if the role was previously granted.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        if (_roles[roleId].members[account].since == 0) {\\n            return false;\\n        }\\n\\n        delete _roles[roleId].members[account];\\n\\n        emit RoleRevoked(roleId, account);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleAdmin} without access control.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to set grant or revoke such role.\\n     */\\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].admin = admin;\\n\\n        emit RoleAdminChanged(roleId, admin);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleGuardian} without access control.\\n     *\\n     * Emits a {RoleGuardianChanged} event.\\n     *\\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to cancel any scheduled operation for such role.\\n     */\\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].guardian = guardian;\\n\\n        emit RoleGuardianChanged(roleId, guardian);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setGrantDelay} without access control.\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        uint48 effect;\\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\\n\\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\\n    }\\n\\n    // ============================================= FUNCTION MANAGEMENT ==============================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetFunctionRole(\\n        address target,\\n        bytes4[] calldata selectors,\\n        uint64 roleId\\n    ) public virtual onlyAuthorized {\\n        for (uint256 i = 0; i < selectors.length; ++i) {\\n            _setTargetFunctionRole(target, selectors[i], roleId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetFunctionRole} without access control.\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event.\\n     */\\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\\n        _targets[target].allowedRoles[selector] = roleId;\\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\\n        _setTargetAdminDelay(target, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetAdminDelay} without access control.\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\\n        uint48 effect;\\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\\n\\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\\n    }\\n\\n    // =============================================== MODE MANAGEMENT ================================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\\n        _setTargetClosed(target, closed);\\n    }\\n\\n    /**\\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function _setTargetClosed(address target, bool closed) internal virtual {\\n        if (target == address(this)) {\\n            revert AccessManagerLockedAccount(target);\\n        }\\n        _targets[target].closed = closed;\\n        emit TargetClosed(target, closed);\\n    }\\n\\n    // ============================================== DELAYED OPERATIONS ==============================================\\n    /// @inheritdoc IAccessManager\\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\\n        uint48 timepoint = _schedules[id].timepoint;\\n        return _isExpired(timepoint) ? 0 : timepoint;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\\n        return _schedules[id].nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        uint48 minWhen = Time.timestamp() + setback;\\n\\n        // if call with delay is not authorized, or if requested timing is too soon\\n        if (setback == 0 || (when > 0 && when < minWhen)) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        // Reuse variable due to stack too deep\\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\\n\\n        // If caller is authorised, schedule operation\\n        operationId = hashOperation(caller, target, data);\\n\\n        _checkNotScheduled(operationId);\\n\\n        unchecked {\\n            // It's not feasible to overflow the nonce in less than 1000 years\\n            nonce = _schedules[operationId].nonce + 1;\\n        }\\n        _schedules[operationId].timepoint = when;\\n        _schedules[operationId].nonce = nonce;\\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\\n\\n        // Using named return values because otherwise we get stack too deep\\n    }\\n\\n    /**\\n     * @dev Reverts if the operation is currently scheduled and has not expired.\\n     * (Note: This function was introduced due to stack too deep errors in schedule.)\\n     */\\n    function _checkNotScheduled(bytes32 operationId) private view {\\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\\n            revert AccessManagerAlreadyScheduled(operationId);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        // If caller is not authorised, revert\\n        if (!immediate && setback == 0) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        uint32 nonce;\\n\\n        // If caller is authorised, check operation was scheduled early enough\\n        // Consume an available schedule even if there is no currently enforced delay\\n        if (setback != 0 || getSchedule(operationId) != 0) {\\n            nonce = _consumeScheduledOp(operationId);\\n        }\\n\\n        // Mark the target and selector as authorised\\n        bytes32 executionIdBefore = _executionId;\\n        _executionId = _hashExecutionId(target, _checkSelector(data));\\n\\n        // Perform call\\n        Address.functionCallWithValue(target, data, msg.value);\\n\\n        // Reset execute identifier\\n        _executionId = executionIdBefore;\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\\n        address msgsender = _msgSender();\\n        bytes4 selector = _checkSelector(data);\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        if (_schedules[operationId].timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (caller != msgsender) {\\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\\n            if (!isAdmin && !isGuardian) {\\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\\n            }\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        uint32 nonce = _schedules[operationId].nonce;\\n        emit OperationCanceled(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\\n        address target = _msgSender();\\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\\n            revert AccessManagerUnauthorizedConsume(target);\\n        }\\n        _consumeScheduledOp(hashOperation(caller, target, data));\\n    }\\n\\n    /**\\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\\n     *\\n     * Returns the nonce of the scheduled operation that is consumed.\\n     */\\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\\n        uint48 timepoint = _schedules[operationId].timepoint;\\n        uint32 nonce = _schedules[operationId].nonce;\\n\\n        if (timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (timepoint > Time.timestamp()) {\\n            revert AccessManagerNotReady(operationId);\\n        } else if (_isExpired(timepoint)) {\\n            revert AccessManagerExpired(operationId);\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        emit OperationExecuted(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\\n        return keccak256(abi.encode(caller, target, data));\\n    }\\n\\n    // ==================================================== OTHERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\\n        IAccessManaged(target).setAuthority(newAuthority);\\n    }\\n\\n    // ================================================= ADMIN LOGIC ==================================================\\n    /**\\n     * @dev Check if the current call is authorized according to admin logic.\\n     */\\n    function _checkAuthorized() private {\\n        address caller = _msgSender();\\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\\n        if (!immediate) {\\n            if (delay == 0) {\\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\\n            } else {\\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\\n     *\\n     * Returns:\\n     * - bool restricted: does this data match a restricted operation\\n     * - uint64: which role is this operation restricted to\\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\\n     */\\n    function _getAdminRestrictions(\\n        bytes calldata data\\n    ) private view returns (bool restricted, uint64 roleAdminId, uint32 executionDelay) {\\n        if (data.length < 4) {\\n            return (false, 0, 0);\\n        }\\n\\n        bytes4 selector = _checkSelector(data);\\n\\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\\n        if (\\n            selector == this.labelRole.selector ||\\n            selector == this.setRoleAdmin.selector ||\\n            selector == this.setRoleGuardian.selector ||\\n            selector == this.setGrantDelay.selector ||\\n            selector == this.setTargetAdminDelay.selector\\n        ) {\\n            return (true, ADMIN_ROLE, 0);\\n        }\\n\\n        // Restricted to ADMIN with the admin delay corresponding to the target\\n        if (\\n            selector == this.updateAuthority.selector ||\\n            selector == this.setTargetClosed.selector ||\\n            selector == this.setTargetFunctionRole.selector\\n        ) {\\n            // First argument is a target.\\n            address target = abi.decode(data[0x04:0x24], (address));\\n            uint32 delay = getTargetAdminDelay(target);\\n            return (true, ADMIN_ROLE, delay);\\n        }\\n\\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\\n            // First argument is a roleId.\\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\\n            return (true, getRoleAdmin(roleId), 0);\\n        }\\n\\n        return (false, 0, 0);\\n    }\\n\\n    // =================================================== HELPERS ====================================================\\n    /**\\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\\n     * when the target is this contract.\\n     *\\n     * Returns:\\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\\n     * - uint32 delay: the execution delay\\n     */\\n    function _canCallExtended(\\n        address caller,\\n        address target,\\n        bytes calldata data\\n    ) private view returns (bool immediate, uint32 delay) {\\n        if (target == address(this)) {\\n            return _canCallSelf(caller, data);\\n        } else {\\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\\n        }\\n    }\\n\\n    /**\\n     * @dev A version of {canCall} that checks for admin restrictions in this contract.\\n     */\\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\\n        if (data.length < 4) {\\n            return (false, 0);\\n        }\\n\\n        if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\\n        }\\n\\n        (bool enabled, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\\n        if (!enabled) {\\n            return (false, 0);\\n        }\\n\\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\\n        if (!inRole) {\\n            return (false, 0);\\n        }\\n\\n        // downcast is safe because both options are uint32\\n        delay = uint32(Math.max(operationDelay, executionDelay));\\n        return (delay == 0, delay);\\n    }\\n\\n    /**\\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\\n     */\\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\\n        return _executionId == _hashExecutionId(target, selector);\\n    }\\n\\n    /**\\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\\n     */\\n    function _isExpired(uint48 timepoint) private view returns (bool) {\\n        return timepoint + expiration() <= Time.timestamp();\\n    }\\n\\n    /**\\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\\n     */\\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\\n        return bytes4(data[0:4]);\\n    }\\n\\n    /**\\n     * @dev Hashing function for execute protection\\n     */\\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\\n        return keccak256(abi.encode(target, selector));\\n    }\\n}\\n\",\"keccak256\":\"0x400d1683c04190b85f1dcaeb05d9206fe9fdbafbb3c7a75b18bfe1d84038a876\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":225,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"_targets","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(TargetConfig)182_storage)"},{"astId":230,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"_roles","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_struct(Role)201_storage)"},{"astId":235,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"_schedules","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(Schedule)206_storage)"},{"astId":237,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"_executionId","offset":0,"slot":"3","type":"t_bytes32"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_mapping(t_address,t_struct(Access)188_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AccessManager.Access)","numberOfBytes":"32","value":"t_struct(Access)188_storage"},"t_mapping(t_address,t_struct(TargetConfig)182_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AccessManager.TargetConfig)","numberOfBytes":"32","value":"t_struct(TargetConfig)182_storage"},"t_mapping(t_bytes32,t_struct(Schedule)206_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessManager.Schedule)","numberOfBytes":"32","value":"t_struct(Schedule)206_storage"},"t_mapping(t_bytes4,t_uint64)":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint64,t_struct(Role)201_storage)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => struct AccessManager.Role)","numberOfBytes":"32","value":"t_struct(Role)201_storage"},"t_struct(Access)188_storage":{"encoding":"inplace","label":"struct AccessManager.Access","members":[{"astId":184,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"since","offset":0,"slot":"0","type":"t_uint48"},{"astId":187,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"delay","offset":6,"slot":"0","type":"t_userDefinedValueType(Delay)7676"}],"numberOfBytes":"32"},"t_struct(Role)201_storage":{"encoding":"inplace","label":"struct AccessManager.Role","members":[{"astId":193,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(Access)188_storage)"},{"astId":195,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"admin","offset":0,"slot":"1","type":"t_uint64"},{"astId":197,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"guardian","offset":8,"slot":"1","type":"t_uint64"},{"astId":200,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"grantDelay","offset":16,"slot":"1","type":"t_userDefinedValueType(Delay)7676"}],"numberOfBytes":"64"},"t_struct(Schedule)206_storage":{"encoding":"inplace","label":"struct AccessManager.Schedule","members":[{"astId":203,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"timepoint","offset":0,"slot":"0","type":"t_uint48"},{"astId":205,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"nonce","offset":6,"slot":"0","type":"t_uint32"}],"numberOfBytes":"32"},"t_struct(TargetConfig)182_storage":{"encoding":"inplace","label":"struct AccessManager.TargetConfig","members":[{"astId":176,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"allowedRoles","offset":0,"slot":"0","type":"t_mapping(t_bytes4,t_uint64)"},{"astId":179,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"adminDelay","offset":0,"slot":"1","type":"t_userDefinedValueType(Delay)7676"},{"astId":181,"contract":"@openzeppelin/contracts/access/manager/AccessManager.sol:AccessManager","label":"closed","offset":14,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint48":{"encoding":"inplace","label":"uint48","numberOfBytes":"6"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_userDefinedValueType(Delay)7676":{"encoding":"inplace","label":"Time.Delay","numberOfBytes":"14"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"IAccessManaged":{"abi":[{"inputs":[{"internalType":"address","name":"authority","type":"address"}],"name":"AccessManagedInvalidAuthority","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"uint32","name":"delay","type":"uint32"}],"name":"AccessManagedRequiredDelay","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"AccessManagedUnauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"authority","type":"address"}],"name":"AuthorityUpdated","type":"event"},{"inputs":[],"name":"authority","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isConsumingScheduledOp","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"AuthorityUpdated(address)":{"details":"Authority that manages this contract was updated."}},"kind":"dev","methods":{"authority()":{"details":"Returns the current authority."},"isConsumingScheduledOp()":{"details":"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls."},"setAuthority(address)":{"details":"Transfers control to a new authority. The caller must be the current authority."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authority()":"bf7e214f","isConsumingScheduledOp()":"8fb36037","setAuthority(address)":"7a9e5e4b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorityUpdated(address)\":{\"details\":\"Authority that manages this contract was updated.\"}},\"kind\":\"dev\",\"methods\":{\"authority()\":{\"details\":\"Returns the current authority.\"},\"isConsumingScheduledOp()\":{\"details\":\"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls.\"},\"setAuthority(address)\":{\"details\":\"Transfers control to a new authority. The caller must be the current authority.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":\"IAccessManaged\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"IAccessManager":{"abi":[{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerAlreadyScheduled","type":"error"},{"inputs":[],"name":"AccessManagerBadConfirmation","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerExpired","type":"error"},{"inputs":[{"internalType":"address","name":"initialAdmin","type":"address"}],"name":"AccessManagerInvalidInitialAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AccessManagerLockedAccount","type":"error"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerLockedRole","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotReady","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotScheduled","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCall","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCancel","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AccessManagerUnauthorizedConsume","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"schedule","type":"uint48"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"OperationScheduled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"admin","type":"uint64"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"RoleGrantDelayChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"},{"indexed":false,"internalType":"bool","name":"newMember","type":"bool"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"RoleGuardianChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"string","name":"label","type":"string"}],"name":"RoleLabel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"TargetAdminDelayUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"closed","type":"bool"}],"name":"TargetClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"TargetFunctionRoleUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"canCall","outputs":[{"internalType":"bool","name":"allowed","type":"bool"},{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"cancel","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"consumeScheduledOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"execute","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"expiration","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"getAccess","outputs":[{"internalType":"uint48","name":"","type":"uint48"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getNonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleAdmin","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGrantDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGuardian","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getSchedule","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"getTargetAdminDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getTargetFunctionRole","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"hashOperation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"isTargetClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"string","name":"label","type":"string"}],"name":"labelRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minSetback","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint48","name":"when","type":"uint48"}],"name":"schedule","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setGrantDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"admin","type":"uint64"}],"name":"setRoleAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"setRoleGuardian","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setTargetAdminDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"closed","type":"bool"}],"name":"setTargetClosed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"setTargetFunctionRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"address","name":"newAuthority","type":"address"}],"name":"updateAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"OperationCanceled(bytes32,uint32)":{"details":"A scheduled operation was canceled."},"OperationExecuted(bytes32,uint32)":{"details":"A scheduled operation was executed."},"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)":{"details":"A delayed operation was scheduled."},"RoleAdminChanged(uint64,uint64)":{"details":"Role acting as admin over a given `roleId` is updated."},"RoleGrantDelayChanged(uint64,uint32,uint48)":{"details":"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"RoleGranted(uint64,address,uint32,uint48,bool)":{"details":"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated."},"RoleGuardianChanged(uint64,uint64)":{"details":"Role acting as guardian over a given `roleId` is updated."},"RoleLabel(uint64,string)":{"details":"Informational labelling for a roleId."},"RoleRevoked(uint64,address)":{"details":"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"TargetAdminDelayUpdated(address,uint32,uint48)":{"details":"Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"TargetClosed(address,bool)":{"details":"Target mode is updated (true = closed, false = open)."},"TargetFunctionRoleUpdated(address,bytes4,uint64)":{"details":"Role required to invoke `selector` on `target` is updated to `roleId`."}},"kind":"dev","methods":{"canCall(address,address,bytes4)":{"details":"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead."},"cancel(address,address,bytes)":{"details":"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event."},"consumeScheduledOp(address,bytes)":{"details":"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event."},"execute(address,bytes)":{"details":"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"expiration()":{"details":"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage."},"getAccess(uint64,address)":{"details":"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"getNonce(bytes32)":{"details":"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled."},"getRoleAdmin(uint64)":{"details":"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role."},"getRoleGrantDelay(uint64)":{"details":"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"getRoleGuardian(uint64)":{"details":"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role."},"getSchedule(bytes32)":{"details":"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled."},"getTargetAdminDelay(address)":{"details":"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"getTargetFunctionRole(address,bytes4)":{"details":"Get the role required to call a function."},"grantRole(uint64,address,uint32)":{"details":"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event."},"hasRole(uint64,address)":{"details":"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details."},"hashOperation(address,address,bytes)":{"details":"Hashing function for delayed operations."},"isTargetClosed(address)":{"details":"Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"labelRole(uint64,string)":{"details":"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event."},"minSetback()":{"details":"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days."},"renounceRole(uint64,address)":{"details":"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role."},"revokeRole(uint64,address)":{"details":"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role."},"schedule(address,bytes,uint48)":{"details":"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding."},"setGrantDelay(uint64,uint32)":{"details":"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event."},"setRoleAdmin(uint64,uint64)":{"details":"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event"},"setRoleGuardian(uint64,uint64)":{"details":"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event"},"setTargetAdminDelay(address,uint32)":{"details":"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event."},"setTargetClosed(address,bool)":{"details":"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event."},"setTargetFunctionRole(address,bytes4[],uint64)":{"details":"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector."},"updateAuthority(address,address)":{"details":"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"canCall(address,address,bytes4)":"b7009613","cancel(address,address,bytes)":"d6bb62c6","consumeScheduledOp(address,bytes)":"94c7d7ee","execute(address,bytes)":"1cff79cd","expiration()":"4665096d","getAccess(uint64,address)":"3078f114","getNonce(bytes32)":"4136a33c","getRoleAdmin(uint64)":"530dd456","getRoleGrantDelay(uint64)":"12be8727","getRoleGuardian(uint64)":"0b0a93ba","getSchedule(bytes32)":"3adc277a","getTargetAdminDelay(address)":"4c1da1e2","getTargetFunctionRole(address,bytes4)":"6d5115bd","grantRole(uint64,address,uint32)":"25c471a0","hasRole(uint64,address)":"d1f856ee","hashOperation(address,address,bytes)":"abd9bd2a","isTargetClosed(address)":"a166aa89","labelRole(uint64,string)":"853551b8","minSetback()":"cc1b6c81","renounceRole(uint64,address)":"fe0776f5","revokeRole(uint64,address)":"b7d2b162","schedule(address,bytes,uint48)":"f801a698","setGrantDelay(uint64,uint32)":"a64d95ce","setRoleAdmin(uint64,uint64)":"30cae187","setRoleGuardian(uint64,uint64)":"52962952","setTargetAdminDelay(address,uint32)":"d22b5989","setTargetClosed(address,bool)":"167bd395","setTargetFunctionRole(address,bytes4[],uint64)":"08d6122d","updateAuthority(address,address)":"18ff183c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManagerBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"AccessManagerInvalidInitialAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessManagerLockedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerLockedRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCancel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AccessManagerUnauthorizedConsume\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"RoleGrantDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMember\",\"type\":\"bool\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"RoleGuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RoleLabel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"TargetAdminDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"TargetClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"TargetFunctionRoleUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"consumeScheduledOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGrantDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGuardian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getTargetAdminDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getTargetFunctionRole\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isTargetClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSetback\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"when\",\"type\":\"uint48\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setGrantDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"setRoleGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setTargetAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setTargetClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"setTargetFunctionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OperationCanceled(bytes32,uint32)\":{\"details\":\"A scheduled operation was canceled.\"},\"OperationExecuted(bytes32,uint32)\":{\"details\":\"A scheduled operation was executed.\"},\"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)\":{\"details\":\"A delayed operation was scheduled.\"},\"RoleAdminChanged(uint64,uint64)\":{\"details\":\"Role acting as admin over a given `roleId` is updated.\"},\"RoleGrantDelayChanged(uint64,uint32,uint48)\":{\"details\":\"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\"},\"RoleGranted(uint64,address,uint32,uint48,bool)\":{\"details\":\"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated.\"},\"RoleGuardianChanged(uint64,uint64)\":{\"details\":\"Role acting as guardian over a given `roleId` is updated.\"},\"RoleLabel(uint64,string)\":{\"details\":\"Informational labelling for a roleId.\"},\"RoleRevoked(uint64,address)\":{\"details\":\"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\"},\"TargetAdminDelayUpdated(address,uint32,uint48)\":{\"details\":\"Admin delay for a given `target` will be updated to `delay` when `since` is reached.\"},\"TargetClosed(address,bool)\":{\"details\":\"Target mode is updated (true = closed, false = open).\"},\"TargetFunctionRoleUpdated(address,bytes4,uint64)\":{\"details\":\"Role required to invoke `selector` on `target` is updated to `roleId`.\"}},\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead.\"},\"cancel(address,address,bytes)\":{\"details\":\"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event.\"},\"consumeScheduledOp(address,bytes)\":{\"details\":\"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event.\"},\"execute(address,bytes)\":{\"details\":\"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed.\"},\"expiration()\":{\"details\":\"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage.\"},\"getAccess(uint64,address)\":{\"details\":\"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\"},\"getNonce(bytes32)\":{\"details\":\"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled.\"},\"getRoleAdmin(uint64)\":{\"details\":\"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role.\"},\"getRoleGrantDelay(uint64)\":{\"details\":\"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\"},\"getRoleGuardian(uint64)\":{\"details\":\"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role.\"},\"getSchedule(bytes32)\":{\"details\":\"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled.\"},\"getTargetAdminDelay(address)\":{\"details\":\"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\"},\"getTargetFunctionRole(address,bytes4)\":{\"details\":\"Get the role required to call a function.\"},\"grantRole(uint64,address,uint32)\":{\"details\":\"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event.\"},\"hasRole(uint64,address)\":{\"details\":\"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details.\"},\"hashOperation(address,address,bytes)\":{\"details\":\"Hashing function for delayed operations.\"},\"isTargetClosed(address)\":{\"details\":\"Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\"},\"labelRole(uint64,string)\":{\"details\":\"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event.\"},\"minSetback()\":{\"details\":\"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days.\"},\"renounceRole(uint64,address)\":{\"details\":\"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role.\"},\"revokeRole(uint64,address)\":{\"details\":\"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role.\"},\"schedule(address,bytes,uint48)\":{\"details\":\"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding.\"},\"setGrantDelay(uint64,uint32)\":{\"details\":\"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event.\"},\"setRoleAdmin(uint64,uint64)\":{\"details\":\"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event\"},\"setRoleGuardian(uint64,uint64)\":{\"details\":\"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event\"},\"setTargetAdminDelay(address,uint32)\":{\"details\":\"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event.\"},\"setTargetClosed(address,bool)\":{\"details\":\"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event.\"},\"setTargetFunctionRole(address,bytes4[],uint64)\":{\"details\":\"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector.\"},\"updateAuthority(address,address)\":{\"details\":\"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":\"IAccessManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"195:6066:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;195:6066:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"195:6066:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Multicall.sol":{"Multicall":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Provides a function to batch together multiple calls in a single external call. Consider any assumption about calldata validation performed by the sender may be violated if it's not especially careful about sending transactions invoking {multicall}. For example, a relay address that filters function selectors won't filter calls nested within a {multicall} operation. NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}). If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data` to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of {_msgSender} are not propagated to subcalls.","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"multicall(bytes[])":"ac9650d8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a function to batch together multiple calls in a single external call. Consider any assumption about calldata validation performed by the sender may be violated if it's not especially careful about sending transactions invoking {multicall}. For example, a relay address that filters function selectors won't filter calls nested within a {multicall} operation. NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}). If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data` to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of {_msgSender} are not propagated to subcalls.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Pausable.sol":{"Pausable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2994,"contract":"@openzeppelin/contracts/utils/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"203:14914:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"203:14914:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"764:33927:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;764:33927:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"764:33927:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableMap.sol":{"EnumerableMap":{"abi":[{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"EnumerableMapNonexistentKey","type":"error"}],"devdoc":{"details":"Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` The following map types are supported: - `uint256 -> address` (`UintToAddressMap`) since v3.0.0 - `address -> uint256` (`AddressToUintMap`) since v4.6.0 - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0 - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0 - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0 [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap. ====","errors":{"EnumerableMapNonexistentKey(bytes32)":[{"details":"Query for a nonexistent map key."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"1651:17249:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1651:17249:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"1651:17249:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"at(struct EnumerableMap.AddressToUintMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,uint256)":"infinite","at(struct EnumerableMap.Bytes32ToUintMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","at(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","contains(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","contains(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","contains(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","contains(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","contains(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","get(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","get(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","get(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","get(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","get(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","keys(struct EnumerableMap.AddressToUintMap storage pointer)":"infinite","keys(struct EnumerableMap.Bytes32ToBytes32Map storage pointer)":"infinite","keys(struct EnumerableMap.Bytes32ToUintMap storage pointer)":"infinite","keys(struct EnumerableMap.UintToAddressMap storage pointer)":"infinite","keys(struct EnumerableMap.UintToUintMap storage pointer)":"infinite","length(struct EnumerableMap.AddressToUintMap storage pointer)":"infinite","length(struct EnumerableMap.Bytes32ToBytes32Map storage pointer)":"infinite","length(struct EnumerableMap.Bytes32ToUintMap storage pointer)":"infinite","length(struct EnumerableMap.UintToAddressMap storage pointer)":"infinite","length(struct EnumerableMap.UintToUintMap storage pointer)":"infinite","remove(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","remove(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","remove(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","remove(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","remove(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite","set(struct EnumerableMap.AddressToUintMap storage pointer,address,uint256)":"infinite","set(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32,bytes32)":"infinite","set(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32,uint256)":"infinite","set(struct EnumerableMap.UintToAddressMap storage pointer,uint256,address)":"infinite","set(struct EnumerableMap.UintToUintMap storage pointer,uint256,uint256)":"infinite","tryGet(struct EnumerableMap.AddressToUintMap storage pointer,address)":"infinite","tryGet(struct EnumerableMap.Bytes32ToBytes32Map storage pointer,bytes32)":"infinite","tryGet(struct EnumerableMap.Bytes32ToUintMap storage pointer,bytes32)":"infinite","tryGet(struct EnumerableMap.UintToAddressMap storage pointer,uint256)":"infinite","tryGet(struct EnumerableMap.UintToUintMap storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Library for managing an enumerable variant of Solidity's https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`] type. Maps have the following properties: - Entries are added, removed, and checked for existence in constant time (O(1)). - Entries are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableMap for EnumerableMap.UintToAddressMap;     // Declare a set state variable     EnumerableMap.UintToAddressMap private myMap; } ``` The following map types are supported: - `uint256 -> address` (`UintToAddressMap`) since v3.0.0 - `address -> uint256` (`AddressToUintMap`) since v4.6.0 - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0 - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0 - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0 [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap. ====\",\"errors\":{\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":\"EnumerableMap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"1330:11640:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1330:11640:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"1330:11640:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/types/Time.sol":{"Time":{"abi":[],"devdoc":{"details":"This library provides helpers for manipulating time-related objects. It uses the following types: - `uint48` for timepoints - `uint32` for durations While the library doesn't provide specific types for timepoints and duration, it does provide: - a `Delay` type to represent duration that can be programmed to change value automatically at a given point - additional helper functions","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"640:4454:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;640:4454:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"640:4454:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_getFullAt(Time.Delay,uint48)":"infinite","blockNumber()":"infinite","get(Time.Delay)":"infinite","getFull(Time.Delay)":"infinite","pack(uint32,uint32,uint48)":"infinite","timestamp()":"infinite","toDelay(uint32)":"infinite","unpack(Time.Delay)":"infinite","withUpdate(Time.Delay,uint32,uint32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides helpers for manipulating time-related objects. It uses the following types: - `uint48` for timepoints - `uint32` for durations While the library doesn't provide specific types for timepoints and duration, it does provide: - a `Delay` type to represent duration that can be programmed to change value automatically at a given point - additional helper functions\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/types/Time.sol\":\"Time\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/management/PresaleManager.sol":{"PresaleManager":{"abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"bonus","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerAlreadyScheduled","type":"error"},{"inputs":[],"name":"AccessManagerBadConfirmation","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerExpired","type":"error"},{"inputs":[{"internalType":"address","name":"initialAdmin","type":"address"}],"name":"AccessManagerInvalidInitialAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AccessManagerLockedAccount","type":"error"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerLockedRole","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotReady","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotScheduled","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCall","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCancel","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AccessManagerUnauthorizedConsume","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"CannotRedeem","type":"error"},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"CannotTransfer","type":"error"},{"inputs":[],"name":"EmptyCurrency","type":"error"},{"inputs":[],"name":"EmptyNewToken","type":"error"},{"inputs":[],"name":"EmptyRate","type":"error"},{"inputs":[],"name":"EmptyToken","type":"error"},{"inputs":[],"name":"EmptyValue","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"EnumerableMapNonexistentKey","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"IncorrectPosition","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"NotOwned","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"rate","type":"uint256"}],"name":"TooBigRate","type":"error"},{"inputs":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"UnsufficientBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"UnsufficientManagerBalance","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"currency","type":"address"},{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BoughtTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"schedule","type":"uint48"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"OperationScheduled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"admin","type":"uint64"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"RoleGrantDelayChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"},{"indexed":false,"internalType":"bool","name":"newMember","type":"bool"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"RoleGuardianChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"string","name":"label","type":"string"}],"name":"RoleLabel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"TargetAdminDelayUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"closed","type":"bool"}],"name":"TargetClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"TargetFunctionRoleUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_ROLE","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SALT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"ratePos","type":"uint256"}],"name":"at","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"buy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"canCall","outputs":[{"internalType":"bool","name":"immediate","type":"bool"},{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"cancel","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"consumeScheduledOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"defineToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_to","type":"address"},{"internalType":"address","name":"newAuthority","type":"address"}],"name":"destroy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"execute","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"expiration","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"freeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"getAccess","outputs":[{"internalType":"uint48","name":"since","type":"uint48"},{"internalType":"uint32","name":"currentDelay","type":"uint32"},{"internalType":"uint32","name":"pendingDelay","type":"uint32"},{"internalType":"uint48","name":"effect","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getNonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"getRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"getResultAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleAdmin","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGrantDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGuardian","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getSchedule","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"getTargetAdminDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getTargetFunctionRole","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"hasRate","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"isMember","type":"bool"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"hashOperation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"isTargetClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"string","name":"label","type":"string"}],"name":"labelRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"length","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minSetback","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"},{"internalType":"address","name":"_to","type":"address"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint48","name":"when","type":"uint48"}],"name":"schedule","outputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"},{"internalType":"uint32","name":"nonce","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"bonus","type":"uint256"}],"name":"setBonus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setGrantDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint256","name":"rate","type":"uint256"}],"name":"setRate","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"admin","type":"uint64"}],"name":"setRoleAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"setRoleGuardian","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setTargetAdminDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"closed","type":"bool"}],"name":"setTargetClosed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"setTargetFunctionRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newAuthority","type":"address"}],"name":"transferAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"unfreeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"address","name":"newAuthority","type":"address"}],"name":"updateAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Ilya A. Shlyakhovoy","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"EnumerableMapNonexistentKey(bytes32)":[{"details":"Query for a nonexistent map key."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}]},"events":{"OperationCanceled(bytes32,uint32)":{"details":"A scheduled operation was canceled."},"OperationExecuted(bytes32,uint32)":{"details":"A scheduled operation was executed."},"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)":{"details":"A delayed operation was scheduled."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(uint64,uint64)":{"details":"Role acting as admin over a given `roleId` is updated."},"RoleGrantDelayChanged(uint64,uint32,uint48)":{"details":"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"RoleGranted(uint64,address,uint32,uint48,bool)":{"details":"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated."},"RoleGuardianChanged(uint64,uint64)":{"details":"Role acting as guardian over a given `roleId` is updated."},"RoleLabel(uint64,string)":{"details":"Informational labelling for a roleId."},"RoleRevoked(uint64,address)":{"details":"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"TargetAdminDelayUpdated(address,uint32,uint48)":{"details":"Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"TargetClosed(address,bool)":{"details":"Target mode is updated (true = closed, false = open)."},"TargetFunctionRoleUpdated(address,bytes4,uint64)":{"details":"Role required to invoke `selector` on `target` is updated to `roleId`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"canCall(address,address,bytes4)":{"details":"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead."},"cancel(address,address,bytes)":{"details":"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event."},"consumeScheduledOp(address,bytes)":{"details":"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event."},"execute(address,bytes)":{"details":"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"expiration()":{"details":"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage."},"getAccess(uint64,address)":{"details":"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"getNonce(bytes32)":{"details":"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled."},"getRoleAdmin(uint64)":{"details":"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role."},"getRoleGrantDelay(uint64)":{"details":"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"getRoleGuardian(uint64)":{"details":"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role."},"getSchedule(bytes32)":{"details":"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled."},"getTargetAdminDelay(address)":{"details":"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"getTargetFunctionRole(address,bytes4)":{"details":"Get the role required to call a function."},"grantRole(uint64,address,uint32)":{"details":"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event."},"hasRole(uint64,address)":{"details":"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details."},"hashOperation(address,address,bytes)":{"details":"Hashing function for delayed operations."},"isTargetClosed(address)":{"details":"Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"labelRole(uint64,string)":{"details":"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event."},"minSetback()":{"details":"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days."},"multicall(bytes[])":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Receives and executes a batch of function calls on this contract."},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"renounceRole(uint64,address)":{"details":"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role."},"revokeRole(uint64,address)":{"details":"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role."},"schedule(address,bytes,uint48)":{"details":"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding."},"setGrantDelay(uint64,uint32)":{"details":"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event."},"setRate(address,uint256)":{"params":{"currency":"the address of the currency token","rate":"the exchange rate to token"}},"setRoleAdmin(uint64,uint64)":{"details":"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event"},"setRoleGuardian(uint64,uint64)":{"details":"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event"},"setTargetAdminDelay(address,uint32)":{"details":"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event."},"setTargetClosed(address,bool)":{"details":"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event."},"setTargetFunctionRole(address,bytes4[],uint64)":{"details":"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateAuthority(address,address)":{"details":"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin"}},"title":"PresaleManager","version":1},"evm":{"bytecode":{"functionDebugData":{"@_273":{"entryPoint":null,"id":273,"parameterSlots":1,"returnSlots":0},"@_3019":{"entryPoint":null,"id":3019,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_8026":{"entryPoint":null,"id":8026,"parameterSlots":3,"returnSlots":0},"@_getFullAt_7730":{"entryPoint":1297,"id":7730,"parameterSlots":2,"returnSlots":3},"@_grantRole_777":{"entryPoint":334,"id":777,"parameterSlots":4,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":254,"id":146,"parameterSlots":1,"returnSlots":0},"@getFull_7750":{"entryPoint":1259,"id":7750,"parameterSlots":1,"returnSlots":3},"@get_7768":{"entryPoint":1198,"id":7768,"parameterSlots":1,"returnSlots":1},"@max_3289":{"entryPoint":1231,"id":3289,"parameterSlots":2,"returnSlots":1},"@pack_7913":{"entryPoint":null,"id":7913,"parameterSlots":3,"returnSlots":1},"@timestamp_7661":{"entryPoint":933,"id":7661,"parameterSlots":0,"returnSlots":1},"@toDelay_7691":{"entryPoint":951,"id":7691,"parameterSlots":1,"returnSlots":1},"@toUint48_4911":{"entryPoint":1141,"id":4911,"parameterSlots":1,"returnSlots":1},"@unpack_7875":{"entryPoint":null,"id":7875,"parameterSlots":1,"returnSlots":3},"@withUpdate_7824":{"entryPoint":960,"id":7824,"parameterSlots":3,"returnSlots":2},"abi_decode_address_fromMemory":{"entryPoint":1380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256_fromMemory":{"entryPoint":1409,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1496,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint48":{"entryPoint":1518,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint32":{"entryPoint":1559,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1474,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2227:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:17","statements":[{"nodeType":"YulAssignment","src":"84:22:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:17"},"nodeType":"YulFunctionCall","src":"93:13:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:17"}]},{"body":{"nodeType":"YulBlock","src":"169:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:17"},"nodeType":"YulFunctionCall","src":"171:12:17"},"nodeType":"YulExpressionStatement","src":"171:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:17"},"nodeType":"YulFunctionCall","src":"150:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:17"},"nodeType":"YulFunctionCall","src":"146:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:17"},"nodeType":"YulFunctionCall","src":"135:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:17"},"nodeType":"YulFunctionCall","src":"125:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:17"},"nodeType":"YulFunctionCall","src":"118:50:17"},"nodeType":"YulIf","src":"115:70:17"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:17","type":""}],"src":"14:177:17"},{"body":{"nodeType":"YulBlock","src":"311:239:17","statements":[{"body":{"nodeType":"YulBlock","src":"357:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"366:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"369:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"359:6:17"},"nodeType":"YulFunctionCall","src":"359:12:17"},"nodeType":"YulExpressionStatement","src":"359:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"332:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"341:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"328:3:17"},"nodeType":"YulFunctionCall","src":"328:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"353:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"324:3:17"},"nodeType":"YulFunctionCall","src":"324:32:17"},"nodeType":"YulIf","src":"321:52:17"},{"nodeType":"YulAssignment","src":"382:50:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"392:29:17"},"nodeType":"YulFunctionCall","src":"392:40:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"382:6:17"}]},{"nodeType":"YulAssignment","src":"441:59:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"485:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"496:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"481:3:17"},"nodeType":"YulFunctionCall","src":"481:18:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"451:29:17"},"nodeType":"YulFunctionCall","src":"451:49:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"441:6:17"}]},{"nodeType":"YulAssignment","src":"509:35:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"529:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"540:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:17"},"nodeType":"YulFunctionCall","src":"525:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"519:5:17"},"nodeType":"YulFunctionCall","src":"519:25:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"509:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"261:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"272:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"284:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"292:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"300:6:17","type":""}],"src":"196:354:17"},{"body":{"nodeType":"YulBlock","src":"656:102:17","statements":[{"nodeType":"YulAssignment","src":"666:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"678:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"689:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"674:3:17"},"nodeType":"YulFunctionCall","src":"674:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"666:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"708:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"723:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"739:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"744:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"735:3:17"},"nodeType":"YulFunctionCall","src":"735:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"748:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"731:3:17"},"nodeType":"YulFunctionCall","src":"731:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"719:3:17"},"nodeType":"YulFunctionCall","src":"719:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"701:6:17"},"nodeType":"YulFunctionCall","src":"701:51:17"},"nodeType":"YulExpressionStatement","src":"701:51:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"625:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"636:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"647:4:17","type":""}],"src":"555:203:17"},{"body":{"nodeType":"YulBlock","src":"795:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"812:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"819:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"824:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"815:3:17"},"nodeType":"YulFunctionCall","src":"815:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"805:6:17"},"nodeType":"YulFunctionCall","src":"805:31:17"},"nodeType":"YulExpressionStatement","src":"805:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"852:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"855:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"845:6:17"},"nodeType":"YulFunctionCall","src":"845:15:17"},"nodeType":"YulExpressionStatement","src":"845:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"876:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"879:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"869:6:17"},"nodeType":"YulFunctionCall","src":"869:15:17"},"nodeType":"YulExpressionStatement","src":"869:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"763:127:17"},{"body":{"nodeType":"YulBlock","src":"943:77:17","statements":[{"nodeType":"YulAssignment","src":"953:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"964:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"967:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"960:3:17"},"nodeType":"YulFunctionCall","src":"960:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"953:3:17"}]},{"body":{"nodeType":"YulBlock","src":"992:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"994:16:17"},"nodeType":"YulFunctionCall","src":"994:18:17"},"nodeType":"YulExpressionStatement","src":"994:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"984:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"987:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"981:2:17"},"nodeType":"YulFunctionCall","src":"981:10:17"},"nodeType":"YulIf","src":"978:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"926:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"929:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"935:3:17","type":""}],"src":"895:125:17"},{"body":{"nodeType":"YulBlock","src":"1124:101:17","statements":[{"nodeType":"YulAssignment","src":"1134:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1146:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1157:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1142:3:17"},"nodeType":"YulFunctionCall","src":"1142:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1134:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1176:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1191:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1207:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1211:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1203:3:17"},"nodeType":"YulFunctionCall","src":"1203:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"1215:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1199:3:17"},"nodeType":"YulFunctionCall","src":"1199:18:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1187:3:17"},"nodeType":"YulFunctionCall","src":"1187:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1169:6:17"},"nodeType":"YulFunctionCall","src":"1169:50:17"},"nodeType":"YulExpressionStatement","src":"1169:50:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1093:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1104:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1115:4:17","type":""}],"src":"1025:200:17"},{"body":{"nodeType":"YulBlock","src":"1277:129:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1287:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1297:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1291:2:17","type":""}]},{"nodeType":"YulAssignment","src":"1320:34:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1335:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1338:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1331:3:17"},"nodeType":"YulFunctionCall","src":"1331:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"1347:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1350:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1343:3:17"},"nodeType":"YulFunctionCall","src":"1343:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1327:3:17"},"nodeType":"YulFunctionCall","src":"1327:27:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"1320:3:17"}]},{"body":{"nodeType":"YulBlock","src":"1378:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1380:16:17"},"nodeType":"YulFunctionCall","src":"1380:18:17"},"nodeType":"YulExpressionStatement","src":"1380:18:17"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"1369:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1374:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1366:2:17"},"nodeType":"YulFunctionCall","src":"1366:11:17"},"nodeType":"YulIf","src":"1363:37:17"}]},"name":"checked_add_t_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1260:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"1263:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"1269:3:17","type":""}],"src":"1230:176:17"},{"body":{"nodeType":"YulBlock","src":"1558:216:17","statements":[{"nodeType":"YulAssignment","src":"1568:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1580:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1591:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1576:3:17"},"nodeType":"YulFunctionCall","src":"1576:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1568:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1610:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1625:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1633:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1621:3:17"},"nodeType":"YulFunctionCall","src":"1621:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1603:6:17"},"nodeType":"YulFunctionCall","src":"1603:42:17"},"nodeType":"YulExpressionStatement","src":"1603:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1665:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1676:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1661:3:17"},"nodeType":"YulFunctionCall","src":"1661:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1685:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1693:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1681:3:17"},"nodeType":"YulFunctionCall","src":"1681:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1654:6:17"},"nodeType":"YulFunctionCall","src":"1654:55:17"},"nodeType":"YulExpressionStatement","src":"1654:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1729:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1740:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1725:3:17"},"nodeType":"YulFunctionCall","src":"1725:18:17"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1759:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1752:6:17"},"nodeType":"YulFunctionCall","src":"1752:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1745:6:17"},"nodeType":"YulFunctionCall","src":"1745:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1718:6:17"},"nodeType":"YulFunctionCall","src":"1718:50:17"},"nodeType":"YulExpressionStatement","src":"1718:50:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1511:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1522:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1530:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1538:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1549:4:17","type":""}],"src":"1411:363:17"},{"body":{"nodeType":"YulBlock","src":"1827:127:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1837:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1847:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1841:2:17","type":""}]},{"nodeType":"YulAssignment","src":"1866:35:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1882:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1885:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1878:3:17"},"nodeType":"YulFunctionCall","src":"1878:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"1894:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1897:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1890:3:17"},"nodeType":"YulFunctionCall","src":"1890:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1874:3:17"},"nodeType":"YulFunctionCall","src":"1874:27:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1866:4:17"}]},{"body":{"nodeType":"YulBlock","src":"1926:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1928:16:17"},"nodeType":"YulFunctionCall","src":"1928:18:17"},"nodeType":"YulExpressionStatement","src":"1928:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"1916:4:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1922:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1913:2:17"},"nodeType":"YulFunctionCall","src":"1913:12:17"},"nodeType":"YulIf","src":"1910:38:17"}]},"name":"checked_sub_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1809:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"1812:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1818:4:17","type":""}],"src":"1779:175:17"},{"body":{"nodeType":"YulBlock","src":"2095:130:17","statements":[{"nodeType":"YulAssignment","src":"2105:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2117:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2128:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2113:3:17"},"nodeType":"YulFunctionCall","src":"2113:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2105:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2162:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2170:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2158:3:17"},"nodeType":"YulFunctionCall","src":"2158:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2140:6:17"},"nodeType":"YulFunctionCall","src":"2140:36:17"},"nodeType":"YulExpressionStatement","src":"2140:36:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2196:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2207:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2192:3:17"},"nodeType":"YulFunctionCall","src":"2192:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"2212:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2185:6:17"},"nodeType":"YulFunctionCall","src":"2185:34:17"},"nodeType":"YulExpressionStatement","src":"2185:34:17"}]},"name":"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2056:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2067:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2075:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2086:4:17","type":""}],"src":"1959:266:17"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n    function checked_add_t_uint48(x, y) -> sum\n    {\n        let _1 := 0xffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function checked_sub_t_uint32(x, y) -> diff\n    {\n        let _1 := 0xffffffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040516200483a3803806200483a833981016040819052620000349162000581565b82806001600160a01b0381166200006657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200007181620000fe565b506001600160a01b0381166200009e57604051630409d6d160e11b8152600060048201526024016200005d565b620000ad60008281806200014e565b50506005805460ff19169055620000c6816064620005d8565b60065550600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055506217925f60805262000637565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006002600160401b03196001600160401b038616016200018e5760405163061c6a4360e21b81526001600160401b03861660048201526024016200005d565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156200028d5763ffffffff8516620001dd620003a5565b620001e99190620005ee565b905060405180604001604052808265ffffffffffff1681526020016200021b8663ffffffff16620003b760201b60201c565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c16845282529091208351815494909201519092166601000000000000026001600160a01b031990931665ffffffffffff9091161791909117905562000337565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054620002dc9166010000000000009091046001600160701b0316908690620003c0565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b03909316660100000000000002600160301b600160a01b03199093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000620003b24262000475565b905090565b63ffffffff1690565b60008080620003d86001600160701b038716620004ae565b905060006200041b8563ffffffff168763ffffffff168463ffffffff1611620004035760006200040f565b6200040f888562000617565b63ffffffff16620004cf565b905063ffffffff81166200042e620003a5565b6200043a9190620005ee565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b600065ffffffffffff821115620004aa576040516306dfcc6560e41b815260306004820152602481018390526044016200005d565b5090565b600080620004c56001600160701b038416620004eb565b5090949350505050565b6000818311620004e05781620004e2565b825b90505b92915050565b600080806200050484620004fe620003a5565b62000511565b9250925092509193909250565b600080806001600160501b03602086901c166001600160701b03861665ffffffffffff604088901c81169087168111156200054f5782828262000554565b816000805b9550955095505050509250925092565b80516001600160a01b03811681146200057c57600080fd5b919050565b6000806000606084860312156200059757600080fd5b620005a28462000564565b9250620005b26020850162000564565b9150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115620004e557620004e5620005c2565b65ffffffffffff818116838216019080821115620006105762000610620005c2565b5092915050565b63ffffffff828116828216039080821115620006105762000610620005c2565b6080516141e7620006536000396000610a2501526141e76000f3fe60806040526004361061036b5760003560e01c8063715018a6116101c6578063b7d2b162116100f7578063d6bb62c611610095578063e0886f901161006f578063e0886f9014610b3d578063f2fde38b14610b7c578063f801a69814610b9c578063fe0776f514610bd657600080fd5b8063d6bb62c614610add578063da2b122414610afd578063e0781b7a14610b1d57600080fd5b8063cc1b6c81116100d1578063cc1b6c8114610a67578063cce7ec1314610a7d578063d1f856ee14610a9d578063d22b598914610abd57600080fd5b8063b7d2b162146109f3578063ba9a91a514610a13578063bba06f2714610a4757600080fd5b806394c7d7ee11610164578063a7cd24481161013e578063a7cd24481461094a578063abd9bd2a1461096a578063ac9650d81461098a578063b7009613146109b757600080fd5b806394c7d7ee146108bb578063a166aa89146108db578063a64d95ce1461092a57600080fd5b8063853551b8116101a0578063853551b8146108485780638bdff161146108685780638d1fdf2f1461087d5780638da5cb5b1461089d57600080fd5b8063715018a61461080957806375b238fc1461081e5780638456cb591461083357600080fd5b806337cef791116102a05780634c1da1e21161023e5780635c975abb116102185780635c975abb1461075957806362b40f9f146107715780636d5115bd1461079157806370a08231146107e957600080fd5b80634c1da1e2146106dd57806352962952146106fd578063530dd4561461071d57600080fd5b80633f4ba83a1161027a5780633f4ba83a146106555780634136a33c1461066a57806345c8b1a6146106a75780634665096d146106c757600080fd5b806337cef791146105e35780633adc277a146106035780633ca7c02a1461063a57600080fd5b80631f7b6d321161030d5780632bdb7097116102e75780632bdb7097146105195780633078db6c146105495780633078f1141461056957806330cae187146105c357600080fd5b80631f7b6d321461049f57806321df0da7146104c257806325c471a0146104f957600080fd5b806312be87271161034957806312be872714610417578063167bd3951461044c57806318ff183c1461046c5780631cff79cd1461048c57600080fd5b806308d6122d146103705780630b0a93ba146103925780630b98f975146103f7575b600080fd5b34801561037c57600080fd5b5061039061038b366004613862565b610bf6565b005b34801561039e57600080fd5b506103da6103ad3660046138c8565b6001600160401b039081166000908152600260205260409020600101546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561040357600080fd5b506103906104123660046138e3565b610c51565b34801561042357600080fd5b506104376104323660046138c8565b610c72565b60405163ffffffff90911681526020016103ee565b34801561045857600080fd5b5061039061046736600461390a565b610cad565b34801561047857600080fd5b50610390610487366004613943565b610cc3565b61043761049a3660046139b2565b610d2a565b3480156104ab57600080fd5b506104b4610e97565b6040519081526020016103ee565b3480156104ce57600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b0390911681526020016103ee565b34801561050557600080fd5b50610390610514366004613a1a565b610ea8565b34801561052557600080fd5b50610539610534366004613a5f565b610eca565b60405190151581526020016103ee565b34801561055557600080fd5b50610390610564366004613a8b565b61100e565b34801561057557600080fd5b50610589610584366004613aa8565b6110ae565b6040516103ee949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b3480156105cf57600080fd5b506103906105de366004613ac4565b611116565b3480156105ef57600080fd5b506104b46105fe366004613a8b565b611128565b34801561060f57600080fd5b5061062361061e3660046138e3565b611173565b60405165ffffffffffff90911681526020016103ee565b34801561064657600080fd5b506103da6001600160401b0381565b34801561066157600080fd5b506103906111a6565b34801561067657600080fd5b506104376106853660046138e3565b6000908152600360205260409020546601000000000000900463ffffffff1690565b3480156106b357600080fd5b506103906106c2366004613a8b565b6111b8565b3480156106d357600080fd5b5062093a80610437565b3480156106e957600080fd5b506104376106f8366004613a8b565b611226565b34801561070957600080fd5b50610390610718366004613ac4565b611254565b34801561072957600080fd5b506103da6107383660046138c8565b6001600160401b039081166000908152600260205260409020600101541690565b34801561076557600080fd5b5060055460ff16610539565b34801561077d57600080fd5b5061039061078c366004613943565b611266565b34801561079d57600080fd5b506103da6107ac366004613b0d565b6001600160a01b03821660009081526001602090815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b3480156107f557600080fd5b506104b4610804366004613a8b565b61157a565b34801561081557600080fd5b50610390611659565b34801561082a57600080fd5b506103da600081565b34801561083f57600080fd5b5061039061166b565b34801561085457600080fd5b50610390610863366004613b3b565b61167b565b34801561087457600080fd5b506104b4611712565b34801561088957600080fd5b50610390610898366004613a8b565b611723565b3480156108a957600080fd5b506000546001600160a01b03166104e1565b3480156108c757600080fd5b506103906108d63660046139b2565b611791565b3480156108e757600080fd5b506105396108f6366004613a8b565b6001600160a01b0316600090815260016020819052604090912001546e010000000000000000000000000000900460ff1690565b34801561093657600080fd5b50610390610945366004613b59565b61183d565b34801561095657600080fd5b506104b4610965366004613a5f565b61184f565b34801561097657600080fd5b506104b4610985366004613b83565b6119e0565b34801561099657600080fd5b506109aa6109a5366004613be7565b611a19565b6040516103ee9190613c4c565b3480156109c357600080fd5b506109d76109d2366004613cc6565b611b0b565b60408051921515835263ffffffff9091166020830152016103ee565b3480156109ff57600080fd5b50610390610a0e366004613aa8565b611b62565b348015610a1f57600080fd5b506104b47f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5357600080fd5b50610390610a62366004613943565b611b79565b348015610a7357600080fd5b5062069780610437565b348015610a8957600080fd5b50610539610a98366004613a5f565b611c92565b348015610aa957600080fd5b506109d7610ab8366004613aa8565b611fbb565b348015610ac957600080fd5b50610390610ad8366004613d11565b612038565b348015610ae957600080fd5b50610437610af8366004613b83565b61204a565b348015610b0957600080fd5b50610390610b18366004613a8b565b6121db565b348015610b2957600080fd5b50610539610b38366004613a8b565b612251565b348015610b4957600080fd5b50610b5d610b583660046138e3565b612292565b604080516001600160a01b0390931683526020830191909152016103ee565b348015610b8857600080fd5b50610390610b97366004613a8b565b6122d2565b348015610ba857600080fd5b50610bbc610bb7366004613d2f565b612310565b6040805192835263ffffffff9091166020830152016103ee565b348015610be257600080fd5b50610390610bf1366004613aa8565b612458565b610bfe612481565b60005b82811015610c4a57610c3a85858584818110610c1f57610c1f613da1565b9050602002016020810190610c349190613db7565b846124fc565b610c4381613dea565b9050610c01565b5050505050565b610c59612580565b610c616125ad565b610c6c816064613e03565b60065550565b6001600160401b038116600090815260026020526040812060010154610ca790600160801b90046001600160701b03166125d0565b92915050565b610cb5612481565b610cbf82826125ef565b5050565b610ccb612481565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505050565b6000338180610d3b838888886126ab565b9150915081158015610d51575063ffffffff8116155b15610da4578287610d6288886126fe565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b6000610db2848989896119e0565b9050600063ffffffff8316151580610dd95750610dce82611173565b65ffffffffffff1615155b15610dea57610de782612716565b90505b600454610e3d8a610dfb8b8b6126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b600481905550610e858a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250612819915050565b506004559450505050505b9392505050565b6000610ea360076128ac565b905090565b610eb0612481565b610ec48383610ebe86610c72565b846128b7565b50505050565b6000610ed4612580565b610edc6125ad565b6001600160a01b038316610f0357604051630560d24960e11b815260040160405180910390fd5b81600003610f245760405163783bc40960e01b815260040160405180910390fd5b60055461010090046001600160a01b0316610f525760405163066f53b160e01b815260040160405180910390fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613e16565b610fd4906002613e39565b610fdf90600a613f36565b82111561100257604051630164b7c960e61b815260048101839052602401610d9b565b610e9060078484612b23565b611016612580565b61101e6125ad565b60055461010090046001600160a01b031661104c5760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b906024015b600060405180830381600087803b15801561109a57600080fd5b505af1158015610c4a573d6000803e3d6000fd5b6001600160401b03821660009081526002602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061110890660100000000000090046001600160701b0316612b41565b969991985096509350505050565b61111e612481565b610cbf8282612b64565b60006001600160a01b03821661115157604051630560d24960e11b815260040160405180910390fd5b61115c600783612c06565b61116857506000919050565b610ca7600783612c1b565b60008181526003602052604081205465ffffffffffff1661119381612c30565b61119d5780610e90565b60009392505050565b6111ae612580565b6111b6612c5f565b565b6111c0612580565b60055461010090046001600160a01b03166111ee5760405163066f53b160e01b815260040160405180910390fd5b6005546040516322e458d360e11b81526001600160a01b038381166004830152610100909204909116906345c8b1a690602401611080565b6001600160a01b038116600090815260016020819052604082200154610ca7906001600160701b03166125d0565b61125c612481565b610cbf8282612cb1565b61126e612580565b6112766125ad565b60055461010090046001600160a01b03166112a45760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b90602401600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b50506005546040516370a0823160e01b81523060048201526101009091046001600160a01b0316925063a9059cbb9150839083906370a0823190602401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190613f5e565b6114225760055460405163bbea11c960e01b81526101009091046001600160a01b03166004820152602401610d9b565b6000805b61143060076128ac565b82101561156e576000611444600784612d66565b506040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613f45565b9150600082118015611532575060405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613f5e565b155b1561155b5760405163bbea11c960e01b81526001600160a01b0382166004820152602401610d9b565b508161156681613dea565b925050611426565b836001600160a01b0316ff5b60405163703c0dbd60e11b81526001600160a01b0382166004820152600090309063e0781b7a90602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613f5e565b6115f157506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190613f45565b611661612580565b6111b66000612d82565b611673612580565b6111b6612ddf565b611683612481565b6001600160401b03831615806116a157506001600160401b03838116145b156116ca5760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051611705929190613fa4565b60405180910390a2505050565b60006064600654610ea39190613fb8565b61172b612580565b60055461010090046001600160a01b03166117595760405163066f53b160e01b815260040160405180910390fd5b600554604051638d1fdf2f60e01b81526001600160a01b03838116600483015261010090920490911690638d1fdf2f90602401611080565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613fcb565b6001600160e01b0319161461182957604051630641fee960e31b81526001600160a01b0382166004820152602401610d9b565b610c4a611838858386866119e0565b612716565b611845612481565b610cbf8282612e1c565b60006001600160a01b03831661187857604051630560d24960e11b815260040160405180910390fd5b8160000361189957604051631208b21b60e01b815260040160405180910390fd5b60055461010090046001600160a01b03166118c75760405163066f53b160e01b815260040160405180910390fd5b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613e16565b611936906002613e39565b6040516337cef79160e01b81526001600160a01b038616600482015260ff91909116915060009030906337cef79190602401602060405180830381865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190613f45565b90506119b682600a613fe8565b6006546119c38684613ff4565b6119cd9190613ff4565b6119d7919061400b565b95945050505050565b6000848484846040516020016119f9949392919061402d565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115611a4357611a43614084565b604051908082528060200260200182016040528015611a7657816020015b6060815260200190600190039081611a615790505b50915060005b83811015611b0357611ad330868684818110611a9a57611a9a613da1565b9050602002810190611aac919061409a565b85604051602001611abf939291906140e0565b604051602081830303815290604052612f3b565b838281518110611ae557611ae5613da1565b60200260200101819052508080611afb90613dea565b915050611a7c565b505092915050565b600080611b206000546001600160a01b031690565b6001600160a01b0316856001600160a01b031603611b445750600190506000611b5a565b6000611b51600087611fbb565b50925060009150505b935093915050565b611b6a612481565b611b748282612fa8565b505050565b611b81612580565b611b896125ad565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613f5e565b610cbf57604051635d3f476b60e01b81526001600160a01b0383166004820152602401610d9b565b6000611c9c6130a2565b6040516314f9a48960e31b81526001600160a01b038416600482015260248101839052600090309063a7cd244890604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190613f45565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190613f45565b6005546040516370a0823160e01b81523060048201529192506000916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613f45565b905084821015611e34576040516321d6041b60e01b81523360048201526001600160a01b03871660248201526044810183905260648101869052608401610d9b565b82811015611e585760405163705adf1f60e11b815260048101849052602401610d9b565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af1158015611eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecf9190613f5e565b611edf5760009350505050610ca7565b60055460405163a9059cbb60e01b81523360048201526024810185905260009161010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190613f5e565b90508015611fb15785876001600160a01b0316336001600160a01b03167f314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda87604051611fa891815260200190565b60405180910390a45b9695505050505050565b60008067fffffffffffffffe196001600160401b03851601611fe35750600190506000612031565b600080611ff086866110ae565b5050915091508165ffffffffffff1660001415801561202657506120126130c6565b65ffffffffffff168265ffffffffffff1611155b935091506120319050565b9250929050565b612040612481565b610cbf82826130d1565b6000338161205885856126fe565b90506000612068888888886119e0565b60008181526003602052604081205491925065ffffffffffff90911690036120a65760405163060a299b60e41b815260048101829052602401610d9b565b826001600160a01b0316886001600160a01b0316146121765760006120cc600085611fbb565b506001600160a01b03891660009081526001602090815260408083206001600160e01b0319881684529091528120549192509061211b90612115906001600160401b03166103ad565b86611fbb565b5090508115801561212a575080155b1561217357604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610d9b565b50505b600081815260036020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b6121e3612580565b6121eb6125ad565b6001600160a01b0381166122125760405163066f53b160e01b815260040160405180910390fd5b600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600061225b6130a2565b6001600160a01b03821661228257604051630560d24960e11b815260040160405180910390fd5b610ca7600783612c06565b919050565b60008061229f60076128ac565b83106122be5760405163188da0b360e21b815260040160405180910390fd5b6122c9600784612d66565b91509150915091565b6122da612580565b6001600160a01b03811661230457604051631e4fbdf760e01b815260006004820152602401610d9b565b61230d81612d82565b50565b6000803381612321828989896126ab565b91505060008163ffffffff166123356130c6565b61233f9190614107565b905063ffffffff82161580612376575060008665ffffffffffff1611801561237657508065ffffffffffff168665ffffffffffff16105b15612387578289610d628a8a6126fe565b6123a18665ffffffffffff168265ffffffffffff16613190565b95506123af838a8a8a6119e0565b94506123ba856131a6565b60008581526003602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490612444908a9088908f908f908f9061412d565b60405180910390a350505094509492505050565b6001600160a01b0381163314611b6a57604051635f159e6360e01b815260040160405180910390fd5b336000806124908382366131f3565b9150915081611b74578063ffffffff166000036124ec5760006124b381366132f7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610d9b565b610ec461183884306000366119e0565b6001600160a01b03831660008181526001602090815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b6000546001600160a01b031633146111b65760405163118cdaa760e01b8152336004820152602401610d9b565b60055460ff166111b657604051638dfc202b60e01b815260040160405180910390fd5b6000806125e5836001600160701b0316612b41565b5090949350505050565b306001600160a01b0383160361262357604051630b40d17960e31b81526001600160a01b0383166004820152602401610d9b565b6001600160a01b0382166000818152600160208190526040918290200180548415156e010000000000000000000000000000026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061269f90841515815260200190565b60405180910390a25050565b600080306001600160a01b038616036126d2576126c98685856131f3565b915091506126f5565b600483106126ee576126e986866109d287876126fe565b6126c9565b5060009050805b94509492505050565b600061270d600482848661405a565b610e9091614173565b60008181526003602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036127625760405163060a299b60e41b815260048101859052602401610d9b565b61276a6130c6565b65ffffffffffff168265ffffffffffff16111561279d57604051630c65b5bd60e11b815260048101859052602401610d9b565b6127a682612c30565b156127c757604051631e2975b960e21b815260048101859052602401610d9b565b600084815260036020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561283e5760405163cd78605960e01b8152306004820152602401610d9b565b600080856001600160a01b0316848660405161285a91906141a1565b60006040518083038185875af1925050503d8060008114612897576040519150601f19603f3d011682016040523d82523d6000602084013e61289c565b606091505b5091509150611fb18683836134df565b6000610ca78261353b565b600067fffffffffffffffe196001600160401b038616016128f65760405163061c6a4360e21b81526001600160401b0386166004820152602401610d9b565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156129f8578463ffffffff166129426130c6565b61294c9190614107565b905060405180604001604052808265ffffffffffff16815260200161297a8663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff90911617919091179055612ab5565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054612a459166010000000000009091046001600160701b0316908690613546565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000612b39846001600160a01b038516846135f0565b949350505050565b6000806000612b5784612b526130c6565b61360d565b9250925092509193909250565b6001600160401b0382161580612b8257506001600160401b03828116145b15612bab5760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b03828116600081815260026020526040808220600101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000610e90836001600160a01b038416613661565b6000610e90836001600160a01b03841661366d565b6000612c3a6130c6565b65ffffffffffff16612c4f62093a8084614107565b65ffffffffffff16111592915050565b612c676125ad565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160401b0382161580612ccf57506001600160401b03828116145b15612cf85760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b0382811660008181526002602052604080822060010180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b6000808080612d7586866136b4565b9097909650945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612de76130a2565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c943390565b67fffffffffffffffe196001600160401b03831601612e595760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b038216600090815260026020526040812060010154612e9390600160801b90046001600160701b03168362069780613546565b6001600160401b0385166000818152600260205260409081902060010180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890611705908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051612f5891906141a1565b600060405180830381855af49150503d8060008114612f93576040519150601f19603f3d011682016040523d82523d6000602084013e612f98565b606091505b50915091506119d78583836134df565b600067fffffffffffffffe196001600160401b03841601612fe75760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b6001600160401b03831660009081526002602090815260408083206001600160a01b038616845290915281205465ffffffffffff16900361302a57506000610ca7565b6001600160401b03831660008181526002602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b60055460ff16156111b65760405163d93c066560e01b815260040160405180910390fd5b6000610ea3426136df565b6001600160a01b038216600090815260016020819052604082200154613104906001600160701b03168362069780613546565b6001600160a01b03851660008181526001602081815260409283902090910180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101611705565b600081831161319f5781610e90565b5090919050565b60008181526003602052604090205465ffffffffffff1680158015906131d257506131d081612c30565b155b15610cbf5760405163813e945960e01b815260048101839052602401610d9b565b600080600483101561320a57506000905080611b5a565b306001600160a01b038616036132795761326e3061322886866126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206004541490565b600091509150611b5a565b600080600061328887876132f7565b925092509250826132a25760008094509450505050611b5a565b6000806132af848b611fbb565b91509150816132c957600080965096505050505050611b5a565b6132df8363ffffffff168263ffffffff16613190565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015613312575060009150819050806134d8565b600061331e86866126fe565b90506001600160e01b031981166310a6aa3760e31b148061334f57506001600160e01b031981166330cae18760e01b145b8061336a57506001600160e01b0319811663294b14a960e11b145b8061338557506001600160e01b03198116635326cae760e11b145b806133a057506001600160e01b0319811663d22b598960e01b145b156133b6576001600080935093509350506134d8565b6001600160e01b0319811663063fc60f60e21b14806133e557506001600160e01b0319811663167bd39560e01b145b8061340057506001600160e01b031981166308d6122d60e01b145b1561344257600061341560246004888a61405a565b8101906134229190613a8b565b9050600061342f82611226565b600196506000955093506134d892505050565b6001600160e01b0319811663012e238d60e51b148061347157506001600160e01b03198116635be958b160e11b145b156134cb57600061348660246004888a61405a565b81019061349391906138c8565b905060016134bc826001600160401b039081166000908152600260205260409020600101541690565b600094509450945050506134d8565b6000806000935093509350505b9250925092565b6060826134f4576134ef82613716565b610e90565b815115801561350b57506001600160a01b0384163b155b1561353457604051639996b31560e01b81526001600160a01b0385166004820152602401610d9b565b5080610e90565b6000610ca78261373f565b600080600061355d866001600160701b03166125d0565b9050600061359a8563ffffffff168763ffffffff168463ffffffff161161358557600061358f565b61358f88856141bd565b63ffffffff16613190565b90508063ffffffff166135ab6130c6565b6135b59190614107565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b60008281526002840160205260408120829055612b398484613749565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c811690871681111561364c57828282613651565b816000805b9550955095505050509250925092565b6000610e908383613755565b60008181526002830160205260408120548015801561369357506136918484613661565b155b15610e905760405163015ab34360e11b815260048101849052602401610d9b565b600080806136c2858561376d565b600081815260029690960160205260409095205494959350505050565b600065ffffffffffff821115613712576040516306dfcc6560e41b81526030600482015260248101839052604401610d9b565b5090565b8051156137265780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000610ca7825490565b6000610e908383613779565b60008181526001830160205260408120541515610e90565b6000610e9083836137c8565b60008181526001830160205260408120546137c057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca7565b506000610ca7565b60008260000182815481106137df576137df613da1565b9060005260206000200154905092915050565b6001600160a01b038116811461230d57600080fd5b60008083601f84011261381957600080fd5b5081356001600160401b0381111561383057600080fd5b6020830191508360208260051b850101111561203157600080fd5b80356001600160401b038116811461228d57600080fd5b6000806000806060858703121561387857600080fd5b8435613883816137f2565b935060208501356001600160401b0381111561389e57600080fd5b6138aa87828801613807565b90945092506138bd90506040860161384b565b905092959194509250565b6000602082840312156138da57600080fd5b610e908261384b565b6000602082840312156138f557600080fd5b5035919050565b801515811461230d57600080fd5b6000806040838503121561391d57600080fd5b8235613928816137f2565b91506020830135613938816138fc565b809150509250929050565b6000806040838503121561395657600080fd5b8235613961816137f2565b91506020830135613938816137f2565b60008083601f84011261398357600080fd5b5081356001600160401b0381111561399a57600080fd5b60208301915083602082850101111561203157600080fd5b6000806000604084860312156139c757600080fd5b83356139d2816137f2565b925060208401356001600160401b038111156139ed57600080fd5b6139f986828701613971565b9497909650939450505050565b803563ffffffff8116811461228d57600080fd5b600080600060608486031215613a2f57600080fd5b613a388461384b565b92506020840135613a48816137f2565b9150613a5660408501613a06565b90509250925092565b60008060408385031215613a7257600080fd5b8235613a7d816137f2565b946020939093013593505050565b600060208284031215613a9d57600080fd5b8135610e90816137f2565b60008060408385031215613abb57600080fd5b6139618361384b565b60008060408385031215613ad757600080fd5b613ae08361384b565b9150613aee6020840161384b565b90509250929050565b6001600160e01b03198116811461230d57600080fd5b60008060408385031215613b2057600080fd5b8235613b2b816137f2565b9150602083013561393881613af7565b600080600060408486031215613b5057600080fd5b6139d28461384b565b60008060408385031215613b6c57600080fd5b613b758361384b565b9150613aee60208401613a06565b60008060008060608587031215613b9957600080fd5b8435613ba4816137f2565b93506020850135613bb4816137f2565b925060408501356001600160401b03811115613bcf57600080fd5b613bdb87828801613971565b95989497509550505050565b60008060208385031215613bfa57600080fd5b82356001600160401b03811115613c1057600080fd5b613c1c85828601613807565b90969095509350505050565b60005b83811015613c43578181015183820152602001613c2b565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613cb957878503603f1901845281518051808752613c9a818989018a8501613c28565b601f01601f191695909501860194509285019290850190600101613c73565b5092979650505050505050565b600080600060608486031215613cdb57600080fd5b8335613ce6816137f2565b92506020840135613cf6816137f2565b91506040840135613d0681613af7565b809150509250925092565b60008060408385031215613d2457600080fd5b8235613b75816137f2565b60008060008060608587031215613d4557600080fd5b8435613d50816137f2565b935060208501356001600160401b03811115613d6b57600080fd5b613d7787828801613971565b909450925050604085013565ffffffffffff81168114613d9657600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613dc957600080fd5b8135610e9081613af7565b634e487b7160e01b600052601160045260246000fd5b600060018201613dfc57613dfc613dd4565b5060010190565b80820180821115610ca757610ca7613dd4565b600060208284031215613e2857600080fd5b815160ff81168114610e9057600080fd5b60ff8181168382160190811115610ca757610ca7613dd4565b600181815b80851115613e8d578160001904821115613e7357613e73613dd4565b80851615613e8057918102915b93841c9390800290613e57565b509250929050565b600082613ea457506001610ca7565b81613eb157506000610ca7565b8160018114613ec75760028114613ed157613eed565b6001915050610ca7565b60ff841115613ee257613ee2613dd4565b50506001821b610ca7565b5060208310610133831016604e8410600b8410161715613f10575081810a610ca7565b613f1a8383613e52565b8060001904821115613f2e57613f2e613dd4565b029392505050565b6000610e9060ff841683613e95565b600060208284031215613f5757600080fd5b5051919050565b600060208284031215613f7057600080fd5b8151610e90816138fc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000612b39602083018486613f7b565b81810381811115610ca757610ca7613dd4565b600060208284031215613fdd57600080fd5b8151610e9081613af7565b6000610e908383613e95565b8082028115828204841417610ca757610ca7613dd4565b60008261402857634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03808716835280861660208401525060606040830152611fb1606083018486613f7b565b6000808585111561406a57600080fd5b8386111561407757600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126140b157600080fd5b8301803591506001600160401b038211156140cb57600080fd5b60200191503681900382131561203157600080fd5b8284823760008382016000815283516140fd818360208801613c28565b0195945050505050565b65ffffffffffff81811683821601908082111561412657614126613dd4565b5092915050565b65ffffffffffff8616815260006001600160a01b03808716602084015280861660408401525060806060830152614168608083018486613f7b565b979650505050505050565b6001600160e01b03198135818116916004851015611b035760049490940360031b84901b1690921692915050565b600082516141b3818460208701613c28565b9190910192915050565b63ffffffff82811682821603908082111561412657614126613dd456fea164736f6c6343000814000a","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x483A CODESIZE SUB DUP1 PUSH3 0x483A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x581 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x66 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x71 DUP2 PUSH3 0xFE JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x9E JUMPI PUSH1 0x40 MLOAD PUSH4 0x409D6D1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0x5D JUMP JUMPDEST PUSH3 0xAD PUSH1 0x0 DUP3 DUP2 DUP1 PUSH3 0x14E JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH3 0xC6 DUP2 PUSH1 0x64 PUSH3 0x5D8 JUMP JUMPDEST PUSH1 0x6 SSTORE POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x17925F PUSH1 0x80 MSTORE PUSH3 0x637 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH3 0x18E JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH3 0x5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH3 0x28D JUMPI PUSH4 0xFFFFFFFF DUP6 AND PUSH3 0x1DD PUSH3 0x3A5 JUMP JUMPDEST PUSH3 0x1E9 SWAP2 SWAP1 PUSH3 0x5EE JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x21B DUP7 PUSH4 0xFFFFFFFF AND PUSH3 0x3B7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x337 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH3 0x2DC SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH3 0x3C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3B2 TIMESTAMP PUSH3 0x475 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0x3D8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH3 0x4AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x41B DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH3 0x403 JUMPI PUSH1 0x0 PUSH3 0x40F JUMP JUMPDEST PUSH3 0x40F DUP9 DUP6 PUSH3 0x617 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH3 0x4CF JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 AND PUSH3 0x42E PUSH3 0x3A5 JUMP JUMPDEST PUSH3 0x43A SWAP2 SWAP1 PUSH3 0x5EE JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4AA JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH3 0x5D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x4C5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND PUSH3 0x4EB JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH3 0x4E0 JUMPI DUP2 PUSH3 0x4E2 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH3 0x504 DUP5 PUSH3 0x4FE PUSH3 0x3A5 JUMP JUMPDEST PUSH3 0x511 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH3 0x54F JUMPI DUP3 DUP3 DUP3 PUSH3 0x554 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5A2 DUP5 PUSH3 0x564 JUMP JUMPDEST SWAP3 POP PUSH3 0x5B2 PUSH1 0x20 DUP6 ADD PUSH3 0x564 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x4E5 JUMPI PUSH3 0x4E5 PUSH3 0x5C2 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0x610 JUMPI PUSH3 0x610 PUSH3 0x5C2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH3 0x610 JUMPI PUSH3 0x610 PUSH3 0x5C2 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x41E7 PUSH3 0x653 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xA25 ADD MSTORE PUSH2 0x41E7 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xB7D2B162 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xD6BB62C6 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE0886F90 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE0886F90 EQ PUSH2 0xB3D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB7C JUMPI DUP1 PUSH4 0xF801A698 EQ PUSH2 0xB9C JUMPI DUP1 PUSH4 0xFE0776F5 EQ PUSH2 0xBD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD6BB62C6 EQ PUSH2 0xADD JUMPI DUP1 PUSH4 0xDA2B1224 EQ PUSH2 0xAFD JUMPI DUP1 PUSH4 0xE0781B7A EQ PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC1B6C81 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC1B6C81 EQ PUSH2 0xA67 JUMPI DUP1 PUSH4 0xCCE7EC13 EQ PUSH2 0xA7D JUMPI DUP1 PUSH4 0xD1F856EE EQ PUSH2 0xA9D JUMPI DUP1 PUSH4 0xD22B5989 EQ PUSH2 0xABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7D2B162 EQ PUSH2 0x9F3 JUMPI DUP1 PUSH4 0xBA9A91A5 EQ PUSH2 0xA13 JUMPI DUP1 PUSH4 0xBBA06F27 EQ PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94C7D7EE GT PUSH2 0x164 JUMPI DUP1 PUSH4 0xA7CD2448 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0xA7CD2448 EQ PUSH2 0x94A JUMPI DUP1 PUSH4 0xABD9BD2A EQ PUSH2 0x96A JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x98A JUMPI DUP1 PUSH4 0xB7009613 EQ PUSH2 0x9B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94C7D7EE EQ PUSH2 0x8BB JUMPI DUP1 PUSH4 0xA166AA89 EQ PUSH2 0x8DB JUMPI DUP1 PUSH4 0xA64D95CE EQ PUSH2 0x92A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x853551B8 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x853551B8 EQ PUSH2 0x848 JUMPI DUP1 PUSH4 0x8BDFF161 EQ PUSH2 0x868 JUMPI DUP1 PUSH4 0x8D1FDF2F EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x89D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x81E JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x37CEF791 GT PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x4C1DA1E2 GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x218 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0x62B40F9F EQ PUSH2 0x771 JUMPI DUP1 PUSH4 0x6D5115BD EQ PUSH2 0x791 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4C1DA1E2 EQ PUSH2 0x6DD JUMPI DUP1 PUSH4 0x52962952 EQ PUSH2 0x6FD JUMPI DUP1 PUSH4 0x530DD456 EQ PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x27A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x655 JUMPI DUP1 PUSH4 0x4136A33C EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x45C8B1A6 EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0x4665096D EQ PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x37CEF791 EQ PUSH2 0x5E3 JUMPI DUP1 PUSH4 0x3ADC277A EQ PUSH2 0x603 JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F7B6D32 GT PUSH2 0x30D JUMPI DUP1 PUSH4 0x2BDB7097 GT PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x2BDB7097 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x3078DB6C EQ PUSH2 0x549 JUMPI DUP1 PUSH4 0x3078F114 EQ PUSH2 0x569 JUMPI DUP1 PUSH4 0x30CAE187 EQ PUSH2 0x5C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F7B6D32 EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x21DF0DA7 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0x25C471A0 EQ PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12BE8727 GT PUSH2 0x349 JUMPI DUP1 PUSH4 0x12BE8727 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x167BD395 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x18FF183C EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D6122D EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0xB0A93BA EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xB98F975 EQ PUSH2 0x3F7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0xBF6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH9 0x10000000000000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x432 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x390A JUMP JUMPDEST PUSH2 0xCAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x437 PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x39B2 JUMP JUMPDEST PUSH2 0xD2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A1A JUMP JUMPDEST PUSH2 0xEA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x564 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x100E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x575 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x589 PUSH2 0x584 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x5DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC4 JUMP JUMPDEST PUSH2 0x1116 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x5FE CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1128 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x623 PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x11A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x685 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x6C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x11B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x93A80 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x6F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1226 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC4 JUMP JUMPDEST PUSH2 0x1254 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x738 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x539 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x78C CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x1266 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x7AC CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x804 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x157A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x1659 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x166B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x863 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B3B JUMP JUMPDEST PUSH2 0x167B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x1712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x898 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1723 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x8D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x39B2 JUMP JUMPDEST PUSH2 0x1791 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x8F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH15 0x10000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x945 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x183D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x965 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0x184F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x985 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B83 JUMP JUMPDEST PUSH2 0x19E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9AA PUSH2 0x9A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BE7 JUMP JUMPDEST PUSH2 0x1A19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x3C4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D7 PUSH2 0x9D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CC6 JUMP JUMPDEST PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xA0E CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x1B62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xA62 CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x1B79 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x69780 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0xA98 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0x1C92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D7 PUSH2 0xAB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x1FBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xAD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D11 JUMP JUMPDEST PUSH2 0x2038 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0xAF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B83 JUMP JUMPDEST PUSH2 0x204A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xB18 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x21DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0xB38 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x2251 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB5D PUSH2 0xB58 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0x2292 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xB97 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x22D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBBC PUSH2 0xBB7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D2F JUMP JUMPDEST PUSH2 0x2310 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xBF1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x2458 JUMP JUMPDEST PUSH2 0xBFE PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xC4A JUMPI PUSH2 0xC3A DUP6 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xC1F JUMPI PUSH2 0xC1F PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC34 SWAP2 SWAP1 PUSH2 0x3DB7 JUMP JUMPDEST DUP5 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0xC43 DUP2 PUSH2 0x3DEA JUMP JUMPDEST SWAP1 POP PUSH2 0xC01 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0xC61 PUSH2 0x25AD JUMP JUMPDEST PUSH2 0xC6C DUP2 PUSH1 0x64 PUSH2 0x3E03 JUMP JUMPDEST PUSH1 0x6 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xCA7 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCB5 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x25EF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xCCB PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 DUP1 PUSH2 0xD3B DUP4 DUP9 DUP9 DUP9 PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xD51 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xDA4 JUMPI DUP3 DUP8 PUSH2 0xD62 DUP9 DUP9 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x81C6F24B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB2 DUP5 DUP10 DUP10 DUP10 PUSH2 0x19E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0xDD9 JUMPI POP PUSH2 0xDCE DUP3 PUSH2 0x1173 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xDEA JUMPI PUSH2 0xDE7 DUP3 PUSH2 0x2716 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xE3D DUP11 PUSH2 0xDFB DUP12 DUP12 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0xE85 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP CALLVALUE SWAP3 POP PUSH2 0x2819 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x4 SSTORE SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA3 PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB0 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xEC4 DUP4 DUP4 PUSH2 0xEBE DUP7 PUSH2 0xC72 JUMP JUMPDEST DUP5 PUSH2 0x28B7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED4 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0xEDC PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF03 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x783BC409 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF52 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFC9 SWAP2 SWAP1 PUSH2 0x3E16 JUMP JUMPDEST PUSH2 0xFD4 SWAP1 PUSH1 0x2 PUSH2 0x3E39 JUMP JUMPDEST PUSH2 0xFDF SWAP1 PUSH1 0xA PUSH2 0x3F36 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x1002 JUMPI PUSH1 0x40 MLOAD PUSH4 0x164B7C9 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xE90 PUSH1 0x7 DUP5 DUP5 PUSH2 0x2B23 JUMP JUMPDEST PUSH2 0x1016 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x101E PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x109A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x1108 SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x2B41 JUMP JUMPDEST SWAP7 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x111E PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2B64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1151 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x115C PUSH1 0x7 DUP4 PUSH2 0x2C06 JUMP JUMPDEST PUSH2 0x1168 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCA7 PUSH1 0x7 DUP4 PUSH2 0x2C1B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1193 DUP2 PUSH2 0x2C30 JUMP JUMPDEST PUSH2 0x119D JUMPI DUP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11AE PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x2C5F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C0 PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x22E458D3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x45C8B1A6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0xCA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x125C PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2CB1 JUMP JUMPDEST PUSH2 0x126E PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x1276 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 POP PUSH4 0xA9059CBB SWAP2 POP DUP4 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x135F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1383 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13F2 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x1422 JUMPI PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBBEA11C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x1430 PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x156E JUMPI PUSH1 0x0 PUSH2 0x1444 PUSH1 0x7 DUP5 PUSH2 0x2D66 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14B0 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1532 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x150C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH4 0xBBEA11C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST POP DUP2 PUSH2 0x1566 DUP2 PUSH2 0x3DEA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1426 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SELFDESTRUCT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x703C0DBD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0xE0781B7A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15E5 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x15F1 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1635 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCA7 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH2 0x1661 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH1 0x0 PUSH2 0x2D82 JUMP JUMPDEST PUSH2 0x1673 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x2DDF JUMP JUMPDEST PUSH2 0x1683 PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x16A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x16CA JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH32 0x1256F5B5ECB89CAEC12DB449738F2FBCD1BA5806CF38F35413F4E5C15BF6A450 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1705 SWAP3 SWAP2 SWAP1 PUSH2 0x3FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH1 0x6 SLOAD PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x3FB8 JUMP JUMPDEST PUSH2 0x172B PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8D1FDF2F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x8D1FDF2F SWAP1 PUSH1 0x24 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x8FB36037 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP4 SWAP2 PUSH4 0x8FB36037 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17F6 SWAP2 SWAP1 PUSH2 0x3FCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1829 JUMPI PUSH1 0x40 MLOAD PUSH4 0x641FEE9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xC4A PUSH2 0x1838 DUP6 DUP4 DUP7 DUP7 PUSH2 0x19E0 JUMP JUMPDEST PUSH2 0x2716 JUMP JUMPDEST PUSH2 0x1845 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1878 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x1899 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1208B21B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1907 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192B SWAP2 SWAP1 PUSH2 0x3E16 JUMP JUMPDEST PUSH2 0x1936 SWAP1 PUSH1 0x2 PUSH2 0x3E39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x37CEF791 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND SWAP2 POP PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0x37CEF791 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1985 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19A9 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP1 POP PUSH2 0x19B6 DUP3 PUSH1 0xA PUSH2 0x3FE8 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x19C3 DUP7 DUP5 PUSH2 0x3FF4 JUMP JUMPDEST PUSH2 0x19CD SWAP2 SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST PUSH2 0x19D7 SWAP2 SWAP1 PUSH2 0x400B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19F9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x402D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A43 JUMPI PUSH2 0x1A43 PUSH2 0x4084 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A76 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1A61 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B03 JUMPI PUSH2 0x1AD3 ADDRESS DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1A9A JUMPI PUSH2 0x1A9A PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1AAC SWAP2 SWAP1 PUSH2 0x409A JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1ABF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2F3B JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AE5 JUMPI PUSH2 0x1AE5 PUSH2 0x3DA1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1AFB SWAP1 PUSH2 0x3DEA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A7C JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B20 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1B44 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B51 PUSH1 0x0 DUP8 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP3 POP PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B6A PUSH2 0x2481 JUMP JUMPDEST PUSH2 0x1B74 DUP3 DUP3 PUSH2 0x2FA8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1B81 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x1B89 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BFB SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C6A SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x5D3F476B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9C PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x14F9A489 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0xA7CD2448 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D0E SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D7C SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DF2 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP1 POP DUP5 DUP3 LT ISZERO PUSH2 0x1E34 JUMPI PUSH1 0x40 MLOAD PUSH4 0x21D6041B PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E58 JUMPI PUSH1 0x40 MLOAD PUSH4 0x705ADF1F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1ECF SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x1EDF JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F5A SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1FB1 JUMPI DUP6 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x314898F27B62DE59A1D7326707C74B7991036F43ED22658D064228C032E76FDA DUP8 PUSH1 0x40 MLOAD PUSH2 0x1FA8 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND ADD PUSH2 0x1FE3 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF0 DUP7 DUP7 PUSH2 0x10AE JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0x2026 JUMPI POP PUSH2 0x2012 PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x2031 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2040 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x30D1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2058 DUP6 DUP6 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2068 DUP9 DUP9 DUP9 DUP9 PUSH2 0x19E0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 SUB PUSH2 0x20A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2176 JUMPI PUSH1 0x0 PUSH2 0x20CC PUSH1 0x0 DUP6 PUSH2 0x1FBB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x211B SWAP1 PUSH2 0x2115 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x3AD JUMP JUMPDEST DUP7 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x212A JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x2173 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFF89D47 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP1 DUP13 AND PUSH1 0x24 DUP4 ADD MSTORE DUP11 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD9B JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP3 SWAP2 DUP5 SWAP2 PUSH32 0xBD9AC67A6E2F6463B80927326310338BCBB4BDB7936CE1365EA3E01067E7B9F7 SWAP2 LOG3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21E3 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x21EB PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2212 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x225B PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2282 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCA7 PUSH1 0x7 DUP4 PUSH2 0x2C06 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x229F PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST DUP4 LT PUSH2 0x22BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x188DA0B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22C9 PUSH1 0x7 DUP5 PUSH2 0x2D66 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x22DA PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2304 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x230D DUP2 PUSH2 0x2D82 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER DUP2 PUSH2 0x2321 DUP3 DUP10 DUP10 DUP10 PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2335 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x233F SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x2376 JUMPI POP PUSH1 0x0 DUP7 PUSH6 0xFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x2376 JUMPI POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP7 PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x2387 JUMPI DUP3 DUP10 PUSH2 0xD62 DUP11 DUP11 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x23A1 DUP7 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST SWAP6 POP PUSH2 0x23AF DUP4 DUP11 DUP11 DUP11 PUSH2 0x19E0 JUMP JUMPDEST SWAP5 POP PUSH2 0x23BA DUP6 PUSH2 0x31A6 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND OR PUSH7 0x1000000000000 SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD SWAP1 DUP2 AND SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP1 SWAP6 POP DUP7 SWAP1 PUSH32 0x82A2DA5DEE54EA8021C6545B4444620291E07EE83BE6DD57EDB175062715F3B4 SWAP1 PUSH2 0x2444 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x412D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1B6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x5F159E63 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x2490 DUP4 DUP3 CALLDATASIZE PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B74 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x24EC JUMPI PUSH1 0x0 PUSH2 0x24B3 DUP2 CALLDATASIZE PUSH2 0x32F7 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xF07E038F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xEC4 PUSH2 0x1838 DUP5 ADDRESS PUSH1 0x0 CALLDATASIZE PUSH2 0x19E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP3 DUP4 MSTORE SWAP3 SWAP2 PUSH32 0x9EA6790C7DADFD01C9F8B9762B3682607AF2C7E79E05A9F9FDF5580DDE949151 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25E5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x2B41 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x2623 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB40D179 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP1 SLOAD DUP5 ISZERO ISZERO PUSH15 0x10000000000000000000000000000 MUL PUSH15 0xFF0000000000000000000000000000 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE MLOAD PUSH32 0x90D4E7BB7E5D933792B3562E1741306F8BE94837E1348DACEF9B6F1DF56EB138 SWAP1 PUSH2 0x269F SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x26D2 JUMPI PUSH2 0x26C9 DUP7 DUP6 DUP6 PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x26F5 JUMP JUMPDEST PUSH1 0x4 DUP4 LT PUSH2 0x26EE JUMPI PUSH2 0x26E9 DUP7 DUP7 PUSH2 0x9D2 DUP8 DUP8 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x26C9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x270D PUSH1 0x4 DUP3 DUP5 DUP7 PUSH2 0x405A JUMP JUMPDEST PUSH2 0xE90 SWAP2 PUSH2 0x4173 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 DUP4 SUB PUSH2 0x2762 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x276A PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x279D JUMPI PUSH1 0x40 MLOAD PUSH4 0xC65B5BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x27A6 DUP3 PUSH2 0x2C30 JUMP JUMPDEST ISZERO PUSH2 0x27C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E2975B9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD PUSH4 0xFFFFFFFF DUP4 AND SWAP2 DUP7 SWAP2 PUSH32 0x76A2A46953689D4861A5D3F6ED883AD7E6AF674A21F8E162707159FC9DDE614D SWAP2 SWAP1 LOG3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x283E JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x285A SWAP2 SWAP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2897 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x289C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FB1 DUP7 DUP4 DUP4 PUSH2 0x34DF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 PUSH2 0x353B JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH2 0x28F6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH2 0x29F8 JUMPI DUP5 PUSH4 0xFFFFFFFF AND PUSH2 0x2942 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x294C SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x297A DUP7 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2AB5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x2A45 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000FFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B39 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 PUSH2 0x35F0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B57 DUP5 PUSH2 0x2B52 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x360D JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2B82 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x2BAB JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP5 DUP7 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD PUSH32 0x1FD6DD7631312DFAC2205B52913F99DE03B4D7E381D5D27D3DBFE0713E6E6340 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3661 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x366D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C3A PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x2C4F PUSH3 0x93A80 DUP5 PUSH2 0x4107 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND GT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C67 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2CCF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x2CF8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP6 DUP8 AND SWAP6 DUP7 MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7A8059630B897B5DE4C08ADE69F8B90C3EAD1F8596D62D10B6C4D14A0AFB4AE2 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2D75 DUP7 DUP7 PUSH2 0x36B4 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x2DE7 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2C94 CALLER SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ADD PUSH2 0x2E59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x2E93 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH32 0xFFFF0000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xFEB69018EE8B8FD50EA86348F1267D07673379F72CFFDECCEC63853EE8CE8B48 SWAP1 PUSH2 0x1705 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2F58 SWAP2 SWAP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x19D7 DUP6 DUP4 DUP4 PUSH2 0x34DF JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND ADD PUSH2 0x2FE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP1 SUB PUSH2 0x302A JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD SWAP1 SWAP3 SWAP2 PUSH32 0xF229BAA593AF28C41B1D16B748CD7688F0C83AAF92D4BE41C44005DEFE84C166 SWAP2 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEA3 TIMESTAMP PUSH2 0x36DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x3104 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP1 MLOAD PUSH4 0xFFFFFFFF DUP8 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP4 POP SWAP2 PUSH32 0xA56B76017453F399EC2327BA00375DBFB1FD070FF854341AD6191E6A2E2DE19C SWAP2 ADD PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x319F JUMPI DUP2 PUSH2 0xE90 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x31D2 JUMPI POP PUSH2 0x31D0 DUP2 PUSH2 0x2C30 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x813E9459 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x320A JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1B5A JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x3279 JUMPI PUSH2 0x326E ADDRESS PUSH2 0x3228 DUP7 DUP7 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x4 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP SWAP2 POP PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3288 DUP8 DUP8 PUSH2 0x32F7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH2 0x32A2 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32AF DUP5 DUP12 PUSH2 0x1FBB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x32C9 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1B5A JUMP JUMPDEST PUSH2 0x32DF DUP4 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x4 DUP5 LT ISZERO PUSH2 0x3312 JUMPI POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x331E DUP7 DUP7 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x10A6AA37 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x334F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x30CAE187 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x336A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x294B14A9 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3385 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5326CAE7 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x33A0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xD22B5989 PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x33B6 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x63FC60F PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x33E5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x167BD395 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3400 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x8D6122D PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 PUSH2 0x3415 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x405A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3422 SWAP2 SWAP1 PUSH2 0x3A8B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x342F DUP3 PUSH2 0x1226 JUMP JUMPDEST PUSH1 0x1 SWAP7 POP PUSH1 0x0 SWAP6 POP SWAP4 POP PUSH2 0x34D8 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x12E238D PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x3471 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5BE958B1 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 PUSH2 0x3486 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x405A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3493 SWAP2 SWAP1 PUSH2 0x38C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH2 0x34BC DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x34F4 JUMPI PUSH2 0x34EF DUP3 PUSH2 0x3716 JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x350B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x3534 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST POP DUP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x355D DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x359A DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x3585 JUMPI PUSH1 0x0 PUSH2 0x358F JUMP JUMPDEST PUSH2 0x358F DUP9 DUP6 PUSH2 0x41BD JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST SWAP1 POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x35AB PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x35B5 SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH2 0x2B39 DUP5 DUP5 PUSH2 0x3749 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH2 0x364C JUMPI DUP3 DUP3 DUP3 PUSH2 0x3651 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3755 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x3693 JUMPI POP PUSH2 0x3691 DUP5 DUP5 PUSH2 0x3661 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15AB343 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x36C2 DUP6 DUP6 PUSH2 0x376D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP7 SWAP1 SWAP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 SLOAD SWAP5 SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3712 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x3726 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3779 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x37C8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x37C0 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xCA7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x37DF JUMPI PUSH2 0x37DF PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3830 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x228D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3883 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x389E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38AA DUP8 DUP3 DUP9 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x38BD SWAP1 POP PUSH1 0x40 DUP7 ADD PUSH2 0x384B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE90 DUP3 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3928 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x38FC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3961 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x399A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x39D2 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x39ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39F9 DUP7 DUP3 DUP8 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x228D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A38 DUP5 PUSH2 0x384B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3A48 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A56 PUSH1 0x40 DUP6 ADD PUSH2 0x3A06 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3A7D DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ABB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3961 DUP4 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3AD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AE0 DUP4 PUSH2 0x384B JUMP JUMPDEST SWAP2 POP PUSH2 0x3AEE PUSH1 0x20 DUP5 ADD PUSH2 0x384B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3B2B DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39D2 DUP5 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B75 DUP4 PUSH2 0x384B JUMP JUMPDEST SWAP2 POP PUSH2 0x3AEE PUSH1 0x20 DUP5 ADD PUSH2 0x3A06 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3B99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3BA4 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3BB4 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BDB DUP8 DUP3 DUP9 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3C10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C1C DUP6 DUP3 DUP7 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3C2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CB9 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x3C9A DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x3C28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3C73 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3CE6 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3CF6 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x3D06 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3B75 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3D50 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D77 DUP8 DUP3 DUP9 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3D96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3DFC JUMPI PUSH2 0x3DFC PUSH2 0x3DD4 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x3E8D JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3E73 JUMPI PUSH2 0x3E73 PUSH2 0x3DD4 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x3E80 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3E57 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3EA4 JUMPI POP PUSH1 0x1 PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH2 0x3EB1 JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x3EC7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3ED1 JUMPI PUSH2 0x3EED JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3EE2 JUMPI PUSH2 0x3EE2 PUSH2 0x3DD4 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xCA7 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x3F10 JUMPI POP DUP2 DUP2 EXP PUSH2 0xCA7 JUMP JUMPDEST PUSH2 0x3F1A DUP4 DUP4 PUSH2 0x3E52 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3F2E JUMPI PUSH2 0x3F2E PUSH2 0x3DD4 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x3E95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE90 DUP2 PUSH2 0x38FC JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2B39 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE90 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3E95 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4028 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1FB1 PUSH1 0x60 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x406A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x4077 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x40B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x40CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD PUSH1 0x0 DUP2 MSTORE DUP4 MLOAD PUSH2 0x40FD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x3C28 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4126 JUMPI PUSH2 0x4126 PUSH2 0x3DD4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4168 PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0x1B03 JUMPI PUSH1 0x4 SWAP5 SWAP1 SWAP5 SUB PUSH1 0x3 SHL DUP5 SWAP1 SHL AND SWAP1 SWAP3 AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x41B3 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3C28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4126 JUMPI PUSH2 0x4126 PUSH2 0x3DD4 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"830:6858:15:-:0;;;1742:242;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1872:12;;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;701:51:17;674:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;;;;;6013:26:1;;6009:108;;6062:44;;-1:-1:-1;;;6062:44:1;;6103:1;6062:44;;;701:51:17;674:18;;6062:44:1;555:203:17;6009:108:1;6199:42;5259:16;6222:12;5259:16;;6199:10;:42::i;:::-;-1:-1:-1;;1231:7:9;:15;;-1:-1:-1;;1231:15:9;;;1911:11:15::2;1917:5:::0;1911:3:::2;:11;:::i;:::-;1896:12;:26:::0;-1:-1:-1;1932:13:15::2;:21:::0;;-1:-1:-1;;;;;1932:21:15;;::::2;;;-1:-1:-1::0;;;;;;1932:21:15;;::::2;::::0;;;::::2;::::0;;-1:-1:-1;1970:7:15::2;1963:14;::::0;830:6858;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;11229:1061:1:-;11387:4;-1:-1:-1;;;;;;;;;;;11407:21:1;;;11403:90;;11451:31;;-1:-1:-1;;;11451:31:1;;-1:-1:-1;;;;;1187:31:17;;11451::1;;;1169:50:17;1142:18;;11451:31:1;1025:200:17;11403:90:1;-1:-1:-1;;;;;11520:14:1;;11503;11520;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11520:31:1;;;;;;;;;:37;;;:42;;11595:585;;;;11632:29;;;:16;:14;:16::i;:::-;:29;;;;:::i;:::-;11624:37;;11709:55;;;;;;;;11724:5;11709:55;;;;;;11738:24;:14;:22;;;;;:24;;:::i;:::-;-1:-1:-1;;;;;11709:55:1;;;;;;-1:-1:-1;;;;;11675:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11675:31:1;;;;;;;;;:89;;;;;;;;;;;;;;-1:-1:-1;;;;;;11675:89:1;;;;;;;;;;;;;;11595:585;;;-1:-1:-1;;;;;12056:14:1;;12154:1;12056:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12056:31:1;;;;;;;;;:37;:113;;:37;;;;-1:-1:-1;;;;;12056:37:1;;12122:14;;12056:48;:113::i;:::-;-1:-1:-1;;;;;12008:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12008:31:1;;;;;;;;;12007:162;;-1:-1:-1;;;;;12007:162:1;;;;;-1:-1:-1;;;;;;;;12007:162:1;;;;;;;;;;;-1:-1:-1;11595:585:1;12195:62;;;1633:10:17;1621:23;;1603:42;;1693:14;1681:27;;1676:2;1661:18;;1654:55;1752:14;;1745:22;1725:18;;;1718:50;12195:62:1;;-1:-1:-1;;;;;12195:62:1;;;-1:-1:-1;;;;;12195:62:1;;;;;;;;1591:2:17;12195:62:1;;;-1:-1:-1;12274:9:1;11229:1061;-1:-1:-1;;;;;11229:1061:1:o;750:110:14:-;794:6;819:34;837:15;819:17;:34::i;:::-;812:41;;750:110;:::o;2508:108::-;2589:20;;;2508:108::o;3972:390::-;4093:18;;;4153:10;-1:-1:-1;;;;;4153:8:14;;;:10::i;:::-;4138:25;;4173:14;4197:61;4206:10;4197:61;;4226:8;4218:16;;:5;:16;;;:39;;4256:1;4218:39;;;4237:16;4245:8;4237:5;:16;:::i;:::-;4197:61;;:8;:61::i;:::-;4173:86;-1:-1:-1;4278:21:14;;;:11;:9;:11::i;:::-;:21;;;;:::i;:::-;4269:30;-1:-1:-1;5065:19:14;;;5059:2;5035:26;;;;;5028:2;5009:21;;;;;5008:54;:76;4309:46;;;;3972:390;;;;;;:::o;14291:213:11:-;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:11;;14447:2;14416:41;;;2140:36:17;2192:18;;;2185:34;;;2113:18;;14416:41:11;1959:266:17;14365:103:11;-1:-1:-1;14491:5:11;14291:213::o;3548:130:14:-;3596:6;;3635:14;-1:-1:-1;;;;;3635:12:14;;;:14::i;:::-;-1:-1:-1;3614:35:14;;3548:130;-1:-1:-1;;;;3548:130:14:o;2382:104:10:-;2440:7;2470:1;2466;:5;:13;;2478:1;2466:13;;;2474:1;2466:13;2459:20;;2382:104;;;;;:::o;3362:129:14:-;3414:6;;;3455:29;3466:4;3472:11;:9;:11::i;:::-;3455:10;:29::i;:::-;3448:36;;;;;;3362:129;;;;;:::o;2868:276::-;2940:6;;;-1:-1:-1;;;;;4710:2:14;4703:9;;;;-1:-1:-1;;;;;3031:11:14;;4739:9;4746:2;4739:9;;;;;;3061:19;;;;;:76;;3105:11;3118:10;3130:6;3061:76;;;3084:10;3096:1;3099;3061:76;3054:83;;;;;;;;;2868:276;;;;;:::o;14:177:17:-;93:13;;-1:-1:-1;;;;;135:31:17;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:354::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;451:49;496:2;485:9;481:18;451:49;:::i;:::-;441:59;;540:2;529:9;525:18;519:25;509:35;;196:354;;;;;:::o;763:127::-;824:10;819:3;815:20;812:1;805:31;855:4;852:1;845:15;879:4;876:1;869:15;895:125;960:9;;;981:10;;;978:36;;;994:18;;:::i;1230:176::-;1297:14;1331:10;;;1343;;;1327:27;;1366:11;;;1363:37;;;1380:18;;:::i;:::-;1363:37;1230:176;;;;:::o;1779:175::-;1847:10;1890;;;1878;;;1874:27;;1913:12;;;1910:38;;;1928:18;;:::i;1959:266::-;830:6858:15;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_213":{"entryPoint":null,"id":213,"parameterSlots":0,"returnSlots":0},"@PUBLIC_ROLE_220":{"entryPoint":null,"id":220,"parameterSlots":0,"returnSlots":0},"@SALT_7933":{"entryPoint":null,"id":7933,"parameterSlots":0,"returnSlots":0},"@_add_7079":{"entryPoint":14201,"id":7079,"parameterSlots":2,"returnSlots":1},"@_at_7213":{"entryPoint":14280,"id":7213,"parameterSlots":2,"returnSlots":1},"@_canCallExtended_1865":{"entryPoint":9899,"id":1865,"parameterSlots":4,"returnSlots":2},"@_canCallSelf_1960":{"entryPoint":12787,"id":1960,"parameterSlots":3,"returnSlots":2},"@_checkAuthorized_1673":{"entryPoint":9345,"id":1673,"parameterSlots":0,"returnSlots":0},"@_checkNotScheduled_1277":{"entryPoint":12710,"id":1277,"parameterSlots":1,"returnSlots":0},"@_checkOwner_84":{"entryPoint":9600,"id":84,"parameterSlots":0,"returnSlots":0},"@_checkSelector_2013":{"entryPoint":9982,"id":2013,"parameterSlots":2,"returnSlots":1},"@_consumeScheduledOp_1579":{"entryPoint":10006,"id":1579,"parameterSlots":1,"returnSlots":1},"@_contains_7182":{"entryPoint":null,"id":7182,"parameterSlots":2,"returnSlots":1},"@_contextSuffixLength_2897":{"entryPoint":null,"id":2897,"parameterSlots":0,"returnSlots":1},"@_getAdminRestrictions_1820":{"entryPoint":13047,"id":1820,"parameterSlots":2,"returnSlots":3},"@_getFullAt_7730":{"entryPoint":13837,"id":7730,"parameterSlots":2,"returnSlots":3},"@_grantRole_777":{"entryPoint":10423,"id":777,"parameterSlots":4,"returnSlots":1},"@_hashExecutionId_2032":{"entryPoint":null,"id":2032,"parameterSlots":2,"returnSlots":1},"@_isExecuting_1978":{"entryPoint":null,"id":1978,"parameterSlots":2,"returnSlots":1},"@_isExpired_1996":{"entryPoint":11312,"id":1996,"parameterSlots":1,"returnSlots":1},"@_length_7196":{"entryPoint":null,"id":7196,"parameterSlots":1,"returnSlots":1},"@_msgData_2889":{"entryPoint":null,"id":2889,"parameterSlots":0,"returnSlots":2},"@_msgSender_2880":{"entryPoint":null,"id":2880,"parameterSlots":0,"returnSlots":1},"@_pause_3085":{"entryPoint":11743,"id":3085,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_3056":{"entryPoint":12450,"id":3056,"parameterSlots":0,"returnSlots":0},"@_requirePaused_3069":{"entryPoint":9645,"id":3069,"parameterSlots":0,"returnSlots":0},"@_revert_2867":{"entryPoint":14102,"id":2867,"parameterSlots":1,"returnSlots":0},"@_revokeRole_825":{"entryPoint":12200,"id":825,"parameterSlots":2,"returnSlots":1},"@_setGrantDelay_937":{"entryPoint":11804,"id":937,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_859":{"entryPoint":11108,"id":859,"parameterSlots":2,"returnSlots":0},"@_setRoleGuardian_893":{"entryPoint":11441,"id":893,"parameterSlots":2,"returnSlots":0},"@_setTargetAdminDelay_1049":{"entryPoint":12497,"id":1049,"parameterSlots":2,"returnSlots":0},"@_setTargetClosed_1098":{"entryPoint":9711,"id":1098,"parameterSlots":2,"returnSlots":0},"@_setTargetFunctionRole_998":{"entryPoint":9468,"id":998,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":11650,"id":146,"parameterSlots":1,"returnSlots":0},"@_unpause_3101":{"entryPoint":11359,"id":3101,"parameterSlots":0,"returnSlots":0},"@add_7249":{"entryPoint":14153,"id":7249,"parameterSlots":2,"returnSlots":1},"@at_6047":{"entryPoint":14004,"id":6047,"parameterSlots":2,"returnSlots":2},"@at_6733":{"entryPoint":11622,"id":6733,"parameterSlots":2,"returnSlots":2},"@at_7318":{"entryPoint":14189,"id":7318,"parameterSlots":2,"returnSlots":1},"@at_8249":{"entryPoint":8850,"id":8249,"parameterSlots":1,"returnSlots":2},"@balanceOf_8538":{"entryPoint":5498,"id":8538,"parameterSlots":1,"returnSlots":1},"@buy_8512":{"entryPoint":7314,"id":8512,"parameterSlots":2,"returnSlots":1},"@canCall_8345":{"entryPoint":6923,"id":8345,"parameterSlots":3,"returnSlots":2},"@cancel_1477":{"entryPoint":8266,"id":1477,"parameterSlots":4,"returnSlots":1},"@consumeScheduledOp_1514":{"entryPoint":6033,"id":1514,"parameterSlots":3,"returnSlots":0},"@contains_6003":{"entryPoint":13921,"id":6003,"parameterSlots":2,"returnSlots":1},"@contains_6678":{"entryPoint":11270,"id":6678,"parameterSlots":2,"returnSlots":1},"@contains_7285":{"entryPoint":14165,"id":7285,"parameterSlots":2,"returnSlots":1},"@defineToken_8118":{"entryPoint":8667,"id":8118,"parameterSlots":1,"returnSlots":0},"@destroy_8708":{"entryPoint":4710,"id":8708,"parameterSlots":2,"returnSlots":0},"@execute_1375":{"entryPoint":3370,"id":1375,"parameterSlots":3,"returnSlots":1},"@expiration_349":{"entryPoint":null,"id":349,"parameterSlots":0,"returnSlots":1},"@freeze_8069":{"entryPoint":5923,"id":8069,"parameterSlots":1,"returnSlots":0},"@functionCallWithValue_2735":{"entryPoint":10265,"id":2735,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_2787":{"entryPoint":12091,"id":2787,"parameterSlots":2,"returnSlots":1},"@getAccess_498":{"entryPoint":4270,"id":498,"parameterSlots":2,"returnSlots":4},"@getBonus_8310":{"entryPoint":5906,"id":8310,"parameterSlots":0,"returnSlots":1},"@getFull_7750":{"entryPoint":11073,"id":7750,"parameterSlots":1,"returnSlots":3},"@getNonce_1135":{"entryPoint":null,"id":1135,"parameterSlots":1,"returnSlots":1},"@getRate_8225":{"entryPoint":4392,"id":8225,"parameterSlots":1,"returnSlots":1},"@getResultAmount_8411":{"entryPoint":6223,"id":8411,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_420":{"entryPoint":null,"id":420,"parameterSlots":1,"returnSlots":1},"@getRoleGrantDelay_450":{"entryPoint":3186,"id":450,"parameterSlots":1,"returnSlots":1},"@getRoleGuardian_434":{"entryPoint":null,"id":434,"parameterSlots":1,"returnSlots":1},"@getSchedule_1121":{"entryPoint":4467,"id":1121,"parameterSlots":1,"returnSlots":1},"@getTargetAdminDelay_406":{"entryPoint":4646,"id":406,"parameterSlots":1,"returnSlots":1},"@getTargetFunctionRole_390":{"entryPoint":null,"id":390,"parameterSlots":2,"returnSlots":1},"@getToken_8126":{"entryPoint":null,"id":8126,"parameterSlots":0,"returnSlots":1},"@get_6127":{"entryPoint":13933,"id":6127,"parameterSlots":2,"returnSlots":1},"@get_6803":{"entryPoint":11291,"id":6803,"parameterSlots":2,"returnSlots":1},"@get_7768":{"entryPoint":9680,"id":7768,"parameterSlots":1,"returnSlots":1},"@grantRole_593":{"entryPoint":3752,"id":593,"parameterSlots":3,"returnSlots":0},"@hasRate_8284":{"entryPoint":8785,"id":8284,"parameterSlots":1,"returnSlots":1},"@hasRole_542":{"entryPoint":8123,"id":542,"parameterSlots":2,"returnSlots":2},"@hashOperation_1601":{"entryPoint":6624,"id":1601,"parameterSlots":4,"returnSlots":1},"@isTargetClosed_372":{"entryPoint":null,"id":372,"parameterSlots":1,"returnSlots":1},"@labelRole_571":{"entryPoint":5755,"id":571,"parameterSlots":3,"returnSlots":0},"@length_6018":{"entryPoint":13627,"id":6018,"parameterSlots":1,"returnSlots":1},"@length_6693":{"entryPoint":10412,"id":6693,"parameterSlots":1,"returnSlots":1},"@length_7300":{"entryPoint":14143,"id":7300,"parameterSlots":1,"returnSlots":1},"@length_8259":{"entryPoint":3735,"id":8259,"parameterSlots":0,"returnSlots":1},"@max_3289":{"entryPoint":12688,"id":3289,"parameterSlots":2,"returnSlots":1},"@minSetback_358":{"entryPoint":null,"id":358,"parameterSlots":0,"returnSlots":1},"@multicall_2984":{"entryPoint":6681,"id":2984,"parameterSlots":2,"returnSlots":1},"@owner_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":1},"@pack_7913":{"entryPoint":null,"id":7913,"parameterSlots":3,"returnSlots":1},"@pause_8035":{"entryPoint":5739,"id":8035,"parameterSlots":0,"returnSlots":0},"@paused_3044":{"entryPoint":null,"id":3044,"parameterSlots":0,"returnSlots":1},"@redeem_8571":{"entryPoint":7033,"id":8571,"parameterSlots":2,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":5721,"id":98,"parameterSlots":0,"returnSlots":0},"@renounceRole_632":{"entryPoint":9304,"id":632,"parameterSlots":2,"returnSlots":0},"@revokeRole_609":{"entryPoint":7010,"id":609,"parameterSlots":2,"returnSlots":0},"@schedule_1249":{"entryPoint":8976,"id":1249,"parameterSlots":4,"returnSlots":2},"@setBonus_8300":{"entryPoint":3153,"id":8300,"parameterSlots":1,"returnSlots":0},"@setGrantDelay_680":{"entryPoint":6205,"id":680,"parameterSlots":2,"returnSlots":0},"@setRate_8194":{"entryPoint":3786,"id":8194,"parameterSlots":2,"returnSlots":1},"@setRoleAdmin_648":{"entryPoint":4374,"id":648,"parameterSlots":2,"returnSlots":0},"@setRoleGuardian_664":{"entryPoint":4692,"id":664,"parameterSlots":2,"returnSlots":0},"@setTargetAdminDelay_1014":{"entryPoint":8248,"id":1014,"parameterSlots":2,"returnSlots":0},"@setTargetClosed_1065":{"entryPoint":3245,"id":1065,"parameterSlots":2,"returnSlots":0},"@setTargetFunctionRole_972":{"entryPoint":3062,"id":972,"parameterSlots":4,"returnSlots":0},"@set_5961":{"entryPoint":13808,"id":5961,"parameterSlots":3,"returnSlots":1},"@set_6624":{"entryPoint":11043,"id":6624,"parameterSlots":3,"returnSlots":1},"@timestamp_7661":{"entryPoint":12486,"id":7661,"parameterSlots":0,"returnSlots":1},"@toDelay_7691":{"entryPoint":null,"id":7691,"parameterSlots":1,"returnSlots":1},"@toUint48_4911":{"entryPoint":14047,"id":4911,"parameterSlots":1,"returnSlots":1},"@transferAuthority_8598":{"entryPoint":4110,"id":8598,"parameterSlots":1,"returnSlots":0},"@transferOwnership_126":{"entryPoint":8914,"id":126,"parameterSlots":1,"returnSlots":0},"@unfreeze_8094":{"entryPoint":4536,"id":8094,"parameterSlots":1,"returnSlots":0},"@unpack_7875":{"entryPoint":null,"id":7875,"parameterSlots":1,"returnSlots":3},"@unpause_8044":{"entryPoint":4518,"id":8044,"parameterSlots":0,"returnSlots":0},"@updateAuthority_1619":{"entryPoint":3267,"id":1619,"parameterSlots":2,"returnSlots":0},"@verifyCallResultFromTarget_2827":{"entryPoint":13535,"id":2827,"parameterSlots":3,"returnSlots":1},"@withUpdate_7824":{"entryPoint":13638,"id":7824,"parameterSlots":3,"returnSlots":2},"abi_decode_array_bytes4_dyn_calldata":{"entryPoint":14343,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":14705,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":14987,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_address":{"entryPoint":14659,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_bytes4":{"entryPoint":15558,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr":{"entryPoint":15235,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64":{"entryPoint":14434,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":14602,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes4":{"entryPoint":15117,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_calldata_ptr":{"entryPoint":14770,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48":{"entryPoint":15663,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":14943,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint32":{"entryPoint":15633,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":15335,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":16222,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":15799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":16331,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":14563,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":16197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64":{"entryPoint":14536,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64t_address":{"entryPoint":15016,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_addresst_uint32":{"entryPoint":14874,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64t_string_calldata_ptr":{"entryPoint":15163,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64t_uint32":{"entryPoint":15193,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint64":{"entryPoint":15044,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint8_fromMemory":{"entryPoint":15894,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint32":{"entryPoint":14854,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":14411,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":16251,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16608,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16429,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16292,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":16685,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":16538,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":16474,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":15875,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint48":{"entryPoint":16647,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint8":{"entryPoint":15929,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":16395,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":15954,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":16360,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_t_uint256_t_uint8":{"entryPoint":16182,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":16021,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":16372,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":16312,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint32":{"entryPoint":16829,"id":null,"parameterSlots":2,"returnSlots":1},"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4":{"entryPoint":16755,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":15400,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":15850,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":15828,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":15777,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":16516,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":14322,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":14588,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":15095,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25946:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:109:17","statements":[{"body":{"nodeType":"YulBlock","src":"146:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"155:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"158:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"148:6:17"},"nodeType":"YulFunctionCall","src":"148:12:17"},"nodeType":"YulExpressionStatement","src":"148:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"100:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:17"},"nodeType":"YulFunctionCall","src":"89:54:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:17"},"nodeType":"YulFunctionCall","src":"79:65:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:17"},"nodeType":"YulFunctionCall","src":"72:73:17"},"nodeType":"YulIf","src":"69:93:17"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:17","type":""}],"src":"14:154:17"},{"body":{"nodeType":"YulBlock","src":"256:283:17","statements":[{"body":{"nodeType":"YulBlock","src":"305:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"314:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"307:6:17"},"nodeType":"YulFunctionCall","src":"307:12:17"},"nodeType":"YulExpressionStatement","src":"307:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"284:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"292:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"280:3:17"},"nodeType":"YulFunctionCall","src":"280:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"299:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"276:3:17"},"nodeType":"YulFunctionCall","src":"276:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"269:6:17"},"nodeType":"YulFunctionCall","src":"269:35:17"},"nodeType":"YulIf","src":"266:55:17"},{"nodeType":"YulAssignment","src":"330:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"353:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"340:12:17"},"nodeType":"YulFunctionCall","src":"340:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"330:6:17"}]},{"body":{"nodeType":"YulBlock","src":"403:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"415:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"405:6:17"},"nodeType":"YulFunctionCall","src":"405:12:17"},"nodeType":"YulExpressionStatement","src":"405:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"375:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"383:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"372:2:17"},"nodeType":"YulFunctionCall","src":"372:30:17"},"nodeType":"YulIf","src":"369:50:17"},{"nodeType":"YulAssignment","src":"428:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"444:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"452:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:17"},"nodeType":"YulFunctionCall","src":"440:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"428:8:17"}]},{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"480:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"492:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"495:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"488:3:17"},"nodeType":"YulFunctionCall","src":"488:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"476:3:17"},"nodeType":"YulFunctionCall","src":"476:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"472:3:17"},"nodeType":"YulFunctionCall","src":"472:38:17"},{"name":"end","nodeType":"YulIdentifier","src":"512:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"469:2:17"},"nodeType":"YulFunctionCall","src":"469:47:17"},"nodeType":"YulIf","src":"466:67:17"}]},"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"219:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"227:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"235:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"245:6:17","type":""}],"src":"173:366:17"},{"body":{"nodeType":"YulBlock","src":"592:123:17","statements":[{"nodeType":"YulAssignment","src":"602:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"624:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"611:12:17"},"nodeType":"YulFunctionCall","src":"611:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"602:5:17"}]},{"body":{"nodeType":"YulBlock","src":"693:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"702:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"705:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"695:6:17"},"nodeType":"YulFunctionCall","src":"695:12:17"},"nodeType":"YulExpressionStatement","src":"695:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"653:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"664:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"671:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"660:3:17"},"nodeType":"YulFunctionCall","src":"660:30:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"650:2:17"},"nodeType":"YulFunctionCall","src":"650:41:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"643:6:17"},"nodeType":"YulFunctionCall","src":"643:49:17"},"nodeType":"YulIf","src":"640:69:17"}]},"name":"abi_decode_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"571:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"582:5:17","type":""}],"src":"544:171:17"},{"body":{"nodeType":"YulBlock","src":"857:505:17","statements":[{"body":{"nodeType":"YulBlock","src":"903:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:17"},"nodeType":"YulFunctionCall","src":"905:12:17"},"nodeType":"YulExpressionStatement","src":"905:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"874:3:17"},"nodeType":"YulFunctionCall","src":"874:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"899:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"870:3:17"},"nodeType":"YulFunctionCall","src":"870:32:17"},"nodeType":"YulIf","src":"867:52:17"},{"nodeType":"YulVariableDeclaration","src":"928:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"941:12:17"},"nodeType":"YulFunctionCall","src":"941:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"932:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"998:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"973:24:17"},"nodeType":"YulFunctionCall","src":"973:31:17"},"nodeType":"YulExpressionStatement","src":"973:31:17"},{"nodeType":"YulAssignment","src":"1013:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"1023:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1013:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"1037:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1068:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1079:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1064:3:17"},"nodeType":"YulFunctionCall","src":"1064:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1051:12:17"},"nodeType":"YulFunctionCall","src":"1051:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1041:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1126:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1135:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1138:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1128:6:17"},"nodeType":"YulFunctionCall","src":"1128:12:17"},"nodeType":"YulExpressionStatement","src":"1128:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1098:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1106:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1095:2:17"},"nodeType":"YulFunctionCall","src":"1095:30:17"},"nodeType":"YulIf","src":"1092:50:17"},{"nodeType":"YulVariableDeclaration","src":"1151:95:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:17"},"nodeType":"YulFunctionCall","src":"1214:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1238:7:17"}],"functionName":{"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulIdentifier","src":"1177:36:17"},"nodeType":"YulFunctionCall","src":"1177:69:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"1155:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"1165:8:17","type":""}]},{"nodeType":"YulAssignment","src":"1255:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1265:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1255:6:17"}]},{"nodeType":"YulAssignment","src":"1282:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1292:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1282:6:17"}]},{"nodeType":"YulAssignment","src":"1309:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1341:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1352:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1337:3:17"},"nodeType":"YulFunctionCall","src":"1337:18:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"1319:17:17"},"nodeType":"YulFunctionCall","src":"1319:37:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1309:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"799:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"810:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"822:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"830:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"838:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"846:6:17","type":""}],"src":"720:642:17"},{"body":{"nodeType":"YulBlock","src":"1436:115:17","statements":[{"body":{"nodeType":"YulBlock","src":"1482:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1491:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:17"},"nodeType":"YulFunctionCall","src":"1484:12:17"},"nodeType":"YulExpressionStatement","src":"1484:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1457:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1466:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1453:3:17"},"nodeType":"YulFunctionCall","src":"1453:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1478:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1449:3:17"},"nodeType":"YulFunctionCall","src":"1449:32:17"},"nodeType":"YulIf","src":"1446:52:17"},{"nodeType":"YulAssignment","src":"1507:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"1517:17:17"},"nodeType":"YulFunctionCall","src":"1517:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1507:6:17"}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1402:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1413:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1425:6:17","type":""}],"src":"1367:184:17"},{"body":{"nodeType":"YulBlock","src":"1655:101:17","statements":[{"nodeType":"YulAssignment","src":"1665:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1677:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1688:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1673:3:17"},"nodeType":"YulFunctionCall","src":"1673:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1665:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1707:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1722:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1730:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1718:3:17"},"nodeType":"YulFunctionCall","src":"1718:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1700:6:17"},"nodeType":"YulFunctionCall","src":"1700:50:17"},"nodeType":"YulExpressionStatement","src":"1700:50:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1624:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1635:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1646:4:17","type":""}],"src":"1556:200:17"},{"body":{"nodeType":"YulBlock","src":"1831:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"1877:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1889:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1879:6:17"},"nodeType":"YulFunctionCall","src":"1879:12:17"},"nodeType":"YulExpressionStatement","src":"1879:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1852:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1861:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1848:3:17"},"nodeType":"YulFunctionCall","src":"1848:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1873:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1844:3:17"},"nodeType":"YulFunctionCall","src":"1844:32:17"},"nodeType":"YulIf","src":"1841:52:17"},{"nodeType":"YulAssignment","src":"1902:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1925:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1912:12:17"},"nodeType":"YulFunctionCall","src":"1912:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1902:6:17"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1797:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1808:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1820:6:17","type":""}],"src":"1761:180:17"},{"body":{"nodeType":"YulBlock","src":"2045:93:17","statements":[{"nodeType":"YulAssignment","src":"2055:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2067:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2078:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2063:3:17"},"nodeType":"YulFunctionCall","src":"2063:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2055:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2097:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2112:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2120:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2108:3:17"},"nodeType":"YulFunctionCall","src":"2108:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2090:6:17"},"nodeType":"YulFunctionCall","src":"2090:42:17"},"nodeType":"YulExpressionStatement","src":"2090:42:17"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2014:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2025:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2036:4:17","type":""}],"src":"1946:192:17"},{"body":{"nodeType":"YulBlock","src":"2185:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"2239:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2248:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2251:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2241:6:17"},"nodeType":"YulFunctionCall","src":"2241:12:17"},"nodeType":"YulExpressionStatement","src":"2241:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2208:5:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2229:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2222:6:17"},"nodeType":"YulFunctionCall","src":"2222:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2215:6:17"},"nodeType":"YulFunctionCall","src":"2215:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2205:2:17"},"nodeType":"YulFunctionCall","src":"2205:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2198:6:17"},"nodeType":"YulFunctionCall","src":"2198:40:17"},"nodeType":"YulIf","src":"2195:60:17"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2174:5:17","type":""}],"src":"2143:118:17"},{"body":{"nodeType":"YulBlock","src":"2350:298:17","statements":[{"body":{"nodeType":"YulBlock","src":"2396:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2405:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2408:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2398:6:17"},"nodeType":"YulFunctionCall","src":"2398:12:17"},"nodeType":"YulExpressionStatement","src":"2398:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2371:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2380:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2367:3:17"},"nodeType":"YulFunctionCall","src":"2367:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2392:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2363:3:17"},"nodeType":"YulFunctionCall","src":"2363:32:17"},"nodeType":"YulIf","src":"2360:52:17"},{"nodeType":"YulVariableDeclaration","src":"2421:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2447:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2434:12:17"},"nodeType":"YulFunctionCall","src":"2434:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2425:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2491:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2466:24:17"},"nodeType":"YulFunctionCall","src":"2466:31:17"},"nodeType":"YulExpressionStatement","src":"2466:31:17"},{"nodeType":"YulAssignment","src":"2506:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"2516:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2506:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2530:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2562:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2573:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2558:3:17"},"nodeType":"YulFunctionCall","src":"2558:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2545:12:17"},"nodeType":"YulFunctionCall","src":"2545:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2534:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2608:7:17"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"2586:21:17"},"nodeType":"YulFunctionCall","src":"2586:30:17"},"nodeType":"YulExpressionStatement","src":"2586:30:17"},{"nodeType":"YulAssignment","src":"2625:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2635:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2625:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2308:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2319:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2331:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2339:6:17","type":""}],"src":"2266:382:17"},{"body":{"nodeType":"YulBlock","src":"2740:301:17","statements":[{"body":{"nodeType":"YulBlock","src":"2786:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2795:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2798:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2788:6:17"},"nodeType":"YulFunctionCall","src":"2788:12:17"},"nodeType":"YulExpressionStatement","src":"2788:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2761:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2770:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2757:3:17"},"nodeType":"YulFunctionCall","src":"2757:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2782:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2753:3:17"},"nodeType":"YulFunctionCall","src":"2753:32:17"},"nodeType":"YulIf","src":"2750:52:17"},{"nodeType":"YulVariableDeclaration","src":"2811:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2837:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2824:12:17"},"nodeType":"YulFunctionCall","src":"2824:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2815:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2881:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2856:24:17"},"nodeType":"YulFunctionCall","src":"2856:31:17"},"nodeType":"YulExpressionStatement","src":"2856:31:17"},{"nodeType":"YulAssignment","src":"2896:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"2906:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2896:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2920:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2952:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2963:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2948:3:17"},"nodeType":"YulFunctionCall","src":"2948:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2935:12:17"},"nodeType":"YulFunctionCall","src":"2935:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2924:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3001:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2976:24:17"},"nodeType":"YulFunctionCall","src":"2976:33:17"},"nodeType":"YulExpressionStatement","src":"2976:33:17"},{"nodeType":"YulAssignment","src":"3018:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3028:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3018:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2698:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2709:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2721:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2729:6:17","type":""}],"src":"2653:388:17"},{"body":{"nodeType":"YulBlock","src":"3118:275:17","statements":[{"body":{"nodeType":"YulBlock","src":"3167:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3176:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3179:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3169:6:17"},"nodeType":"YulFunctionCall","src":"3169:12:17"},"nodeType":"YulExpressionStatement","src":"3169:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3146:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3154:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3142:3:17"},"nodeType":"YulFunctionCall","src":"3142:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"3161:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3138:3:17"},"nodeType":"YulFunctionCall","src":"3138:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3131:6:17"},"nodeType":"YulFunctionCall","src":"3131:35:17"},"nodeType":"YulIf","src":"3128:55:17"},{"nodeType":"YulAssignment","src":"3192:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3215:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3202:12:17"},"nodeType":"YulFunctionCall","src":"3202:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3192:6:17"}]},{"body":{"nodeType":"YulBlock","src":"3265:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3277:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3267:6:17"},"nodeType":"YulFunctionCall","src":"3267:12:17"},"nodeType":"YulExpressionStatement","src":"3267:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3237:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3245:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3234:2:17"},"nodeType":"YulFunctionCall","src":"3234:30:17"},"nodeType":"YulIf","src":"3231:50:17"},{"nodeType":"YulAssignment","src":"3290:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3306:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3314:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3302:3:17"},"nodeType":"YulFunctionCall","src":"3302:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3290:8:17"}]},{"body":{"nodeType":"YulBlock","src":"3371:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3380:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3383:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3373:6:17"},"nodeType":"YulFunctionCall","src":"3373:12:17"},"nodeType":"YulExpressionStatement","src":"3373:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3342:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"3350:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3338:3:17"},"nodeType":"YulFunctionCall","src":"3338:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"3359:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3334:3:17"},"nodeType":"YulFunctionCall","src":"3334:30:17"},{"name":"end","nodeType":"YulIdentifier","src":"3366:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3331:2:17"},"nodeType":"YulFunctionCall","src":"3331:39:17"},"nodeType":"YulIf","src":"3328:59:17"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3081:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3089:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"3097:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"3107:6:17","type":""}],"src":"3046:347:17"},{"body":{"nodeType":"YulBlock","src":"3504:438:17","statements":[{"body":{"nodeType":"YulBlock","src":"3550:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3559:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3562:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3552:6:17"},"nodeType":"YulFunctionCall","src":"3552:12:17"},"nodeType":"YulExpressionStatement","src":"3552:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3525:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3534:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3521:3:17"},"nodeType":"YulFunctionCall","src":"3521:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3546:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3517:3:17"},"nodeType":"YulFunctionCall","src":"3517:32:17"},"nodeType":"YulIf","src":"3514:52:17"},{"nodeType":"YulVariableDeclaration","src":"3575:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3601:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3588:12:17"},"nodeType":"YulFunctionCall","src":"3588:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3579:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3645:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3620:24:17"},"nodeType":"YulFunctionCall","src":"3620:31:17"},"nodeType":"YulExpressionStatement","src":"3620:31:17"},{"nodeType":"YulAssignment","src":"3660:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"3670:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3660:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"3684:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3715:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3726:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3711:3:17"},"nodeType":"YulFunctionCall","src":"3711:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3698:12:17"},"nodeType":"YulFunctionCall","src":"3698:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3688:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3773:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3782:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3785:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3775:6:17"},"nodeType":"YulFunctionCall","src":"3775:12:17"},"nodeType":"YulExpressionStatement","src":"3775:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3745:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3753:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3742:2:17"},"nodeType":"YulFunctionCall","src":"3742:30:17"},"nodeType":"YulIf","src":"3739:50:17"},{"nodeType":"YulVariableDeclaration","src":"3798:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3854:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"3865:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3850:3:17"},"nodeType":"YulFunctionCall","src":"3850:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3874:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"3824:25:17"},"nodeType":"YulFunctionCall","src":"3824:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"3802:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"3812:8:17","type":""}]},{"nodeType":"YulAssignment","src":"3891:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3901:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3891:6:17"}]},{"nodeType":"YulAssignment","src":"3918:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3928:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3918:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3454:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3465:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3477:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3485:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3493:6:17","type":""}],"src":"3398:544:17"},{"body":{"nodeType":"YulBlock","src":"4048:76:17","statements":[{"nodeType":"YulAssignment","src":"4058:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4070:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4081:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4066:3:17"},"nodeType":"YulFunctionCall","src":"4066:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4058:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4100:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"4111:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4093:6:17"},"nodeType":"YulFunctionCall","src":"4093:25:17"},"nodeType":"YulExpressionStatement","src":"4093:25:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4017:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4028:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4039:4:17","type":""}],"src":"3947:177:17"},{"body":{"nodeType":"YulBlock","src":"4230:125:17","statements":[{"nodeType":"YulAssignment","src":"4240:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4252:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4263:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4248:3:17"},"nodeType":"YulFunctionCall","src":"4248:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4240:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4282:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4297:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4305:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4293:3:17"},"nodeType":"YulFunctionCall","src":"4293:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4275:6:17"},"nodeType":"YulFunctionCall","src":"4275:74:17"},"nodeType":"YulExpressionStatement","src":"4275:74:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4199:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4210:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4221:4:17","type":""}],"src":"4129:226:17"},{"body":{"nodeType":"YulBlock","src":"4408:115:17","statements":[{"nodeType":"YulAssignment","src":"4418:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4440:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4427:12:17"},"nodeType":"YulFunctionCall","src":"4427:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4418:5:17"}]},{"body":{"nodeType":"YulBlock","src":"4501:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4510:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4513:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4503:6:17"},"nodeType":"YulFunctionCall","src":"4503:12:17"},"nodeType":"YulExpressionStatement","src":"4503:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4469:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4480:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"4487:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4476:3:17"},"nodeType":"YulFunctionCall","src":"4476:22:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4466:2:17"},"nodeType":"YulFunctionCall","src":"4466:33:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4459:6:17"},"nodeType":"YulFunctionCall","src":"4459:41:17"},"nodeType":"YulIf","src":"4456:61:17"}]},"name":"abi_decode_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4387:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4398:5:17","type":""}],"src":"4360:163:17"},{"body":{"nodeType":"YulBlock","src":"4630:289:17","statements":[{"body":{"nodeType":"YulBlock","src":"4676:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4685:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4688:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4678:6:17"},"nodeType":"YulFunctionCall","src":"4678:12:17"},"nodeType":"YulExpressionStatement","src":"4678:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4651:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4660:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4647:3:17"},"nodeType":"YulFunctionCall","src":"4647:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4672:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4643:3:17"},"nodeType":"YulFunctionCall","src":"4643:32:17"},"nodeType":"YulIf","src":"4640:52:17"},{"nodeType":"YulAssignment","src":"4701:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4729:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"4711:17:17"},"nodeType":"YulFunctionCall","src":"4711:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4701:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4748:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4778:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4789:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4774:3:17"},"nodeType":"YulFunctionCall","src":"4774:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4761:12:17"},"nodeType":"YulFunctionCall","src":"4761:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4752:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4827:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4802:24:17"},"nodeType":"YulFunctionCall","src":"4802:31:17"},"nodeType":"YulExpressionStatement","src":"4802:31:17"},{"nodeType":"YulAssignment","src":"4842:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"4852:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4842:6:17"}]},{"nodeType":"YulAssignment","src":"4866:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4909:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:17"},"nodeType":"YulFunctionCall","src":"4894:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"4876:17:17"},"nodeType":"YulFunctionCall","src":"4876:37:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4866:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_addresst_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4580:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4591:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4603:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4611:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4619:6:17","type":""}],"src":"4528:391:17"},{"body":{"nodeType":"YulBlock","src":"5011:228:17","statements":[{"body":{"nodeType":"YulBlock","src":"5057:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5066:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5069:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5059:6:17"},"nodeType":"YulFunctionCall","src":"5059:12:17"},"nodeType":"YulExpressionStatement","src":"5059:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5032:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5041:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5028:3:17"},"nodeType":"YulFunctionCall","src":"5028:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5053:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5024:3:17"},"nodeType":"YulFunctionCall","src":"5024:32:17"},"nodeType":"YulIf","src":"5021:52:17"},{"nodeType":"YulVariableDeclaration","src":"5082:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5108:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5095:12:17"},"nodeType":"YulFunctionCall","src":"5095:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5086:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5152:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5127:24:17"},"nodeType":"YulFunctionCall","src":"5127:31:17"},"nodeType":"YulExpressionStatement","src":"5127:31:17"},{"nodeType":"YulAssignment","src":"5167:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"5177:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5167:6:17"}]},{"nodeType":"YulAssignment","src":"5191:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5218:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5229:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5214:3:17"},"nodeType":"YulFunctionCall","src":"5214:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5201:12:17"},"nodeType":"YulFunctionCall","src":"5201:32:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5191:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4969:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4980:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4992:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5000:6:17","type":""}],"src":"4924:315:17"},{"body":{"nodeType":"YulBlock","src":"5339:92:17","statements":[{"nodeType":"YulAssignment","src":"5349:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5361:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5372:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5357:3:17"},"nodeType":"YulFunctionCall","src":"5357:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5349:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5391:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5416:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5409:6:17"},"nodeType":"YulFunctionCall","src":"5409:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5402:6:17"},"nodeType":"YulFunctionCall","src":"5402:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5384:6:17"},"nodeType":"YulFunctionCall","src":"5384:41:17"},"nodeType":"YulExpressionStatement","src":"5384:41:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5308:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5319:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5330:4:17","type":""}],"src":"5244:187:17"},{"body":{"nodeType":"YulBlock","src":"5506:177:17","statements":[{"body":{"nodeType":"YulBlock","src":"5552:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5561:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5564:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5554:6:17"},"nodeType":"YulFunctionCall","src":"5554:12:17"},"nodeType":"YulExpressionStatement","src":"5554:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5527:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5536:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5523:3:17"},"nodeType":"YulFunctionCall","src":"5523:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5548:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5519:3:17"},"nodeType":"YulFunctionCall","src":"5519:32:17"},"nodeType":"YulIf","src":"5516:52:17"},{"nodeType":"YulVariableDeclaration","src":"5577:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5603:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5590:12:17"},"nodeType":"YulFunctionCall","src":"5590:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5581:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5647:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5622:24:17"},"nodeType":"YulFunctionCall","src":"5622:31:17"},"nodeType":"YulExpressionStatement","src":"5622:31:17"},{"nodeType":"YulAssignment","src":"5662:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"5672:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5662:6:17"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5472:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5483:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5495:6:17","type":""}],"src":"5436:247:17"},{"body":{"nodeType":"YulBlock","src":"5774:233:17","statements":[{"body":{"nodeType":"YulBlock","src":"5820:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5829:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5832:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5822:6:17"},"nodeType":"YulFunctionCall","src":"5822:12:17"},"nodeType":"YulExpressionStatement","src":"5822:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5795:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5804:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5791:3:17"},"nodeType":"YulFunctionCall","src":"5791:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5816:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5787:3:17"},"nodeType":"YulFunctionCall","src":"5787:32:17"},"nodeType":"YulIf","src":"5784:52:17"},{"nodeType":"YulAssignment","src":"5845:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5873:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"5855:17:17"},"nodeType":"YulFunctionCall","src":"5855:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5845:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"5892:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5922:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5933:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5918:3:17"},"nodeType":"YulFunctionCall","src":"5918:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5905:12:17"},"nodeType":"YulFunctionCall","src":"5905:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5896:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5971:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5946:24:17"},"nodeType":"YulFunctionCall","src":"5946:31:17"},"nodeType":"YulExpressionStatement","src":"5946:31:17"},{"nodeType":"YulAssignment","src":"5986:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"5996:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5986:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5732:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5743:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5755:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5763:6:17","type":""}],"src":"5688:319:17"},{"body":{"nodeType":"YulBlock","src":"6189:304:17","statements":[{"nodeType":"YulAssignment","src":"6199:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6211:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6222:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6207:3:17"},"nodeType":"YulFunctionCall","src":"6207:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6199:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"6235:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6245:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6239:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6275:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6290:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6298:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6286:3:17"},"nodeType":"YulFunctionCall","src":"6286:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6268:6:17"},"nodeType":"YulFunctionCall","src":"6268:34:17"},"nodeType":"YulExpressionStatement","src":"6268:34:17"},{"nodeType":"YulVariableDeclaration","src":"6311:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6321:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6315:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6351:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6362:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6347:3:17"},"nodeType":"YulFunctionCall","src":"6347:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6371:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"6379:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6367:3:17"},"nodeType":"YulFunctionCall","src":"6367:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6340:6:17"},"nodeType":"YulFunctionCall","src":"6340:43:17"},"nodeType":"YulExpressionStatement","src":"6340:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6403:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6414:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6399:3:17"},"nodeType":"YulFunctionCall","src":"6399:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6423:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"6431:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6419:3:17"},"nodeType":"YulFunctionCall","src":"6419:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6392:6:17"},"nodeType":"YulFunctionCall","src":"6392:43:17"},"nodeType":"YulExpressionStatement","src":"6392:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6455:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6466:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6451:3:17"},"nodeType":"YulFunctionCall","src":"6451:18:17"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6475:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6483:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6471:3:17"},"nodeType":"YulFunctionCall","src":"6471:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6444:6:17"},"nodeType":"YulFunctionCall","src":"6444:43:17"},"nodeType":"YulExpressionStatement","src":"6444:43:17"}]},"name":"abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6134:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6145:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6153:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6161:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6169:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6180:4:17","type":""}],"src":"6012:481:17"},{"body":{"nodeType":"YulBlock","src":"6583:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"6629:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6638:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6641:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6631:6:17"},"nodeType":"YulFunctionCall","src":"6631:12:17"},"nodeType":"YulExpressionStatement","src":"6631:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6604:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6613:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6600:3:17"},"nodeType":"YulFunctionCall","src":"6600:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6625:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6596:3:17"},"nodeType":"YulFunctionCall","src":"6596:32:17"},"nodeType":"YulIf","src":"6593:52:17"},{"nodeType":"YulAssignment","src":"6654:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6682:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"6664:17:17"},"nodeType":"YulFunctionCall","src":"6664:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6654:6:17"}]},{"nodeType":"YulAssignment","src":"6701:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6733:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6744:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6729:3:17"},"nodeType":"YulFunctionCall","src":"6729:18:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"6711:17:17"},"nodeType":"YulFunctionCall","src":"6711:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6701:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6541:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6552:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6564:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6572:6:17","type":""}],"src":"6498:256:17"},{"body":{"nodeType":"YulBlock","src":"6829:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"6875:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6884:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6887:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6877:6:17"},"nodeType":"YulFunctionCall","src":"6877:12:17"},"nodeType":"YulExpressionStatement","src":"6877:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6850:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6859:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6846:3:17"},"nodeType":"YulFunctionCall","src":"6846:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6871:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6842:3:17"},"nodeType":"YulFunctionCall","src":"6842:32:17"},"nodeType":"YulIf","src":"6839:52:17"},{"nodeType":"YulAssignment","src":"6900:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6923:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6910:12:17"},"nodeType":"YulFunctionCall","src":"6910:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6900:6:17"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6795:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6806:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6818:6:17","type":""}],"src":"6759:180:17"},{"body":{"nodeType":"YulBlock","src":"7043:97:17","statements":[{"nodeType":"YulAssignment","src":"7053:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7065:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7076:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7061:3:17"},"nodeType":"YulFunctionCall","src":"7061:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7053:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7095:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7110:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7118:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7106:3:17"},"nodeType":"YulFunctionCall","src":"7106:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7088:6:17"},"nodeType":"YulFunctionCall","src":"7088:46:17"},"nodeType":"YulExpressionStatement","src":"7088:46:17"}]},"name":"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7012:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7023:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7034:4:17","type":""}],"src":"6944:196:17"},{"body":{"nodeType":"YulBlock","src":"7240:301:17","statements":[{"body":{"nodeType":"YulBlock","src":"7286:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7295:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7298:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7288:6:17"},"nodeType":"YulFunctionCall","src":"7288:12:17"},"nodeType":"YulExpressionStatement","src":"7288:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7261:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7270:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7257:3:17"},"nodeType":"YulFunctionCall","src":"7257:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7282:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7253:3:17"},"nodeType":"YulFunctionCall","src":"7253:32:17"},"nodeType":"YulIf","src":"7250:52:17"},{"nodeType":"YulVariableDeclaration","src":"7311:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7337:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7324:12:17"},"nodeType":"YulFunctionCall","src":"7324:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7315:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7381:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7356:24:17"},"nodeType":"YulFunctionCall","src":"7356:31:17"},"nodeType":"YulExpressionStatement","src":"7356:31:17"},{"nodeType":"YulAssignment","src":"7396:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"7406:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7396:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"7420:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7452:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7463:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7448:3:17"},"nodeType":"YulFunctionCall","src":"7448:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7435:12:17"},"nodeType":"YulFunctionCall","src":"7435:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7424:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"7501:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7476:24:17"},"nodeType":"YulFunctionCall","src":"7476:33:17"},"nodeType":"YulExpressionStatement","src":"7476:33:17"},{"nodeType":"YulAssignment","src":"7518:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"7528:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7518:6:17"}]}]},"name":"abi_decode_tuple_t_address_payablet_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7198:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7209:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7221:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7229:6:17","type":""}],"src":"7145:396:17"},{"body":{"nodeType":"YulBlock","src":"7590:87:17","statements":[{"body":{"nodeType":"YulBlock","src":"7655:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7664:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7667:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7657:6:17"},"nodeType":"YulFunctionCall","src":"7657:12:17"},"nodeType":"YulExpressionStatement","src":"7657:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7613:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7624:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7635:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7640:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7631:3:17"},"nodeType":"YulFunctionCall","src":"7631:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7620:3:17"},"nodeType":"YulFunctionCall","src":"7620:32:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7610:2:17"},"nodeType":"YulFunctionCall","src":"7610:43:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7603:6:17"},"nodeType":"YulFunctionCall","src":"7603:51:17"},"nodeType":"YulIf","src":"7600:71:17"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7579:5:17","type":""}],"src":"7546:131:17"},{"body":{"nodeType":"YulBlock","src":"7768:300:17","statements":[{"body":{"nodeType":"YulBlock","src":"7814:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7823:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7826:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7816:6:17"},"nodeType":"YulFunctionCall","src":"7816:12:17"},"nodeType":"YulExpressionStatement","src":"7816:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7789:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7798:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7785:3:17"},"nodeType":"YulFunctionCall","src":"7785:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7810:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7781:3:17"},"nodeType":"YulFunctionCall","src":"7781:32:17"},"nodeType":"YulIf","src":"7778:52:17"},{"nodeType":"YulVariableDeclaration","src":"7839:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7865:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7852:12:17"},"nodeType":"YulFunctionCall","src":"7852:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7843:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7909:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7884:24:17"},"nodeType":"YulFunctionCall","src":"7884:31:17"},"nodeType":"YulExpressionStatement","src":"7884:31:17"},{"nodeType":"YulAssignment","src":"7924:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"7934:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7924:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"7948:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7980:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7991:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7976:3:17"},"nodeType":"YulFunctionCall","src":"7976:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7963:12:17"},"nodeType":"YulFunctionCall","src":"7963:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7952:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"8028:7:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"8004:23:17"},"nodeType":"YulFunctionCall","src":"8004:32:17"},"nodeType":"YulExpressionStatement","src":"8004:32:17"},{"nodeType":"YulAssignment","src":"8045:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"8055:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8045:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7726:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7737:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7749:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7757:6:17","type":""}],"src":"7682:386:17"},{"body":{"nodeType":"YulBlock","src":"8179:376:17","statements":[{"body":{"nodeType":"YulBlock","src":"8225:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8234:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8237:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8227:6:17"},"nodeType":"YulFunctionCall","src":"8227:12:17"},"nodeType":"YulExpressionStatement","src":"8227:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8200:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8209:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8196:3:17"},"nodeType":"YulFunctionCall","src":"8196:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8221:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8192:3:17"},"nodeType":"YulFunctionCall","src":"8192:32:17"},"nodeType":"YulIf","src":"8189:52:17"},{"nodeType":"YulAssignment","src":"8250:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8278:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"8260:17:17"},"nodeType":"YulFunctionCall","src":"8260:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8250:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"8297:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8328:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8339:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8324:3:17"},"nodeType":"YulFunctionCall","src":"8324:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8311:12:17"},"nodeType":"YulFunctionCall","src":"8311:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8301:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8386:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8395:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8398:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8388:6:17"},"nodeType":"YulFunctionCall","src":"8388:12:17"},"nodeType":"YulExpressionStatement","src":"8388:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8358:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8366:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8355:2:17"},"nodeType":"YulFunctionCall","src":"8355:30:17"},"nodeType":"YulIf","src":"8352:50:17"},{"nodeType":"YulVariableDeclaration","src":"8411:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8467:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8478:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8463:3:17"},"nodeType":"YulFunctionCall","src":"8463:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8487:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8437:25:17"},"nodeType":"YulFunctionCall","src":"8437:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"8415:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"8425:8:17","type":""}]},{"nodeType":"YulAssignment","src":"8504:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"8514:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8504:6:17"}]},{"nodeType":"YulAssignment","src":"8531:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8541:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8531:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8129:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8140:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8152:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8160:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8168:6:17","type":""}],"src":"8073:482:17"},{"body":{"nodeType":"YulBlock","src":"8645:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"8691:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8700:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8703:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8693:6:17"},"nodeType":"YulFunctionCall","src":"8693:12:17"},"nodeType":"YulExpressionStatement","src":"8693:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8666:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8675:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8662:3:17"},"nodeType":"YulFunctionCall","src":"8662:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8687:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8658:3:17"},"nodeType":"YulFunctionCall","src":"8658:32:17"},"nodeType":"YulIf","src":"8655:52:17"},{"nodeType":"YulAssignment","src":"8716:38:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8744:9:17"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"8726:17:17"},"nodeType":"YulFunctionCall","src":"8726:28:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8716:6:17"}]},{"nodeType":"YulAssignment","src":"8763:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8795:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8806:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8791:3:17"},"nodeType":"YulFunctionCall","src":"8791:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"8773:17:17"},"nodeType":"YulFunctionCall","src":"8773:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8763:6:17"}]}]},"name":"abi_decode_tuple_t_uint64t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8603:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8614:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8626:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8634:6:17","type":""}],"src":"8560:256:17"},{"body":{"nodeType":"YulBlock","src":"8944:562:17","statements":[{"body":{"nodeType":"YulBlock","src":"8990:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8999:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9002:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8992:6:17"},"nodeType":"YulFunctionCall","src":"8992:12:17"},"nodeType":"YulExpressionStatement","src":"8992:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8965:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8974:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8961:3:17"},"nodeType":"YulFunctionCall","src":"8961:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8986:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8957:3:17"},"nodeType":"YulFunctionCall","src":"8957:32:17"},"nodeType":"YulIf","src":"8954:52:17"},{"nodeType":"YulVariableDeclaration","src":"9015:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9041:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9028:12:17"},"nodeType":"YulFunctionCall","src":"9028:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9019:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9085:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9060:24:17"},"nodeType":"YulFunctionCall","src":"9060:31:17"},"nodeType":"YulExpressionStatement","src":"9060:31:17"},{"nodeType":"YulAssignment","src":"9100:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"9110:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9100:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"9124:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9156:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9167:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9152:3:17"},"nodeType":"YulFunctionCall","src":"9152:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9139:12:17"},"nodeType":"YulFunctionCall","src":"9139:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"9128:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9205:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9180:24:17"},"nodeType":"YulFunctionCall","src":"9180:33:17"},"nodeType":"YulExpressionStatement","src":"9180:33:17"},{"nodeType":"YulAssignment","src":"9222:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"9232:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9222:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"9248:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9279:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9290:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9275:3:17"},"nodeType":"YulFunctionCall","src":"9275:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9262:12:17"},"nodeType":"YulFunctionCall","src":"9262:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9252:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"9337:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9346:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9349:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9339:6:17"},"nodeType":"YulFunctionCall","src":"9339:12:17"},"nodeType":"YulExpressionStatement","src":"9339:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9309:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9317:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9306:2:17"},"nodeType":"YulFunctionCall","src":"9306:30:17"},"nodeType":"YulIf","src":"9303:50:17"},{"nodeType":"YulVariableDeclaration","src":"9362:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9418:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"9429:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9414:3:17"},"nodeType":"YulFunctionCall","src":"9414:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9438:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"9388:25:17"},"nodeType":"YulFunctionCall","src":"9388:58:17"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"9366:8:17","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"9376:8:17","type":""}]},{"nodeType":"YulAssignment","src":"9455:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"9465:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9455:6:17"}]},{"nodeType":"YulAssignment","src":"9482:18:17","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"9492:8:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9482:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8886:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8897:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8909:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8917:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8925:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8933:6:17","type":""}],"src":"8821:685:17"},{"body":{"nodeType":"YulBlock","src":"9612:76:17","statements":[{"nodeType":"YulAssignment","src":"9622:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9634:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9645:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9630:3:17"},"nodeType":"YulFunctionCall","src":"9630:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9622:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9664:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"9675:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9657:6:17"},"nodeType":"YulFunctionCall","src":"9657:25:17"},"nodeType":"YulExpressionStatement","src":"9657:25:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9581:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9592:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9603:4:17","type":""}],"src":"9511:177:17"},{"body":{"nodeType":"YulBlock","src":"9809:331:17","statements":[{"body":{"nodeType":"YulBlock","src":"9855:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9864:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9867:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9857:6:17"},"nodeType":"YulFunctionCall","src":"9857:12:17"},"nodeType":"YulExpressionStatement","src":"9857:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9830:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"9839:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9826:3:17"},"nodeType":"YulFunctionCall","src":"9826:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"9851:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9822:3:17"},"nodeType":"YulFunctionCall","src":"9822:32:17"},"nodeType":"YulIf","src":"9819:52:17"},{"nodeType":"YulVariableDeclaration","src":"9880:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9907:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9894:12:17"},"nodeType":"YulFunctionCall","src":"9894:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9884:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"9960:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9969:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9972:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9962:6:17"},"nodeType":"YulFunctionCall","src":"9962:12:17"},"nodeType":"YulExpressionStatement","src":"9962:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9932:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9940:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9929:2:17"},"nodeType":"YulFunctionCall","src":"9929:30:17"},"nodeType":"YulIf","src":"9926:50:17"},{"nodeType":"YulVariableDeclaration","src":"9985:95:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10052:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"10063:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10048:3:17"},"nodeType":"YulFunctionCall","src":"10048:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10072:7:17"}],"functionName":{"name":"abi_decode_array_bytes4_dyn_calldata","nodeType":"YulIdentifier","src":"10011:36:17"},"nodeType":"YulFunctionCall","src":"10011:69:17"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"9989:8:17","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"9999:8:17","type":""}]},{"nodeType":"YulAssignment","src":"10089:18:17","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"10099:8:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10089:6:17"}]},{"nodeType":"YulAssignment","src":"10116:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"10126:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10116:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9767:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9778:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9790:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9798:6:17","type":""}],"src":"9693:447:17"},{"body":{"nodeType":"YulBlock","src":"10211:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10221:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10230:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10225:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10290:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10315:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"10320:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10311:3:17"},"nodeType":"YulFunctionCall","src":"10311:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10334:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"10339:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10330:3:17"},"nodeType":"YulFunctionCall","src":"10330:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10324:5:17"},"nodeType":"YulFunctionCall","src":"10324:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10304:6:17"},"nodeType":"YulFunctionCall","src":"10304:39:17"},"nodeType":"YulExpressionStatement","src":"10304:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10251:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"10254:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10248:2:17"},"nodeType":"YulFunctionCall","src":"10248:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10262:19:17","statements":[{"nodeType":"YulAssignment","src":"10264:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10273:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"10276:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10269:3:17"},"nodeType":"YulFunctionCall","src":"10269:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10264:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"10244:3:17","statements":[]},"src":"10240:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10373:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"10378:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10369:3:17"},"nodeType":"YulFunctionCall","src":"10369:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"10387:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10362:6:17"},"nodeType":"YulFunctionCall","src":"10362:27:17"},"nodeType":"YulExpressionStatement","src":"10362:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10189:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10194:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"10199:6:17","type":""}],"src":"10145:250:17"},{"body":{"nodeType":"YulBlock","src":"10569:843:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10579:12:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10589:2:17","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10583:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10600:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10618:9:17"},{"name":"_1","nodeType":"YulIdentifier","src":"10629:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10614:3:17"},"nodeType":"YulFunctionCall","src":"10614:18:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"10604:6:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10648:9:17"},{"name":"_1","nodeType":"YulIdentifier","src":"10659:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10641:6:17"},"nodeType":"YulFunctionCall","src":"10641:21:17"},"nodeType":"YulExpressionStatement","src":"10641:21:17"},{"nodeType":"YulVariableDeclaration","src":"10671:17:17","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"10682:6:17"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"10675:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10697:27:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10717:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10711:5:17"},"nodeType":"YulFunctionCall","src":"10711:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:17","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10740:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"10748:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10733:6:17"},"nodeType":"YulFunctionCall","src":"10733:22:17"},"nodeType":"YulExpressionStatement","src":"10733:22:17"},{"nodeType":"YulAssignment","src":"10764:25:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10775:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10786:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10771:3:17"},"nodeType":"YulFunctionCall","src":"10771:18:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10764:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"10798:53:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10820:9:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10835:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10838:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10831:3:17"},"nodeType":"YulFunctionCall","src":"10831:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10816:3:17"},"nodeType":"YulFunctionCall","src":"10816:30:17"},{"kind":"number","nodeType":"YulLiteral","src":"10848:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10812:3:17"},"nodeType":"YulFunctionCall","src":"10812:39:17"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"10802:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10860:29:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10878:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"10886:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10874:3:17"},"nodeType":"YulFunctionCall","src":"10874:15:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10864:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10898:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10907:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10902:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10966:417:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10987:3:17"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11000:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11008:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10996:3:17"},"nodeType":"YulFunctionCall","src":"10996:22:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11024:2:17","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11020:3:17"},"nodeType":"YulFunctionCall","src":"11020:7:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10992:3:17"},"nodeType":"YulFunctionCall","src":"10992:36:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10980:6:17"},"nodeType":"YulFunctionCall","src":"10980:49:17"},"nodeType":"YulExpressionStatement","src":"10980:49:17"},{"nodeType":"YulVariableDeclaration","src":"11042:23:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11058:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11052:5:17"},"nodeType":"YulFunctionCall","src":"11052:13:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"11046:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11078:25:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11100:2:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11094:5:17"},"nodeType":"YulFunctionCall","src":"11094:9:17"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11082:8:17","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11123:6:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"11131:8:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11116:6:17"},"nodeType":"YulFunctionCall","src":"11116:24:17"},"nodeType":"YulExpressionStatement","src":"11116:24:17"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11192:2:17"},{"name":"_1","nodeType":"YulIdentifier","src":"11196:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11188:3:17"},"nodeType":"YulFunctionCall","src":"11188:11:17"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11205:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"11213:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11201:3:17"},"nodeType":"YulFunctionCall","src":"11201:15:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"11218:8:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11153:34:17"},"nodeType":"YulFunctionCall","src":"11153:74:17"},"nodeType":"YulExpressionStatement","src":"11153:74:17"},{"nodeType":"YulAssignment","src":"11240:63:17","value":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11258:6:17"},{"arguments":[{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"11274:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"11284:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11270:3:17"},"nodeType":"YulFunctionCall","src":"11270:17:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11293:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11289:3:17"},"nodeType":"YulFunctionCall","src":"11289:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11266:3:17"},"nodeType":"YulFunctionCall","src":"11266:31:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11254:3:17"},"nodeType":"YulFunctionCall","src":"11254:44:17"},{"name":"_1","nodeType":"YulIdentifier","src":"11300:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11250:3:17"},"nodeType":"YulFunctionCall","src":"11250:53:17"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11240:6:17"}]},{"nodeType":"YulAssignment","src":"11316:25:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11330:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"11338:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11326:3:17"},"nodeType":"YulFunctionCall","src":"11326:15:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11316:6:17"}]},{"nodeType":"YulAssignment","src":"11354:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"11370:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11361:3:17"},"nodeType":"YulFunctionCall","src":"11361:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11354:3:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10928:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"10931:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10925:2:17"},"nodeType":"YulFunctionCall","src":"10925:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10939:18:17","statements":[{"nodeType":"YulAssignment","src":"10941:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10950:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"10953:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10946:3:17"},"nodeType":"YulFunctionCall","src":"10946:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10941:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"10921:3:17","statements":[]},"src":"10917:466:17"},{"nodeType":"YulAssignment","src":"11392:14:17","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"11400:6:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11392:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10538:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10549:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10560:4:17","type":""}],"src":"10400:1012:17"},{"body":{"nodeType":"YulBlock","src":"11520:424:17","statements":[{"body":{"nodeType":"YulBlock","src":"11566:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11575:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11578:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11568:6:17"},"nodeType":"YulFunctionCall","src":"11568:12:17"},"nodeType":"YulExpressionStatement","src":"11568:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11541:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11550:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11537:3:17"},"nodeType":"YulFunctionCall","src":"11537:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"11562:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11533:3:17"},"nodeType":"YulFunctionCall","src":"11533:32:17"},"nodeType":"YulIf","src":"11530:52:17"},{"nodeType":"YulVariableDeclaration","src":"11591:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11617:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11604:12:17"},"nodeType":"YulFunctionCall","src":"11604:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11595:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11661:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11636:24:17"},"nodeType":"YulFunctionCall","src":"11636:31:17"},"nodeType":"YulExpressionStatement","src":"11636:31:17"},{"nodeType":"YulAssignment","src":"11676:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"11686:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11676:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"11700:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11732:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11743:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11728:3:17"},"nodeType":"YulFunctionCall","src":"11728:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11715:12:17"},"nodeType":"YulFunctionCall","src":"11715:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11704:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11781:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11756:24:17"},"nodeType":"YulFunctionCall","src":"11756:33:17"},"nodeType":"YulExpressionStatement","src":"11756:33:17"},{"nodeType":"YulAssignment","src":"11798:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11808:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11798:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"11824:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11856:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11867:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11852:3:17"},"nodeType":"YulFunctionCall","src":"11852:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11839:12:17"},"nodeType":"YulFunctionCall","src":"11839:32:17"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"11828:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"11904:7:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"11880:23:17"},"nodeType":"YulFunctionCall","src":"11880:32:17"},"nodeType":"YulExpressionStatement","src":"11880:32:17"},{"nodeType":"YulAssignment","src":"11921:17:17","value":{"name":"value_2","nodeType":"YulIdentifier","src":"11931:7:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11921:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11470:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11481:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11493:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11501:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11509:6:17","type":""}],"src":"11417:527:17"},{"body":{"nodeType":"YulBlock","src":"12070:152:17","statements":[{"nodeType":"YulAssignment","src":"12080:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12092:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12103:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12088:3:17"},"nodeType":"YulFunctionCall","src":"12088:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12080:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12122:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12147:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12140:6:17"},"nodeType":"YulFunctionCall","src":"12140:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12133:6:17"},"nodeType":"YulFunctionCall","src":"12133:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12115:6:17"},"nodeType":"YulFunctionCall","src":"12115:41:17"},"nodeType":"YulExpressionStatement","src":"12115:41:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12176:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12187:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:17"},"nodeType":"YulFunctionCall","src":"12172:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12196:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12204:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12192:3:17"},"nodeType":"YulFunctionCall","src":"12192:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12165:6:17"},"nodeType":"YulFunctionCall","src":"12165:51:17"},"nodeType":"YulExpressionStatement","src":"12165:51:17"}]},"name":"abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12031:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12042:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12050:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12061:4:17","type":""}],"src":"11949:273:17"},{"body":{"nodeType":"YulBlock","src":"12313:233:17","statements":[{"body":{"nodeType":"YulBlock","src":"12359:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12368:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12371:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12361:6:17"},"nodeType":"YulFunctionCall","src":"12361:12:17"},"nodeType":"YulExpressionStatement","src":"12361:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12334:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"12343:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12330:3:17"},"nodeType":"YulFunctionCall","src":"12330:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"12355:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12326:3:17"},"nodeType":"YulFunctionCall","src":"12326:32:17"},"nodeType":"YulIf","src":"12323:52:17"},{"nodeType":"YulVariableDeclaration","src":"12384:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12410:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12397:12:17"},"nodeType":"YulFunctionCall","src":"12397:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12388:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12454:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12429:24:17"},"nodeType":"YulFunctionCall","src":"12429:31:17"},"nodeType":"YulExpressionStatement","src":"12429:31:17"},{"nodeType":"YulAssignment","src":"12469:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"12479:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12469:6:17"}]},{"nodeType":"YulAssignment","src":"12493:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12525:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12536:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12521:3:17"},"nodeType":"YulFunctionCall","src":"12521:18:17"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"12503:17:17"},"nodeType":"YulFunctionCall","src":"12503:37:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12493:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12271:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12282:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12294:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12302:6:17","type":""}],"src":"12227:319:17"},{"body":{"nodeType":"YulBlock","src":"12680:168:17","statements":[{"nodeType":"YulAssignment","src":"12690:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12702:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12713:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12698:3:17"},"nodeType":"YulFunctionCall","src":"12698:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12690:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12732:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12747:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12755:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12743:3:17"},"nodeType":"YulFunctionCall","src":"12743:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12725:6:17"},"nodeType":"YulFunctionCall","src":"12725:74:17"},"nodeType":"YulExpressionStatement","src":"12725:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12819:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12830:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12815:3:17"},"nodeType":"YulFunctionCall","src":"12815:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"12835:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12808:6:17"},"nodeType":"YulFunctionCall","src":"12808:34:17"},"nodeType":"YulExpressionStatement","src":"12808:34:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12641:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12652:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12660:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12671:4:17","type":""}],"src":"12551:297:17"},{"body":{"nodeType":"YulBlock","src":"12975:598:17","statements":[{"body":{"nodeType":"YulBlock","src":"13021:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13030:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13033:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13023:6:17"},"nodeType":"YulFunctionCall","src":"13023:12:17"},"nodeType":"YulExpressionStatement","src":"13023:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12996:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13005:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12992:3:17"},"nodeType":"YulFunctionCall","src":"12992:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"13017:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12988:3:17"},"nodeType":"YulFunctionCall","src":"12988:32:17"},"nodeType":"YulIf","src":"12985:52:17"},{"nodeType":"YulVariableDeclaration","src":"13046:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13072:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13059:12:17"},"nodeType":"YulFunctionCall","src":"13059:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13050:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13116:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13091:24:17"},"nodeType":"YulFunctionCall","src":"13091:31:17"},"nodeType":"YulExpressionStatement","src":"13091:31:17"},{"nodeType":"YulAssignment","src":"13131:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13141:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13131:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"13155:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13186:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13197:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13182:3:17"},"nodeType":"YulFunctionCall","src":"13182:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13169:12:17"},"nodeType":"YulFunctionCall","src":"13169:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13159:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"13244:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13253:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13256:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13246:6:17"},"nodeType":"YulFunctionCall","src":"13246:12:17"},"nodeType":"YulExpressionStatement","src":"13246:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13216:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13224:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13213:2:17"},"nodeType":"YulFunctionCall","src":"13213:30:17"},"nodeType":"YulIf","src":"13210:50:17"},{"nodeType":"YulVariableDeclaration","src":"13269:84:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13325:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"13336:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13321:3:17"},"nodeType":"YulFunctionCall","src":"13321:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13345:7:17"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"13295:25:17"},"nodeType":"YulFunctionCall","src":"13295:58:17"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"13273:8:17","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"13283:8:17","type":""}]},{"nodeType":"YulAssignment","src":"13362:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"13372:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13362:6:17"}]},{"nodeType":"YulAssignment","src":"13389:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"13399:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"13389:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"13416:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13448:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13459:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13444:3:17"},"nodeType":"YulFunctionCall","src":"13444:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13431:12:17"},"nodeType":"YulFunctionCall","src":"13431:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"13420:7:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"13525:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13534:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13537:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13527:6:17"},"nodeType":"YulFunctionCall","src":"13527:12:17"},"nodeType":"YulExpressionStatement","src":"13527:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"13485:7:17"},{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"13498:7:17"},{"kind":"number","nodeType":"YulLiteral","src":"13507:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13494:3:17"},"nodeType":"YulFunctionCall","src":"13494:28:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13482:2:17"},"nodeType":"YulFunctionCall","src":"13482:41:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13475:6:17"},"nodeType":"YulFunctionCall","src":"13475:49:17"},"nodeType":"YulIf","src":"13472:69:17"},{"nodeType":"YulAssignment","src":"13550:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"13560:7:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"13550:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12917:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12928:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12940:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12948:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12956:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12964:6:17","type":""}],"src":"12853:720:17"},{"body":{"nodeType":"YulBlock","src":"13705:136:17","statements":[{"nodeType":"YulAssignment","src":"13715:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13727:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13738:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13723:3:17"},"nodeType":"YulFunctionCall","src":"13723:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13715:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13757:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"13768:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13750:6:17"},"nodeType":"YulFunctionCall","src":"13750:25:17"},"nodeType":"YulExpressionStatement","src":"13750:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13795:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13806:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13791:3:17"},"nodeType":"YulFunctionCall","src":"13791:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13815:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13823:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13811:3:17"},"nodeType":"YulFunctionCall","src":"13811:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13784:6:17"},"nodeType":"YulFunctionCall","src":"13784:51:17"},"nodeType":"YulExpressionStatement","src":"13784:51:17"}]},"name":"abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13666:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13677:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13685:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13696:4:17","type":""}],"src":"13578:263:17"},{"body":{"nodeType":"YulBlock","src":"13878:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13895:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13902:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13907:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13898:3:17"},"nodeType":"YulFunctionCall","src":"13898:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13888:6:17"},"nodeType":"YulFunctionCall","src":"13888:31:17"},"nodeType":"YulExpressionStatement","src":"13888:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13935:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13938:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13928:6:17"},"nodeType":"YulFunctionCall","src":"13928:15:17"},"nodeType":"YulExpressionStatement","src":"13928:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13959:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13962:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13952:6:17"},"nodeType":"YulFunctionCall","src":"13952:15:17"},"nodeType":"YulExpressionStatement","src":"13952:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"13846:127:17"},{"body":{"nodeType":"YulBlock","src":"14047:176:17","statements":[{"body":{"nodeType":"YulBlock","src":"14093:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14102:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14105:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14095:6:17"},"nodeType":"YulFunctionCall","src":"14095:12:17"},"nodeType":"YulExpressionStatement","src":"14095:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14068:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"14077:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14064:3:17"},"nodeType":"YulFunctionCall","src":"14064:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"14089:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14060:3:17"},"nodeType":"YulFunctionCall","src":"14060:32:17"},"nodeType":"YulIf","src":"14057:52:17"},{"nodeType":"YulVariableDeclaration","src":"14118:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14144:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14131:12:17"},"nodeType":"YulFunctionCall","src":"14131:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14122:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14187:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"14163:23:17"},"nodeType":"YulFunctionCall","src":"14163:30:17"},"nodeType":"YulExpressionStatement","src":"14163:30:17"},{"nodeType":"YulAssignment","src":"14202:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"14212:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14202:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14013:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14024:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14036:6:17","type":""}],"src":"13978:245:17"},{"body":{"nodeType":"YulBlock","src":"14260:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14277:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14284:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14289:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14280:3:17"},"nodeType":"YulFunctionCall","src":"14280:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14270:6:17"},"nodeType":"YulFunctionCall","src":"14270:31:17"},"nodeType":"YulExpressionStatement","src":"14270:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14317:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14320:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14310:6:17"},"nodeType":"YulFunctionCall","src":"14310:15:17"},"nodeType":"YulExpressionStatement","src":"14310:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14341:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14344:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14334:6:17"},"nodeType":"YulFunctionCall","src":"14334:15:17"},"nodeType":"YulExpressionStatement","src":"14334:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"14228:127:17"},{"body":{"nodeType":"YulBlock","src":"14407:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"14438:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14440:16:17"},"nodeType":"YulFunctionCall","src":"14440:18:17"},"nodeType":"YulExpressionStatement","src":"14440:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14423:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14434:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14430:3:17"},"nodeType":"YulFunctionCall","src":"14430:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14420:2:17"},"nodeType":"YulFunctionCall","src":"14420:17:17"},"nodeType":"YulIf","src":"14417:43:17"},{"nodeType":"YulAssignment","src":"14469:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14480:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14487:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14476:3:17"},"nodeType":"YulFunctionCall","src":"14476:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14469:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14389:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14399:3:17","type":""}],"src":"14360:135:17"},{"body":{"nodeType":"YulBlock","src":"14548:77:17","statements":[{"nodeType":"YulAssignment","src":"14558:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14569:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"14572:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14565:3:17"},"nodeType":"YulFunctionCall","src":"14565:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"14558:3:17"}]},{"body":{"nodeType":"YulBlock","src":"14597:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14599:16:17"},"nodeType":"YulFunctionCall","src":"14599:18:17"},"nodeType":"YulExpressionStatement","src":"14599:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14589:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"14592:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14586:2:17"},"nodeType":"YulFunctionCall","src":"14586:10:17"},"nodeType":"YulIf","src":"14583:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14531:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"14534:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"14540:3:17","type":""}],"src":"14500:125:17"},{"body":{"nodeType":"YulBlock","src":"14785:268:17","statements":[{"nodeType":"YulAssignment","src":"14795:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14807:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14818:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14803:3:17"},"nodeType":"YulFunctionCall","src":"14803:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14795:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"14830:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"14840:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14834:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14898:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14913:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"14921:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14909:3:17"},"nodeType":"YulFunctionCall","src":"14909:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14891:6:17"},"nodeType":"YulFunctionCall","src":"14891:34:17"},"nodeType":"YulExpressionStatement","src":"14891:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14945:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14956:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14941:3:17"},"nodeType":"YulFunctionCall","src":"14941:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14965:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"14973:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14961:3:17"},"nodeType":"YulFunctionCall","src":"14961:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14934:6:17"},"nodeType":"YulFunctionCall","src":"14934:43:17"},"nodeType":"YulExpressionStatement","src":"14934:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14997:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15008:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14993:3:17"},"nodeType":"YulFunctionCall","src":"14993:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15017:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15029:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15034:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15025:3:17"},"nodeType":"YulFunctionCall","src":"15025:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15013:3:17"},"nodeType":"YulFunctionCall","src":"15013:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14986:6:17"},"nodeType":"YulFunctionCall","src":"14986:61:17"},"nodeType":"YulExpressionStatement","src":"14986:61:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14738:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14749:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14757:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14765:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14776:4:17","type":""}],"src":"14630:423:17"},{"body":{"nodeType":"YulBlock","src":"15137:194:17","statements":[{"body":{"nodeType":"YulBlock","src":"15183:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15192:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15195:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15185:6:17"},"nodeType":"YulFunctionCall","src":"15185:12:17"},"nodeType":"YulExpressionStatement","src":"15185:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15158:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"15167:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15154:3:17"},"nodeType":"YulFunctionCall","src":"15154:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"15179:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15150:3:17"},"nodeType":"YulFunctionCall","src":"15150:32:17"},"nodeType":"YulIf","src":"15147:52:17"},{"nodeType":"YulVariableDeclaration","src":"15208:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15227:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15221:5:17"},"nodeType":"YulFunctionCall","src":"15221:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15212:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"15285:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15294:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15297:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15287:6:17"},"nodeType":"YulFunctionCall","src":"15287:12:17"},"nodeType":"YulExpressionStatement","src":"15287:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15259:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15270:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15277:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15266:3:17"},"nodeType":"YulFunctionCall","src":"15266:16:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15256:2:17"},"nodeType":"YulFunctionCall","src":"15256:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15249:6:17"},"nodeType":"YulFunctionCall","src":"15249:35:17"},"nodeType":"YulIf","src":"15246:55:17"},{"nodeType":"YulAssignment","src":"15310:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"15320:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15310:6:17"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15103:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15114:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15126:6:17","type":""}],"src":"15058:273:17"},{"body":{"nodeType":"YulBlock","src":"15382:102:17","statements":[{"nodeType":"YulAssignment","src":"15392:38:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15407:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"15410:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15403:3:17"},"nodeType":"YulFunctionCall","src":"15403:12:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15421:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"15424:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15417:3:17"},"nodeType":"YulFunctionCall","src":"15417:12:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15399:3:17"},"nodeType":"YulFunctionCall","src":"15399:31:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15392:3:17"}]},{"body":{"nodeType":"YulBlock","src":"15456:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15458:16:17"},"nodeType":"YulFunctionCall","src":"15458:18:17"},"nodeType":"YulExpressionStatement","src":"15458:18:17"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"15445:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15450:4:17","type":"","value":"0xff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15442:2:17"},"nodeType":"YulFunctionCall","src":"15442:13:17"},"nodeType":"YulIf","src":"15439:39:17"}]},"name":"checked_add_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15365:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"15368:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15374:3:17","type":""}],"src":"15336:148:17"},{"body":{"nodeType":"YulBlock","src":"15553:358:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15563:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"15578:1:17","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"15567:7:17","type":""}]},{"nodeType":"YulAssignment","src":"15588:16:17","value":{"name":"power_1","nodeType":"YulIdentifier","src":"15597:7:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15588:5:17"}]},{"nodeType":"YulAssignment","src":"15613:13:17","value":{"name":"_base","nodeType":"YulIdentifier","src":"15621:5:17"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"15613:4:17"}]},{"body":{"nodeType":"YulBlock","src":"15677:228:17","statements":[{"body":{"nodeType":"YulBlock","src":"15722:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15724:16:17"},"nodeType":"YulFunctionCall","src":"15724:18:17"},"nodeType":"YulExpressionStatement","src":"15724:18:17"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15697:4:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15711:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15707:3:17"},"nodeType":"YulFunctionCall","src":"15707:6:17"},{"name":"base","nodeType":"YulIdentifier","src":"15715:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15703:3:17"},"nodeType":"YulFunctionCall","src":"15703:17:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15694:2:17"},"nodeType":"YulFunctionCall","src":"15694:27:17"},"nodeType":"YulIf","src":"15691:53:17"},{"body":{"nodeType":"YulBlock","src":"15783:29:17","statements":[{"nodeType":"YulAssignment","src":"15785:25:17","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"15798:5:17"},{"name":"base","nodeType":"YulIdentifier","src":"15805:4:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15794:3:17"},"nodeType":"YulFunctionCall","src":"15794:16:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"15785:5:17"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15764:8:17"},{"name":"power_1","nodeType":"YulIdentifier","src":"15774:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15760:3:17"},"nodeType":"YulFunctionCall","src":"15760:22:17"},"nodeType":"YulIf","src":"15757:55:17"},{"nodeType":"YulAssignment","src":"15825:23:17","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"15837:4:17"},{"name":"base","nodeType":"YulIdentifier","src":"15843:4:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15833:3:17"},"nodeType":"YulFunctionCall","src":"15833:15:17"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"15825:4:17"}]},{"nodeType":"YulAssignment","src":"15861:34:17","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"15877:7:17"},{"name":"exponent","nodeType":"YulIdentifier","src":"15886:8:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15873:3:17"},"nodeType":"YulFunctionCall","src":"15873:22:17"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"15861:8:17"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15646:8:17"},{"name":"power_1","nodeType":"YulIdentifier","src":"15656:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15643:2:17"},"nodeType":"YulFunctionCall","src":"15643:21:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15665:3:17","statements":[]},"pre":{"nodeType":"YulBlock","src":"15639:3:17","statements":[]},"src":"15635:270:17"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"15517:5:17","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"15524:8:17","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"15537:5:17","type":""},{"name":"base","nodeType":"YulTypedName","src":"15544:4:17","type":""}],"src":"15489:422:17"},{"body":{"nodeType":"YulBlock","src":"15975:747:17","statements":[{"body":{"nodeType":"YulBlock","src":"16013:52:17","statements":[{"nodeType":"YulAssignment","src":"16027:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16036:1:17","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16027:5:17"}]},{"nodeType":"YulLeave","src":"16050:5:17"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"15995:8:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15988:6:17"},"nodeType":"YulFunctionCall","src":"15988:16:17"},"nodeType":"YulIf","src":"15985:80:17"},{"body":{"nodeType":"YulBlock","src":"16098:52:17","statements":[{"nodeType":"YulAssignment","src":"16112:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16121:1:17","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16112:5:17"}]},{"nodeType":"YulLeave","src":"16135:5:17"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16084:4:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16077:6:17"},"nodeType":"YulFunctionCall","src":"16077:12:17"},"nodeType":"YulIf","src":"16074:76:17"},{"cases":[{"body":{"nodeType":"YulBlock","src":"16186:52:17","statements":[{"nodeType":"YulAssignment","src":"16200:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16209:1:17","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16200:5:17"}]},{"nodeType":"YulLeave","src":"16223:5:17"}]},"nodeType":"YulCase","src":"16179:59:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16184:1:17","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16254:123:17","statements":[{"body":{"nodeType":"YulBlock","src":"16289:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16291:16:17"},"nodeType":"YulFunctionCall","src":"16291:18:17"},"nodeType":"YulExpressionStatement","src":"16291:18:17"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"16274:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"16284:3:17","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16271:2:17"},"nodeType":"YulFunctionCall","src":"16271:17:17"},"nodeType":"YulIf","src":"16268:43:17"},{"nodeType":"YulAssignment","src":"16324:25:17","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"16337:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"16347:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16333:3:17"},"nodeType":"YulFunctionCall","src":"16333:16:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16324:5:17"}]},{"nodeType":"YulLeave","src":"16362:5:17"}]},"nodeType":"YulCase","src":"16247:130:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16252:1:17","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"16166:4:17"},"nodeType":"YulSwitch","src":"16159:218:17"},{"body":{"nodeType":"YulBlock","src":"16475:70:17","statements":[{"nodeType":"YulAssignment","src":"16489:28:17","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16502:4:17"},{"name":"exponent","nodeType":"YulIdentifier","src":"16508:8:17"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"16498:3:17"},"nodeType":"YulFunctionCall","src":"16498:19:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16489:5:17"}]},{"nodeType":"YulLeave","src":"16530:5:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16399:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"16405:2:17","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16396:2:17"},"nodeType":"YulFunctionCall","src":"16396:12:17"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"16413:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"16423:2:17","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16410:2:17"},"nodeType":"YulFunctionCall","src":"16410:16:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16392:3:17"},"nodeType":"YulFunctionCall","src":"16392:35:17"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16436:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"16442:3:17","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16433:2:17"},"nodeType":"YulFunctionCall","src":"16433:13:17"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"16451:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"16461:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16448:2:17"},"nodeType":"YulFunctionCall","src":"16448:16:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16429:3:17"},"nodeType":"YulFunctionCall","src":"16429:36:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"16389:2:17"},"nodeType":"YulFunctionCall","src":"16389:77:17"},"nodeType":"YulIf","src":"16386:159:17"},{"nodeType":"YulVariableDeclaration","src":"16554:57:17","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16596:4:17"},{"name":"exponent","nodeType":"YulIdentifier","src":"16602:8:17"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"16577:18:17"},"nodeType":"YulFunctionCall","src":"16577:34:17"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"16558:7:17","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"16567:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"16656:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16658:16:17"},"nodeType":"YulFunctionCall","src":"16658:18:17"},"nodeType":"YulExpressionStatement","src":"16658:18:17"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"16626:7:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16643:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16639:3:17"},"nodeType":"YulFunctionCall","src":"16639:6:17"},{"name":"base_1","nodeType":"YulIdentifier","src":"16647:6:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16635:3:17"},"nodeType":"YulFunctionCall","src":"16635:19:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16623:2:17"},"nodeType":"YulFunctionCall","src":"16623:32:17"},"nodeType":"YulIf","src":"16620:58:17"},{"nodeType":"YulAssignment","src":"16687:29:17","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"16700:7:17"},{"name":"base_1","nodeType":"YulIdentifier","src":"16709:6:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16696:3:17"},"nodeType":"YulFunctionCall","src":"16696:20:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16687:5:17"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"15946:4:17","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"15952:8:17","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"15965:5:17","type":""}],"src":"15916:806:17"},{"body":{"nodeType":"YulBlock","src":"16795:72:17","statements":[{"nodeType":"YulAssignment","src":"16805:56:17","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"16835:4:17"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"16845:8:17"},{"kind":"number","nodeType":"YulLiteral","src":"16855:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16841:3:17"},"nodeType":"YulFunctionCall","src":"16841:19:17"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"16814:20:17"},"nodeType":"YulFunctionCall","src":"16814:47:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"16805:5:17"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"16766:4:17","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"16772:8:17","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"16785:5:17","type":""}],"src":"16727:140:17"},{"body":{"nodeType":"YulBlock","src":"16953:103:17","statements":[{"body":{"nodeType":"YulBlock","src":"16999:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17008:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17011:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17001:6:17"},"nodeType":"YulFunctionCall","src":"17001:12:17"},"nodeType":"YulExpressionStatement","src":"17001:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16974:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"16983:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16970:3:17"},"nodeType":"YulFunctionCall","src":"16970:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"16995:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16966:3:17"},"nodeType":"YulFunctionCall","src":"16966:32:17"},"nodeType":"YulIf","src":"16963:52:17"},{"nodeType":"YulAssignment","src":"17024:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17040:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17034:5:17"},"nodeType":"YulFunctionCall","src":"17034:16:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17024:6:17"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16919:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16930:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16942:6:17","type":""}],"src":"16872:184:17"},{"body":{"nodeType":"YulBlock","src":"17139:167:17","statements":[{"body":{"nodeType":"YulBlock","src":"17185:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17194:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17187:6:17"},"nodeType":"YulFunctionCall","src":"17187:12:17"},"nodeType":"YulExpressionStatement","src":"17187:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17160:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17169:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17156:3:17"},"nodeType":"YulFunctionCall","src":"17156:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"17181:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17152:3:17"},"nodeType":"YulFunctionCall","src":"17152:32:17"},"nodeType":"YulIf","src":"17149:52:17"},{"nodeType":"YulVariableDeclaration","src":"17210:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17229:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17223:5:17"},"nodeType":"YulFunctionCall","src":"17223:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"17214:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17270:5:17"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"17248:21:17"},"nodeType":"YulFunctionCall","src":"17248:28:17"},"nodeType":"YulExpressionStatement","src":"17248:28:17"},{"nodeType":"YulAssignment","src":"17285:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"17295:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17285:6:17"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17105:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17116:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17128:6:17","type":""}],"src":"17061:245:17"},{"body":{"nodeType":"YulBlock","src":"17448:168:17","statements":[{"nodeType":"YulAssignment","src":"17458:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17470:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17481:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17466:3:17"},"nodeType":"YulFunctionCall","src":"17466:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17458:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17500:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17515:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17523:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17511:3:17"},"nodeType":"YulFunctionCall","src":"17511:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17493:6:17"},"nodeType":"YulFunctionCall","src":"17493:74:17"},"nodeType":"YulExpressionStatement","src":"17493:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17587:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17598:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17583:3:17"},"nodeType":"YulFunctionCall","src":"17583:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"17603:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17576:6:17"},"nodeType":"YulFunctionCall","src":"17576:34:17"},"nodeType":"YulExpressionStatement","src":"17576:34:17"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17409:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17420:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17428:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17439:4:17","type":""}],"src":"17311:305:17"},{"body":{"nodeType":"YulBlock","src":"17688:200:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17705:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17710:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17698:6:17"},"nodeType":"YulFunctionCall","src":"17698:19:17"},"nodeType":"YulExpressionStatement","src":"17698:19:17"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17743:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"17748:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17739:3:17"},"nodeType":"YulFunctionCall","src":"17739:14:17"},{"name":"start","nodeType":"YulIdentifier","src":"17755:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"17762:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17726:12:17"},"nodeType":"YulFunctionCall","src":"17726:43:17"},"nodeType":"YulExpressionStatement","src":"17726:43:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17793:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17798:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17789:3:17"},"nodeType":"YulFunctionCall","src":"17789:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"17807:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:17"},"nodeType":"YulFunctionCall","src":"17785:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"17814:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17778:6:17"},"nodeType":"YulFunctionCall","src":"17778:38:17"},"nodeType":"YulExpressionStatement","src":"17778:38:17"},{"nodeType":"YulAssignment","src":"17825:57:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17840:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17853:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17861:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17849:3:17"},"nodeType":"YulFunctionCall","src":"17849:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17870:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17866:3:17"},"nodeType":"YulFunctionCall","src":"17866:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17845:3:17"},"nodeType":"YulFunctionCall","src":"17845:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17836:3:17"},"nodeType":"YulFunctionCall","src":"17836:39:17"},{"kind":"number","nodeType":"YulLiteral","src":"17877:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17832:3:17"},"nodeType":"YulFunctionCall","src":"17832:50:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17825:3:17"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"17657:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"17664:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17672:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17680:3:17","type":""}],"src":"17621:267:17"},{"body":{"nodeType":"YulBlock","src":"18024:116:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18041:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18052:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18034:6:17"},"nodeType":"YulFunctionCall","src":"18034:21:17"},"nodeType":"YulExpressionStatement","src":"18034:21:17"},{"nodeType":"YulAssignment","src":"18064:70:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18099:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"18107:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18119:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18130:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18115:3:17"},"nodeType":"YulFunctionCall","src":"18115:18:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"18072:26:17"},"nodeType":"YulFunctionCall","src":"18072:62:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18064:4:17"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17985:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17996:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18004:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18015:4:17","type":""}],"src":"17893:247:17"},{"body":{"nodeType":"YulBlock","src":"18194:79:17","statements":[{"nodeType":"YulAssignment","src":"18204:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18216:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"18219:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18212:3:17"},"nodeType":"YulFunctionCall","src":"18212:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"18204:4:17"}]},{"body":{"nodeType":"YulBlock","src":"18245:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18247:16:17"},"nodeType":"YulFunctionCall","src":"18247:18:17"},"nodeType":"YulExpressionStatement","src":"18247:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"18236:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"18242:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18233:2:17"},"nodeType":"YulFunctionCall","src":"18233:11:17"},"nodeType":"YulIf","src":"18230:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18176:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"18179:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"18185:4:17","type":""}],"src":"18145:128:17"},{"body":{"nodeType":"YulBlock","src":"18358:169:17","statements":[{"body":{"nodeType":"YulBlock","src":"18404:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18413:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18416:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18406:6:17"},"nodeType":"YulFunctionCall","src":"18406:12:17"},"nodeType":"YulExpressionStatement","src":"18406:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18379:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"18388:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18375:3:17"},"nodeType":"YulFunctionCall","src":"18375:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"18400:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18371:3:17"},"nodeType":"YulFunctionCall","src":"18371:32:17"},"nodeType":"YulIf","src":"18368:52:17"},{"nodeType":"YulVariableDeclaration","src":"18429:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18448:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18442:5:17"},"nodeType":"YulFunctionCall","src":"18442:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18433:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18491:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"18467:23:17"},"nodeType":"YulFunctionCall","src":"18467:30:17"},"nodeType":"YulExpressionStatement","src":"18467:30:17"},{"nodeType":"YulAssignment","src":"18506:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"18516:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18506:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18324:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18335:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18347:6:17","type":""}],"src":"18278:249:17"},{"body":{"nodeType":"YulBlock","src":"18602:61:17","statements":[{"nodeType":"YulAssignment","src":"18612:45:17","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"18642:4:17"},{"name":"exponent","nodeType":"YulIdentifier","src":"18648:8:17"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"18621:20:17"},"nodeType":"YulFunctionCall","src":"18621:36:17"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"18612:5:17"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"18573:4:17","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"18579:8:17","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"18592:5:17","type":""}],"src":"18532:131:17"},{"body":{"nodeType":"YulBlock","src":"18720:116:17","statements":[{"nodeType":"YulAssignment","src":"18730:20:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18745:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"18748:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"18741:3:17"},"nodeType":"YulFunctionCall","src":"18741:9:17"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"18730:7:17"}]},{"body":{"nodeType":"YulBlock","src":"18808:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18810:16:17"},"nodeType":"YulFunctionCall","src":"18810:18:17"},"nodeType":"YulExpressionStatement","src":"18810:18:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18779:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18772:6:17"},"nodeType":"YulFunctionCall","src":"18772:9:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18786:1:17"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"18793:7:17"},{"name":"x","nodeType":"YulIdentifier","src":"18802:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18789:3:17"},"nodeType":"YulFunctionCall","src":"18789:15:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18783:2:17"},"nodeType":"YulFunctionCall","src":"18783:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18769:2:17"},"nodeType":"YulFunctionCall","src":"18769:37:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18762:6:17"},"nodeType":"YulFunctionCall","src":"18762:45:17"},"nodeType":"YulIf","src":"18759:71:17"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18699:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"18702:1:17","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"18708:7:17","type":""}],"src":"18668:168:17"},{"body":{"nodeType":"YulBlock","src":"18887:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"18918:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18939:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18946:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18951:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18942:3:17"},"nodeType":"YulFunctionCall","src":"18942:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18932:6:17"},"nodeType":"YulFunctionCall","src":"18932:31:17"},"nodeType":"YulExpressionStatement","src":"18932:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18983:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18986:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18976:6:17"},"nodeType":"YulFunctionCall","src":"18976:15:17"},"nodeType":"YulExpressionStatement","src":"18976:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19011:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19014:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19004:6:17"},"nodeType":"YulFunctionCall","src":"19004:15:17"},"nodeType":"YulExpressionStatement","src":"19004:15:17"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18907:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18900:6:17"},"nodeType":"YulFunctionCall","src":"18900:9:17"},"nodeType":"YulIf","src":"18897:132:17"},{"nodeType":"YulAssignment","src":"19038:14:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19047:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"19050:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19043:3:17"},"nodeType":"YulFunctionCall","src":"19043:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"19038:1:17"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18872:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"18875:1:17","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"18881:1:17","type":""}],"src":"18841:217:17"},{"body":{"nodeType":"YulBlock","src":"19248:281:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19258:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19268:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19262:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19326:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19341:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"19349:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19337:3:17"},"nodeType":"YulFunctionCall","src":"19337:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19319:6:17"},"nodeType":"YulFunctionCall","src":"19319:34:17"},"nodeType":"YulExpressionStatement","src":"19319:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19373:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19384:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19369:3:17"},"nodeType":"YulFunctionCall","src":"19369:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19393:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"19401:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19389:3:17"},"nodeType":"YulFunctionCall","src":"19389:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19362:6:17"},"nodeType":"YulFunctionCall","src":"19362:43:17"},"nodeType":"YulExpressionStatement","src":"19362:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19425:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19436:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19421:3:17"},"nodeType":"YulFunctionCall","src":"19421:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"19441:2:17","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19414:6:17"},"nodeType":"YulFunctionCall","src":"19414:30:17"},"nodeType":"YulExpressionStatement","src":"19414:30:17"},{"nodeType":"YulAssignment","src":"19453:70:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19488:6:17"},{"name":"value3","nodeType":"YulIdentifier","src":"19496:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19508:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19519:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19504:3:17"},"nodeType":"YulFunctionCall","src":"19504:18:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"19461:26:17"},"nodeType":"YulFunctionCall","src":"19461:62:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19453:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19193:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19204:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19212:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19220:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19228:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19239:4:17","type":""}],"src":"19063:466:17"},{"body":{"nodeType":"YulBlock","src":"19664:201:17","statements":[{"body":{"nodeType":"YulBlock","src":"19702:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19711:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19714:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19704:6:17"},"nodeType":"YulFunctionCall","src":"19704:12:17"},"nodeType":"YulExpressionStatement","src":"19704:12:17"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"19680:10:17"},{"name":"endIndex","nodeType":"YulIdentifier","src":"19692:8:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19677:2:17"},"nodeType":"YulFunctionCall","src":"19677:24:17"},"nodeType":"YulIf","src":"19674:44:17"},{"body":{"nodeType":"YulBlock","src":"19751:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19760:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19763:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19753:6:17"},"nodeType":"YulFunctionCall","src":"19753:12:17"},"nodeType":"YulExpressionStatement","src":"19753:12:17"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"19733:8:17"},{"name":"length","nodeType":"YulIdentifier","src":"19743:6:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19730:2:17"},"nodeType":"YulFunctionCall","src":"19730:20:17"},"nodeType":"YulIf","src":"19727:40:17"},{"nodeType":"YulAssignment","src":"19776:36:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19793:6:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"19801:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19789:3:17"},"nodeType":"YulFunctionCall","src":"19789:23:17"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"19776:9:17"}]},{"nodeType":"YulAssignment","src":"19821:38:17","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"19838:8:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"19848:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19834:3:17"},"nodeType":"YulFunctionCall","src":"19834:25:17"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"19821:9:17"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"19598:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"19606:6:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"19614:10:17","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"19626:8:17","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"19639:9:17","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"19650:9:17","type":""}],"src":"19534:331:17"},{"body":{"nodeType":"YulBlock","src":"19902:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19919:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19926:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19931:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19922:3:17"},"nodeType":"YulFunctionCall","src":"19922:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19912:6:17"},"nodeType":"YulFunctionCall","src":"19912:31:17"},"nodeType":"YulExpressionStatement","src":"19912:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19959:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19962:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19952:6:17"},"nodeType":"YulFunctionCall","src":"19952:15:17"},"nodeType":"YulExpressionStatement","src":"19952:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19983:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19986:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19976:6:17"},"nodeType":"YulFunctionCall","src":"19976:15:17"},"nodeType":"YulExpressionStatement","src":"19976:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"19870:127:17"},{"body":{"nodeType":"YulBlock","src":"20096:427:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20106:51:17","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"20145:11:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20132:12:17"},"nodeType":"YulFunctionCall","src":"20132:25:17"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"20110:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"20246:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20255:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20258:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20248:6:17"},"nodeType":"YulFunctionCall","src":"20248:12:17"},"nodeType":"YulExpressionStatement","src":"20248:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"20180:18:17"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"20208:12:17"},"nodeType":"YulFunctionCall","src":"20208:14:17"},{"name":"base_ref","nodeType":"YulIdentifier","src":"20224:8:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20204:3:17"},"nodeType":"YulFunctionCall","src":"20204:29:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20239:2:17","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20235:3:17"},"nodeType":"YulFunctionCall","src":"20235:7:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20200:3:17"},"nodeType":"YulFunctionCall","src":"20200:43:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20176:3:17"},"nodeType":"YulFunctionCall","src":"20176:68:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20169:6:17"},"nodeType":"YulFunctionCall","src":"20169:76:17"},"nodeType":"YulIf","src":"20166:96:17"},{"nodeType":"YulVariableDeclaration","src":"20271:47:17","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"20289:8:17"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"20299:18:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20285:3:17"},"nodeType":"YulFunctionCall","src":"20285:33:17"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"20275:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20327:30:17","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"20350:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20337:12:17"},"nodeType":"YulFunctionCall","src":"20337:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20327:6:17"}]},{"body":{"nodeType":"YulBlock","src":"20400:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20409:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20412:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20402:6:17"},"nodeType":"YulFunctionCall","src":"20402:12:17"},"nodeType":"YulExpressionStatement","src":"20402:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"20372:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"20380:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20369:2:17"},"nodeType":"YulFunctionCall","src":"20369:30:17"},"nodeType":"YulIf","src":"20366:50:17"},{"nodeType":"YulAssignment","src":"20425:25:17","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"20437:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"20445:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20433:3:17"},"nodeType":"YulFunctionCall","src":"20433:17:17"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"20425:4:17"}]},{"body":{"nodeType":"YulBlock","src":"20501:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20510:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20513:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20503:6:17"},"nodeType":"YulFunctionCall","src":"20503:12:17"},"nodeType":"YulExpressionStatement","src":"20503:12:17"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"20466:4:17"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"20476:12:17"},"nodeType":"YulFunctionCall","src":"20476:14:17"},{"name":"length","nodeType":"YulIdentifier","src":"20492:6:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20472:3:17"},"nodeType":"YulFunctionCall","src":"20472:27:17"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"20462:3:17"},"nodeType":"YulFunctionCall","src":"20462:38:17"},"nodeType":"YulIf","src":"20459:58:17"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"20053:8:17","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"20063:11:17","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"20079:4:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"20085:6:17","type":""}],"src":"20002:521:17"},{"body":{"nodeType":"YulBlock","src":"20721:247:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20744:3:17"},{"name":"value0","nodeType":"YulIdentifier","src":"20749:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"20757:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"20731:12:17"},"nodeType":"YulFunctionCall","src":"20731:33:17"},"nodeType":"YulExpressionStatement","src":"20731:33:17"},{"nodeType":"YulVariableDeclaration","src":"20773:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20787:3:17"},{"name":"value1","nodeType":"YulIdentifier","src":"20792:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20783:3:17"},"nodeType":"YulFunctionCall","src":"20783:16:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20777:2:17","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20815:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"20819:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20808:6:17"},"nodeType":"YulFunctionCall","src":"20808:13:17"},"nodeType":"YulExpressionStatement","src":"20808:13:17"},{"nodeType":"YulVariableDeclaration","src":"20830:27:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20850:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20844:5:17"},"nodeType":"YulFunctionCall","src":"20844:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"20834:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20905:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"20913:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20901:3:17"},"nodeType":"YulFunctionCall","src":"20901:17:17"},{"name":"_1","nodeType":"YulIdentifier","src":"20920:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"20924:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"20866:34:17"},"nodeType":"YulFunctionCall","src":"20866:65:17"},"nodeType":"YulExpressionStatement","src":"20866:65:17"},{"nodeType":"YulAssignment","src":"20940:22:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20951:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"20955:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20947:3:17"},"nodeType":"YulFunctionCall","src":"20947:15:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20940:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20681:3:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20686:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20694:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20702:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20713:3:17","type":""}],"src":"20528:440:17"},{"body":{"nodeType":"YulBlock","src":"21158:285:17","statements":[{"nodeType":"YulAssignment","src":"21168:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21180:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21191:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21176:3:17"},"nodeType":"YulFunctionCall","src":"21176:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21168:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"21204:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"21214:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21208:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21272:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21287:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"21295:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21283:3:17"},"nodeType":"YulFunctionCall","src":"21283:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21265:6:17"},"nodeType":"YulFunctionCall","src":"21265:34:17"},"nodeType":"YulExpressionStatement","src":"21265:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21319:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21330:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21315:3:17"},"nodeType":"YulFunctionCall","src":"21315:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21339:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"21347:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21335:3:17"},"nodeType":"YulFunctionCall","src":"21335:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21308:6:17"},"nodeType":"YulFunctionCall","src":"21308:43:17"},"nodeType":"YulExpressionStatement","src":"21308:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21371:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21382:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21367:3:17"},"nodeType":"YulFunctionCall","src":"21367:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"21387:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21360:6:17"},"nodeType":"YulFunctionCall","src":"21360:34:17"},"nodeType":"YulExpressionStatement","src":"21360:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21414:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21425:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21410:3:17"},"nodeType":"YulFunctionCall","src":"21410:18:17"},{"name":"value3","nodeType":"YulIdentifier","src":"21430:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21403:6:17"},"nodeType":"YulFunctionCall","src":"21403:34:17"},"nodeType":"YulExpressionStatement","src":"21403:34:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21103:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21114:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21122:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21130:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21138:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21149:4:17","type":""}],"src":"20973:470:17"},{"body":{"nodeType":"YulBlock","src":"21605:241:17","statements":[{"nodeType":"YulAssignment","src":"21615:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21627:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21638:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21623:3:17"},"nodeType":"YulFunctionCall","src":"21623:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21615:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"21650:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"21660:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21654:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21718:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21733:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"21741:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21729:3:17"},"nodeType":"YulFunctionCall","src":"21729:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21711:6:17"},"nodeType":"YulFunctionCall","src":"21711:34:17"},"nodeType":"YulExpressionStatement","src":"21711:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21765:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21776:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21761:3:17"},"nodeType":"YulFunctionCall","src":"21761:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21785:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"21793:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21781:3:17"},"nodeType":"YulFunctionCall","src":"21781:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21754:6:17"},"nodeType":"YulFunctionCall","src":"21754:43:17"},"nodeType":"YulExpressionStatement","src":"21754:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21817:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21828:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21813:3:17"},"nodeType":"YulFunctionCall","src":"21813:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"21833:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21806:6:17"},"nodeType":"YulFunctionCall","src":"21806:34:17"},"nodeType":"YulExpressionStatement","src":"21806:34:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21558:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21569:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21577:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21585:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21596:4:17","type":""}],"src":"21448:398:17"},{"body":{"nodeType":"YulBlock","src":"22034:321:17","statements":[{"nodeType":"YulAssignment","src":"22044:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22056:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22067:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22052:3:17"},"nodeType":"YulFunctionCall","src":"22052:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22044:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"22080:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"22090:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"22084:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22148:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22163:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22171:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22159:3:17"},"nodeType":"YulFunctionCall","src":"22159:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22141:6:17"},"nodeType":"YulFunctionCall","src":"22141:34:17"},"nodeType":"YulExpressionStatement","src":"22141:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22195:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22206:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22191:3:17"},"nodeType":"YulFunctionCall","src":"22191:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22215:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22223:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22211:3:17"},"nodeType":"YulFunctionCall","src":"22211:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22184:6:17"},"nodeType":"YulFunctionCall","src":"22184:43:17"},"nodeType":"YulExpressionStatement","src":"22184:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22247:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22258:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22243:3:17"},"nodeType":"YulFunctionCall","src":"22243:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22267:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22275:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22263:3:17"},"nodeType":"YulFunctionCall","src":"22263:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22236:6:17"},"nodeType":"YulFunctionCall","src":"22236:43:17"},"nodeType":"YulExpressionStatement","src":"22236:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22299:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22310:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22295:3:17"},"nodeType":"YulFunctionCall","src":"22295:18:17"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"22319:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22331:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"22336:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22327:3:17"},"nodeType":"YulFunctionCall","src":"22327:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22315:3:17"},"nodeType":"YulFunctionCall","src":"22315:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22288:6:17"},"nodeType":"YulFunctionCall","src":"22288:61:17"},"nodeType":"YulExpressionStatement","src":"22288:61:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21979:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21990:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21998:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22006:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22014:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22025:4:17","type":""}],"src":"21851:504:17"},{"body":{"nodeType":"YulBlock","src":"22407:129:17","statements":[{"nodeType":"YulVariableDeclaration","src":"22417:24:17","value":{"kind":"number","nodeType":"YulLiteral","src":"22427:14:17","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"22421:2:17","type":""}]},{"nodeType":"YulAssignment","src":"22450:34:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22465:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22468:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22461:3:17"},"nodeType":"YulFunctionCall","src":"22461:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22477:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22480:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22473:3:17"},"nodeType":"YulFunctionCall","src":"22473:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22457:3:17"},"nodeType":"YulFunctionCall","src":"22457:27:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22450:3:17"}]},{"body":{"nodeType":"YulBlock","src":"22508:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22510:16:17"},"nodeType":"YulFunctionCall","src":"22510:18:17"},"nodeType":"YulExpressionStatement","src":"22510:18:17"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"22499:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22504:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22496:2:17"},"nodeType":"YulFunctionCall","src":"22496:11:17"},"nodeType":"YulIf","src":"22493:37:17"}]},"name":"checked_add_t_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22390:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"22393:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22399:3:17","type":""}],"src":"22360:176:17"},{"body":{"nodeType":"YulBlock","src":"22752:347:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22769:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22784:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"22792:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22780:3:17"},"nodeType":"YulFunctionCall","src":"22780:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22762:6:17"},"nodeType":"YulFunctionCall","src":"22762:46:17"},"nodeType":"YulExpressionStatement","src":"22762:46:17"},{"nodeType":"YulVariableDeclaration","src":"22817:52:17","value":{"kind":"number","nodeType":"YulLiteral","src":"22827:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"22821:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22889:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22900:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22885:3:17"},"nodeType":"YulFunctionCall","src":"22885:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22909:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22917:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22905:3:17"},"nodeType":"YulFunctionCall","src":"22905:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22878:6:17"},"nodeType":"YulFunctionCall","src":"22878:43:17"},"nodeType":"YulExpressionStatement","src":"22878:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22941:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22952:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22937:3:17"},"nodeType":"YulFunctionCall","src":"22937:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22961:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"22969:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22957:3:17"},"nodeType":"YulFunctionCall","src":"22957:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22930:6:17"},"nodeType":"YulFunctionCall","src":"22930:43:17"},"nodeType":"YulExpressionStatement","src":"22930:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22993:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23004:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22989:3:17"},"nodeType":"YulFunctionCall","src":"22989:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"23009:3:17","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22982:6:17"},"nodeType":"YulFunctionCall","src":"22982:31:17"},"nodeType":"YulExpressionStatement","src":"22982:31:17"},{"nodeType":"YulAssignment","src":"23022:71:17","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23057:6:17"},{"name":"value4","nodeType":"YulIdentifier","src":"23065:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23077:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23088:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23073:3:17"},"nodeType":"YulFunctionCall","src":"23073:19:17"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"23030:26:17"},"nodeType":"YulFunctionCall","src":"23030:63:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23022:4:17"}]}]},"name":"abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22689:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"22700:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22708:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22716:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22724:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22732:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22743:4:17","type":""}],"src":"22541:558:17"},{"body":{"nodeType":"YulBlock","src":"23231:193:17","statements":[{"nodeType":"YulAssignment","src":"23241:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23253:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23264:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23249:3:17"},"nodeType":"YulFunctionCall","src":"23249:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23241:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23283:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23298:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"23306:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23294:3:17"},"nodeType":"YulFunctionCall","src":"23294:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23276:6:17"},"nodeType":"YulFunctionCall","src":"23276:74:17"},"nodeType":"YulExpressionStatement","src":"23276:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23370:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23381:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23366:3:17"},"nodeType":"YulFunctionCall","src":"23366:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23390:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"23398:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23386:3:17"},"nodeType":"YulFunctionCall","src":"23386:31:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23359:6:17"},"nodeType":"YulFunctionCall","src":"23359:59:17"},"nodeType":"YulExpressionStatement","src":"23359:59:17"}]},"name":"abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23192:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23203:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23211:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23222:4:17","type":""}],"src":"23104:320:17"},{"body":{"nodeType":"YulBlock","src":"23528:103:17","statements":[{"nodeType":"YulAssignment","src":"23538:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23550:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23561:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23546:3:17"},"nodeType":"YulFunctionCall","src":"23546:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23538:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23580:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23595:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23607:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"23612:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23603:3:17"},"nodeType":"YulFunctionCall","src":"23603:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23591:3:17"},"nodeType":"YulFunctionCall","src":"23591:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23573:6:17"},"nodeType":"YulFunctionCall","src":"23573:52:17"},"nodeType":"YulExpressionStatement","src":"23573:52:17"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23497:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23508:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23519:4:17","type":""}],"src":"23429:202:17"},{"body":{"nodeType":"YulBlock","src":"23736:223:17","statements":[{"nodeType":"YulVariableDeclaration","src":"23746:29:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"23769:5:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23756:12:17"},"nodeType":"YulFunctionCall","src":"23756:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"23750:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23784:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23798:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"23803:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23794:3:17"},"nodeType":"YulFunctionCall","src":"23794:20:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"23788:2:17","type":""}]},{"nodeType":"YulAssignment","src":"23823:20:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23836:2:17"},{"name":"_2","nodeType":"YulIdentifier","src":"23840:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23832:3:17"},"nodeType":"YulFunctionCall","src":"23832:11:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23823:5:17"}]},{"body":{"nodeType":"YulBlock","src":"23874:79:17","statements":[{"nodeType":"YulAssignment","src":"23888:55:17","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23905:2:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23917:1:17","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23924:1:17","type":"","value":"4"},{"name":"len","nodeType":"YulIdentifier","src":"23927:3:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23920:3:17"},"nodeType":"YulFunctionCall","src":"23920:11:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23913:3:17"},"nodeType":"YulFunctionCall","src":"23913:19:17"},{"name":"_2","nodeType":"YulIdentifier","src":"23934:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23909:3:17"},"nodeType":"YulFunctionCall","src":"23909:28:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23901:3:17"},"nodeType":"YulFunctionCall","src":"23901:37:17"},{"name":"_2","nodeType":"YulIdentifier","src":"23940:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23897:3:17"},"nodeType":"YulFunctionCall","src":"23897:46:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23888:5:17"}]}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"23858:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"23863:1:17","type":"","value":"4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23855:2:17"},"nodeType":"YulFunctionCall","src":"23855:10:17"},"nodeType":"YulIf","src":"23852:101:17"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"23711:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"23718:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23726:5:17","type":""}],"src":"23636:323:17"},{"body":{"nodeType":"YulBlock","src":"24091:195:17","statements":[{"nodeType":"YulAssignment","src":"24101:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24113:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24124:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24109:3:17"},"nodeType":"YulFunctionCall","src":"24109:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24101:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24143:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24158:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"24166:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24154:3:17"},"nodeType":"YulFunctionCall","src":"24154:55:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24136:6:17"},"nodeType":"YulFunctionCall","src":"24136:74:17"},"nodeType":"YulExpressionStatement","src":"24136:74:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24230:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24241:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24226:3:17"},"nodeType":"YulFunctionCall","src":"24226:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24250:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24262:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"24267:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24258:3:17"},"nodeType":"YulFunctionCall","src":"24258:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24246:3:17"},"nodeType":"YulFunctionCall","src":"24246:33:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24219:6:17"},"nodeType":"YulFunctionCall","src":"24219:61:17"},"nodeType":"YulExpressionStatement","src":"24219:61:17"}]},"name":"abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24052:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24063:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24071:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24082:4:17","type":""}],"src":"23964:322:17"},{"body":{"nodeType":"YulBlock","src":"24428:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"24438:27:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24458:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24452:5:17"},"nodeType":"YulFunctionCall","src":"24452:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24442:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24513:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"24521:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24509:3:17"},"nodeType":"YulFunctionCall","src":"24509:17:17"},{"name":"pos","nodeType":"YulIdentifier","src":"24528:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"24533:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24474:34:17"},"nodeType":"YulFunctionCall","src":"24474:66:17"},"nodeType":"YulExpressionStatement","src":"24474:66:17"},{"nodeType":"YulAssignment","src":"24549:23:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24560:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"24565:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24556:3:17"},"nodeType":"YulFunctionCall","src":"24556:16:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24549:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24404:3:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24409:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24420:3:17","type":""}],"src":"24291:287:17"},{"body":{"nodeType":"YulBlock","src":"24730:216:17","statements":[{"nodeType":"YulAssignment","src":"24740:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24752:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24763:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24748:3:17"},"nodeType":"YulFunctionCall","src":"24748:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24740:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24782:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24797:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"24805:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24793:3:17"},"nodeType":"YulFunctionCall","src":"24793:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24775:6:17"},"nodeType":"YulFunctionCall","src":"24775:42:17"},"nodeType":"YulExpressionStatement","src":"24775:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24837:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24848:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24833:3:17"},"nodeType":"YulFunctionCall","src":"24833:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24857:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"24865:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24853:3:17"},"nodeType":"YulFunctionCall","src":"24853:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24826:6:17"},"nodeType":"YulFunctionCall","src":"24826:55:17"},"nodeType":"YulExpressionStatement","src":"24826:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24901:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24912:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24897:3:17"},"nodeType":"YulFunctionCall","src":"24897:18:17"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24931:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24924:6:17"},"nodeType":"YulFunctionCall","src":"24924:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24917:6:17"},"nodeType":"YulFunctionCall","src":"24917:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24890:6:17"},"nodeType":"YulFunctionCall","src":"24890:50:17"},"nodeType":"YulExpressionStatement","src":"24890:50:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24683:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24694:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24702:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24710:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24721:4:17","type":""}],"src":"24583:363:17"},{"body":{"nodeType":"YulBlock","src":"25076:157:17","statements":[{"nodeType":"YulAssignment","src":"25086:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25098:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25109:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25094:3:17"},"nodeType":"YulFunctionCall","src":"25094:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25086:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25128:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25143:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"25151:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25139:3:17"},"nodeType":"YulFunctionCall","src":"25139:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25121:6:17"},"nodeType":"YulFunctionCall","src":"25121:42:17"},"nodeType":"YulExpressionStatement","src":"25121:42:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25183:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25194:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25179:3:17"},"nodeType":"YulFunctionCall","src":"25179:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25203:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"25211:14:17","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25199:3:17"},"nodeType":"YulFunctionCall","src":"25199:27:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25172:6:17"},"nodeType":"YulFunctionCall","src":"25172:55:17"},"nodeType":"YulExpressionStatement","src":"25172:55:17"}]},"name":"abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25037:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25048:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25056:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25067:4:17","type":""}],"src":"24951:282:17"},{"body":{"nodeType":"YulBlock","src":"25316:177:17","statements":[{"body":{"nodeType":"YulBlock","src":"25362:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25371:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25374:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25364:6:17"},"nodeType":"YulFunctionCall","src":"25364:12:17"},"nodeType":"YulExpressionStatement","src":"25364:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25337:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25346:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25333:3:17"},"nodeType":"YulFunctionCall","src":"25333:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"25358:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25329:3:17"},"nodeType":"YulFunctionCall","src":"25329:32:17"},"nodeType":"YulIf","src":"25326:52:17"},{"nodeType":"YulVariableDeclaration","src":"25387:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25413:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"25400:12:17"},"nodeType":"YulFunctionCall","src":"25400:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"25391:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25457:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"25432:24:17"},"nodeType":"YulFunctionCall","src":"25432:31:17"},"nodeType":"YulExpressionStatement","src":"25432:31:17"},{"nodeType":"YulAssignment","src":"25472:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"25482:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25472:6:17"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25282:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25293:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25305:6:17","type":""}],"src":"25238:255:17"},{"body":{"nodeType":"YulBlock","src":"25546:127:17","statements":[{"nodeType":"YulVariableDeclaration","src":"25556:20:17","value":{"kind":"number","nodeType":"YulLiteral","src":"25566:10:17","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"25560:2:17","type":""}]},{"nodeType":"YulAssignment","src":"25585:35:17","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25601:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"25604:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25597:3:17"},"nodeType":"YulFunctionCall","src":"25597:10:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25613:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"25616:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25609:3:17"},"nodeType":"YulFunctionCall","src":"25609:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25593:3:17"},"nodeType":"YulFunctionCall","src":"25593:27:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"25585:4:17"}]},{"body":{"nodeType":"YulBlock","src":"25645:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25647:16:17"},"nodeType":"YulFunctionCall","src":"25647:18:17"},"nodeType":"YulExpressionStatement","src":"25647:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"25635:4:17"},{"name":"_1","nodeType":"YulIdentifier","src":"25641:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25632:2:17"},"nodeType":"YulFunctionCall","src":"25632:12:17"},"nodeType":"YulIf","src":"25629:38:17"}]},"name":"checked_sub_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25528:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"25531:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"25537:4:17","type":""}],"src":"25498:175:17"},{"body":{"nodeType":"YulBlock","src":"25814:130:17","statements":[{"nodeType":"YulAssignment","src":"25824:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25836:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25847:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25832:3:17"},"nodeType":"YulFunctionCall","src":"25832:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25824:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25866:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25881:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"25889:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25877:3:17"},"nodeType":"YulFunctionCall","src":"25877:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25859:6:17"},"nodeType":"YulFunctionCall","src":"25859:36:17"},"nodeType":"YulExpressionStatement","src":"25859:36:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25915:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25926:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25911:3:17"},"nodeType":"YulFunctionCall","src":"25911:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"25931:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25904:6:17"},"nodeType":"YulFunctionCall","src":"25904:34:17"},"nodeType":"YulExpressionStatement","src":"25904:34:17"}]},"name":"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25775:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25786:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25794:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25805:4:17","type":""}],"src":"25678:266:17"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_array_bytes4_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_array$_t_bytes4_$dyn_calldata_ptrt_uint64(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes4_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := abi_decode_uint64(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint64t_addresst_uint32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := abi_decode_uint32(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint64t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint48_t_uint32_t_uint32_t_uint48__to_t_uint48_t_uint32_t_uint32_t_uint48__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffff\n        mstore(headStart, and(value0, _1))\n        let _2 := 0xffffffff\n        mstore(add(headStart, 32), and(value1, _2))\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_decode_tuple_t_uint64t_uint64(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        value1 := abi_decode_uint64(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_tuple_t_address_payablet_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bytes4(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bytes4(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint64t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_uint64t_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint64(headStart)\n        value1 := abi_decode_uint32(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes4_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _2 := mload(srcPtr)\n            let length_1 := mload(_2)\n            mstore(tail_2, length_1)\n            copy_memory_to_memory_with_cleanup(add(_2, _1), add(tail_2, _1), length_1)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), not(31))), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_addresst_bytes4(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_bytes4(value_2)\n        value2 := value_2\n    }\n    function abi_encode_tuple_t_bool_t_uint32__to_t_bool_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint32(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint48(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let value_1 := calldataload(add(headStart, 64))\n        if iszero(eq(value_1, and(value_1, 0xffffffffffff))) { revert(0, 0) }\n        value3 := value_1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint32__to_t_bytes32_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        sum := add(and(x, 0xff), and(y, 0xff))\n        if gt(sum, 0xff) { panic_error_0x11() }\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string_calldata(value2, value3, add(headStart, 96))\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        let length := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), _1, length)\n        end := add(_1, length)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_bytes4__to_t_address_t_address_t_address_t_bytes4__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, shl(224, 0xffffffff)))\n    }\n    function checked_add_t_uint48(x, y) -> sum\n    {\n        let _1 := 0xffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint48_t_address_t_address_t_bytes_calldata_ptr__to_t_uint48_t_address_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffff))\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string_calldata(value3, value4, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address_t_uint64__to_t_address_t_uint64__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4(array, len) -> value\n    {\n        let _1 := calldataload(array)\n        let _2 := shl(224, 0xffffffff)\n        value := and(_1, _2)\n        if lt(len, 4)\n        {\n            value := and(and(_1, shl(shl(3, sub(4, len)), _2)), _2)\n        }\n    }\n    function abi_encode_tuple_t_address_t_bytes4__to_t_address_t_bytes4__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_uint32_t_uint48_t_bool__to_t_uint32_t_uint48_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_uint32_t_uint48__to_t_uint32_t_uint48__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint32(x, y) -> diff\n    {\n        let _1 := 0xffffffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"7933":[{"length":32,"start":2597}]},"linkReferences":{},"object":"60806040526004361061036b5760003560e01c8063715018a6116101c6578063b7d2b162116100f7578063d6bb62c611610095578063e0886f901161006f578063e0886f9014610b3d578063f2fde38b14610b7c578063f801a69814610b9c578063fe0776f514610bd657600080fd5b8063d6bb62c614610add578063da2b122414610afd578063e0781b7a14610b1d57600080fd5b8063cc1b6c81116100d1578063cc1b6c8114610a67578063cce7ec1314610a7d578063d1f856ee14610a9d578063d22b598914610abd57600080fd5b8063b7d2b162146109f3578063ba9a91a514610a13578063bba06f2714610a4757600080fd5b806394c7d7ee11610164578063a7cd24481161013e578063a7cd24481461094a578063abd9bd2a1461096a578063ac9650d81461098a578063b7009613146109b757600080fd5b806394c7d7ee146108bb578063a166aa89146108db578063a64d95ce1461092a57600080fd5b8063853551b8116101a0578063853551b8146108485780638bdff161146108685780638d1fdf2f1461087d5780638da5cb5b1461089d57600080fd5b8063715018a61461080957806375b238fc1461081e5780638456cb591461083357600080fd5b806337cef791116102a05780634c1da1e21161023e5780635c975abb116102185780635c975abb1461075957806362b40f9f146107715780636d5115bd1461079157806370a08231146107e957600080fd5b80634c1da1e2146106dd57806352962952146106fd578063530dd4561461071d57600080fd5b80633f4ba83a1161027a5780633f4ba83a146106555780634136a33c1461066a57806345c8b1a6146106a75780634665096d146106c757600080fd5b806337cef791146105e35780633adc277a146106035780633ca7c02a1461063a57600080fd5b80631f7b6d321161030d5780632bdb7097116102e75780632bdb7097146105195780633078db6c146105495780633078f1141461056957806330cae187146105c357600080fd5b80631f7b6d321461049f57806321df0da7146104c257806325c471a0146104f957600080fd5b806312be87271161034957806312be872714610417578063167bd3951461044c57806318ff183c1461046c5780631cff79cd1461048c57600080fd5b806308d6122d146103705780630b0a93ba146103925780630b98f975146103f7575b600080fd5b34801561037c57600080fd5b5061039061038b366004613862565b610bf6565b005b34801561039e57600080fd5b506103da6103ad3660046138c8565b6001600160401b039081166000908152600260205260409020600101546801000000000000000090041690565b6040516001600160401b0390911681526020015b60405180910390f35b34801561040357600080fd5b506103906104123660046138e3565b610c51565b34801561042357600080fd5b506104376104323660046138c8565b610c72565b60405163ffffffff90911681526020016103ee565b34801561045857600080fd5b5061039061046736600461390a565b610cad565b34801561047857600080fd5b50610390610487366004613943565b610cc3565b61043761049a3660046139b2565b610d2a565b3480156104ab57600080fd5b506104b4610e97565b6040519081526020016103ee565b3480156104ce57600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b0390911681526020016103ee565b34801561050557600080fd5b50610390610514366004613a1a565b610ea8565b34801561052557600080fd5b50610539610534366004613a5f565b610eca565b60405190151581526020016103ee565b34801561055557600080fd5b50610390610564366004613a8b565b61100e565b34801561057557600080fd5b50610589610584366004613aa8565b6110ae565b6040516103ee949392919065ffffffffffff948516815263ffffffff93841660208201529190921660408201529116606082015260800190565b3480156105cf57600080fd5b506103906105de366004613ac4565b611116565b3480156105ef57600080fd5b506104b46105fe366004613a8b565b611128565b34801561060f57600080fd5b5061062361061e3660046138e3565b611173565b60405165ffffffffffff90911681526020016103ee565b34801561064657600080fd5b506103da6001600160401b0381565b34801561066157600080fd5b506103906111a6565b34801561067657600080fd5b506104376106853660046138e3565b6000908152600360205260409020546601000000000000900463ffffffff1690565b3480156106b357600080fd5b506103906106c2366004613a8b565b6111b8565b3480156106d357600080fd5b5062093a80610437565b3480156106e957600080fd5b506104376106f8366004613a8b565b611226565b34801561070957600080fd5b50610390610718366004613ac4565b611254565b34801561072957600080fd5b506103da6107383660046138c8565b6001600160401b039081166000908152600260205260409020600101541690565b34801561076557600080fd5b5060055460ff16610539565b34801561077d57600080fd5b5061039061078c366004613943565b611266565b34801561079d57600080fd5b506103da6107ac366004613b0d565b6001600160a01b03821660009081526001602090815260408083206001600160e01b0319851684529091529020546001600160401b031692915050565b3480156107f557600080fd5b506104b4610804366004613a8b565b61157a565b34801561081557600080fd5b50610390611659565b34801561082a57600080fd5b506103da600081565b34801561083f57600080fd5b5061039061166b565b34801561085457600080fd5b50610390610863366004613b3b565b61167b565b34801561087457600080fd5b506104b4611712565b34801561088957600080fd5b50610390610898366004613a8b565b611723565b3480156108a957600080fd5b506000546001600160a01b03166104e1565b3480156108c757600080fd5b506103906108d63660046139b2565b611791565b3480156108e757600080fd5b506105396108f6366004613a8b565b6001600160a01b0316600090815260016020819052604090912001546e010000000000000000000000000000900460ff1690565b34801561093657600080fd5b50610390610945366004613b59565b61183d565b34801561095657600080fd5b506104b4610965366004613a5f565b61184f565b34801561097657600080fd5b506104b4610985366004613b83565b6119e0565b34801561099657600080fd5b506109aa6109a5366004613be7565b611a19565b6040516103ee9190613c4c565b3480156109c357600080fd5b506109d76109d2366004613cc6565b611b0b565b60408051921515835263ffffffff9091166020830152016103ee565b3480156109ff57600080fd5b50610390610a0e366004613aa8565b611b62565b348015610a1f57600080fd5b506104b47f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5357600080fd5b50610390610a62366004613943565b611b79565b348015610a7357600080fd5b5062069780610437565b348015610a8957600080fd5b50610539610a98366004613a5f565b611c92565b348015610aa957600080fd5b506109d7610ab8366004613aa8565b611fbb565b348015610ac957600080fd5b50610390610ad8366004613d11565b612038565b348015610ae957600080fd5b50610437610af8366004613b83565b61204a565b348015610b0957600080fd5b50610390610b18366004613a8b565b6121db565b348015610b2957600080fd5b50610539610b38366004613a8b565b612251565b348015610b4957600080fd5b50610b5d610b583660046138e3565b612292565b604080516001600160a01b0390931683526020830191909152016103ee565b348015610b8857600080fd5b50610390610b97366004613a8b565b6122d2565b348015610ba857600080fd5b50610bbc610bb7366004613d2f565b612310565b6040805192835263ffffffff9091166020830152016103ee565b348015610be257600080fd5b50610390610bf1366004613aa8565b612458565b610bfe612481565b60005b82811015610c4a57610c3a85858584818110610c1f57610c1f613da1565b9050602002016020810190610c349190613db7565b846124fc565b610c4381613dea565b9050610c01565b5050505050565b610c59612580565b610c616125ad565b610c6c816064613e03565b60065550565b6001600160401b038116600090815260026020526040812060010154610ca790600160801b90046001600160701b03166125d0565b92915050565b610cb5612481565b610cbf82826125ef565b5050565b610ccb612481565b604051637a9e5e4b60e01b81526001600160a01b038281166004830152831690637a9e5e4b90602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505050565b6000338180610d3b838888886126ab565b9150915081158015610d51575063ffffffff8116155b15610da4578287610d6288886126fe565b6040516381c6f24b60e01b81526001600160a01b0393841660048201529290911660248301526001600160e01b03191660448201526064015b60405180910390fd5b6000610db2848989896119e0565b9050600063ffffffff8316151580610dd95750610dce82611173565b65ffffffffffff1615155b15610dea57610de782612716565b90505b600454610e3d8a610dfb8b8b6126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b0319929092168382015280518084038201815260609093019052815191012090565b600481905550610e858a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250349250612819915050565b506004559450505050505b9392505050565b6000610ea360076128ac565b905090565b610eb0612481565b610ec48383610ebe86610c72565b846128b7565b50505050565b6000610ed4612580565b610edc6125ad565b6001600160a01b038316610f0357604051630560d24960e11b815260040160405180910390fd5b81600003610f245760405163783bc40960e01b815260040160405180910390fd5b60055461010090046001600160a01b0316610f525760405163066f53b160e01b815260040160405180910390fd5b600560019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613e16565b610fd4906002613e39565b610fdf90600a613f36565b82111561100257604051630164b7c960e61b815260048101839052602401610d9b565b610e9060078484612b23565b611016612580565b61101e6125ad565b60055461010090046001600160a01b031661104c5760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b906024015b600060405180830381600087803b15801561109a57600080fd5b505af1158015610c4a573d6000803e3d6000fd5b6001600160401b03821660009081526002602090815260408083206001600160a01b03851684529091528120805465ffffffffffff81169291829182919061110890660100000000000090046001600160701b0316612b41565b969991985096509350505050565b61111e612481565b610cbf8282612b64565b60006001600160a01b03821661115157604051630560d24960e11b815260040160405180910390fd5b61115c600783612c06565b61116857506000919050565b610ca7600783612c1b565b60008181526003602052604081205465ffffffffffff1661119381612c30565b61119d5780610e90565b60009392505050565b6111ae612580565b6111b6612c5f565b565b6111c0612580565b60055461010090046001600160a01b03166111ee5760405163066f53b160e01b815260040160405180910390fd5b6005546040516322e458d360e11b81526001600160a01b038381166004830152610100909204909116906345c8b1a690602401611080565b6001600160a01b038116600090815260016020819052604082200154610ca7906001600160701b03166125d0565b61125c612481565b610cbf8282612cb1565b61126e612580565b6112766125ad565b60055461010090046001600160a01b03166112a45760405163066f53b160e01b815260040160405180910390fd5b600554604051637a9e5e4b60e01b81526001600160a01b03838116600483015261010090920490911690637a9e5e4b90602401600060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b50506005546040516370a0823160e01b81523060048201526101009091046001600160a01b0316925063a9059cbb9150839083906370a0823190602401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190613f5e565b6114225760055460405163bbea11c960e01b81526101009091046001600160a01b03166004820152602401610d9b565b6000805b61143060076128ac565b82101561156e576000611444600784612d66565b506040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613f45565b9150600082118015611532575060405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613f5e565b155b1561155b5760405163bbea11c960e01b81526001600160a01b0382166004820152602401610d9b565b508161156681613dea565b925050611426565b836001600160a01b0316ff5b60405163703c0dbd60e11b81526001600160a01b0382166004820152600090309063e0781b7a90602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190613f5e565b6115f157506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015611635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190613f45565b611661612580565b6111b66000612d82565b611673612580565b6111b6612ddf565b611683612481565b6001600160401b03831615806116a157506001600160401b03838116145b156116ca5760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b826001600160401b03167f1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a4508383604051611705929190613fa4565b60405180910390a2505050565b60006064600654610ea39190613fb8565b61172b612580565b60055461010090046001600160a01b03166117595760405163066f53b160e01b815260040160405180910390fd5b600554604051638d1fdf2f60e01b81526001600160a01b03838116600483015261010090920490911690638d1fdf2f90602401611080565b60408051638fb3603760e01b80825291513392918391638fb36037916004808201926020929091908290030181865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190613fcb565b6001600160e01b0319161461182957604051630641fee960e31b81526001600160a01b0382166004820152602401610d9b565b610c4a611838858386866119e0565b612716565b611845612481565b610cbf8282612e1c565b60006001600160a01b03831661187857604051630560d24960e11b815260040160405180910390fd5b8160000361189957604051631208b21b60e01b815260040160405180910390fd5b60055461010090046001600160a01b03166118c75760405163066f53b160e01b815260040160405180910390fd5b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613e16565b611936906002613e39565b6040516337cef79160e01b81526001600160a01b038616600482015260ff91909116915060009030906337cef79190602401602060405180830381865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190613f45565b90506119b682600a613fe8565b6006546119c38684613ff4565b6119cd9190613ff4565b6119d7919061400b565b95945050505050565b6000848484846040516020016119f9949392919061402d565b604051602081830303815290604052805190602001209050949350505050565b604080516000815260208101909152606090826001600160401b03811115611a4357611a43614084565b604051908082528060200260200182016040528015611a7657816020015b6060815260200190600190039081611a615790505b50915060005b83811015611b0357611ad330868684818110611a9a57611a9a613da1565b9050602002810190611aac919061409a565b85604051602001611abf939291906140e0565b604051602081830303815290604052612f3b565b838281518110611ae557611ae5613da1565b60200260200101819052508080611afb90613dea565b915050611a7c565b505092915050565b600080611b206000546001600160a01b031690565b6001600160a01b0316856001600160a01b031603611b445750600190506000611b5a565b6000611b51600087611fbb565b50925060009150505b935093915050565b611b6a612481565b611b748282612fa8565b505050565b611b81612580565b611b896125ad565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613f45565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613f5e565b610cbf57604051635d3f476b60e01b81526001600160a01b0383166004820152602401610d9b565b6000611c9c6130a2565b6040516314f9a48960e31b81526001600160a01b038416600482015260248101839052600090309063a7cd244890604401602060405180830381865afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e9190613f45565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190613f45565b6005546040516370a0823160e01b81523060048201529192506000916101009091046001600160a01b0316906370a0823190602401602060405180830381865afa158015611dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df29190613f45565b905084821015611e34576040516321d6041b60e01b81523360048201526001600160a01b03871660248201526044810183905260648101869052608401610d9b565b82811015611e585760405163705adf1f60e11b815260048101849052602401610d9b565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af1158015611eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecf9190613f5e565b611edf5760009350505050610ca7565b60055460405163a9059cbb60e01b81523360048201526024810185905260009161010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190613f5e565b90508015611fb15785876001600160a01b0316336001600160a01b03167f314898f27b62de59a1d7326707c74b7991036f43ed22658d064228c032e76fda87604051611fa891815260200190565b60405180910390a45b9695505050505050565b60008067fffffffffffffffe196001600160401b03851601611fe35750600190506000612031565b600080611ff086866110ae565b5050915091508165ffffffffffff1660001415801561202657506120126130c6565b65ffffffffffff168265ffffffffffff1611155b935091506120319050565b9250929050565b612040612481565b610cbf82826130d1565b6000338161205885856126fe565b90506000612068888888886119e0565b60008181526003602052604081205491925065ffffffffffff90911690036120a65760405163060a299b60e41b815260048101829052602401610d9b565b826001600160a01b0316886001600160a01b0316146121765760006120cc600085611fbb565b506001600160a01b03891660009081526001602090815260408083206001600160e01b0319881684529091528120549192509061211b90612115906001600160401b03166103ad565b86611fbb565b5090508115801561212a575080155b1561217357604051630ff89d4760e21b81526001600160a01b038087166004830152808c1660248301528a1660448201526001600160e01b031985166064820152608401610d9b565b50505b600081815260036020526040808220805465ffffffffffff1916908190559051660100000000000090910463ffffffff1691829184917fbd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f791a398975050505050505050565b6121e3612580565b6121eb6125ad565b6001600160a01b0381166122125760405163066f53b160e01b815260040160405180910390fd5b600580546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b600061225b6130a2565b6001600160a01b03821661228257604051630560d24960e11b815260040160405180910390fd5b610ca7600783612c06565b919050565b60008061229f60076128ac565b83106122be5760405163188da0b360e21b815260040160405180910390fd5b6122c9600784612d66565b91509150915091565b6122da612580565b6001600160a01b03811661230457604051631e4fbdf760e01b815260006004820152602401610d9b565b61230d81612d82565b50565b6000803381612321828989896126ab565b91505060008163ffffffff166123356130c6565b61233f9190614107565b905063ffffffff82161580612376575060008665ffffffffffff1611801561237657508065ffffffffffff168665ffffffffffff16105b15612387578289610d628a8a6126fe565b6123a18665ffffffffffff168265ffffffffffff16613190565b95506123af838a8a8a6119e0565b94506123ba856131a6565b60008581526003602052604090819020805465ffffffffffff891669ffffffffffffffffffff1982161766010000000000009182900463ffffffff90811660010190811692830291909117909255915190955086907f82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b490612444908a9088908f908f908f9061412d565b60405180910390a350505094509492505050565b6001600160a01b0381163314611b6a57604051635f159e6360e01b815260040160405180910390fd5b336000806124908382366131f3565b9150915081611b74578063ffffffff166000036124ec5760006124b381366132f7565b5060405163f07e038f60e01b81526001600160a01b03871660048201526001600160401b03821660248201529092506044019050610d9b565b610ec461183884306000366119e0565b6001600160a01b03831660008181526001602090815260408083206001600160e01b0319871680855290835292819020805467ffffffffffffffff19166001600160401b038716908117909155905192835292917f9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151910160405180910390a3505050565b6000546001600160a01b031633146111b65760405163118cdaa760e01b8152336004820152602401610d9b565b60055460ff166111b657604051638dfc202b60e01b815260040160405180910390fd5b6000806125e5836001600160701b0316612b41565b5090949350505050565b306001600160a01b0383160361262357604051630b40d17960e31b81526001600160a01b0383166004820152602401610d9b565b6001600160a01b0382166000818152600160208190526040918290200180548415156e010000000000000000000000000000026eff000000000000000000000000000019909116179055517f90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb1389061269f90841515815260200190565b60405180910390a25050565b600080306001600160a01b038616036126d2576126c98685856131f3565b915091506126f5565b600483106126ee576126e986866109d287876126fe565b6126c9565b5060009050805b94509492505050565b600061270d600482848661405a565b610e9091614173565b60008181526003602052604081205465ffffffffffff8116906601000000000000900463ffffffff168183036127625760405163060a299b60e41b815260048101859052602401610d9b565b61276a6130c6565b65ffffffffffff168265ffffffffffff16111561279d57604051630c65b5bd60e11b815260048101859052602401610d9b565b6127a682612c30565b156127c757604051631e2975b960e21b815260048101859052602401610d9b565b600084815260036020526040808220805465ffffffffffff191690555163ffffffff83169186917f76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d9190a39392505050565b60608147101561283e5760405163cd78605960e01b8152306004820152602401610d9b565b600080856001600160a01b0316848660405161285a91906141a1565b60006040518083038185875af1925050503d8060008114612897576040519150601f19603f3d011682016040523d82523d6000602084013e61289c565b606091505b5091509150611fb18683836134df565b6000610ca78261353b565b600067fffffffffffffffe196001600160401b038616016128f65760405163061c6a4360e21b81526001600160401b0386166004820152602401610d9b565b6001600160401b03851660009081526002602090815260408083206001600160a01b038816845290915281205465ffffffffffff16159081156129f8578463ffffffff166129426130c6565b61294c9190614107565b905060405180604001604052808265ffffffffffff16815260200161297a8663ffffffff1663ffffffff1690565b6001600160701b039081169091526001600160401b03891660009081526002602090815260408083206001600160a01b038c168452825290912083518154949092015190921666010000000000000273ffffffffffffffffffffffffffffffffffffffff1990931665ffffffffffff90911617919091179055612ab5565b6001600160401b03871660009081526002602090815260408083206001600160a01b038a168452909152812054612a459166010000000000009091046001600160701b0316908690613546565b6001600160401b03891660009081526002602090815260408083206001600160a01b038c168452909152902080546001600160701b039093166601000000000000027fffffffffffffffffffffffff0000000000000000000000000000ffffffffffff9093169290921790915590505b6040805163ffffffff8616815265ffffffffffff831660208201528315158183015290516001600160a01b038816916001600160401b038a16917ff98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf9181900360600190a35095945050505050565b6000612b39846001600160a01b038516846135f0565b949350505050565b6000806000612b5784612b526130c6565b61360d565b9250925092509193909250565b6001600160401b0382161580612b8257506001600160401b03828116145b15612bab5760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b03828116600081815260026020526040808220600101805467ffffffffffffffff19169486169485179055517f1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e63409190a35050565b6000610e90836001600160a01b038416613661565b6000610e90836001600160a01b03841661366d565b6000612c3a6130c6565b65ffffffffffff16612c4f62093a8084614107565b65ffffffffffff16111592915050565b612c676125ad565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160401b0382161580612ccf57506001600160401b03828116145b15612cf85760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b0382811660008181526002602052604080822060010180546fffffffffffffffff0000000000000000191668010000000000000000958716958602179055517f7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae29190a35050565b6000808080612d7586866136b4565b9097909650945050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612de76130a2565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c943390565b67fffffffffffffffe196001600160401b03831601612e595760405163061c6a4360e21b81526001600160401b0383166004820152602401610d9b565b6001600160401b038216600090815260026020526040812060010154612e9390600160801b90046001600160701b03168362069780613546565b6001600160401b0385166000818152600260205260409081902060010180546001600160701b03909516600160801b027fffff0000000000000000000000000000ffffffffffffffffffffffffffffffff9095169490941790935591519092507ffeb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b4890611705908590859063ffffffff92909216825265ffffffffffff16602082015260400190565b6060600080846001600160a01b031684604051612f5891906141a1565b600060405180830381855af49150503d8060008114612f93576040519150601f19603f3d011682016040523d82523d6000602084013e612f98565b606091505b50915091506119d78583836134df565b600067fffffffffffffffe196001600160401b03841601612fe75760405163061c6a4360e21b81526001600160401b0384166004820152602401610d9b565b6001600160401b03831660009081526002602090815260408083206001600160a01b038616845290915281205465ffffffffffff16900361302a57506000610ca7565b6001600160401b03831660008181526002602090815260408083206001600160a01b0387168085529252808320805473ffffffffffffffffffffffffffffffffffffffff19169055519092917ff229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c16691a350600192915050565b60055460ff16156111b65760405163d93c066560e01b815260040160405180910390fd5b6000610ea3426136df565b6001600160a01b038216600090815260016020819052604082200154613104906001600160701b03168362069780613546565b6001600160a01b03851660008181526001602081815260409283902090910180546dffffffffffffffffffffffffffff19166001600160701b039690961695909517909455805163ffffffff8716815265ffffffffffff841694810194909452919350917fa56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c9101611705565b600081831161319f5781610e90565b5090919050565b60008181526003602052604090205465ffffffffffff1680158015906131d257506131d081612c30565b155b15610cbf5760405163813e945960e01b815260048101839052602401610d9b565b600080600483101561320a57506000905080611b5a565b306001600160a01b038616036132795761326e3061322886866126fe565b604080516001600160a01b03939093166020808501919091526001600160e01b031992909216838201528051808403820181526060909301905281519101206004541490565b600091509150611b5a565b600080600061328887876132f7565b925092509250826132a25760008094509450505050611b5a565b6000806132af848b611fbb565b91509150816132c957600080965096505050505050611b5a565b6132df8363ffffffff168263ffffffff16613190565b63ffffffff8116159b909a5098505050505050505050565b600080806004841015613312575060009150819050806134d8565b600061331e86866126fe565b90506001600160e01b031981166310a6aa3760e31b148061334f57506001600160e01b031981166330cae18760e01b145b8061336a57506001600160e01b0319811663294b14a960e11b145b8061338557506001600160e01b03198116635326cae760e11b145b806133a057506001600160e01b0319811663d22b598960e01b145b156133b6576001600080935093509350506134d8565b6001600160e01b0319811663063fc60f60e21b14806133e557506001600160e01b0319811663167bd39560e01b145b8061340057506001600160e01b031981166308d6122d60e01b145b1561344257600061341560246004888a61405a565b8101906134229190613a8b565b9050600061342f82611226565b600196506000955093506134d892505050565b6001600160e01b0319811663012e238d60e51b148061347157506001600160e01b03198116635be958b160e11b145b156134cb57600061348660246004888a61405a565b81019061349391906138c8565b905060016134bc826001600160401b039081166000908152600260205260409020600101541690565b600094509450945050506134d8565b6000806000935093509350505b9250925092565b6060826134f4576134ef82613716565b610e90565b815115801561350b57506001600160a01b0384163b155b1561353457604051639996b31560e01b81526001600160a01b0385166004820152602401610d9b565b5080610e90565b6000610ca78261373f565b600080600061355d866001600160701b03166125d0565b9050600061359a8563ffffffff168763ffffffff168463ffffffff161161358557600061358f565b61358f88856141bd565b63ffffffff16613190565b90508063ffffffff166135ab6130c6565b6135b59190614107565b925063ffffffff8616602083901b67ffffffff0000000016604085901b6dffffffffffff000000000000000016171793505050935093915050565b60008281526002840160205260408120829055612b398484613749565b6000808069ffffffffffffffffffff602086901c166001600160701b03861665ffffffffffff604088901c811690871681111561364c57828282613651565b816000805b9550955095505050509250925092565b6000610e908383613755565b60008181526002830160205260408120548015801561369357506136918484613661565b155b15610e905760405163015ab34360e11b815260048101849052602401610d9b565b600080806136c2858561376d565b600081815260029690960160205260409095205494959350505050565b600065ffffffffffff821115613712576040516306dfcc6560e41b81526030600482015260248101839052604401610d9b565b5090565b8051156137265780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000610ca7825490565b6000610e908383613779565b60008181526001830160205260408120541515610e90565b6000610e9083836137c8565b60008181526001830160205260408120546137c057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca7565b506000610ca7565b60008260000182815481106137df576137df613da1565b9060005260206000200154905092915050565b6001600160a01b038116811461230d57600080fd5b60008083601f84011261381957600080fd5b5081356001600160401b0381111561383057600080fd5b6020830191508360208260051b850101111561203157600080fd5b80356001600160401b038116811461228d57600080fd5b6000806000806060858703121561387857600080fd5b8435613883816137f2565b935060208501356001600160401b0381111561389e57600080fd5b6138aa87828801613807565b90945092506138bd90506040860161384b565b905092959194509250565b6000602082840312156138da57600080fd5b610e908261384b565b6000602082840312156138f557600080fd5b5035919050565b801515811461230d57600080fd5b6000806040838503121561391d57600080fd5b8235613928816137f2565b91506020830135613938816138fc565b809150509250929050565b6000806040838503121561395657600080fd5b8235613961816137f2565b91506020830135613938816137f2565b60008083601f84011261398357600080fd5b5081356001600160401b0381111561399a57600080fd5b60208301915083602082850101111561203157600080fd5b6000806000604084860312156139c757600080fd5b83356139d2816137f2565b925060208401356001600160401b038111156139ed57600080fd5b6139f986828701613971565b9497909650939450505050565b803563ffffffff8116811461228d57600080fd5b600080600060608486031215613a2f57600080fd5b613a388461384b565b92506020840135613a48816137f2565b9150613a5660408501613a06565b90509250925092565b60008060408385031215613a7257600080fd5b8235613a7d816137f2565b946020939093013593505050565b600060208284031215613a9d57600080fd5b8135610e90816137f2565b60008060408385031215613abb57600080fd5b6139618361384b565b60008060408385031215613ad757600080fd5b613ae08361384b565b9150613aee6020840161384b565b90509250929050565b6001600160e01b03198116811461230d57600080fd5b60008060408385031215613b2057600080fd5b8235613b2b816137f2565b9150602083013561393881613af7565b600080600060408486031215613b5057600080fd5b6139d28461384b565b60008060408385031215613b6c57600080fd5b613b758361384b565b9150613aee60208401613a06565b60008060008060608587031215613b9957600080fd5b8435613ba4816137f2565b93506020850135613bb4816137f2565b925060408501356001600160401b03811115613bcf57600080fd5b613bdb87828801613971565b95989497509550505050565b60008060208385031215613bfa57600080fd5b82356001600160401b03811115613c1057600080fd5b613c1c85828601613807565b90969095509350505050565b60005b83811015613c43578181015183820152602001613c2b565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613cb957878503603f1901845281518051808752613c9a818989018a8501613c28565b601f01601f191695909501860194509285019290850190600101613c73565b5092979650505050505050565b600080600060608486031215613cdb57600080fd5b8335613ce6816137f2565b92506020840135613cf6816137f2565b91506040840135613d0681613af7565b809150509250925092565b60008060408385031215613d2457600080fd5b8235613b75816137f2565b60008060008060608587031215613d4557600080fd5b8435613d50816137f2565b935060208501356001600160401b03811115613d6b57600080fd5b613d7787828801613971565b909450925050604085013565ffffffffffff81168114613d9657600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613dc957600080fd5b8135610e9081613af7565b634e487b7160e01b600052601160045260246000fd5b600060018201613dfc57613dfc613dd4565b5060010190565b80820180821115610ca757610ca7613dd4565b600060208284031215613e2857600080fd5b815160ff81168114610e9057600080fd5b60ff8181168382160190811115610ca757610ca7613dd4565b600181815b80851115613e8d578160001904821115613e7357613e73613dd4565b80851615613e8057918102915b93841c9390800290613e57565b509250929050565b600082613ea457506001610ca7565b81613eb157506000610ca7565b8160018114613ec75760028114613ed157613eed565b6001915050610ca7565b60ff841115613ee257613ee2613dd4565b50506001821b610ca7565b5060208310610133831016604e8410600b8410161715613f10575081810a610ca7565b613f1a8383613e52565b8060001904821115613f2e57613f2e613dd4565b029392505050565b6000610e9060ff841683613e95565b600060208284031215613f5757600080fd5b5051919050565b600060208284031215613f7057600080fd5b8151610e90816138fc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000612b39602083018486613f7b565b81810381811115610ca757610ca7613dd4565b600060208284031215613fdd57600080fd5b8151610e9081613af7565b6000610e908383613e95565b8082028115828204841417610ca757610ca7613dd4565b60008261402857634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03808716835280861660208401525060606040830152611fb1606083018486613f7b565b6000808585111561406a57600080fd5b8386111561407757600080fd5b5050820193919092039150565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126140b157600080fd5b8301803591506001600160401b038211156140cb57600080fd5b60200191503681900382131561203157600080fd5b8284823760008382016000815283516140fd818360208801613c28565b0195945050505050565b65ffffffffffff81811683821601908082111561412657614126613dd4565b5092915050565b65ffffffffffff8616815260006001600160a01b03808716602084015280861660408401525060806060830152614168608083018486613f7b565b979650505050505050565b6001600160e01b03198135818116916004851015611b035760049490940360031b84901b1690921692915050565b600082516141b3818460208701613c28565b9190910192915050565b63ffffffff82811682821603908082111561412657614126613dd456fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xB7D2B162 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xD6BB62C6 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE0886F90 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE0886F90 EQ PUSH2 0xB3D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xB7C JUMPI DUP1 PUSH4 0xF801A698 EQ PUSH2 0xB9C JUMPI DUP1 PUSH4 0xFE0776F5 EQ PUSH2 0xBD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD6BB62C6 EQ PUSH2 0xADD JUMPI DUP1 PUSH4 0xDA2B1224 EQ PUSH2 0xAFD JUMPI DUP1 PUSH4 0xE0781B7A EQ PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC1B6C81 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCC1B6C81 EQ PUSH2 0xA67 JUMPI DUP1 PUSH4 0xCCE7EC13 EQ PUSH2 0xA7D JUMPI DUP1 PUSH4 0xD1F856EE EQ PUSH2 0xA9D JUMPI DUP1 PUSH4 0xD22B5989 EQ PUSH2 0xABD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB7D2B162 EQ PUSH2 0x9F3 JUMPI DUP1 PUSH4 0xBA9A91A5 EQ PUSH2 0xA13 JUMPI DUP1 PUSH4 0xBBA06F27 EQ PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94C7D7EE GT PUSH2 0x164 JUMPI DUP1 PUSH4 0xA7CD2448 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0xA7CD2448 EQ PUSH2 0x94A JUMPI DUP1 PUSH4 0xABD9BD2A EQ PUSH2 0x96A JUMPI DUP1 PUSH4 0xAC9650D8 EQ PUSH2 0x98A JUMPI DUP1 PUSH4 0xB7009613 EQ PUSH2 0x9B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94C7D7EE EQ PUSH2 0x8BB JUMPI DUP1 PUSH4 0xA166AA89 EQ PUSH2 0x8DB JUMPI DUP1 PUSH4 0xA64D95CE EQ PUSH2 0x92A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x853551B8 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x853551B8 EQ PUSH2 0x848 JUMPI DUP1 PUSH4 0x8BDFF161 EQ PUSH2 0x868 JUMPI DUP1 PUSH4 0x8D1FDF2F EQ PUSH2 0x87D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x89D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x809 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x81E JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x37CEF791 GT PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x4C1DA1E2 GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x218 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0x62B40F9F EQ PUSH2 0x771 JUMPI DUP1 PUSH4 0x6D5115BD EQ PUSH2 0x791 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x7E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4C1DA1E2 EQ PUSH2 0x6DD JUMPI DUP1 PUSH4 0x52962952 EQ PUSH2 0x6FD JUMPI DUP1 PUSH4 0x530DD456 EQ PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x27A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x655 JUMPI DUP1 PUSH4 0x4136A33C EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x45C8B1A6 EQ PUSH2 0x6A7 JUMPI DUP1 PUSH4 0x4665096D EQ PUSH2 0x6C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x37CEF791 EQ PUSH2 0x5E3 JUMPI DUP1 PUSH4 0x3ADC277A EQ PUSH2 0x603 JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F7B6D32 GT PUSH2 0x30D JUMPI DUP1 PUSH4 0x2BDB7097 GT PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x2BDB7097 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x3078DB6C EQ PUSH2 0x549 JUMPI DUP1 PUSH4 0x3078F114 EQ PUSH2 0x569 JUMPI DUP1 PUSH4 0x30CAE187 EQ PUSH2 0x5C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F7B6D32 EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x21DF0DA7 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0x25C471A0 EQ PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12BE8727 GT PUSH2 0x349 JUMPI DUP1 PUSH4 0x12BE8727 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x167BD395 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x18FF183C EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x1CFF79CD EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8D6122D EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0xB0A93BA EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xB98F975 EQ PUSH2 0x3F7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0xBF6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH9 0x10000000000000000 SWAP1 DIV AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x432 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x390A JUMP JUMPDEST PUSH2 0xCAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x437 PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x39B2 JUMP JUMPDEST PUSH2 0xD2A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A1A JUMP JUMPDEST PUSH2 0xEA8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x564 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x100E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x575 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x589 PUSH2 0x584 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP4 DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x5DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC4 JUMP JUMPDEST PUSH2 0x1116 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x5FE CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1128 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x623 PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x11A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x685 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x6C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x11B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x93A80 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0x6F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1226 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AC4 JUMP JUMPDEST PUSH2 0x1254 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x738 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x539 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x78C CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x1266 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH2 0x7AC CALLDATASIZE PUSH1 0x4 PUSH2 0x3B0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x804 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x157A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x1659 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3DA PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x166B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x863 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B3B JUMP JUMPDEST PUSH2 0x167B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x1712 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x898 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x1723 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x8D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x39B2 JUMP JUMPDEST PUSH2 0x1791 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x8F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH15 0x10000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x936 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0x945 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B59 JUMP JUMPDEST PUSH2 0x183D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x965 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0x184F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH2 0x985 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B83 JUMP JUMPDEST PUSH2 0x19E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9AA PUSH2 0x9A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BE7 JUMP JUMPDEST PUSH2 0x1A19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x3C4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D7 PUSH2 0x9D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3CC6 JUMP JUMPDEST PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xA0E CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x1B62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xA62 CALLDATASIZE PUSH1 0x4 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x1B79 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x69780 PUSH2 0x437 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0xA98 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5F JUMP JUMPDEST PUSH2 0x1C92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D7 PUSH2 0xAB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x1FBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xAD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D11 JUMP JUMPDEST PUSH2 0x2038 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x437 PUSH2 0xAF8 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B83 JUMP JUMPDEST PUSH2 0x204A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xB18 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x21DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0xB38 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x2251 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB5D PUSH2 0xB58 CALLDATASIZE PUSH1 0x4 PUSH2 0x38E3 JUMP JUMPDEST PUSH2 0x2292 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xB97 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A8B JUMP JUMPDEST PUSH2 0x22D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBBC PUSH2 0xBB7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D2F JUMP JUMPDEST PUSH2 0x2310 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x3EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x390 PUSH2 0xBF1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AA8 JUMP JUMPDEST PUSH2 0x2458 JUMP JUMPDEST PUSH2 0xBFE PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xC4A JUMPI PUSH2 0xC3A DUP6 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xC1F JUMPI PUSH2 0xC1F PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC34 SWAP2 SWAP1 PUSH2 0x3DB7 JUMP JUMPDEST DUP5 PUSH2 0x24FC JUMP JUMPDEST PUSH2 0xC43 DUP2 PUSH2 0x3DEA JUMP JUMPDEST SWAP1 POP PUSH2 0xC01 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0xC61 PUSH2 0x25AD JUMP JUMPDEST PUSH2 0xC6C DUP2 PUSH1 0x64 PUSH2 0x3E03 JUMP JUMPDEST PUSH1 0x6 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xCA7 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCB5 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x25EF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xCCB PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP4 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD22 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 DUP1 PUSH2 0xD3B DUP4 DUP9 DUP9 DUP9 PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xD51 JUMPI POP PUSH4 0xFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0xDA4 JUMPI DUP3 DUP8 PUSH2 0xD62 DUP9 DUP9 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x81C6F24B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDB2 DUP5 DUP10 DUP10 DUP10 PUSH2 0x19E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH4 0xFFFFFFFF DUP4 AND ISZERO ISZERO DUP1 PUSH2 0xDD9 JUMPI POP PUSH2 0xDCE DUP3 PUSH2 0x1173 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xDEA JUMPI PUSH2 0xDE7 DUP3 PUSH2 0x2716 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0xE3D DUP11 PUSH2 0xDFB DUP12 DUP12 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0xE85 DUP11 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP CALLVALUE SWAP3 POP PUSH2 0x2819 SWAP2 POP POP JUMP JUMPDEST POP PUSH1 0x4 SSTORE SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA3 PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEB0 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xEC4 DUP4 DUP4 PUSH2 0xEBE DUP7 PUSH2 0xC72 JUMP JUMPDEST DUP5 PUSH2 0x28B7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xED4 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0xEDC PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF03 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x783BC409 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF52 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFC9 SWAP2 SWAP1 PUSH2 0x3E16 JUMP JUMPDEST PUSH2 0xFD4 SWAP1 PUSH1 0x2 PUSH2 0x3E39 JUMP JUMPDEST PUSH2 0xFDF SWAP1 PUSH1 0xA PUSH2 0x3F36 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x1002 JUMPI PUSH1 0x40 MLOAD PUSH4 0x164B7C9 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xE90 PUSH1 0x7 DUP5 DUP5 PUSH2 0x2B23 JUMP JUMPDEST PUSH2 0x1016 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x101E PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x109A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 SWAP1 PUSH2 0x1108 SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x2B41 JUMP JUMPDEST SWAP7 SWAP10 SWAP2 SWAP9 POP SWAP7 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x111E PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2B64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1151 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x115C PUSH1 0x7 DUP4 PUSH2 0x2C06 JUMP JUMPDEST PUSH2 0x1168 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCA7 PUSH1 0x7 DUP4 PUSH2 0x2C1B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x1193 DUP2 PUSH2 0x2C30 JUMP JUMPDEST PUSH2 0x119D JUMPI DUP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11AE PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x2C5F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C0 PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x22E458D3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x45C8B1A6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0xCA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST PUSH2 0x125C PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2CB1 JUMP JUMPDEST PUSH2 0x126E PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x1276 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7A9E5E4B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x7A9E5E4B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 POP PUSH4 0xA9059CBB SWAP2 POP DUP4 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x135F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1383 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13CE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13F2 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x1422 JUMPI PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBBEA11C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH2 0x1430 PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x156E JUMPI PUSH1 0x0 PUSH2 0x1444 PUSH1 0x7 DUP5 PUSH2 0x2D66 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14B0 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x1532 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x150C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1530 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x155B JUMPI PUSH1 0x40 MLOAD PUSH4 0xBBEA11C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST POP DUP2 PUSH2 0x1566 DUP2 PUSH2 0x3DEA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1426 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SELFDESTRUCT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x703C0DBD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0xE0781B7A SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15E5 SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x15F1 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1635 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCA7 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH2 0x1661 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH1 0x0 PUSH2 0x2D82 JUMP JUMPDEST PUSH2 0x1673 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x2DDF JUMP JUMPDEST PUSH2 0x1683 PUSH2 0x2481 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ISZERO DUP1 PUSH2 0x16A1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x16CA JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH32 0x1256F5B5ECB89CAEC12DB449738F2FBCD1BA5806CF38F35413F4E5C15BF6A450 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1705 SWAP3 SWAP2 SWAP1 PUSH2 0x3FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH1 0x6 SLOAD PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x3FB8 JUMP JUMPDEST PUSH2 0x172B PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x8D1FDF2F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x8D1FDF2F SWAP1 PUSH1 0x24 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x8FB36037 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 MLOAD CALLER SWAP3 SWAP2 DUP4 SWAP2 PUSH4 0x8FB36037 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17F6 SWAP2 SWAP1 PUSH2 0x3FCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1829 JUMPI PUSH1 0x40 MLOAD PUSH4 0x641FEE9 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xC4A PUSH2 0x1838 DUP6 DUP4 DUP7 DUP7 PUSH2 0x19E0 JUMP JUMPDEST PUSH2 0x2716 JUMP JUMPDEST PUSH2 0x1845 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1878 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x1899 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1208B21B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1907 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x192B SWAP2 SWAP1 PUSH2 0x3E16 JUMP JUMPDEST PUSH2 0x1936 SWAP1 PUSH1 0x2 PUSH2 0x3E39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x37CEF791 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND SWAP2 POP PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0x37CEF791 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1985 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19A9 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP1 POP PUSH2 0x19B6 DUP3 PUSH1 0xA PUSH2 0x3FE8 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x19C3 DUP7 DUP5 PUSH2 0x3FF4 JUMP JUMPDEST PUSH2 0x19CD SWAP2 SWAP1 PUSH2 0x3FF4 JUMP JUMPDEST PUSH2 0x19D7 SWAP2 SWAP1 PUSH2 0x400B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19F9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x402D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A43 JUMPI PUSH2 0x1A43 PUSH2 0x4084 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A76 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1A61 JUMPI SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1B03 JUMPI PUSH2 0x1AD3 ADDRESS DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x1A9A JUMPI PUSH2 0x1A9A PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1AAC SWAP2 SWAP1 PUSH2 0x409A JUMP JUMPDEST DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1ABF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x40E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2F3B JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AE5 JUMPI PUSH2 0x1AE5 PUSH2 0x3DA1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1AFB SWAP1 PUSH2 0x3DEA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A7C JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B20 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1B44 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B51 PUSH1 0x0 DUP8 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP3 POP PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B6A PUSH2 0x2481 JUMP JUMPDEST PUSH2 0x1B74 DUP3 DUP3 PUSH2 0x2FA8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1B81 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x1B89 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BFB SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C6A SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x5D3F476B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C9C PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x14F9A489 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 ADDRESS SWAP1 PUSH4 0xA7CD2448 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D0E SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D7C SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1DCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DF2 SWAP2 SWAP1 PUSH2 0x3F45 JUMP JUMPDEST SWAP1 POP DUP5 DUP3 LT ISZERO PUSH2 0x1E34 JUMPI PUSH1 0x40 MLOAD PUSH4 0x21D6041B PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1E58 JUMPI PUSH1 0x40 MLOAD PUSH4 0x705ADF1F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1ECF SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST PUSH2 0x1EDF JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F5A SWAP2 SWAP1 PUSH2 0x3F5E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1FB1 JUMPI DUP6 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x314898F27B62DE59A1D7326707C74B7991036F43ED22658D064228C032E76FDA DUP8 PUSH1 0x40 MLOAD PUSH2 0x1FA8 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND ADD PUSH2 0x1FE3 JUMPI POP PUSH1 0x1 SWAP1 POP PUSH1 0x0 PUSH2 0x2031 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FF0 DUP7 DUP7 PUSH2 0x10AE JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP DUP2 PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO DUP1 ISZERO PUSH2 0x2026 JUMPI POP PUSH2 0x2012 PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x2031 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2040 PUSH2 0x2481 JUMP JUMPDEST PUSH2 0xCBF DUP3 DUP3 PUSH2 0x30D1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2058 DUP6 DUP6 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2068 DUP9 DUP9 DUP9 DUP9 PUSH2 0x19E0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 SUB PUSH2 0x20A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2176 JUMPI PUSH1 0x0 PUSH2 0x20CC PUSH1 0x0 DUP6 PUSH2 0x1FBB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x211B SWAP1 PUSH2 0x2115 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x3AD JUMP JUMPDEST DUP7 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x212A JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x2173 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFF89D47 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP1 DUP13 AND PUSH1 0x24 DUP4 ADD MSTORE DUP11 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD9B JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 DUP2 SWAP1 SSTORE SWAP1 MLOAD PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 DUP3 SWAP2 DUP5 SWAP2 PUSH32 0xBD9AC67A6E2F6463B80927326310338BCBB4BDB7936CE1365EA3E01067E7B9F7 SWAP2 LOG3 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x21E3 PUSH2 0x2580 JUMP JUMPDEST PUSH2 0x21EB PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2212 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66F53B1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x225B PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2282 JUMPI PUSH1 0x40 MLOAD PUSH4 0x560D249 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCA7 PUSH1 0x7 DUP4 PUSH2 0x2C06 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x229F PUSH1 0x7 PUSH2 0x28AC JUMP JUMPDEST DUP4 LT PUSH2 0x22BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x188DA0B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22C9 PUSH1 0x7 DUP5 PUSH2 0x2D66 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x22DA PUSH2 0x2580 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2304 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x230D DUP2 PUSH2 0x2D82 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER DUP2 PUSH2 0x2321 DUP3 DUP10 DUP10 DUP10 PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x2335 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x233F SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x2376 JUMPI POP PUSH1 0x0 DUP7 PUSH6 0xFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x2376 JUMPI POP DUP1 PUSH6 0xFFFFFFFFFFFF AND DUP7 PUSH6 0xFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x2387 JUMPI DUP3 DUP10 PUSH2 0xD62 DUP11 DUP11 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x23A1 DUP7 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST SWAP6 POP PUSH2 0x23AF DUP4 DUP11 DUP11 DUP11 PUSH2 0x19E0 JUMP JUMPDEST SWAP5 POP PUSH2 0x23BA DUP6 PUSH2 0x31A6 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT DUP3 AND OR PUSH7 0x1000000000000 SWAP2 DUP3 SWAP1 DIV PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x1 ADD SWAP1 DUP2 AND SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD SWAP1 SWAP6 POP DUP7 SWAP1 PUSH32 0x82A2DA5DEE54EA8021C6545B4444620291E07EE83BE6DD57EDB175062715F3B4 SWAP1 PUSH2 0x2444 SWAP1 DUP11 SWAP1 DUP9 SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x412D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1B6A JUMPI PUSH1 0x40 MLOAD PUSH4 0x5F159E63 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x2490 DUP4 DUP3 CALLDATASIZE PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1B74 JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH1 0x0 SUB PUSH2 0x24EC JUMPI PUSH1 0x0 PUSH2 0x24B3 DUP2 CALLDATASIZE PUSH2 0x32F7 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xF07E038F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH2 0xD9B JUMP JUMPDEST PUSH2 0xEC4 PUSH2 0x1838 DUP5 ADDRESS PUSH1 0x0 CALLDATASIZE PUSH2 0x19E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP3 DUP4 MSTORE SWAP3 SWAP2 PUSH32 0x9EA6790C7DADFD01C9F8B9762B3682607AF2C7E79E05A9F9FDF5580DDE949151 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25E5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x2B41 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SUB PUSH2 0x2623 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB40D179 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 ADD DUP1 SLOAD DUP5 ISZERO ISZERO PUSH15 0x10000000000000000000000000000 MUL PUSH15 0xFF0000000000000000000000000000 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE MLOAD PUSH32 0x90D4E7BB7E5D933792B3562E1741306F8BE94837E1348DACEF9B6F1DF56EB138 SWAP1 PUSH2 0x269F SWAP1 DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x26D2 JUMPI PUSH2 0x26C9 DUP7 DUP6 DUP6 PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x26F5 JUMP JUMPDEST PUSH1 0x4 DUP4 LT PUSH2 0x26EE JUMPI PUSH2 0x26E9 DUP7 DUP7 PUSH2 0x9D2 DUP8 DUP8 PUSH2 0x26FE JUMP JUMPDEST PUSH2 0x26C9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x270D PUSH1 0x4 DUP3 DUP5 DUP7 PUSH2 0x405A JUMP JUMPDEST PUSH2 0xE90 SWAP2 PUSH2 0x4173 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND SWAP1 PUSH7 0x1000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 DUP4 SUB PUSH2 0x2762 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60A299B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x276A PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x279D JUMPI PUSH1 0x40 MLOAD PUSH4 0xC65B5BD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH2 0x27A6 DUP3 PUSH2 0x2C30 JUMP JUMPDEST ISZERO PUSH2 0x27C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E2975B9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH6 0xFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD PUSH4 0xFFFFFFFF DUP4 AND SWAP2 DUP7 SWAP2 PUSH32 0x76A2A46953689D4861A5D3F6ED883AD7E6AF674A21F8E162707159FC9DDE614D SWAP2 SWAP1 LOG3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x283E JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x285A SWAP2 SWAP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2897 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x289C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FB1 DUP7 DUP4 DUP4 PUSH2 0x34DF JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 PUSH2 0x353B JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND ADD PUSH2 0x28F6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND ISZERO SWAP1 DUP2 ISZERO PUSH2 0x29F8 JUMPI DUP5 PUSH4 0xFFFFFFFF AND PUSH2 0x2942 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x294C SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP3 PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x297A DUP7 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SLOAD SWAP5 SWAP1 SWAP3 ADD MLOAD SWAP1 SWAP3 AND PUSH7 0x1000000000000 MUL PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP4 AND PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2AB5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x2A45 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 DUP7 SWAP1 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP4 AND PUSH7 0x1000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000FFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF DUP7 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 AND SWAP2 PUSH32 0xF98448B987F1428E0E230E1F3C6E2CE15B5693EAF31827FBD0B1EC4B424AE7CF SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG3 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B39 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 PUSH2 0x35F0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B57 DUP5 PUSH2 0x2B52 PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x360D JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2B82 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x2BAB JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP5 DUP7 AND SWAP5 DUP6 OR SWAP1 SSTORE MLOAD PUSH32 0x1FD6DD7631312DFAC2205B52913F99DE03B4D7E381D5D27D3DBFE0713E6E6340 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3661 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x366D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C3A PUSH2 0x30C6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND PUSH2 0x2C4F PUSH3 0x93A80 DUP5 PUSH2 0x4107 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND GT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C67 PUSH2 0x25AD JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND ISZERO DUP1 PUSH2 0x2CCF JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND EQ JUMPDEST ISZERO PUSH2 0x2CF8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFF0000000000000000 NOT AND PUSH9 0x10000000000000000 SWAP6 DUP8 AND SWAP6 DUP7 MUL OR SWAP1 SSTORE MLOAD PUSH32 0x7A8059630B897B5DE4C08ADE69F8B90C3EAD1F8596D62D10B6C4D14A0AFB4AE2 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2D75 DUP7 DUP7 PUSH2 0x36B4 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x2DE7 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2C94 CALLER SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND ADD PUSH2 0x2E59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x2E93 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH32 0xFFFF0000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP3 POP PUSH32 0xFEB69018EE8B8FD50EA86348F1267D07673379F72CFFDECCEC63853EE8CE8B48 SWAP1 PUSH2 0x1705 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2F58 SWAP2 SWAP1 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x19D7 DUP6 DUP4 DUP4 PUSH2 0x34DF JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFE NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND ADD PUSH2 0x2FE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61C6A43 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND SWAP1 SUB PUSH2 0x302A JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE MLOAD SWAP1 SWAP3 SWAP2 PUSH32 0xF229BAA593AF28C41B1D16B748CD7688F0C83AAF92D4BE41C44005DEFE84C166 SWAP2 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xEA3 TIMESTAMP PUSH2 0x36DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 ADD SLOAD PUSH2 0x3104 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP4 PUSH3 0x69780 PUSH2 0x3546 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP1 MLOAD PUSH4 0xFFFFFFFF DUP8 AND DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP5 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP4 POP SWAP2 PUSH32 0xA56B76017453F399EC2327BA00375DBFB1FD070FF854341AD6191E6A2E2DE19C SWAP2 ADD PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x319F JUMPI DUP2 PUSH2 0xE90 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH6 0xFFFFFFFFFFFF AND DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x31D2 JUMPI POP PUSH2 0x31D0 DUP2 PUSH2 0x2C30 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x813E9459 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x320A JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1B5A JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x3279 JUMPI PUSH2 0x326E ADDRESS PUSH2 0x3228 DUP7 DUP7 PUSH2 0x26FE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP4 DUP3 ADD MSTORE DUP1 MLOAD DUP1 DUP5 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x4 SLOAD EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP SWAP2 POP PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3288 DUP8 DUP8 PUSH2 0x32F7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH2 0x32A2 JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x1B5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x32AF DUP5 DUP12 PUSH2 0x1FBB JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x32C9 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1B5A JUMP JUMPDEST PUSH2 0x32DF DUP4 PUSH4 0xFFFFFFFF AND DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND ISZERO SWAP12 SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x4 DUP5 LT ISZERO PUSH2 0x3312 JUMPI POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x331E DUP7 DUP7 PUSH2 0x26FE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x10A6AA37 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x334F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x30CAE187 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x336A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x294B14A9 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3385 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5326CAE7 PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x33A0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xD22B5989 PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x33B6 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x63FC60F PUSH1 0xE2 SHL EQ DUP1 PUSH2 0x33E5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x167BD395 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3400 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x8D6122D PUSH1 0xE0 SHL EQ JUMPDEST ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 PUSH2 0x3415 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x405A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3422 SWAP2 SWAP1 PUSH2 0x3A8B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x342F DUP3 PUSH2 0x1226 JUMP JUMPDEST PUSH1 0x1 SWAP7 POP PUSH1 0x0 SWAP6 POP SWAP4 POP PUSH2 0x34D8 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x12E238D PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x3471 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x5BE958B1 PUSH1 0xE1 SHL EQ JUMPDEST ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 PUSH2 0x3486 PUSH1 0x24 PUSH1 0x4 DUP9 DUP11 PUSH2 0x405A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3493 SWAP2 SWAP1 PUSH2 0x38C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH2 0x34BC DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0x34D8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x34F4 JUMPI PUSH2 0x34EF DUP3 PUSH2 0x3716 JUMP JUMPDEST PUSH2 0xE90 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x350B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x3534 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST POP DUP1 PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x355D DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x25D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x359A DUP6 PUSH4 0xFFFFFFFF AND DUP8 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND GT PUSH2 0x3585 JUMPI PUSH1 0x0 PUSH2 0x358F JUMP JUMPDEST PUSH2 0x358F DUP9 DUP6 PUSH2 0x41BD JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH2 0x3190 JUMP JUMPDEST SWAP1 POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x35AB PUSH2 0x30C6 JUMP JUMPDEST PUSH2 0x35B5 SWAP2 SWAP1 PUSH2 0x4107 JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 SWAP1 SHL PUSH8 0xFFFFFFFF00000000 AND PUSH1 0x40 DUP6 SWAP1 SHL PUSH14 0xFFFFFFFFFFFF0000000000000000 AND OR OR SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH2 0x2B39 DUP5 DUP5 PUSH2 0x3749 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 SWAP1 SHR AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP7 AND PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP9 SWAP1 SHR DUP2 AND SWAP1 DUP8 AND DUP2 GT ISZERO PUSH2 0x364C JUMPI DUP3 DUP3 DUP3 PUSH2 0x3651 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP1 JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3755 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x3693 JUMPI POP PUSH2 0x3691 DUP5 DUP5 PUSH2 0x3661 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xE90 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15AB343 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x36C2 DUP6 DUP6 PUSH2 0x376D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP7 SWAP1 SWAP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP6 KECCAK256 SLOAD SWAP5 SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3712 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xD9B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x3726 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCA7 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3779 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xE90 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x37C8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x37C0 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0xCA7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x37DF JUMPI PUSH2 0x37DF PUSH2 0x3DA1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3830 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x228D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3883 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x389E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38AA DUP8 DUP3 DUP9 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x38BD SWAP1 POP PUSH1 0x40 DUP7 ADD PUSH2 0x384B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE90 DUP3 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x391D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3928 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x38FC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3961 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x399A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x39C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x39D2 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x39ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39F9 DUP7 DUP3 DUP8 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x228D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3A2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A38 DUP5 PUSH2 0x384B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3A48 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A56 PUSH1 0x40 DUP6 ADD PUSH2 0x3A06 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3A7D DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3ABB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3961 DUP4 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3AD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AE0 DUP4 PUSH2 0x384B JUMP JUMPDEST SWAP2 POP PUSH2 0x3AEE PUSH1 0x20 DUP5 ADD PUSH2 0x384B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x230D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3B2B DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3938 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39D2 DUP5 PUSH2 0x384B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B75 DUP4 PUSH2 0x384B JUMP JUMPDEST SWAP2 POP PUSH2 0x3AEE PUSH1 0x20 DUP5 ADD PUSH2 0x3A06 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3B99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3BA4 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x3BB4 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BDB DUP8 DUP3 DUP9 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3BFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3C10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C1C DUP6 DUP3 DUP7 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3C2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CB9 JUMPI DUP8 DUP6 SUB PUSH1 0x3F NOT ADD DUP5 MSTORE DUP2 MLOAD DUP1 MLOAD DUP1 DUP8 MSTORE PUSH2 0x3C9A DUP2 DUP10 DUP10 ADD DUP11 DUP6 ADD PUSH2 0x3C28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP6 SWAP1 SWAP6 ADD DUP7 ADD SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3C73 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3CE6 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3CF6 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x3D06 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3B75 DUP2 PUSH2 0x37F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3D45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3D50 DUP2 PUSH2 0x37F2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3D6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D77 DUP8 DUP3 DUP9 ADD PUSH2 0x3971 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3D96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE90 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3DFC JUMPI PUSH2 0x3DFC PUSH2 0x3DD4 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x3E8D JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3E73 JUMPI PUSH2 0x3E73 PUSH2 0x3DD4 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x3E80 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3E57 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3EA4 JUMPI POP PUSH1 0x1 PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH2 0x3EB1 JUMPI POP PUSH1 0x0 PUSH2 0xCA7 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x3EC7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3ED1 JUMPI PUSH2 0x3EED JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xCA7 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3EE2 JUMPI PUSH2 0x3EE2 PUSH2 0x3DD4 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xCA7 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x3F10 JUMPI POP DUP2 DUP2 EXP PUSH2 0xCA7 JUMP JUMPDEST PUSH2 0x3F1A DUP4 DUP4 PUSH2 0x3E52 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3F2E JUMPI PUSH2 0x3F2E PUSH2 0x3DD4 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x3E95 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE90 DUP2 PUSH2 0x38FC JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2B39 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3FDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xE90 DUP2 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE90 DUP4 DUP4 PUSH2 0x3E95 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xCA7 JUMPI PUSH2 0xCA7 PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4028 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1FB1 PUSH1 0x60 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x406A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x4077 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x40B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x40CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x2031 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 DUP3 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD PUSH1 0x0 DUP2 MSTORE DUP4 MLOAD PUSH2 0x40FD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x3C28 JUMP JUMPDEST ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4126 JUMPI PUSH2 0x4126 PUSH2 0x3DD4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4168 PUSH1 0x80 DUP4 ADD DUP5 DUP7 PUSH2 0x3F7B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0x1B03 JUMPI PUSH1 0x4 SWAP5 SWAP1 SWAP5 SUB PUSH1 0x3 SHL DUP5 SWAP1 SHL AND SWAP1 SWAP3 AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x41B3 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3C28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4126 JUMPI PUSH2 0x4126 PUSH2 0x3DD4 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"830:6858:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14835:291:1;;;;;;;;;;-1:-1:-1;14835:291:1;;;;;:::i;:::-;;:::i;:::-;;8220:124;;;;;;;;;;-1:-1:-1;8220:124:1;;;;;:::i;:::-;-1:-1:-1;;;;;8314:14:1;;;8289:6;8314:14;;;:6;:14;;;;;:23;;;;;;;;8220:124;;;;-1:-1:-1;;;;;1718:31:17;;;1700:50;;1688:2;1673:18;8220:124:1;;;;;;;;4244:106:15;;;;;;;;;;-1:-1:-1;4244:106:15;;;;;:::i;:::-;;:::i;8385:134:1:-;;;;;;;;;;-1:-1:-1;8385:134:1;;;;;:::i;:::-;;:::i;:::-;;;2120:10:17;2108:23;;;2090:42;;2078:2;2063:18;8385:134:1;1946:192:17;16304:133:1;;;;;;;;;;-1:-1:-1;16304:133:1;;;;;:::i;:::-;;:::i;23564:159::-;;;;;;;;;;-1:-1:-1;23564:159:1;;;;;:::i;:::-;;:::i;19509:1240::-;;;;;;:::i;:::-;;:::i;3934:93:15:-;;;;;;;;;;;;;:::i;:::-;;;4093:25:17;;;4081:2;4066:18;3934:93:15;3947:177:17;2651:89:15;;;;;;;;;;-1:-1:-1;2720:13:15;;;;;-1:-1:-1;;;;;2720:13:15;2651:89;;;-1:-1:-1;;;;;4293:55:17;;;4275:74;;4263:2;4248:18;2651:89:15;4129:226:17;9884:191:1;;;;;;;;;;-1:-1:-1;9884:191:1;;;;;:::i;:::-;;:::i;3035:464:15:-;;;;;;;;;;-1:-1:-1;3035:464:15;;;;;:::i;:::-;;:::i;:::-;;;5409:14:17;;5402:22;5384:41;;5372:2;5357:18;3035:464:15;5244:187:17;6618:228:15;;;;;;;;;;-1:-1:-1;6618:228:15;;;;;:::i;:::-;;:::i;8560:408:1:-;;;;;;;;;;-1:-1:-1;8560:408:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;6245:14:17;6286:15;;;6268:34;;6321:10;6367:15;;;6362:2;6347:18;;6340:43;6419:15;;;;6414:2;6399:18;;6392:43;6471:15;;6466:2;6451:18;;6444:43;6222:3;6207:19;;6012:481;10572:126:1;;;;;;;;;;-1:-1:-1;10572:126:1;;;;;:::i;:::-;;:::i;3505:229:15:-;;;;;;;;;;-1:-1:-1;3505:229:15;;;;;:::i;:::-;;:::i;17036:184:1:-;;;;;;;;;;-1:-1:-1;17036:184:1;;;;;:::i;:::-;;:::i;:::-;;;7118:14:17;7106:27;;;7088:46;;7076:2;7061:18;17036:184:1;6944:196:17;5286:53:1;;;;;;;;;;;;-1:-1:-1;;;;;5286:53:1;;2057:65:15;;;;;;;;;;;;;:::i;17261:111:1:-;;;;;;;;;;-1:-1:-1;17261:111:1;;;;;:::i;:::-;17320:6;17345:14;;;:10;:14;;;;;:20;;;;;;;17261:111;2304:174:15;;;;;;;;;;-1:-1:-1;2304:174:15;;;;;:::i;:::-;;:::i;7252:90:1:-;;;;;;;;;;-1:-1:-1;7328:7:1;7252:90;;7881:139;;;;;;;;;;-1:-1:-1;7881:139:1;;;;;:::i;:::-;;:::i;10739:138::-;;;;;;;;;;-1:-1:-1;10739:138:1;;;;;:::i;:::-;;:::i;8061:118::-;;;;;;;;;;-1:-1:-1;8061:118:1;;;;;:::i;:::-;-1:-1:-1;;;;;8152:14:1;;;8127:6;8152:14;;;:6;:14;;;;;:20;;;;;8061:118;1850:84:9;;;;;;;;;;-1:-1:-1;1920:7:9;;;;1850:84;;6852:834:15;;;;;;;;;;-1:-1:-1;6852:834:15;;;;;:::i;:::-;;:::i;7676:164:1:-;;;;;;;;;;-1:-1:-1;7676:164:1;;;;;:::i;:::-;-1:-1:-1;;;;;7794:16:1;;7769:6;7794:16;;;:8;:16;;;;;;;;-1:-1:-1;;;;;;7794:39:1;;;;;;;;;;-1:-1:-1;;;;;7794:39:1;7676:164;;;;;6154:181:15;;;;;;;;;;-1:-1:-1;6154:181:15;;;;;:::i;:::-;;:::i;2293:101:0:-;;;;;;;;;;;;;:::i;5223:52:1:-;;;;;;;;;;;;5259:16;5223:52;;1990:61:15;;;;;;;;;;;;;:::i;9587:256:1:-;;;;;;;;;;-1:-1:-1;9587:256:1;;;;;:::i;:::-;;:::i;4356:94:15:-;;;;;;;;;;;;;:::i;2128:170::-;;;;;;;;;;-1:-1:-1;2128:170:15;;;;;:::i;:::-;;:::i;1638:85:0:-;;;;;;;;;;-1:-1:-1;1684:7:0;1710:6;-1:-1:-1;;;;;1710:6:0;1638:85;;21939:376:1;;;;;;;;;;-1:-1:-1;21939:376:1;;;;;:::i;:::-;;:::i;7513:122::-;;;;;;;;;;-1:-1:-1;7513:122:1;;;;;:::i;:::-;-1:-1:-1;;;;;7605:16:1;7582:4;7605:16;;;:8;:16;;;;;;;;:23;;;;;;;;7513:122;10918:134;;;;;;;;;;-1:-1:-1;10918:134:1;;;;;:::i;:::-;;:::i;4769:561:15:-;;;;;;;;;;-1:-1:-1;4769:561:15;;;;;:::i;:::-;;:::i;23222:181:1:-;;;;;;;;;;-1:-1:-1;23222:181:1;;;;;:::i;:::-;;:::i;1208:484:8:-;;;;;;;;;;-1:-1:-1;1208:484:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4461:302:15:-;;;;;;;;;;-1:-1:-1;4461:302:15;;;;;:::i;:::-;;:::i;:::-;;;;12140:14:17;;12133:22;12115:41;;12204:10;12192:23;;;12187:2;12172:18;;12165:51;12088:18;4461:302:15;11949:273:17;10116:127:1;;;;;;;;;;-1:-1:-1;10116:127:1;;;;;:::i;:::-;;:::i;896:29:15:-;;;;;;;;;;;;;;;6341:271;;;;;;;;;;-1:-1:-1;6341:271:15;;;;;:::i;:::-;;:::i;7383:89:1:-;;;;;;;;;;-1:-1:-1;7459:6:1;7383:89;;5336:812:15;;;;;;;;;;-1:-1:-1;5336:812:15;;;;;:::i;:::-;;:::i;9009:418:1:-;;;;;;;;;;-1:-1:-1;9009:418:1;;;;;:::i;:::-;;:::i;15554:147::-;;;;;;;;;;-1:-1:-1;15554:147:1;;;;;:::i;:::-;;:::i;20790:1108::-;;;;;;;;;;-1:-1:-1;20790:1108:1;;;;;:::i;:::-;;:::i;2484:161:15:-;;;;;;;;;;-1:-1:-1;2484:161:15;;;;;:::i;:::-;;:::i;4033:205::-;;;;;;;;;;-1:-1:-1;4033:205:15;;;;;:::i;:::-;;:::i;3740:188::-;;;;;;;;;;-1:-1:-1;3740:188:15;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;12743:55:17;;;12725:74;;12830:2;12815:18;;12808:34;;;;12698:18;3740:188:15;12551:297:17;2543:215:0;;;;;;;;;;-1:-1:-1;2543:215:0;;;;;:::i;:::-;;:::i;17413:1365:1:-;;;;;;;;;;-1:-1:-1;17413:1365:1;;;;;:::i;:::-;;:::i;:::-;;;;13750:25:17;;;13823:10;13811:23;;;13806:2;13791:18;;13784:51;13723:18;17413:1365:1;13578:263:17;10284:247:1;;;;;;;;;;-1:-1:-1;10284:247:1;;;;;:::i;:::-;;:::i;14835:291::-;5923:18;:16;:18::i;:::-;15001:9:::1;14996:124;15016:20:::0;;::::1;14996:124;;;15057:52;15080:6;15088:9;;15098:1;15088:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;15102:6;15057:22;:52::i;:::-;15038:3;::::0;::::1;:::i;:::-;;;14996:124;;;;14835:291:::0;;;;:::o;4244:106:15:-;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;4332:11:15::2;4338:5:::0;4332:3:::2;:11;:::i;:::-;4317:12;:26:::0;-1:-1:-1;4244:106:15:o;8385:134:1:-;-1:-1:-1;;;;;8481:14:1;;8456:6;8481:14;;;:6;:14;;;;;:25;;;:31;;-1:-1:-1;;;8481:25:1;;-1:-1:-1;;;;;8481:25:1;:29;:31::i;:::-;8474:38;8385:134;-1:-1:-1;;8385:134:1:o;16304:133::-;5923:18;:16;:18::i;:::-;16398:32:::1;16415:6;16423;16398:16;:32::i;:::-;16304:133:::0;;:::o;23564:159::-;5923:18;:16;:18::i;:::-;23667:49:::1;::::0;-1:-1:-1;;;23667:49:1;;-1:-1:-1;;;;;4293:55:17;;;23667:49:1::1;::::0;::::1;4275:74:17::0;23667:35:1;::::1;::::0;::::1;::::0;4248:18:17;;23667:49:1::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;23564:159:::0;;:::o;19509:1240::-;19595:6;735:10:7;19595:6:1;;19768:38;735:10:7;19793:6:1;19801:4;;19768:16;:38::i;:::-;19733:73;;;;19869:9;19868:10;:26;;;;-1:-1:-1;19882:12:1;;;;19868:26;19864:131;;;19947:6;19955;19963:20;19978:4;;19963:14;:20::i;:::-;19917:67;;-1:-1:-1;;;19917:67:1;;-1:-1:-1;;;;;14909:15:17;;;19917:67:1;;;14891:34:17;14961:15;;;;14941:18;;;14934:43;-1:-1:-1;;;;;;15013:33:17;14993:18;;;14986:61;14803:18;;19917:67:1;;;;;;;;19864:131;20005:19;20027:35;20041:6;20049;20057:4;;20027:13;:35::i;:::-;20005:57;-1:-1:-1;20072:12:1;20264;;;;;;:45;;;20280:24;20292:11;20280;:24::i;:::-;:29;;;;20264:45;20260:116;;;20333:32;20353:11;20333:19;:32::i;:::-;20325:40;;20260:116;20468:12;;20505:46;20522:6;20530:20;20545:4;;20530:14;:20::i;:::-;29323:28;;;-1:-1:-1;;;;;24154:55:17;;;;29323:28:1;;;;24136:74:17;;;;-1:-1:-1;;;;;;24246:33:17;;;;24226:18;;;24219:61;29323:28:1;;;;;;;;;24109:18:17;;;;29323:28:1;;29313:39;;;;;;29206:153;20505:46;20490:12;:61;;;;20586:54;20616:6;20624:4;;20586:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20630:9:1;;-1:-1:-1;20586:29:1;;-1:-1:-1;;20586:54:1:i;:::-;-1:-1:-1;20687:12:1;:32;20737:5;-1:-1:-1;;;;;19509:1240:1;;;;;;:::o;3934:93:15:-;3975:7;4001:19;:10;:17;:19::i;:::-;3994:26;;3934:93;:::o;9884:191:1:-;5923:18;:16;:18::i;:::-;9998:70:::1;10009:6;10017:7;10026:25;10044:6;10026:17;:25::i;:::-;10053:14;9998:10;:70::i;:::-;;9884:191:::0;;;:::o;3035:464:15:-;3145:4;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;-1:-1:-1::0;;;;;3165:22:15;::::2;3161:50;;3196:15;;-1:-1:-1::0;;;3196:15:15::2;;;;;;;;;;;3161:50;3225:4;3233:1;3225:9:::0;3221:33:::2;;3243:11;;-1:-1:-1::0;;;3243:11:15::2;;;;;;;;;;;3221:33;3268:13;::::0;::::2;::::0;::::2;-1:-1:-1::0;;;;;3268:13:15::2;3264:52;;3304:12;;-1:-1:-1::0;;;3304:12:15::2;;;;;;;;;;;3264:52;3380:13;;;;;;;;;-1:-1:-1::0;;;;;3380:13:15::2;-1:-1:-1::0;;;;;3365:38:15::2;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;::::0;3408:1:::2;3365:44;:::i;:::-;3358:52;::::0;:2:::2;:52;:::i;:::-;3343:4;:68;3326:119;;;3429:16;::::0;-1:-1:-1;;;3429:16:15;;::::2;::::0;::::2;4093:25:17::0;;;4066:18;;3429:16:15::2;3947:177:17::0;3326:119:15::2;3462:30;:10;3477:8:::0;3487:4;3462:14:::2;:30::i;6618:228::-:0;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;6725:13:15::2;::::0;::::2;::::0;::::2;-1:-1:-1::0;;;;;6725:13:15::2;6721:52;;6761:12;;-1:-1:-1::0;;;6761:12:15::2;;;;;;;;;;;6721:52;6798:13;::::0;6783:56:::2;::::0;-1:-1:-1;;;6783:56:15;;-1:-1:-1;;;;;4293:55:17;;;6783:56:15::2;::::0;::::2;4275:74:17::0;6798:13:15::2;::::0;;::::2;::::0;;::::2;::::0;6783:42:::2;::::0;4248:18:17;;6783:56:15::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;8560:408:1::0;-1:-1:-1;;;;;8767:14:1;;8662:12;8767:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;8767:31:1;;;;;;;;;8817:12;;;;;;8662;;;;;8767:31;8878:22;;:12;;;-1:-1:-1;;;;;8878:12:1;:20;:22::i;:::-;8560:408;;8839:61;;-1:-1:-1;8839:61:1;-1:-1:-1;8560:408:1;-1:-1:-1;;;;8560:408:1:o;10572:126::-;5923:18;:16;:18::i;:::-;10663:28:::1;10677:6;10685:5;10663:13;:28::i;3505:229:15:-:0;3563:7;-1:-1:-1;;;;;3586:22:15;;3582:50;;3617:15;;-1:-1:-1;;;3617:15:15;;;;;;;;;;;3582:50;3647:29;:10;3667:8;3647:19;:29::i;:::-;3642:44;;-1:-1:-1;3685:1:15;;3505:229;-1:-1:-1;3505:229:15:o;3642:44::-;3703:24;:10;3718:8;3703:14;:24::i;17036:184:1:-;17098:6;17135:14;;;:10;:14;;;;;:24;;;17176:21;17135:24;17176:10;:21::i;:::-;:37;;17204:9;17176:37;;;17200:1;17169:44;17036:184;-1:-1:-1;;;17036:184:1:o;2057:65:15:-;1531:13:0;:11;:13::i;:::-;2105:10:15::1;:8;:10::i;:::-;2057:65::o:0;2304:174::-;1531:13:0;:11;:13::i;:::-;2371::15::1;::::0;::::1;::::0;::::1;-1:-1:-1::0;;;;;2371:13:15::1;2367:52;;2407:12;;-1:-1:-1::0;;;2407:12:15::1;;;;;;;;;;;2367:52;2440:13;::::0;2429:42:::1;::::0;-1:-1:-1;;;2429:42:15;;-1:-1:-1;;;;;4293:55:17;;;2429:42:15::1;::::0;::::1;4275:74:17::0;2440:13:15::1;::::0;;::::1;::::0;;::::1;::::0;2429:34:::1;::::0;4248:18:17;;2429:42:15::1;4129:226:17::0;7881:139:1;-1:-1:-1;;;;;7980:16:1;;7955:6;7980:16;;;:8;:16;;;;;;;:27;;:33;;-1:-1:-1;;;;;7980:27:1;:31;:33::i;10739:138::-;5923:18;:16;:18::i;:::-;10836:34:::1;10853:6;10861:8;10836:16;:34::i;6852:834:15:-:0;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;6978:13:15::2;::::0;::::2;::::0;::::2;-1:-1:-1::0;;;;;6978:13:15::2;6974:52;;7014:12;;-1:-1:-1::0;;;7014:12:15::2;;;;;;;;;;;6974:52;7051:13;::::0;7036:56:::2;::::0;-1:-1:-1;;;7036:56:15;;-1:-1:-1;;;;;4293:55:17;;;7036:56:15::2;::::0;::::2;4275:74:17::0;7051:13:15::2;::::0;;::::2;::::0;;::::2;::::0;7036:42:::2;::::0;4248:18:17;;7036:56:15::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;7127:13:15::2;::::0;7198:46:::2;::::0;-1:-1:-1;;;7198:46:15;;7238:4:::2;7198:46;::::0;::::2;4275:74:17::0;7127:13:15::2;::::0;;::::2;-1:-1:-1::0;;;;;7127:13:15::2;::::0;-1:-1:-1;7120:30:15::2;::::0;-1:-1:-1;7168:12:15;;7127:13;;7198:31:::2;::::0;4248:18:17;;7198:46:15::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7120:138;::::0;-1:-1:-1;;;;;;7120:138:15::2;::::0;;;;;;-1:-1:-1;;;;;12743:55:17;;;7120:138:15::2;::::0;::::2;12725:74:17::0;12815:18;;;12808:34;12698:18;;7120:138:15::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7102:203;;7291:13;::::0;7276:29:::2;::::0;-1:-1:-1;;;7276:29:15;;7291:13:::2;::::0;;::::2;-1:-1:-1::0;;;;;7291:13:15::2;7276:29;::::0;::::2;4275:74:17::0;4248:18;;7276:29:15::2;4129:226:17::0;7102:203:15::2;7316:9;::::0;7360:293:::2;7376:19;:10;:17;:19::i;:::-;7372:1;:23;7360:293;;;7417:16;7439;:10;7453:1:::0;7439:13:::2;:16::i;:::-;-1:-1:-1::0;7479:41:15::2;::::0;-1:-1:-1;;;7479:41:15;;7514:4:::2;7479:41;::::0;::::2;4275:74:17::0;7416:39:15;;-1:-1:-1;;;;;;7479:26:15;::::2;::::0;::::2;::::0;4248:18:17;;7479:41:15::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7469:51;;7548:1;7538:7;:11;:55;;;;-1:-1:-1::0;7554:39:15::2;::::0;-1:-1:-1;;;7554:39:15;;-1:-1:-1;;;;;12743:55:17;;;7554:39:15::2;::::0;::::2;12725:74:17::0;12815:18;;;12808:34;;;7554:25:15;::::2;::::0;::::2;::::0;12698:18:17;;7554:39:15::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7553:40;7538:55;7534:108;;;7618:24;::::0;-1:-1:-1;;;7618:24:15;;-1:-1:-1;;;;;4293:55:17;;7618:24:15::2;::::0;::::2;4275:74:17::0;4248:18;;7618:24:15::2;4129:226:17::0;7534:108:15::2;-1:-1:-1::0;7397:3:15;::::2;::::0;::::2;:::i;:::-;;;;7360:293;;;7675:3;-1:-1:-1::0;;;;;7662:17:15::2;;6154:181:::0;6238:22;;-1:-1:-1;;;6238:22:15;;-1:-1:-1;;;;;4293:55:17;;6238:22:15;;;4275:74:17;6214:7:15;;6238:4;;:12;;4248:18:17;;6238:22:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6233:37;;-1:-1:-1;6269:1:15;;6154:181;-1:-1:-1;6154:181:15:o;6233:37::-;6287:41;;-1:-1:-1;;;6287:41:15;;6322:4;6287:41;;;4275:74:17;-1:-1:-1;;;;;6287:26:15;;;;;4248:18:17;;6287:41:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;1990:61:15:-:0;1531:13:0;:11;:13::i;:::-;2036:8:15::1;:6;:8::i;9587:256:1:-:0;5923:18;:16;:18::i;:::-;-1:-1:-1;;;;;9688:20:1;::::1;::::0;;:45:::1;;-1:-1:-1::0;;;;;;9712:21:1;;::::1;;9688:45;9684:114;;;9756:31;::::0;-1:-1:-1;;;9756:31:1;;-1:-1:-1;;;;;1718:31:17;;9756::1::1;::::0;::::1;1700:50:17::0;1673:18;;9756:31:1::1;1556:200:17::0;9684:114:1::1;9822:6;-1:-1:-1::0;;;;;9812:24:1::1;;9830:5;;9812:24;;;;;;;:::i;:::-;;;;;;;;9587:256:::0;;;:::o;4356:94:15:-;4399:7;4440:3;4425:12;;:18;;;;:::i;2128:170::-;1531:13:0;:11;:13::i;:::-;2193::15::1;::::0;::::1;::::0;::::1;-1:-1:-1::0;;;;;2193:13:15::1;2189:52;;2229:12;;-1:-1:-1::0;;;2229:12:15::1;;;;;;;;;;;2189:52;2262:13;::::0;2251:40:::1;::::0;-1:-1:-1;;;2251:40:15;;-1:-1:-1;;;;;4293:55:17;;;2251:40:15::1;::::0;::::1;4275:74:17::0;2262:13:15::1;::::0;;::::1;::::0;;::::1;::::0;2251:32:::1;::::0;4248:18:17;;2251:40:15::1;4129:226:17::0;21939:376:1;22072:47;;;-1:-1:-1;;;22072:47:1;;;;;735:10:7;;22123:46:1;735:10:7;;22123:46:1;;22072:47;;;;;;;;;;;;;;;735:10:7;22072:47:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;22072:97:1;;22068:175;;22192:40;;-1:-1:-1;;;22192:40:1;;-1:-1:-1;;;;;4293:55:17;;22192:40:1;;;4275:74:17;4248:18;;22192:40:1;4129:226:17;22068:175:1;22252:56;22272:35;22286:6;22294;22302:4;;22272:13;:35::i;:::-;22252:19;:56::i;10918:134::-;5923:18;:16;:18::i;:::-;11013:32:::1;11028:6;11036:8;11013:14;:32::i;4769:561:15:-:0;4872:7;-1:-1:-1;;;;;4895:22:15;;4891:50;;4926:15;;-1:-1:-1;;;4926:15:15;;;;;;;;;;;4891:50;4955:5;4964:1;4955:10;4951:35;;4974:12;;-1:-1:-1;;;4974:12:15;;;;;;;;;;;4951:35;5000:13;;;;;-1:-1:-1;;;;;5000:13:15;4996:52;;5036:12;;-1:-1:-1;;;5036:12:15;;;;;;;;;;;4996:52;5153:16;5187:8;-1:-1:-1;;;;;5172:33:15;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:39;;5210:1;5172:39;:::i;:::-;5236:22;;-1:-1:-1;;;5236:22:15;;-1:-1:-1;;;;;4293:55:17;;5236:22:15;;;4275:74:17;5153:58:15;;;;;;-1:-1:-1;5221:12:15;;5236:4;;:12;;4248:18:17;;5236:22:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5221:37;-1:-1:-1;5308:14:15;5314:8;5308:2;:14;:::i;:::-;5291:12;;5276;5283:5;5276:4;:12;:::i;:::-;:27;;;;:::i;:::-;5275:48;;;;:::i;:::-;5268:55;4769:561;-1:-1:-1;;;;;4769:561:15:o;23222:181:1:-;23327:7;23374:6;23382;23390:4;;23363:32;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;23353:43;;;;;;23346:50;;23222:181;;;;;;:::o;1208:484:8:-;1374:12;;;1310:20;1374:12;;;;;;;;1276:22;;1485:4;-1:-1:-1;;;;;1473:24:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1463:34;;1512:9;1507:155;1527:15;;;1507:155;;;1576:75;1613:4;1633;;1638:1;1633:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1642;1620:30;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1576:28;:75::i;:::-;1563:7;1571:1;1563:10;;;;;;;;:::i;:::-;;;;;;:88;;;;1544:3;;;;;:::i;:::-;;;;1507:155;;;;1671:14;1208:484;;;;:::o;4461:302:15:-;4595:14;4611:12;4649:7;1684::0;1710:6;-1:-1:-1;;;;;1710:6:0;;1638:85;4649:7:15;-1:-1:-1;;;;;4639:17:15;:6;-1:-1:-1;;;;;4639:17:15;;4635:39;;-1:-1:-1;4666:4:15;;-1:-1:-1;4672:1:15;4658:16;;4635:39;4685:10;4702:27;5259:16:1;4722:6:15;4702:7;:27::i;:::-;-1:-1:-1;4684:45:15;-1:-1:-1;4754:1:15;;-1:-1:-1;;4461:302:15;;;;;;;:::o;10116:127:1:-;5923:18;:16;:18::i;:::-;10208:28:::1;10220:6;10228:7;10208:11;:28::i;:::-;;10116:127:::0;;:::o;6341:271:15:-;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;6510:41:15::2;::::0;-1:-1:-1;;;6510:41:15;;6545:4:::2;6510:41;::::0;::::2;4275:74:17::0;-1:-1:-1;;;;;6446:25:15;::::2;::::0;::::2;::::0;6489:3;;6446:25;;6510:26:::2;::::0;4248:18:17;;6510:41:15::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6446:119;::::0;-1:-1:-1;;;;;;6446:119:15::2;::::0;;;;;;-1:-1:-1;;;;;12743:55:17;;;6446:119:15::2;::::0;::::2;12725:74:17::0;12815:18;;;12808:34;12698:18;;6446:119:15::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6428:177;;6583:22;::::0;-1:-1:-1;;;6583:22:15;;-1:-1:-1;;;;;4293:55:17;;6583:22:15::2;::::0;::::2;4275:74:17::0;4248:18;;6583:22:15::2;4129:226:17::0;5336:812:15;5414:4;1474:19:9;:17;:19::i;:::-;5447:37:15::1;::::0;-1:-1:-1;;;5447:37:15;;-1:-1:-1;;;;;12743:55:17;;5447:37:15::1;::::0;::::1;12725:74:17::0;12815:18;;;12808:34;;;5430:14:15::1;::::0;5447:4:::1;::::0;:20:::1;::::0;12698:18:17;;5447:37:15::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5518:38;::::0;-1:-1:-1;;;5518:38:15;;5545:10:::1;5518:38;::::0;::::1;4275:74:17::0;5430:54:15;;-1:-1:-1;5494:20:15::1;::::0;-1:-1:-1;;;;;5518:26:15;::::1;::::0;::::1;::::0;4248:18:17;;5518:38:15::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5599:13;::::0;5592:46:::1;::::0;-1:-1:-1;;;5592:46:15;;5632:4:::1;5592:46;::::0;::::1;4275:74:17::0;5494:62:15;;-1:-1:-1;5566:22:15::1;::::0;5599:13:::1;::::0;;::::1;-1:-1:-1::0;;;;;5599:13:15::1;::::0;5592:31:::1;::::0;4248:18:17;;5592:46:15::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5566:72;;5668:5;5653:12;:20;5648:108;;;5694:62;::::0;-1:-1:-1;;;5694:62:15;;5714:10:::1;5694:62;::::0;::::1;21265:34:17::0;-1:-1:-1;;;;;21335:15:17;;21315:18;;;21308:43;21367:18;;;21360:34;;;21410:18;;;21403:34;;;21176:19;;5694:62:15::1;20973:470:17::0;5648:108:15::1;5788:6;5771:14;:23;5766:83;;;5815:34;::::0;-1:-1:-1;;;5815:34:15;;::::1;::::0;::::1;4093:25:17::0;;;4066:18;;5815:34:15::1;3947:177:17::0;5766:83:15::1;5864:63;::::0;-1:-1:-1;;;5864:63:15;;5894:10:::1;5864:63;::::0;::::1;21711:34:17::0;5914:4:15::1;21761:18:17::0;;;21754:43;21813:18;;;21806:34;;;-1:-1:-1;;;;;5864:29:15;::::1;::::0;::::1;::::0;21623:18:17;;5864:63:15::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5859:94;;5948:5;5941:12;;;;;;;5859:94;5989:13;::::0;5982:50:::1;::::0;-1:-1:-1;;;5982:50:15;;6013:10:::1;5982:50;::::0;::::1;12725:74:17::0;12815:18;;;12808:34;;;5963:16:15::1;::::0;5989:13:::1;::::0;::::1;-1:-1:-1::0;;;;;5989:13:15::1;::::0;5982:30:::1;::::0;12698:18:17;;5982:50:15::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5963:69;;6046:11;6042:71;;;6099:5;6089:8;-1:-1:-1::0;;;;;6064:49:15::1;6077:10;-1:-1:-1::0;;;;;6064:49:15::1;;6106:6;6064:49;;;;4093:25:17::0;;4081:2;4066:18;;3947:177;6064:49:15::1;;;;;;;;6042:71;6130:11:::0;5336:812;-1:-1:-1;;;;;;5336:812:15:o;9009:418:1:-;9109:13;;-1:-1:-1;;;;;;;9161:21:1;;;9157:264;;-1:-1:-1;9206:4:1;;-1:-1:-1;9212:1:1;9198:16;;9157:264;9246:19;9267;9294:26;9304:6;9312:7;9294:9;:26::i;:::-;9245:75;;;;;;9342:12;:17;;9358:1;9342:17;;:53;;;;;9379:16;:14;:16::i;:::-;9363:32;;:12;:32;;;;9342:53;9334:76;-1:-1:-1;9397:12:1;-1:-1:-1;9334:76:1;;-1:-1:-1;9334:76:1;9157:264;9009:418;;;;;:::o;15554:147::-;5923:18;:16;:18::i;:::-;15656:38:::1;15677:6;15685:8;15656:20;:38::i;20790:1108::-:0;20883:6;735:10:7;20883:6:1;20961:20;20976:4;;20961:14;:20::i;:::-;20943:38;;20992:19;21014:35;21028:6;21036;21044:4;;21014:13;:35::i;:::-;21063:23;;;;:10;:23;;;;;:33;20992:57;;-1:-1:-1;21063:33:1;;;;:38;;21059:614;;21124:38;;-1:-1:-1;;;21124:38:1;;;;;4093:25:17;;;4066:18;;21124:38:1;3947:177:17;21059:614:1;21193:9;-1:-1:-1;;;;;21183:19:1;:6;-1:-1:-1;;;;;21183:19:1;;21179:494;;21352:12;21370:30;5259:16;21390:9;21370:7;:30::i;:::-;-1:-1:-1;;;;;;7794:16:1;;21415:15;7794:16;;;:8;:16;;;;;;;;-1:-1:-1;;;;;;7794:39:1;;;;;;;;;;21351:49;;-1:-1:-1;21415:15:1;21436:76;;21444:56;;-1:-1:-1;;;;;7794:39:1;21460;7676:164;21444:56;21502:9;21436:7;:76::i;:::-;21414:98;;;21531:7;21530:8;:23;;;;;21543:10;21542:11;21530:23;21526:137;;;21580:68;;-1:-1:-1;;;21580:68:1;;-1:-1:-1;;;;;22159:15:17;;;21580:68:1;;;22141:34:17;22211:15;;;22191:18;;;22184:43;22263:15;;22243:18;;;22236:43;-1:-1:-1;;;;;;22315:33:17;;22295:18;;;22288:61;22052:19;;21580:68:1;21851:504:17;21526:137:1;21204:469;;21179:494;21690:23;;;;:10;:23;;;;;;21683:40;;-1:-1:-1;;21683:40:1;;;;;21831:37;;21787:29;;;;;;;;;21690:23;;21831:37;;;21886:5;20790:1108;-1:-1:-1;;;;;;;;20790:1108:1:o;2484:161:15:-;1531:13:0;:11;:13::i;:::-;1721:16:9::1;:14;:16::i;:::-;-1:-1:-1::0;;;;;2565:20:15;::::2;2561:45;;2594:12;;-1:-1:-1::0;;;2594:12:15::2;;;;;;;;;;;2561:45;2616:13;:22:::0;;-1:-1:-1;;;;;2616:22:15;;::::2;;;::::0;;;::::2;::::0;;;::::2;::::0;;2484:161::o;4033:205::-;4119:4;1474:19:9;:17;:19::i;:::-;-1:-1:-1;;;;;4139:22:15;::::1;4135:50;;4170:15;;-1:-1:-1::0;;;4170:15:15::1;;;;;;;;;;;4135:50;4202:29;:10;4222:8:::0;4202:19:::1;:29::i;1503:1:9:-;4033:205:15::0;;;:::o;3740:188::-;3792:7;3801;3835:19;:10;:17;:19::i;:::-;3824:7;:30;3820:62;;3863:19;;-1:-1:-1;;;3863:19:15;;;;;;;;;;;3820:62;3899:22;:10;3913:7;3899:13;:22::i;:::-;3892:29;;;;3740:188;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;4275:74:17::0;4248:18;;2672:31:0::1;4129:226:17::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;17413:1365:1:-;17535:19;;735:10:7;17535:19:1;17721:38;735:10:7;17746:6:1;17754:4;;17721:16;:38::i;:::-;17700:59;;;17770:14;17806:7;17787:26;;:16;:14;:16::i;:::-;:26;;;;:::i;:::-;17770:43;-1:-1:-1;17912:12:1;;;;;:44;;;17936:1;17929:4;:8;;;:26;;;;;17948:7;17941:14;;:4;:14;;;17929:26;17908:149;;;18009:6;18017;18025:20;18040:4;;18025:14;:20::i;17908:149::-;18129:23;18138:4;18129:23;;18144:7;18129:23;;:8;:23::i;:::-;18115:38;;18273:35;18287:6;18295;18303:4;;18273:13;:35::i;:::-;18259:49;;18319:31;18338:11;18319:18;:31::i;:::-;18472:23;;;;:10;:23;;;;;;;:29;;18525:40;;;-1:-1:-1;;18575:37:1;;;18472:29;;;;;;;;;18504:1;18472:33;18575:37;;;;;;;;;;;;;18627:66;;18472:33;;-1:-1:-1;18472:23:1;;18627:66;;;;18525:40;;18672:6;;18680;;18688:4;;;;18627:66;:::i;:::-;;;;;;;;17570:1208;;;17413:1365;;;;;;;:::o;10284:247::-;-1:-1:-1;;;;;10378:34:1;;735:10:7;10378:34:1;10374:102;;10435:30;;-1:-1:-1;;;10435:30:1;;;;;;;;;;;23943:503;735:10:7;23989:14:1;;24061:32;735:10:7;23989:14:1;809::7;24061:12:1;:32::i;:::-;24028:65;;;;24108:9;24103:337;;24137:5;:10;;24146:1;24137:10;24133:297;;24170:19;24195:33;24170:19;809:14:7;24195:21:1;:33::i;:::-;-1:-1:-1;24253:54:1;;-1:-1:-1;;;24253:54:1;;-1:-1:-1;;;;;23294:55:17;;24253:54:1;;;23276:74:17;-1:-1:-1;;;;;23386:31:17;;23366:18;;;23359:59;24167:61:1;;-1:-1:-1;23249:18:17;;;-1:-1:-1;24253:54:1;23104:320:17;24133:297:1;24346:69;24366:48;24380:6;24396:4;809:14:7;;23222:181:1;:::i;15285:228::-;-1:-1:-1;;;;;15392:16:1;;;;;;:8;:16;;;;;;;;-1:-1:-1;;;;;;15392:39:1;;;;;;;;;;;;:48;;-1:-1:-1;;15392:48:1;-1:-1:-1;;;;;15392:48:1;;;;;;;;15455:51;;23573:52:17;;;15392:48:1;:16;15455:51;;23546:18:17;15455:51:1;;;;;;;15285:228;;;:::o;1796:162:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:7;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:7;1901:40:0;;;4275:74:17;4248:18;;1901:40:0;4129:226:17;2202:126:9;1920:7;;;;2260:62;;2296:15;;-1:-1:-1;;;2296:15:9;;;;;;;;;;;3548:130:14;3596:6;3615:12;3635:14;:4;-1:-1:-1;;;;;3635:12:14;;:14::i;:::-;-1:-1:-1;3614:35:14;;3548:130;-1:-1:-1;;;;3548:130:14:o;16607:268:1:-;16711:4;-1:-1:-1;;;;;16693:23:1;;;16689:95;;16739:34;;-1:-1:-1;;;16739:34:1;;-1:-1:-1;;;;;4293:55:17;;16739:34:1;;;4275:74:17;4248:18;;16739:34:1;4129:226:17;16689:95:1;-1:-1:-1;;;;;16793:16:1;;;;;;:8;:16;;;;;;;;;:23;:32;;;;;;;-1:-1:-1;;16793:32:1;;;;;;16840:28;;;;;16819:6;5409:14:17;5402:22;5384:41;;5372:2;5357:18;;5244:187;16840:28:1;;;;;;;;16607:268;;:::o;26911:378::-;27042:14;;27104:4;-1:-1:-1;;;;;27086:23:1;;;27082:201;;27132:26;27145:6;27153:4;;27132:12;:26::i;:::-;27125:33;;;;;;27082:201;27210:1;27196:15;;:76;;27227:45;27235:6;27243;27251:20;27266:4;;27251:14;:20::i;27227:45::-;27196:76;;;-1:-1:-1;27215:5:1;;-1:-1:-1;27215:5:1;27082:201;26911:378;;;;;;;:::o;29016:116::-;29083:6;29115:9;29122:1;29083:6;29115:4;;:9;:::i;:::-;29108:17;;;:::i;22505:676::-;22581:6;22618:23;;;:10;:23;;;;;:33;;;;;22676:29;;;;;22720:14;;;22716:294;;22757:38;;-1:-1:-1;;;22757:38:1;;;;;4093:25:17;;;4066:18;;22757:38:1;3947:177:17;22716:294:1;22828:16;:14;:16::i;:::-;22816:28;;:9;:28;;;22812:198;;;22867:34;;-1:-1:-1;;;22867:34:1;;;;;4093:25:17;;;4066:18;;22867:34:1;3947:177:17;22812:198:1;22922:21;22933:9;22922:10;:21::i;:::-;22918:92;;;22966:33;;-1:-1:-1;;;22966:33:1;;;;;4093:25:17;;;4066:18;;22966:33:1;3947:177:17;22918:92:1;23027:23;;;;:10;:23;;;;;;23020:40;;-1:-1:-1;;23020:40:1;;;23114:37;;;;;23038:11;;23114:37;;23027:23;23114:37;23169:5;22505:676;-1:-1:-1;;;22505:676:1:o;3180:392:6:-;3279:12;3331:5;3307:21;:29;3303:108;;;3359:41;;-1:-1:-1;;;3359:41:6;;3394:4;3359:41;;;4275:74:17;4248:18;;3359:41:6;4129:226:17;3303:108:6;3421:12;3435:23;3462:6;-1:-1:-1;;;;;3462:11:6;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;13433:120:12:-;13502:7;13528:18;13535:3;13528:6;:18::i;11229:1061:1:-;11387:4;-1:-1:-1;;;;;;;11407:21:1;;;11403:90;;11451:31;;-1:-1:-1;;;11451:31:1;;-1:-1:-1;;;;;1718:31:17;;11451::1;;;1700:50:17;1673:18;;11451:31:1;1556:200:17;11403:90:1;-1:-1:-1;;;;;11520:14:1;;11503;11520;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11520:31:1;;;;;;;;;:37;;;:42;;11595:585;;;;11651:10;11632:29;;:16;:14;:16::i;:::-;:29;;;;:::i;:::-;11624:37;;11709:55;;;;;;;;11724:5;11709:55;;;;;;11738:24;:14;:22;;2589:20:14;;;2508:108;11738:24:1;-1:-1:-1;;;;;11709:55:1;;;;;;-1:-1:-1;;;;;11675:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;11675:31:1;;;;;;;;;:89;;;;;;;;;;;;;;-1:-1:-1;;11675:89:1;;;;;;;;;;;;;;11595:585;;;-1:-1:-1;;;;;12056:14:1;;12154:1;12056:14;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12056:31:1;;;;;;;;;:37;:113;;:37;;;;-1:-1:-1;;;;;12056:37:1;;12122:14;;12056:48;:113::i;:::-;-1:-1:-1;;;;;12008:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12008:31:1;;;;;;;;;12007:162;;-1:-1:-1;;;;;12007:162:1;;;;;;;;;;;;;;;;;-1:-1:-1;11595:585:1;12195:62;;;24805:10:17;24793:23;;24775:42;;24865:14;24853:27;;24848:2;24833:18;;24826:55;24924:14;;24917:22;24897:18;;;24890:50;12195:62:1;;-1:-1:-1;;;;;12195:62:1;;;-1:-1:-1;;;;;12195:62:1;;;;;;;;24763:2:17;12195:62:1;;;-1:-1:-1;12274:9:1;11229:1061;-1:-1:-1;;;;;11229:1061:1:o;12607:182:12:-;12696:4;12719:63;12723:3;-1:-1:-1;;;;;12743:21:12;;12775:5;12719:3;:63::i;:::-;12712:70;12607:182;-1:-1:-1;;;;12607:182:12:o;3362:129:14:-;3414:6;3422;3430;3455:29;3466:4;3472:11;:9;:11::i;:::-;3455:10;:29::i;:::-;3448:36;;;;;;3362:129;;;;;:::o;13246:285:1:-;-1:-1:-1;;;;;13329:20:1;;;;:45;;-1:-1:-1;;;;;;13353:21:1;;;;13329:45;13325:114;;;13397:31;;-1:-1:-1;;;13397:31:1;;-1:-1:-1;;;;;1718:31:17;;13397::1;;;1700:50:17;1673:18;;13397:31:1;1556:200:17;13325:114:1;-1:-1:-1;;;;;13449:14:1;;;;;;;:6;:14;;;;;;:20;;:28;;-1:-1:-1;;13449:28:1;;;;;;;;;13493:31;;;13449:14;13493:31;13246:285;;:::o;13184:166:12:-;13268:4;13291:52;13300:3;-1:-1:-1;;;;;13320:21:12;;13291:8;:52::i;14652:168::-;14731:7;14765:47;14769:3;-1:-1:-1;;;;;14789:21:12;;14765:3;:47::i;28772:134:1:-;28832:4;28883:16;:14;:16::i;:::-;28855:44;;:24;7328:7;28855:9;:24;:::i;:::-;:44;;;;;28772:134;-1:-1:-1;;28772:134:1:o;2710:117:9:-;1721:16;:14;:16::i;:::-;2768:7:::1;:15:::0;;-1:-1:-1;;2768:15:9::1;::::0;;2798:22:::1;735:10:7::0;2807:12:9::1;2798:22;::::0;-1:-1:-1;;;;;4293:55:17;;;4275:74;;4263:2;4248:18;2798:22:9::1;;;;;;;2710:117::o:0;13850:303:1:-;-1:-1:-1;;;;;13939:20:1;;;;:45;;-1:-1:-1;;;;;;13963:21:1;;;;13939:45;13935:114;;;14007:31;;-1:-1:-1;;;14007:31:1;;-1:-1:-1;;;;;1718:31:17;;14007::1;;;1700:50:17;1673:18;;14007:31:1;1556:200:17;13935:114:1;-1:-1:-1;;;;;14059:14:1;;;;;;;:6;:14;;;;;;:23;;:34;;-1:-1:-1;;14059:34:1;;;;;;;;;;;14109:37;;;14059:14;14109:37;13850:303;;:::o;13890:232:12:-;13970:7;;;;14029:21;14032:3;14044:5;14029:2;:21::i;:::-;13998:52;;;;-1:-1:-1;13890:232:12;-1:-1:-1;;;;;13890:232:12:o;2912:187:0:-;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;2463:115:9:-;1474:19;:17;:19::i;:::-;2522:7:::1;:14:::0;;-1:-1:-1;;2522:14:9::1;2532:4;2522:14;::::0;;2551:20:::1;2558:12;735:10:7::0;;656:96;14300:374:1;-1:-1:-1;;;;;;;14387:21:1;;;14383:90;;14431:31;;-1:-1:-1;;;14431:31:1;;-1:-1:-1;;;;;1718:31:17;;14431::1;;;1700:50:17;1673:18;;14431:31:1;1556:200:17;14383:90:1;-1:-1:-1;;;;;14544:14:1;;14483:13;14544:14;;;:6;:14;;;;;:25;;;:60;;-1:-1:-1;;;14544:25:1;;-1:-1:-1;;;;;14544:25:1;14581:8;7459:6;14544:36;:60::i;:::-;-1:-1:-1;;;;;14507:14:1;;;;;;:6;:14;;;;;;;:25;;14506:98;;-1:-1:-1;;;;;14506:98:1;;;-1:-1:-1;;;14506:98:1;;;;;;;;;;;;14620:47;;14506:98;;-1:-1:-1;14620:47:1;;;;14650:8;;14506:98;;25151:10:17;25139:23;;;;25121:42;;25211:14;25199:27;25194:2;25179:18;;25172:55;25109:2;25094:18;;24951:282;4106:253:6;4189:12;4214;4228:23;4255:6;-1:-1:-1;;;;;4255:19:6;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;12551:400:1:-;12630:4;-1:-1:-1;;;;;;;12650:21:1;;;12646:90;;12694:31;;-1:-1:-1;;;12694:31:1;;-1:-1:-1;;;;;1718:31:17;;12694::1;;;1700:50:17;1673:18;;12694:31:1;1556:200:17;12646:90:1;-1:-1:-1;;;;;12750:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12750:31:1;;;;;;;;;:37;;;:42;;12746:85;;-1:-1:-1;12815:5:1;12808:12;;12746:85;-1:-1:-1;;;;;12848:14:1;;;;;;:6;:14;;;;;;;;-1:-1:-1;;;;;12848:31:1;;;;;;;;;;12841:38;;-1:-1:-1;;12841:38:1;;;12895:28;12848:31;;:14;12895:28;;;-1:-1:-1;12940:4:1;12551:400;;;;:::o;2002:128:9:-;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:9;;;;;;;;;;;750:110:14;794:6;819:34;837:15;819:17;:34::i;15856:287:1:-;-1:-1:-1;;;;;16009:16:1;;15946:13;16009:16;;;:8;:16;;;;;;;:27;;:62;;-1:-1:-1;;;;;16009:27:1;16048:8;7459:6;16009:38;:62::i;:::-;-1:-1:-1;;;;;15970:16:1;;;;;;:8;:16;;;;;;;;;:27;;;15969:102;;-1:-1:-1;;15969:102:1;-1:-1:-1;;;;;15969:102:1;;;;;;;;;;;16087:49;;25151:10:17;25139:23;;25121:42;;25211:14;25199:27;;25179:18;;;25172:55;;;;15969:102:1;;-1:-1:-1;15970:16:1;16087:49;;25094:18:17;16087:49:1;24951:282:17;2382:104:10;2440:7;2470:1;2466;:5;:13;;2478:1;2466:13;;;-1:-1:-1;2474:1:10;;2382:104;-1:-1:-1;2382:104:10:o;18967:272:1:-;19039:20;19062:23;;;:10;:23;;;;;:33;;;19109:18;;;;;:48;;;19132:25;19143:13;19132:10;:25::i;:::-;19131:26;19109:48;19105:128;;;19180:42;;-1:-1:-1;;;19180:42:1;;;;;4093:25:17;;;4066:18;;19180:42:1;3947:177:17;27399:992:1;27480:14;;27538:1;27524:15;;27520:63;;;-1:-1:-1;27563:5:1;;-1:-1:-1;27563:5:1;27555:17;;27520:63;27615:4;-1:-1:-1;;;;;27597:23:1;;;27593:334;;27863:49;27884:4;27891:20;27906:4;;27891:14;:20::i;:::-;29323:28;;;-1:-1:-1;;;;;24154:55:17;;;;29323:28:1;;;;24136:74:17;;;;-1:-1:-1;;;;;;24246:33:17;;;;24226:18;;;24219:61;29323:28:1;;;;;;;;;24109:18:17;;;;29323:28:1;;29313:39;;;;;28611:12;;:50;;28511:157;27863:49;27914:1;27855:61;;;;;;27593:334;27938:12;27952:13;27967:21;27992:27;28014:4;;27992:21;:27::i;:::-;27937:82;;;;;;28034:7;28029:56;;28065:5;28072:1;28057:17;;;;;;;;;28029:56;28096:11;28109:21;28134:23;28142:6;28150;28134:7;:23::i;:::-;28095:62;;;;28172:6;28167:55;;28202:5;28209:1;28194:17;;;;;;;;;;;28167:55;28307:40;28316:14;28307:40;;28332:14;28307:40;;:8;:40::i;:::-;28366:10;;;;;;;-1:-1:-1;27399:992:1;-1:-1:-1;;;;;;;;;27399:992:1:o;24852:1628::-;24940:15;;;25028:1;25014:15;;25010:66;;;-1:-1:-1;25053:5:1;;-1:-1:-1;25053:5:1;;-1:-1:-1;25053:5:1;25045:20;;25010:66;25086:15;25104:20;25119:4;;25104:14;:20::i;:::-;25086:38;-1:-1:-1;;;;;;;25244:35:1;;-1:-1:-1;;;25244:35:1;;:89;;-1:-1:-1;;;;;;;25295:38:1;;-1:-1:-1;;;25295:38:1;25244:89;:146;;;-1:-1:-1;;;;;;;25349:41:1;;-1:-1:-1;;;25349:41:1;25244:146;:201;;;-1:-1:-1;;;;;;;25406:39:1;;-1:-1:-1;;;25406:39:1;25244:201;:262;;;-1:-1:-1;;;;;;;25461:45:1;;-1:-1:-1;;;25461:45:1;25244:262;25227:343;;;25539:4;5259:16;25557:1;25531:28;;;;;;;;;25227:343;-1:-1:-1;;;;;;25677:41:1;;-1:-1:-1;;;25677:41:1;;:98;;-1:-1:-1;;;;;;;25734:41:1;;-1:-1:-1;;;25734:41:1;25677:98;:161;;;-1:-1:-1;;;;;;;25791:47:1;;-1:-1:-1;;;25791:47:1;25677:161;25660:414;;;25906:14;25934:15;25944:4;25939;25934;;:15;:::i;:::-;25923:38;;;;;;;:::i;:::-;25906:55;;25975:12;25990:27;26010:6;25990:19;:27::i;:::-;26039:4;;-1:-1:-1;5259:16:1;;-1:-1:-1;25975:42:1;-1:-1:-1;26031:32:1;;-1:-1:-1;;;26031:32:1;25660:414;-1:-1:-1;;;;;;26193:35:1;;-1:-1:-1;;;26193:35:1;;:75;;-1:-1:-1;;;;;;;26232:36:1;;-1:-1:-1;;;26232:36:1;26193:75;26189:254;;;26327:13;26354:15;26364:4;26359;26354;;:15;:::i;:::-;26343:37;;;;;;;:::i;:::-;26327:53;;26402:4;26408:20;26421:6;-1:-1:-1;;;;;8152:14:1;;;8127:6;8152:14;;;:6;:14;;;;;:20;;;;;8061:118;26408:20;26430:1;26394:38;;;;;;;;;;26189:254;26461:5;26468:1;26471;26453:20;;;;;;;24852:1628;;;;;;:::o;4625:582:6:-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5045:17;;:22;:49;;;;-1:-1:-1;;;;;;5071:18:6;;;:23;5045:49;5041:119;;;5121:24;;-1:-1:-1;;;5121:24:6;;-1:-1:-1;;;;;4293:55:17;;5121:24:6;;;4275:74:17;4248:18;;5121:24:6;4129:226:17;5041:119:6;-1:-1:-1;5180:10:6;5173:17;;3467:123:12;3539:7;3565:18;:3;:16;:18::i;3972:390:14:-;4093:18;4113:13;4138:12;4153:10;:4;-1:-1:-1;;;;;4153:8:14;;:10::i;:::-;4138:25;;4173:14;4197:61;4206:10;4197:61;;4226:8;4218:16;;:5;:16;;;:39;;4256:1;4218:39;;;4237:16;4245:8;4237:5;:16;:::i;:::-;4197:61;;:8;:61::i;:::-;4173:86;;4292:7;4278:21;;:11;:9;:11::i;:::-;:21;;;;:::i;:::-;4269:30;-1:-1:-1;5065:19:14;;;5059:2;5035:26;;;;;5028:2;5009:21;;;;;5008:54;:76;4309:46;;;;3972:390;;;;;;:::o;2652:174:12:-;2744:4;2760:16;;;:11;;;:16;;;;;:24;;;2801:18;2760:3;2772;2801:13;:18::i;2868:276:14:-;2940:6;;;4703:9;4710:2;4703:9;;;;-1:-1:-1;;;;;3031:11:14;;4739:9;4746:2;4739:9;;;;;;3061:19;;;;;:76;;3105:11;3118:10;3130:6;3061:76;;;3084:10;3096:1;3099;3061:76;3054:83;;;;;;;;;2868:276;;;;;:::o;3237:140:12:-;3324:4;3347:23;:3;3366;3347:18;:23::i;4724:274::-;4806:7;4841:16;;;:11;;;:16;;;;;;4871:10;;:33;;;;;4886:18;4895:3;4900;4886:8;:18::i;:::-;4885:19;4871:33;4867:103;;;4927:32;;-1:-1:-1;;;4927:32:12;;;;;4093:25:17;;;4066:18;;4927:32:12;3947:177:17;3943:191:12;4026:7;;;4068:19;:3;4081:5;4068:12;:19::i;:::-;4110:16;;;;:11;;;;;:16;;;;;;;;;3943:191;-1:-1:-1;;;;3943:191:12:o;14291:213:11:-;14347:6;14377:16;14369:24;;14365:103;;;14416:41;;-1:-1:-1;;;14416:41:11;;14447:2;14416:41;;;25859:36:17;25911:18;;;25904:34;;;25832:18;;14416:41:11;25678:266:17;14365:103:11;-1:-1:-1;14491:5:11;14291:213::o;5743:516:6:-;5874:17;;:21;5870:383;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;-1:-1:-1;;;6225:17:6;;;;;;;;;;;6650:115:13;6713:7;6739:19;6747:3;4556:18;;4474:107;5930:123;6000:4;6023:23;6028:3;6040:5;6023:4;:23::i;6431:138::-;6511:4;4360:21;;;:14;;;:21;;;;;;:26;;6534:28;4264:129;7107;7181:7;7207:22;7211:3;7223:5;7207:3;:22::i;2241:406::-;2304:4;4360:21;;;:14;;;:21;;;;;;2320:321;;-1:-1:-1;2362:23:13;;;;;;;;:11;:23;;;;;;;;;;;;;2544:18;;2520:21;;;:14;;;:21;;;;;;:42;;;;2576:11;;2320:321;-1:-1:-1;2625:5:13;2618:12;;4923:118;4990:7;5016:3;:11;;5028:5;5016:18;;;;;;;;:::i;:::-;;;;;;;;;5009:25;;4923:118;;;;:::o;14:154:17:-;-1:-1:-1;;;;;93:5:17;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:366;235:8;245:6;299:3;292:4;284:6;280:17;276:27;266:55;;317:1;314;307:12;266:55;-1:-1:-1;340:20:17;;-1:-1:-1;;;;;372:30:17;;369:50;;;415:1;412;405:12;369:50;452:4;444:6;440:17;428:29;;512:3;505:4;495:6;492:1;488:14;480:6;476:27;472:38;469:47;466:67;;;529:1;526;519:12;544:171;611:20;;-1:-1:-1;;;;;660:30:17;;650:41;;640:69;;705:1;702;695:12;720:642;822:6;830;838;846;899:2;887:9;878:7;874:23;870:32;867:52;;;915:1;912;905:12;867:52;954:9;941:23;973:31;998:5;973:31;:::i;:::-;1023:5;-1:-1:-1;1079:2:17;1064:18;;1051:32;-1:-1:-1;;;;;1095:30:17;;1092:50;;;1138:1;1135;1128:12;1092:50;1177:69;1238:7;1229:6;1218:9;1214:22;1177:69;:::i;:::-;1265:8;;-1:-1:-1;1151:95:17;-1:-1:-1;1319:37:17;;-1:-1:-1;1352:2:17;1337:18;;1319:37;:::i;:::-;1309:47;;720:642;;;;;;;:::o;1367:184::-;1425:6;1478:2;1466:9;1457:7;1453:23;1449:32;1446:52;;;1494:1;1491;1484:12;1446:52;1517:28;1535:9;1517:28;:::i;1761:180::-;1820:6;1873:2;1861:9;1852:7;1848:23;1844:32;1841:52;;;1889:1;1886;1879:12;1841:52;-1:-1:-1;1912:23:17;;1761:180;-1:-1:-1;1761:180:17:o;2143:118::-;2229:5;2222:13;2215:21;2208:5;2205:32;2195:60;;2251:1;2248;2241:12;2266:382;2331:6;2339;2392:2;2380:9;2371:7;2367:23;2363:32;2360:52;;;2408:1;2405;2398:12;2360:52;2447:9;2434:23;2466:31;2491:5;2466:31;:::i;:::-;2516:5;-1:-1:-1;2573:2:17;2558:18;;2545:32;2586:30;2545:32;2586:30;:::i;:::-;2635:7;2625:17;;;2266:382;;;;;:::o;2653:388::-;2721:6;2729;2782:2;2770:9;2761:7;2757:23;2753:32;2750:52;;;2798:1;2795;2788:12;2750:52;2837:9;2824:23;2856:31;2881:5;2856:31;:::i;:::-;2906:5;-1:-1:-1;2963:2:17;2948:18;;2935:32;2976:33;2935:32;2976:33;:::i;3046:347::-;3097:8;3107:6;3161:3;3154:4;3146:6;3142:17;3138:27;3128:55;;3179:1;3176;3169:12;3128:55;-1:-1:-1;3202:20:17;;-1:-1:-1;;;;;3234:30:17;;3231:50;;;3277:1;3274;3267:12;3231:50;3314:4;3306:6;3302:17;3290:29;;3366:3;3359:4;3350:6;3342;3338:19;3334:30;3331:39;3328:59;;;3383:1;3380;3373:12;3398:544;3477:6;3485;3493;3546:2;3534:9;3525:7;3521:23;3517:32;3514:52;;;3562:1;3559;3552:12;3514:52;3601:9;3588:23;3620:31;3645:5;3620:31;:::i;:::-;3670:5;-1:-1:-1;3726:2:17;3711:18;;3698:32;-1:-1:-1;;;;;3742:30:17;;3739:50;;;3785:1;3782;3775:12;3739:50;3824:58;3874:7;3865:6;3854:9;3850:22;3824:58;:::i;:::-;3398:544;;3901:8;;-1:-1:-1;3798:84:17;;-1:-1:-1;;;;3398:544:17:o;4360:163::-;4427:20;;4487:10;4476:22;;4466:33;;4456:61;;4513:1;4510;4503:12;4528:391;4603:6;4611;4619;4672:2;4660:9;4651:7;4647:23;4643:32;4640:52;;;4688:1;4685;4678:12;4640:52;4711:28;4729:9;4711:28;:::i;:::-;4701:38;;4789:2;4778:9;4774:18;4761:32;4802:31;4827:5;4802:31;:::i;:::-;4852:5;-1:-1:-1;4876:37:17;4909:2;4894:18;;4876:37;:::i;:::-;4866:47;;4528:391;;;;;:::o;4924:315::-;4992:6;5000;5053:2;5041:9;5032:7;5028:23;5024:32;5021:52;;;5069:1;5066;5059:12;5021:52;5108:9;5095:23;5127:31;5152:5;5127:31;:::i;:::-;5177:5;5229:2;5214:18;;;;5201:32;;-1:-1:-1;;;4924:315:17:o;5436:247::-;5495:6;5548:2;5536:9;5527:7;5523:23;5519:32;5516:52;;;5564:1;5561;5554:12;5516:52;5603:9;5590:23;5622:31;5647:5;5622:31;:::i;5688:319::-;5755:6;5763;5816:2;5804:9;5795:7;5791:23;5787:32;5784:52;;;5832:1;5829;5822:12;5784:52;5855:28;5873:9;5855:28;:::i;6498:256::-;6564:6;6572;6625:2;6613:9;6604:7;6600:23;6596:32;6593:52;;;6641:1;6638;6631:12;6593:52;6664:28;6682:9;6664:28;:::i;:::-;6654:38;;6711:37;6744:2;6733:9;6729:18;6711:37;:::i;:::-;6701:47;;6498:256;;;;;:::o;7546:131::-;-1:-1:-1;;;;;;7620:32:17;;7610:43;;7600:71;;7667:1;7664;7657:12;7682:386;7749:6;7757;7810:2;7798:9;7789:7;7785:23;7781:32;7778:52;;;7826:1;7823;7816:12;7778:52;7865:9;7852:23;7884:31;7909:5;7884:31;:::i;:::-;7934:5;-1:-1:-1;7991:2:17;7976:18;;7963:32;8004;7963;8004;:::i;8073:482::-;8152:6;8160;8168;8221:2;8209:9;8200:7;8196:23;8192:32;8189:52;;;8237:1;8234;8227:12;8189:52;8260:28;8278:9;8260:28;:::i;8560:256::-;8626:6;8634;8687:2;8675:9;8666:7;8662:23;8658:32;8655:52;;;8703:1;8700;8693:12;8655:52;8726:28;8744:9;8726:28;:::i;:::-;8716:38;;8773:37;8806:2;8795:9;8791:18;8773:37;:::i;8821:685::-;8909:6;8917;8925;8933;8986:2;8974:9;8965:7;8961:23;8957:32;8954:52;;;9002:1;8999;8992:12;8954:52;9041:9;9028:23;9060:31;9085:5;9060:31;:::i;:::-;9110:5;-1:-1:-1;9167:2:17;9152:18;;9139:32;9180:33;9139:32;9180:33;:::i;:::-;9232:7;-1:-1:-1;9290:2:17;9275:18;;9262:32;-1:-1:-1;;;;;9306:30:17;;9303:50;;;9349:1;9346;9339:12;9303:50;9388:58;9438:7;9429:6;9418:9;9414:22;9388:58;:::i;:::-;8821:685;;;;-1:-1:-1;9465:8:17;-1:-1:-1;;;;8821:685:17:o;9693:447::-;9790:6;9798;9851:2;9839:9;9830:7;9826:23;9822:32;9819:52;;;9867:1;9864;9857:12;9819:52;9907:9;9894:23;-1:-1:-1;;;;;9932:6:17;9929:30;9926:50;;;9972:1;9969;9962:12;9926:50;10011:69;10072:7;10063:6;10052:9;10048:22;10011:69;:::i;:::-;10099:8;;9985:95;;-1:-1:-1;9693:447:17;-1:-1:-1;;;;9693:447:17:o;10145:250::-;10230:1;10240:113;10254:6;10251:1;10248:13;10240:113;;;10330:11;;;10324:18;10311:11;;;10304:39;10276:2;10269:10;10240:113;;;-1:-1:-1;;10387:1:17;10369:16;;10362:27;10145:250::o;10400:1012::-;10560:4;10589:2;10629;10618:9;10614:18;10659:2;10648:9;10641:21;10682:6;10717;10711:13;10748:6;10740;10733:22;10786:2;10775:9;10771:18;10764:25;;10848:2;10838:6;10835:1;10831:14;10820:9;10816:30;10812:39;10798:53;;10886:2;10878:6;10874:15;10907:1;10917:466;10931:6;10928:1;10925:13;10917:466;;;10996:22;;;-1:-1:-1;;10992:36:17;10980:49;;11052:13;;11094:9;;11116:24;;;11153:74;11094:9;11201:15;;;11188:11;;;11153:74;:::i;:::-;11293:2;11270:17;-1:-1:-1;;11266:31:17;11254:44;;;;11250:53;;;-1:-1:-1;11361:12:17;;;;11326:15;;;;10953:1;10946:9;10917:466;;;-1:-1:-1;11400:6:17;;10400:1012;-1:-1:-1;;;;;;;10400:1012:17:o;11417:527::-;11493:6;11501;11509;11562:2;11550:9;11541:7;11537:23;11533:32;11530:52;;;11578:1;11575;11568:12;11530:52;11617:9;11604:23;11636:31;11661:5;11636:31;:::i;:::-;11686:5;-1:-1:-1;11743:2:17;11728:18;;11715:32;11756:33;11715:32;11756:33;:::i;:::-;11808:7;-1:-1:-1;11867:2:17;11852:18;;11839:32;11880;11839;11880;:::i;:::-;11931:7;11921:17;;;11417:527;;;;;:::o;12227:319::-;12294:6;12302;12355:2;12343:9;12334:7;12330:23;12326:32;12323:52;;;12371:1;12368;12361:12;12323:52;12410:9;12397:23;12429:31;12454:5;12429:31;:::i;12853:720::-;12940:6;12948;12956;12964;13017:2;13005:9;12996:7;12992:23;12988:32;12985:52;;;13033:1;13030;13023:12;12985:52;13072:9;13059:23;13091:31;13116:5;13091:31;:::i;:::-;13141:5;-1:-1:-1;13197:2:17;13182:18;;13169:32;-1:-1:-1;;;;;13213:30:17;;13210:50;;;13256:1;13253;13246:12;13210:50;13295:58;13345:7;13336:6;13325:9;13321:22;13295:58;:::i;:::-;13372:8;;-1:-1:-1;13269:84:17;-1:-1:-1;;13459:2:17;13444:18;;13431:32;13507:14;13494:28;;13482:41;;13472:69;;13537:1;13534;13527:12;13472:69;12853:720;;;;-1:-1:-1;12853:720:17;;-1:-1:-1;;12853:720:17:o;13846:127::-;13907:10;13902:3;13898:20;13895:1;13888:31;13938:4;13935:1;13928:15;13962:4;13959:1;13952:15;13978:245;14036:6;14089:2;14077:9;14068:7;14064:23;14060:32;14057:52;;;14105:1;14102;14095:12;14057:52;14144:9;14131:23;14163:30;14187:5;14163:30;:::i;14228:127::-;14289:10;14284:3;14280:20;14277:1;14270:31;14320:4;14317:1;14310:15;14344:4;14341:1;14334:15;14360:135;14399:3;14420:17;;;14417:43;;14440:18;;:::i;:::-;-1:-1:-1;14487:1:17;14476:13;;14360:135::o;14500:125::-;14565:9;;;14586:10;;;14583:36;;;14599:18;;:::i;15058:273::-;15126:6;15179:2;15167:9;15158:7;15154:23;15150:32;15147:52;;;15195:1;15192;15185:12;15147:52;15227:9;15221:16;15277:4;15270:5;15266:16;15259:5;15256:27;15246:55;;15297:1;15294;15287:12;15336:148;15424:4;15403:12;;;15417;;;15399:31;;15442:13;;15439:39;;;15458:18;;:::i;15489:422::-;15578:1;15621:5;15578:1;15635:270;15656:7;15646:8;15643:21;15635:270;;;15715:4;15711:1;15707:6;15703:17;15697:4;15694:27;15691:53;;;15724:18;;:::i;:::-;15774:7;15764:8;15760:22;15757:55;;;15794:16;;;;15757:55;15873:22;;;;15833:15;;;;15635:270;;;15639:3;15489:422;;;;;:::o;15916:806::-;15965:5;15995:8;15985:80;;-1:-1:-1;16036:1:17;16050:5;;15985:80;16084:4;16074:76;;-1:-1:-1;16121:1:17;16135:5;;16074:76;16166:4;16184:1;16179:59;;;;16252:1;16247:130;;;;16159:218;;16179:59;16209:1;16200:10;;16223:5;;;16247:130;16284:3;16274:8;16271:17;16268:43;;;16291:18;;:::i;:::-;-1:-1:-1;;16347:1:17;16333:16;;16362:5;;16159:218;;16461:2;16451:8;16448:16;16442:3;16436:4;16433:13;16429:36;16423:2;16413:8;16410:16;16405:2;16399:4;16396:12;16392:35;16389:77;16386:159;;;-1:-1:-1;16498:19:17;;;16530:5;;16386:159;16577:34;16602:8;16596:4;16577:34;:::i;:::-;16647:6;16643:1;16639:6;16635:19;16626:7;16623:32;16620:58;;;16658:18;;:::i;:::-;16696:20;;15916:806;-1:-1:-1;;;15916:806:17:o;16727:140::-;16785:5;16814:47;16855:4;16845:8;16841:19;16835:4;16814:47;:::i;16872:184::-;16942:6;16995:2;16983:9;16974:7;16970:23;16966:32;16963:52;;;17011:1;17008;17001:12;16963:52;-1:-1:-1;17034:16:17;;16872:184;-1:-1:-1;16872:184:17:o;17061:245::-;17128:6;17181:2;17169:9;17160:7;17156:23;17152:32;17149:52;;;17197:1;17194;17187:12;17149:52;17229:9;17223:16;17248:28;17270:5;17248:28;:::i;17621:267::-;17710:6;17705:3;17698:19;17762:6;17755:5;17748:4;17743:3;17739:14;17726:43;-1:-1:-1;17814:1:17;17789:16;;;17807:4;17785:27;;;17778:38;;;;17870:2;17849:15;;;-1:-1:-1;;17845:29:17;17836:39;;;17832:50;;17621:267::o;17893:247::-;18052:2;18041:9;18034:21;18015:4;18072:62;18130:2;18119:9;18115:18;18107:6;18099;18072:62;:::i;18145:128::-;18212:9;;;18233:11;;;18230:37;;;18247:18;;:::i;18278:249::-;18347:6;18400:2;18388:9;18379:7;18375:23;18371:32;18368:52;;;18416:1;18413;18406:12;18368:52;18448:9;18442:16;18467:30;18491:5;18467:30;:::i;18532:131::-;18592:5;18621:36;18648:8;18642:4;18621:36;:::i;18668:168::-;18741:9;;;18772;;18789:15;;;18783:22;;18769:37;18759:71;;18810:18;;:::i;18841:217::-;18881:1;18907;18897:132;;18951:10;18946:3;18942:20;18939:1;18932:31;18986:4;18983:1;18976:15;19014:4;19011:1;19004:15;18897:132;-1:-1:-1;19043:9:17;;18841:217::o;19063:466::-;19239:4;-1:-1:-1;;;;;19349:2:17;19341:6;19337:15;19326:9;19319:34;19401:2;19393:6;19389:15;19384:2;19373:9;19369:18;19362:43;;19441:2;19436;19425:9;19421:18;19414:30;19461:62;19519:2;19508:9;19504:18;19496:6;19488;19461:62;:::i;19534:331::-;19639:9;19650;19692:8;19680:10;19677:24;19674:44;;;19714:1;19711;19704:12;19674:44;19743:6;19733:8;19730:20;19727:40;;;19763:1;19760;19753:12;19727:40;-1:-1:-1;;19789:23:17;;;19834:25;;;;;-1:-1:-1;19534:331:17:o;19870:127::-;19931:10;19926:3;19922:20;19919:1;19912:31;19962:4;19959:1;19952:15;19986:4;19983:1;19976:15;20002:521;20079:4;20085:6;20145:11;20132:25;20239:2;20235:7;20224:8;20208:14;20204:29;20200:43;20180:18;20176:68;20166:96;;20258:1;20255;20248:12;20166:96;20285:33;;20337:20;;;-1:-1:-1;;;;;;20369:30:17;;20366:50;;;20412:1;20409;20402:12;20366:50;20445:4;20433:17;;-1:-1:-1;20476:14:17;20472:27;;;20462:38;;20459:58;;;20513:1;20510;20503:12;20528:440;20757:6;20749;20744:3;20731:33;20713:3;20792:6;20787:3;20783:16;20819:1;20815:2;20808:13;20850:6;20844:13;20866:65;20924:6;20920:2;20913:4;20905:6;20901:17;20866:65;:::i;:::-;20947:15;;20528:440;-1:-1:-1;;;;;20528:440:17:o;22360:176::-;22427:14;22461:10;;;22473;;;22457:27;;22496:11;;;22493:37;;;22510:18;;:::i;:::-;22493:37;22360:176;;;;:::o;22541:558::-;22792:14;22784:6;22780:27;22769:9;22762:46;22743:4;-1:-1:-1;;;;;22917:2:17;22909:6;22905:15;22900:2;22889:9;22885:18;22878:43;22969:2;22961:6;22957:15;22952:2;22941:9;22937:18;22930:43;;23009:3;23004:2;22993:9;22989:18;22982:31;23030:63;23088:3;23077:9;23073:19;23065:6;23057;23030:63;:::i;:::-;23022:71;22541:558;-1:-1:-1;;;;;;;22541:558:17:o;23636:323::-;-1:-1:-1;;;;;;23756:19:17;;23832:11;;;;23863:1;23855:10;;23852:101;;;23924:1;23920:11;;;;23917:1;23913:19;23909:28;;;23901:37;23897:46;;;;23636:323;-1:-1:-1;;23636:323:17:o;24291:287::-;24420:3;24458:6;24452:13;24474:66;24533:6;24528:3;24521:4;24513:6;24509:17;24474:66;:::i;:::-;24556:16;;;;;24291:287;-1:-1:-1;;24291:287:17:o;25498:175::-;25566:10;25609;;;25597;;;25593:27;;25632:12;;;25629:38;;;25647:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"3374200","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"296","PUBLIC_ROLE()":"330","SALT()":"infinite","at(uint256)":"infinite","balanceOf(address)":"infinite","buy(address,uint256)":"infinite","canCall(address,address,bytes4)":"infinite","cancel(address,address,bytes)":"infinite","consumeScheduledOp(address,bytes)":"infinite","defineToken(address)":"infinite","destroy(address,address)":"infinite","execute(address,bytes)":"infinite","expiration()":"335","freeze(address)":"infinite","getAccess(uint64,address)":"3388","getBonus()":"2483","getNonce(bytes32)":"2554","getRate(address)":"infinite","getResultAmount(address,uint256)":"infinite","getRoleAdmin(uint64)":"2674","getRoleGrantDelay(uint64)":"3090","getRoleGuardian(uint64)":"2665","getSchedule(bytes32)":"2841","getTargetAdminDelay(address)":"3069","getTargetFunctionRole(address,bytes4)":"infinite","getToken()":"2422","grantRole(uint64,address,uint32)":"infinite","hasRate(address)":"infinite","hasRole(uint64,address)":"infinite","hashOperation(address,address,bytes)":"infinite","isTargetClosed(address)":"2656","labelRole(uint64,string)":"infinite","length()":"infinite","minSetback()":"268","multicall(bytes[])":"infinite","owner()":"2465","pause()":"infinite","paused()":"2371","redeem(address,address)":"infinite","renounceOwnership()":"infinite","renounceRole(uint64,address)":"28895","revokeRole(uint64,address)":"infinite","schedule(address,bytes,uint48)":"1837","setBonus(uint256)":"infinite","setGrantDelay(uint64,uint32)":"infinite","setRate(address,uint256)":"infinite","setRoleAdmin(uint64,uint64)":"infinite","setRoleGuardian(uint64,uint64)":"infinite","setTargetAdminDelay(address,uint32)":"infinite","setTargetClosed(address,bool)":"infinite","setTargetFunctionRole(address,bytes4[],uint64)":"infinite","transferAuthority(address)":"infinite","transferOwnership(address)":"infinite","unfreeze(address)":"infinite","unpause()":"infinite","updateAuthority(address,address)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PUBLIC_ROLE()":"3ca7c02a","SALT()":"ba9a91a5","at(uint256)":"e0886f90","balanceOf(address)":"70a08231","buy(address,uint256)":"cce7ec13","canCall(address,address,bytes4)":"b7009613","cancel(address,address,bytes)":"d6bb62c6","consumeScheduledOp(address,bytes)":"94c7d7ee","defineToken(address)":"da2b1224","destroy(address,address)":"62b40f9f","execute(address,bytes)":"1cff79cd","expiration()":"4665096d","freeze(address)":"8d1fdf2f","getAccess(uint64,address)":"3078f114","getBonus()":"8bdff161","getNonce(bytes32)":"4136a33c","getRate(address)":"37cef791","getResultAmount(address,uint256)":"a7cd2448","getRoleAdmin(uint64)":"530dd456","getRoleGrantDelay(uint64)":"12be8727","getRoleGuardian(uint64)":"0b0a93ba","getSchedule(bytes32)":"3adc277a","getTargetAdminDelay(address)":"4c1da1e2","getTargetFunctionRole(address,bytes4)":"6d5115bd","getToken()":"21df0da7","grantRole(uint64,address,uint32)":"25c471a0","hasRate(address)":"e0781b7a","hasRole(uint64,address)":"d1f856ee","hashOperation(address,address,bytes)":"abd9bd2a","isTargetClosed(address)":"a166aa89","labelRole(uint64,string)":"853551b8","length()":"1f7b6d32","minSetback()":"cc1b6c81","multicall(bytes[])":"ac9650d8","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","redeem(address,address)":"bba06f27","renounceOwnership()":"715018a6","renounceRole(uint64,address)":"fe0776f5","revokeRole(uint64,address)":"b7d2b162","schedule(address,bytes,uint48)":"f801a698","setBonus(uint256)":"0b98f975","setGrantDelay(uint64,uint32)":"a64d95ce","setRate(address,uint256)":"2bdb7097","setRoleAdmin(uint64,uint64)":"30cae187","setRoleGuardian(uint64,uint64)":"52962952","setTargetAdminDelay(address,uint32)":"d22b5989","setTargetClosed(address,bool)":"167bd395","setTargetFunctionRole(address,bytes4[],uint64)":"08d6122d","transferAuthority(address)":"3078db6c","transferOwnership(address)":"f2fde38b","unfreeze(address)":"45c8b1a6","unpause()":"3f4ba83a","updateAuthority(address,address)":"18ff183c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManagerBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"AccessManagerInvalidInitialAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessManagerLockedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerLockedRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCancel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AccessManagerUnauthorizedConsume\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CannotRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CannotTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyNewToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"EnumerableMapNonexistentKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPosition\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"NotOwned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TooBigRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsufficientManagerBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"RoleGrantDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMember\",\"type\":\"bool\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"RoleGuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RoleLabel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"TargetAdminDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"TargetClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"TargetFunctionRoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratePos\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"immediate\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"consumeScheduledOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"defineToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"currentDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pendingDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"effect\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getResultAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGrantDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGuardian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getTargetAdminDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getTargetFunctionRole\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"hasRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMember\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isTargetClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSetback\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"when\",\"type\":\"uint48\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setGrantDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"setRoleGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setTargetAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setTargetClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"setTargetFunctionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"transferAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ilya A. Shlyakhovoy\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"EnumerableMapNonexistentKey(bytes32)\":[{\"details\":\"Query for a nonexistent map key.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"OperationCanceled(bytes32,uint32)\":{\"details\":\"A scheduled operation was canceled.\"},\"OperationExecuted(bytes32,uint32)\":{\"details\":\"A scheduled operation was executed.\"},\"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)\":{\"details\":\"A delayed operation was scheduled.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(uint64,uint64)\":{\"details\":\"Role acting as admin over a given `roleId` is updated.\"},\"RoleGrantDelayChanged(uint64,uint32,uint48)\":{\"details\":\"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\"},\"RoleGranted(uint64,address,uint32,uint48,bool)\":{\"details\":\"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated.\"},\"RoleGuardianChanged(uint64,uint64)\":{\"details\":\"Role acting as guardian over a given `roleId` is updated.\"},\"RoleLabel(uint64,string)\":{\"details\":\"Informational labelling for a roleId.\"},\"RoleRevoked(uint64,address)\":{\"details\":\"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\"},\"TargetAdminDelayUpdated(address,uint32,uint48)\":{\"details\":\"Admin delay for a given `target` will be updated to `delay` when `since` is reached.\"},\"TargetClosed(address,bool)\":{\"details\":\"Target mode is updated (true = closed, false = open).\"},\"TargetFunctionRoleUpdated(address,bytes4,uint64)\":{\"details\":\"Role required to invoke `selector` on `target` is updated to `roleId`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead.\"},\"cancel(address,address,bytes)\":{\"details\":\"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event.\"},\"consumeScheduledOp(address,bytes)\":{\"details\":\"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event.\"},\"execute(address,bytes)\":{\"details\":\"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed.\"},\"expiration()\":{\"details\":\"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage.\"},\"getAccess(uint64,address)\":{\"details\":\"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\"},\"getNonce(bytes32)\":{\"details\":\"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled.\"},\"getRoleAdmin(uint64)\":{\"details\":\"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role.\"},\"getRoleGrantDelay(uint64)\":{\"details\":\"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\"},\"getRoleGuardian(uint64)\":{\"details\":\"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role.\"},\"getSchedule(bytes32)\":{\"details\":\"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled.\"},\"getTargetAdminDelay(address)\":{\"details\":\"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\"},\"getTargetFunctionRole(address,bytes4)\":{\"details\":\"Get the role required to call a function.\"},\"grantRole(uint64,address,uint32)\":{\"details\":\"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event.\"},\"hasRole(uint64,address)\":{\"details\":\"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details.\"},\"hashOperation(address,address,bytes)\":{\"details\":\"Hashing function for delayed operations.\"},\"isTargetClosed(address)\":{\"details\":\"Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\"},\"labelRole(uint64,string)\":{\"details\":\"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event.\"},\"minSetback()\":{\"details\":\"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(uint64,address)\":{\"details\":\"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role.\"},\"revokeRole(uint64,address)\":{\"details\":\"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role.\"},\"schedule(address,bytes,uint48)\":{\"details\":\"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding.\"},\"setGrantDelay(uint64,uint32)\":{\"details\":\"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event.\"},\"setRate(address,uint256)\":{\"params\":{\"currency\":\"the address of the currency token\",\"rate\":\"the exchange rate to token\"}},\"setRoleAdmin(uint64,uint64)\":{\"details\":\"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event\"},\"setRoleGuardian(uint64,uint64)\":{\"details\":\"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event\"},\"setTargetAdminDelay(address,uint32)\":{\"details\":\"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event.\"},\"setTargetClosed(address,bool)\":{\"details\":\"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event.\"},\"setTargetFunctionRole(address,bytes4[],uint64)\":{\"details\":\"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAuthority(address,address)\":{\"details\":\"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin\"}},\"title\":\"PresaleManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRate(address,uint256)\":{\"notice\":\"Define or change new allowed currency with rate. Rate cannot be more than 100  tokens for the 1 currency unit. Rate is nominated in token decimals\"}},\"notice\":\"The simple Manager contract for presale phase during the mature Manager contract in development Only confirms execution of token functions if owner called it and receives the funds in the stablecoins\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/management/PresaleManager.sol\":\"PresaleManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Multicall} from \\\"../../utils/Multicall.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev AccessManager is a central contract to store the permissions of a system.\\n *\\n * A smart contract under the control of an AccessManager instance is known as a target, and will inherit from the\\n * {AccessManaged} contract, be connected to this contract as its manager and implement the {AccessManaged-restricted}\\n * modifier on a set of functions selected to be permissioned. Note that any function without this setup won't be\\n * effectively restricted.\\n *\\n * The restriction rules for such functions are defined in terms of \\\"roles\\\" identified by an `uint64` and scoped\\n * by target (`address`) and function selectors (`bytes4`). These roles are stored in this contract and can be\\n * configured by admins (`ADMIN_ROLE` members) after a delay (see {getTargetAdminDelay}).\\n *\\n * For each target contract, admins can configure the following without any delay:\\n *\\n * * The target's {AccessManaged-authority} via {updateAuthority}.\\n * * Close or open a target via {setTargetClosed} keeping the permissions intact.\\n * * The roles that are allowed (or disallowed) to call a given function (identified by its selector) through {setTargetFunctionRole}.\\n *\\n * By default every address is member of the `PUBLIC_ROLE` and every target function is restricted to the `ADMIN_ROLE` until configured otherwise.\\n * Additionally, each role has the following configuration options restricted to this manager's admins:\\n *\\n * * A role's admin role via {setRoleAdmin} who can grant or revoke roles.\\n * * A role's guardian role via {setRoleGuardian} who's allowed to cancel operations.\\n * * A delay in which a role takes effect after being granted through {setGrantDelay}.\\n * * A delay of any target's admin action via {setTargetAdminDelay}.\\n * * A role label for discoverability purposes with {labelRole}.\\n *\\n * Any account can be added and removed into any number of these roles by using the {grantRole} and {revokeRole} functions\\n * restricted to each role's admin (see {getRoleAdmin}).\\n *\\n * Since all the permissions of the managed system can be modified by the admins of this instance, it is expected that\\n * they will be highly secured (e.g., a multisig or a well-configured DAO).\\n *\\n * NOTE: This contract implements a form of the {IAuthority} interface, but {canCall} has additional return data so it\\n * doesn't inherit `IAuthority`. It is however compatible with the `IAuthority` interface since the first 32 bytes of\\n * the return data are a boolean as expected by that interface.\\n *\\n * NOTE: Systems that implement other access control mechanisms (for example using {Ownable}) can be paired with an\\n * {AccessManager} by transferring permissions (ownership in the case of {Ownable}) directly to the {AccessManager}.\\n * Users will be able to interact with these contracts through the {execute} function, following the access rules\\n * registered in the {AccessManager}. Keep in mind that in that context, the msg.sender seen by restricted functions\\n * will be {AccessManager} itself.\\n *\\n * WARNING: When granting permissions over an {Ownable} or {AccessControl} contract to an {AccessManager}, be very\\n * mindful of the danger associated with functions such as {{Ownable-renounceOwnership}} or\\n * {{AccessControl-renounceRole}}.\\n */\\ncontract AccessManager is Context, Multicall, IAccessManager {\\n    using Time for *;\\n\\n    // Structure that stores the details for a target contract.\\n    struct TargetConfig {\\n        mapping(bytes4 selector => uint64 roleId) allowedRoles;\\n        Time.Delay adminDelay;\\n        bool closed;\\n    }\\n\\n    // Structure that stores the details for a role/account pair. This structures fit into a single slot.\\n    struct Access {\\n        // Timepoint at which the user gets the permission.\\n        // If this is either 0 or in the future, then the role permission is not available.\\n        uint48 since;\\n        // Delay for execution. Only applies to restricted() / execute() calls.\\n        Time.Delay delay;\\n    }\\n\\n    // Structure that stores the details of a role.\\n    struct Role {\\n        // Members of the role.\\n        mapping(address user => Access access) members;\\n        // Admin who can grant or revoke permissions.\\n        uint64 admin;\\n        // Guardian who can cancel operations targeting functions that need this role.\\n        uint64 guardian;\\n        // Delay in which the role takes effect after being granted.\\n        Time.Delay grantDelay;\\n    }\\n\\n    // Structure that stores the details for a scheduled operation. This structure fits into a single slot.\\n    struct Schedule {\\n        // Moment at which the operation can be executed.\\n        uint48 timepoint;\\n        // Operation nonce to allow third-party contracts to identify the operation.\\n        uint32 nonce;\\n    }\\n\\n    uint64 public constant ADMIN_ROLE = type(uint64).min; // 0\\n    uint64 public constant PUBLIC_ROLE = type(uint64).max; // 2**64-1\\n\\n    mapping(address target => TargetConfig mode) private _targets;\\n    mapping(uint64 roleId => Role) private _roles;\\n    mapping(bytes32 operationId => Schedule) private _schedules;\\n\\n    // Used to identify operations that are currently being executed via {execute}.\\n    // This should be transient storage when supported by the EVM.\\n    bytes32 private _executionId;\\n\\n    /**\\n     * @dev Check that the caller is authorized to perform the operation, following the restrictions encoded in\\n     * {_getAdminRestrictions}.\\n     */\\n    modifier onlyAuthorized() {\\n        _checkAuthorized();\\n        _;\\n    }\\n\\n    constructor(address initialAdmin) {\\n        if (initialAdmin == address(0)) {\\n            revert AccessManagerInvalidInitialAdmin(address(0));\\n        }\\n\\n        // admin is active immediately and without any execution delay.\\n        _grantRole(ADMIN_ROLE, initialAdmin, 0, 0);\\n    }\\n\\n    // =================================================== GETTERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) public view virtual returns (bool immediate, uint32 delay) {\\n        if (isTargetClosed(target)) {\\n            return (false, 0);\\n        } else if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(target, selector), 0);\\n        } else {\\n            uint64 roleId = getTargetFunctionRole(target, selector);\\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function expiration() public view virtual returns (uint32) {\\n        return 1 weeks;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function minSetback() public view virtual returns (uint32) {\\n        return 5 days;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function isTargetClosed(address target) public view virtual returns (bool) {\\n        return _targets[target].closed;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\\n        return _targets[target].allowedRoles[selector];\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getTargetAdminDelay(address target) public view virtual returns (uint32) {\\n        return _targets[target].adminDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].admin;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\\n        return _roles[roleId].guardian;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\\n        return _roles[roleId].grantDelay.get();\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\\n        Access storage access = _roles[roleId].members[account];\\n\\n        since = access.since;\\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\\n\\n        return (since, currentDelay, pendingDelay, effect);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hasRole(\\n        uint64 roleId,\\n        address account\\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\\n        if (roleId == PUBLIC_ROLE) {\\n            return (true, 0);\\n        } else {\\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\\n        }\\n    }\\n\\n    // =============================================== ROLE MANAGEMENT ===============================================\\n    /// @inheritdoc IAccessManager\\n    function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n        emit RoleLabel(roleId, label);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\\n        _revokeRole(roleId, account);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessManagerBadConfirmation();\\n        }\\n        _revokeRole(roleId, callerConfirmation);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\\n        _setRoleAdmin(roleId, admin);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\\n        _setRoleGuardian(roleId, guardian);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\\n        _setGrantDelay(roleId, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function _grantRole(\\n        uint64 roleId,\\n        address account,\\n        uint32 grantDelay,\\n        uint32 executionDelay\\n    ) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        bool newMember = _roles[roleId].members[account].since == 0;\\n        uint48 since;\\n\\n        if (newMember) {\\n            since = Time.timestamp() + grantDelay;\\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\\n        } else {\\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\\n            // any change to the execution delay within the duration of the role admin delay.\\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\\n                executionDelay,\\n                0\\n            );\\n        }\\n\\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\\n        return newMember;\\n    }\\n\\n    /**\\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\\n     * Returns true if the role was previously granted.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        if (_roles[roleId].members[account].since == 0) {\\n            return false;\\n        }\\n\\n        delete _roles[roleId].members[account];\\n\\n        emit RoleRevoked(roleId, account);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleAdmin} without access control.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to set grant or revoke such role.\\n     */\\n    function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].admin = admin;\\n\\n        emit RoleAdminChanged(roleId, admin);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setRoleGuardian} without access control.\\n     *\\n     * Emits a {RoleGuardianChanged} event.\\n     *\\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\\n     * anyone to cancel any scheduled operation for such role.\\n     */\\n    function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        _roles[roleId].guardian = guardian;\\n\\n        emit RoleGuardianChanged(roleId, guardian);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setGrantDelay} without access control.\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\\n        if (roleId == PUBLIC_ROLE) {\\n            revert AccessManagerLockedRole(roleId);\\n        }\\n\\n        uint48 effect;\\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\\n\\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\\n    }\\n\\n    // ============================================= FUNCTION MANAGEMENT ==============================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetFunctionRole(\\n        address target,\\n        bytes4[] calldata selectors,\\n        uint64 roleId\\n    ) public virtual onlyAuthorized {\\n        for (uint256 i = 0; i < selectors.length; ++i) {\\n            _setTargetFunctionRole(target, selectors[i], roleId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetFunctionRole} without access control.\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event.\\n     */\\n    function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\\n        _targets[target].allowedRoles[selector] = roleId;\\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\\n        _setTargetAdminDelay(target, newDelay);\\n    }\\n\\n    /**\\n     * @dev Internal version of {setTargetAdminDelay} without access control.\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\\n        uint48 effect;\\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\\n\\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\\n    }\\n\\n    // =============================================== MODE MANAGEMENT ================================================\\n    /// @inheritdoc IAccessManager\\n    function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\\n        _setTargetClosed(target, closed);\\n    }\\n\\n    /**\\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function _setTargetClosed(address target, bool closed) internal virtual {\\n        if (target == address(this)) {\\n            revert AccessManagerLockedAccount(target);\\n        }\\n        _targets[target].closed = closed;\\n        emit TargetClosed(target, closed);\\n    }\\n\\n    // ============================================== DELAYED OPERATIONS ==============================================\\n    /// @inheritdoc IAccessManager\\n    function getSchedule(bytes32 id) public view virtual returns (uint48) {\\n        uint48 timepoint = _schedules[id].timepoint;\\n        return _isExpired(timepoint) ? 0 : timepoint;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function getNonce(bytes32 id) public view virtual returns (uint32) {\\n        return _schedules[id].nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        uint48 minWhen = Time.timestamp() + setback;\\n\\n        // if call with delay is not authorized, or if requested timing is too soon\\n        if (setback == 0 || (when > 0 && when < minWhen)) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        // Reuse variable due to stack too deep\\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\\n\\n        // If caller is authorised, schedule operation\\n        operationId = hashOperation(caller, target, data);\\n\\n        _checkNotScheduled(operationId);\\n\\n        unchecked {\\n            // It's not feasible to overflow the nonce in less than 1000 years\\n            nonce = _schedules[operationId].nonce + 1;\\n        }\\n        _schedules[operationId].timepoint = when;\\n        _schedules[operationId].nonce = nonce;\\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\\n\\n        // Using named return values because otherwise we get stack too deep\\n    }\\n\\n    /**\\n     * @dev Reverts if the operation is currently scheduled and has not expired.\\n     * (Note: This function was introduced due to stack too deep errors in schedule.)\\n     */\\n    function _checkNotScheduled(bytes32 operationId) private view {\\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\\n            revert AccessManagerAlreadyScheduled(operationId);\\n        }\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    // Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\\n    // _consumeScheduledOp guarantees a scheduled operation is only executed once.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\\n        address caller = _msgSender();\\n\\n        // Fetch restrictions that apply to the caller on the targeted function\\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\\n\\n        // If caller is not authorised, revert\\n        if (!immediate && setback == 0) {\\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\\n        }\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        uint32 nonce;\\n\\n        // If caller is authorised, check operation was scheduled early enough\\n        // Consume an available schedule even if there is no currently enforced delay\\n        if (setback != 0 || getSchedule(operationId) != 0) {\\n            nonce = _consumeScheduledOp(operationId);\\n        }\\n\\n        // Mark the target and selector as authorised\\n        bytes32 executionIdBefore = _executionId;\\n        _executionId = _hashExecutionId(target, _checkSelector(data));\\n\\n        // Perform call\\n        Address.functionCallWithValue(target, data, msg.value);\\n\\n        // Reset execute identifier\\n        _executionId = executionIdBefore;\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\\n        address msgsender = _msgSender();\\n        bytes4 selector = _checkSelector(data);\\n\\n        bytes32 operationId = hashOperation(caller, target, data);\\n        if (_schedules[operationId].timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (caller != msgsender) {\\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\\n            if (!isAdmin && !isGuardian) {\\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\\n            }\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        uint32 nonce = _schedules[operationId].nonce;\\n        emit OperationCanceled(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function consumeScheduledOp(address caller, bytes calldata data) public virtual {\\n        address target = _msgSender();\\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\\n            revert AccessManagerUnauthorizedConsume(target);\\n        }\\n        _consumeScheduledOp(hashOperation(caller, target, data));\\n    }\\n\\n    /**\\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\\n     *\\n     * Returns the nonce of the scheduled operation that is consumed.\\n     */\\n    function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\\n        uint48 timepoint = _schedules[operationId].timepoint;\\n        uint32 nonce = _schedules[operationId].nonce;\\n\\n        if (timepoint == 0) {\\n            revert AccessManagerNotScheduled(operationId);\\n        } else if (timepoint > Time.timestamp()) {\\n            revert AccessManagerNotReady(operationId);\\n        } else if (_isExpired(timepoint)) {\\n            revert AccessManagerExpired(operationId);\\n        }\\n\\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\\n        emit OperationExecuted(operationId, nonce);\\n\\n        return nonce;\\n    }\\n\\n    /// @inheritdoc IAccessManager\\n    function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\\n        return keccak256(abi.encode(caller, target, data));\\n    }\\n\\n    // ==================================================== OTHERS ====================================================\\n    /// @inheritdoc IAccessManager\\n    function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\\n        IAccessManaged(target).setAuthority(newAuthority);\\n    }\\n\\n    // ================================================= ADMIN LOGIC ==================================================\\n    /**\\n     * @dev Check if the current call is authorized according to admin logic.\\n     */\\n    function _checkAuthorized() private {\\n        address caller = _msgSender();\\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\\n        if (!immediate) {\\n            if (delay == 0) {\\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\\n            } else {\\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\\n     *\\n     * Returns:\\n     * - bool restricted: does this data match a restricted operation\\n     * - uint64: which role is this operation restricted to\\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\\n     */\\n    function _getAdminRestrictions(\\n        bytes calldata data\\n    ) private view returns (bool restricted, uint64 roleAdminId, uint32 executionDelay) {\\n        if (data.length < 4) {\\n            return (false, 0, 0);\\n        }\\n\\n        bytes4 selector = _checkSelector(data);\\n\\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\\n        if (\\n            selector == this.labelRole.selector ||\\n            selector == this.setRoleAdmin.selector ||\\n            selector == this.setRoleGuardian.selector ||\\n            selector == this.setGrantDelay.selector ||\\n            selector == this.setTargetAdminDelay.selector\\n        ) {\\n            return (true, ADMIN_ROLE, 0);\\n        }\\n\\n        // Restricted to ADMIN with the admin delay corresponding to the target\\n        if (\\n            selector == this.updateAuthority.selector ||\\n            selector == this.setTargetClosed.selector ||\\n            selector == this.setTargetFunctionRole.selector\\n        ) {\\n            // First argument is a target.\\n            address target = abi.decode(data[0x04:0x24], (address));\\n            uint32 delay = getTargetAdminDelay(target);\\n            return (true, ADMIN_ROLE, delay);\\n        }\\n\\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\\n            // First argument is a roleId.\\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\\n            return (true, getRoleAdmin(roleId), 0);\\n        }\\n\\n        return (false, 0, 0);\\n    }\\n\\n    // =================================================== HELPERS ====================================================\\n    /**\\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\\n     * when the target is this contract.\\n     *\\n     * Returns:\\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\\n     * - uint32 delay: the execution delay\\n     */\\n    function _canCallExtended(\\n        address caller,\\n        address target,\\n        bytes calldata data\\n    ) private view returns (bool immediate, uint32 delay) {\\n        if (target == address(this)) {\\n            return _canCallSelf(caller, data);\\n        } else {\\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\\n        }\\n    }\\n\\n    /**\\n     * @dev A version of {canCall} that checks for admin restrictions in this contract.\\n     */\\n    function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\\n        if (data.length < 4) {\\n            return (false, 0);\\n        }\\n\\n        if (caller == address(this)) {\\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\\n            // permissions. We verify that the call \\\"identifier\\\", which is set during {execute}, is correct.\\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\\n        }\\n\\n        (bool enabled, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\\n        if (!enabled) {\\n            return (false, 0);\\n        }\\n\\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\\n        if (!inRole) {\\n            return (false, 0);\\n        }\\n\\n        // downcast is safe because both options are uint32\\n        delay = uint32(Math.max(operationDelay, executionDelay));\\n        return (delay == 0, delay);\\n    }\\n\\n    /**\\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\\n     */\\n    function _isExecuting(address target, bytes4 selector) private view returns (bool) {\\n        return _executionId == _hashExecutionId(target, selector);\\n    }\\n\\n    /**\\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\\n     */\\n    function _isExpired(uint48 timepoint) private view returns (bool) {\\n        return timepoint + expiration() <= Time.timestamp();\\n    }\\n\\n    /**\\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\\n     */\\n    function _checkSelector(bytes calldata data) private pure returns (bytes4) {\\n        return bytes4(data[0:4]);\\n    }\\n\\n    /**\\n     * @dev Hashing function for execute protection\\n     */\\n    function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\\n        return keccak256(abi.encode(target, selector));\\n    }\\n}\\n\",\"keccak256\":\"0x400d1683c04190b85f1dcaeb05d9206fe9fdbafbb3c7a75b18bfe1d84038a876\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract Multicall is Context {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"contracts/management/PresaleManager.sol\":{\"content\":\"// SPDX-License-Identifier: Private\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/manager/AccessManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\\\";\\nimport \\\"contracts/tokens/IFreezable.sol\\\"; \\n\\n/**\\n * @title PresaleManager\\n * @author Ilya A. Shlyakhovoy\\n * @notice The simple Manager contract for presale phase during the\\n * mature Manager contract in development\\n * Only confirms execution of token functions if owner called it and\\n * receives the funds in the stablecoins\\n */\\n\\ncontract PresaleManager is Ownable, AccessManager, Pausable {\\n    uint256 public immutable SALT ;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    error EmptyToken();\\n    error EmptyCurrency();\\n    error EmptyRate();\\n    error TooBigRate(uint256 rate);\\n    error EmptyValue();\\n    error CannotRedeem(address currency);\\n    error CannotTransfer(address currency);\\n    error NotOwned(address target);\\n    error EmptyNewToken();\\n    error IncorrectPosition();\\n    error UnsufficientBalance(address buyer, address currency, uint256 balance,  uint256 amount);\\n    error UnsufficientManagerBalance(uint256 amount);\\n\\n    event BoughtTokens(\\n        address indexed sender,\\n        address indexed currency,\\n        uint256 indexed value,\\n        uint256 amount\\n    );\\n    // address owner;\\n    address tokenContract;\\n    uint256 bonusPercent;\\n    EnumerableMap.AddressToUintMap private currencies;\\n\\n    constructor(\\n        address initialOwner,\\n        address token,\\n        uint256 bonus\\n    ) Ownable(initialOwner) AccessManager(initialOwner) {\\n        bonusPercent = 100 + bonus;\\n        tokenContract = token;\\n        SALT = 1544799;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function freeze(address target) external onlyOwner {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IFreezable(tokenContract).freeze(target);\\n    }\\n\\n    function unfreeze(address target) external onlyOwner {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IFreezable(tokenContract).unfreeze(target);\\n    }\\n\\n    function defineToken(address _token) external onlyOwner whenPaused {\\n        if (_token == address(0)) revert EmptyToken();\\n        tokenContract = _token;\\n    }\\n\\n    function getToken() external view returns (address) {\\n        return tokenContract;\\n    }\\n\\n    /**\\n     * Define or change new allowed currency with rate. Rate cannot be more than 100\\n     *  tokens for the 1 currency unit. Rate is nominated in token decimals\\n     *\\n     * @param currency  the address of the currency token\\n     * @param rate the exchange rate to token\\n     */\\n\\n    function setRate(\\n        address currency,\\n        uint256 rate\\n    ) external onlyOwner whenPaused returns (bool) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (rate == 0) revert EmptyRate();\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        if (\\n            rate > uint256(10 ** (IERC20Metadata(tokenContract).decimals() + 2))\\n        ) revert TooBigRate(rate);\\n        return currencies.set(currency, rate);\\n    }\\n\\n    function getRate(address currency) external view returns (uint256) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (!currencies.contains(currency)) return 0;\\n        return currencies.get(currency);\\n    }\\n\\n    function at(uint256 ratePos) external view returns (address, uint256) {\\n        if (ratePos >= currencies.length()) revert IncorrectPosition();\\n        return currencies.at(ratePos);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return currencies.length();\\n    }\\n\\n    function hasRate(\\n        address currency\\n    ) external view whenNotPaused returns (bool) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        return currencies.contains(currency);\\n    }\\n\\n    function setBonus(uint256 bonus) external onlyOwner whenPaused {\\n        bonusPercent = 100 + bonus;\\n    }\\n\\n    function getBonus() external view returns (uint256) {\\n        return bonusPercent - 100;\\n    }\\n    \\n\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) public view virtual override returns (bool immediate, uint32 delay) {\\n        if (caller == owner()) return (true, 0);\\n        (bool found,  ) = hasRole(ADMIN_ROLE, caller);\\n        return (found, 0);\\n    }\\n\\n    function getResultAmount(\\n        address currency,\\n        uint256 value\\n    ) external view returns (uint256) {\\n        if (currency == address(0)) revert EmptyCurrency();\\n        if (value == 0) revert EmptyValue();\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        // get the source decimals and add 2 because it will be multiplied by bonus percentage\\n        uint256 decimals = IERC20Metadata(currency).decimals() + 2;\\n        uint256 rate = this.getRate(currency);\\n        return (rate * value * bonusPercent) / (10 ** decimals);\\n    }\\n\\n    function buy(address currency, uint256 value) external whenNotPaused returns (bool) {\\n        uint256 amount = this.getResultAmount(currency, value);\\n        uint256 buyerBalance  = IERC20(currency).balanceOf(msg.sender);\\n        uint256 managerBalance  = IERC20(tokenContract).balanceOf(address(this));\\n        if ( buyerBalance < value)\\n            revert UnsufficientBalance(msg.sender, currency, buyerBalance, value);\\n        if ( managerBalance < amount)\\n            revert UnsufficientManagerBalance(amount);\\n        if (!IERC20(currency).transferFrom(msg.sender, address(this), value))\\n            return false;\\n        bool transferred = IERC20(tokenContract).transfer(msg.sender, amount);\\n        if (transferred) emit BoughtTokens(msg.sender, currency, value, amount);\\n        return transferred;\\n    }\\n\\n    function balanceOf(address currency) external view returns (uint256) {\\n        if (!this.hasRate(currency)) return 0;\\n        return IERC20(currency).balanceOf(address(this));\\n    }\\n\\n    function redeem(address currency, address _to) external onlyOwner whenPaused {\\n        if (\\n            !IERC20(currency).transfer(\\n                _to,\\n                IERC20(currency).balanceOf(address(this))\\n            )\\n        ) revert CannotRedeem(currency);\\n    }\\n\\n    function transferAuthority(\\n        address newAuthority\\n    ) external onlyOwner whenPaused {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\\n    }\\n\\n    function destroy(\\n        address payable _to,\\n        address newAuthority\\n    ) external onlyOwner whenPaused {\\n        if (tokenContract == address(0)) revert EmptyToken();\\n        IAccessManaged(tokenContract).setAuthority(newAuthority);\\n        if (\\n            !IERC20(tokenContract).transfer(\\n                newAuthority,\\n                IERC20(tokenContract).balanceOf(address(this))\\n            )\\n        ) revert CannotTransfer(tokenContract);\\n\\n        uint256 i;\\n        uint256 balance;\\n        for (i = 0; i < currencies.length(); i++) {\\n            (address currency, ) = currencies.at(i);\\n            balance = IERC20(currency).balanceOf(address(this));\\n            if (balance > 0 && !IERC20(currency).transfer(_to, balance))\\n                revert CannotTransfer(currency);\\n        }\\n        selfdestruct(_to);\\n    }\\n}\\n\",\"keccak256\":\"0xe13030a083b811c950dd137a27216d9b25a47c062f1c0d065104e7fd7233717a\",\"license\":\"Private\"},\"contracts/tokens/IFreezable.sol\":{\"content\":\"// SPDX-License-Identifier: Private\\npragma solidity ^0.8.20;\\n\\ninterface IFreezable {\\n    /**\\n     * @dev Indicates an error when freezed address called function\\n     * @param account Address who calls\\n     */\\n    error EnforcedFreeze(address account);\\n\\n    /**\\n     * @dev The operation failed because the address is not freezed.\\n     */\\n    error ExpectedFreeze(address account);\\n\\n    /**\\n     * @dev Emitted when the freeze is triggered by `account`.\\n     */\\n    event Freezed(address indexed account);\\n\\n    /**\\n     * @dev Emitted when the freeze is lifted by `account`.\\n     */\\n    event Unfreezed(address indexed account);\\n\\n    /**\\n     * @dev Returns true if the address is freezed, and false otherwise.\\n     *\\n     * Requirements:\\n     *\\n     *  @param target The verified address\\n     */\\n    function freezed(address target) external view returns (bool);\\n\\n    function freeze(address target) external;\\n\\n    function unfreeze(address target) external;\\n}\\n\",\"keccak256\":\"0x1ae56cdb5ec2d0c8b3144a73533ce6c954a69673295da6201b2f85bc06eee925\",\"license\":\"Private\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":225,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_targets","offset":0,"slot":"1","type":"t_mapping(t_address,t_struct(TargetConfig)182_storage)"},{"astId":230,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_roles","offset":0,"slot":"2","type":"t_mapping(t_uint64,t_struct(Role)201_storage)"},{"astId":235,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_schedules","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(Schedule)206_storage)"},{"astId":237,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_executionId","offset":0,"slot":"4","type":"t_bytes32"},{"astId":2994,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_paused","offset":0,"slot":"5","type":"t_bool"},{"astId":7991,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"tokenContract","offset":1,"slot":"5","type":"t_address"},{"astId":7993,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"bonusPercent","offset":0,"slot":"6","type":"t_uint256"},{"astId":7996,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"currencies","offset":0,"slot":"7","type":"t_struct(AddressToUintMap)6591_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_mapping(t_address,t_struct(Access)188_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AccessManager.Access)","numberOfBytes":"32","value":"t_struct(Access)188_storage"},"t_mapping(t_address,t_struct(TargetConfig)182_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct AccessManager.TargetConfig)","numberOfBytes":"32","value":"t_struct(TargetConfig)182_storage"},"t_mapping(t_bytes32,t_bytes32)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_mapping(t_bytes32,t_struct(Schedule)206_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessManager.Schedule)","numberOfBytes":"32","value":"t_struct(Schedule)206_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes4,t_uint64)":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_uint64,t_struct(Role)201_storage)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => struct AccessManager.Role)","numberOfBytes":"32","value":"t_struct(Role)201_storage"},"t_struct(Access)188_storage":{"encoding":"inplace","label":"struct AccessManager.Access","members":[{"astId":184,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"since","offset":0,"slot":"0","type":"t_uint48"},{"astId":187,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"delay","offset":6,"slot":"0","type":"t_userDefinedValueType(Delay)7676"}],"numberOfBytes":"32"},"t_struct(AddressToUintMap)6591_storage":{"encoding":"inplace","label":"struct EnumerableMap.AddressToUintMap","members":[{"astId":6590,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_inner","offset":0,"slot":"0","type":"t_struct(Bytes32ToBytes32Map)5933_storage"}],"numberOfBytes":"96"},"t_struct(Bytes32Set)7231_storage":{"encoding":"inplace","label":"struct EnumerableSet.Bytes32Set","members":[{"astId":7230,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)7037_storage"}],"numberOfBytes":"64"},"t_struct(Bytes32ToBytes32Map)5933_storage":{"encoding":"inplace","label":"struct EnumerableMap.Bytes32ToBytes32Map","members":[{"astId":5928,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_keys","offset":0,"slot":"0","type":"t_struct(Bytes32Set)7231_storage"},{"astId":5932,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_values","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bytes32)"}],"numberOfBytes":"96"},"t_struct(Role)201_storage":{"encoding":"inplace","label":"struct AccessManager.Role","members":[{"astId":193,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(Access)188_storage)"},{"astId":195,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"admin","offset":0,"slot":"1","type":"t_uint64"},{"astId":197,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"guardian","offset":8,"slot":"1","type":"t_uint64"},{"astId":200,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"grantDelay","offset":16,"slot":"1","type":"t_userDefinedValueType(Delay)7676"}],"numberOfBytes":"64"},"t_struct(Schedule)206_storage":{"encoding":"inplace","label":"struct AccessManager.Schedule","members":[{"astId":203,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"timepoint","offset":0,"slot":"0","type":"t_uint48"},{"astId":205,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"nonce","offset":6,"slot":"0","type":"t_uint32"}],"numberOfBytes":"32"},"t_struct(Set)7037_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":7032,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":7036,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"_positions","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_struct(TargetConfig)182_storage":{"encoding":"inplace","label":"struct AccessManager.TargetConfig","members":[{"astId":176,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"allowedRoles","offset":0,"slot":"0","type":"t_mapping(t_bytes4,t_uint64)"},{"astId":179,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"adminDelay","offset":0,"slot":"1","type":"t_userDefinedValueType(Delay)7676"},{"astId":181,"contract":"contracts/management/PresaleManager.sol:PresaleManager","label":"closed","offset":14,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint48":{"encoding":"inplace","label":"uint48","numberOfBytes":"6"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_userDefinedValueType(Delay)7676":{"encoding":"inplace","label":"Time.Delay","numberOfBytes":"14"}}},"userdoc":{"kind":"user","methods":{"setRate(address,uint256)":{"notice":"Define or change new allowed currency with rate. Rate cannot be more than 100  tokens for the 1 currency unit. Rate is nominated in token decimals"}},"notice":"The simple Manager contract for presale phase during the mature Manager contract in development Only confirms execution of token functions if owner called it and receives the funds in the stablecoins","version":1}}},"contracts/tokens/IFreezable.sol":{"IFreezable":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"EnforcedFreeze","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"ExpectedFreeze","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"Freezed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"Unfreezed","type":"event"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"freeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"freezed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"unfreeze","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"EnforcedFreeze(address)":[{"details":"Indicates an error when freezed address called function","params":{"account":"Address who calls"}}],"ExpectedFreeze(address)":[{"details":"The operation failed because the address is not freezed."}]},"events":{"Freezed(address)":{"details":"Emitted when the freeze is triggered by `account`."},"Unfreezed(address)":{"details":"Emitted when the freeze is lifted by `account`."}},"kind":"dev","methods":{"freezed(address)":{"details":"Returns true if the address is freezed, and false otherwise. Requirements:","params":{"target":"The verified address"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"freeze(address)":"8d1fdf2f","freezed(address)":"406f11f5","unfreeze(address)":"45c8b1a6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnforcedFreeze\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExpectedFreeze\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreezed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freezed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedFreeze(address)\":[{\"details\":\"Indicates an error when freezed address called function\",\"params\":{\"account\":\"Address who calls\"}}],\"ExpectedFreeze(address)\":[{\"details\":\"The operation failed because the address is not freezed.\"}]},\"events\":{\"Freezed(address)\":{\"details\":\"Emitted when the freeze is triggered by `account`.\"},\"Unfreezed(address)\":{\"details\":\"Emitted when the freeze is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"freezed(address)\":{\"details\":\"Returns true if the address is freezed, and false otherwise. Requirements:\",\"params\":{\"target\":\"The verified address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/IFreezable.sol\":\"IFreezable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/tokens/IFreezable.sol\":{\"content\":\"// SPDX-License-Identifier: Private\\npragma solidity ^0.8.20;\\n\\ninterface IFreezable {\\n    /**\\n     * @dev Indicates an error when freezed address called function\\n     * @param account Address who calls\\n     */\\n    error EnforcedFreeze(address account);\\n\\n    /**\\n     * @dev The operation failed because the address is not freezed.\\n     */\\n    error ExpectedFreeze(address account);\\n\\n    /**\\n     * @dev Emitted when the freeze is triggered by `account`.\\n     */\\n    event Freezed(address indexed account);\\n\\n    /**\\n     * @dev Emitted when the freeze is lifted by `account`.\\n     */\\n    event Unfreezed(address indexed account);\\n\\n    /**\\n     * @dev Returns true if the address is freezed, and false otherwise.\\n     *\\n     * Requirements:\\n     *\\n     *  @param target The verified address\\n     */\\n    function freezed(address target) external view returns (bool);\\n\\n    function freeze(address target) external;\\n\\n    function unfreeze(address target) external;\\n}\\n\",\"keccak256\":\"0x1ae56cdb5ec2d0c8b3144a73533ce6c954a69673295da6201b2f85bc06eee925\",\"license\":\"Private\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}