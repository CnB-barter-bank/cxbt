{"id":"7a64c48cbb96592a0c1d271b581c06cb","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/manager/AccessManaged.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IAirdrop.sol\";\nimport \"./IVesting.sol\";\n\nabstract contract Airdrop is IAirdrop {\n    using BitMaps for BitMaps.BitMap;\n\n    bytes32 public root;\n    bool public airdropFinished;\n    IERC20 private token;\n    IVesting private vesting;\n    BitMaps.BitMap private redeemed;\n\n    /**\n     * @dev Modifier to make a function callable only while aidrop working\n     *\n     */\n    modifier notFinished() {\n        if (airdropFinished) revert AirdropIsFinished();\n        _;\n    }\n\n    constructor(IERC20 _token, IVesting _vesting, bytes32 _root) {\n        if (address(_token) == address(0)) {\n            revert EmptyToken();\n        }\n        root = _root;\n        token = _token;\n        vesting = _vesting;\n    }\n\n    /// @notice Addresses can redeem their tokens.\n    /// @param proof Proof path.\n    function _redeem(\n        address target,\n        bytes32[] memory proof,\n        uint256 redeemAmount\n    ) internal virtual notFinished {\n        uint256 redeemPos = uint256(uint160(target));\n        if (redeemed.get(redeemPos)) {\n            revert AlreadyRedeemed(target);\n        }\n        bytes32 leaf = keccak256(\n            bytes.concat(keccak256(abi.encode(target, redeemAmount)))\n        );\n        if (!MerkleProof.verify(proof, root, leaf)) {\n            revert WrongPath(target, redeemAmount, proof);\n        }\n        redeemed.set(redeemPos);\n        if (address(vesting) == address(0)) {\n            if (!token.transfer(target, redeemAmount)) revert NotEnoughFunds(redeemAmount);\n            emit Redeem(target, redeemAmount);\n            return;\n        }\n        if (!token.transfer(address(vesting), redeemAmount)) revert NotEnoughFunds(redeemAmount);\n        vesting.distribute(target, redeemAmount);\n        emit Vesting(target, redeemAmount);\n    }\n\n    /// @notice Update merkle root\n    /// @param _root Merkle root of the addresses white list.\n    function _updateMerkleRoot(bytes32 _root) internal virtual {\n        root = _root;\n    }\n\n    /// @notice Update token address\n    /// @param _token New token address.\n    function _updateToken(address _token) internal virtual {\n        if (address(_token) == address(0)) {\n            revert EmptyToken();\n        }\n        token = IERC20(_token);\n    }\n\n    /// @notice Update vesting address\n    /// @param _vesting New vesting address.\n    function _updateVesting(address _vesting) internal virtual {\n        vesting = IVesting(_vesting);\n    }\n\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n    /// @param _to The receiving address.\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\n    function _cancelAirDrop(address payable _to) internal virtual {\n        uint256 contractBalance = token.balanceOf(address(this));\n        if (token.transfer(_to, contractBalance)) revert CannotReturnFunds();\n        airdropFinished = true;\n    }\n}\n"},"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * Defines the contract for the airdrop with the optional attach to the vesting\n * If the vesting contract address is set, tokens will be transferred to the vesting contract,\n * othervise to the airdrop target\n */\n\ninterface IAirdrop {\n    /**\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\n     * @param target Address who calls redeem..\n     */\n    error AlreadyRedeemed(address target);\n\n    /**\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\n     * @param target Address who calls redeem.\n     * @param amount Amount redeemed.\n     * @param proof The proof provided.\n     */\n    error WrongPath(address target, uint256 amount, bytes32[] proof);\n\n    /**\n     * @dev Indicates an error related to the end of the airdrop\n     */\n    error AirdropIsFinished();\n\n    /**\n     * @dev Indicates an error when empty token is provided.\n     */\n    error EmptyToken();\n\n    /**\n     * @dev Indicates an error when no tokens are distributed to the airdrop.\n     */\n    error NotEnoughFunds(uint256 redeemAmount);\n\n    error CannotReturnFunds();\n\n    event Redeem(address indexed account, uint256 amount);\n    event Vesting(address indexed account, uint256 amount);\n\n    /// @notice Addresses can redeem their tokens.\n    /// @param proof Proof path.\n    function redeem(\n        address target,\n        bytes32[] memory proof,\n        uint256 redeemAmount\n    ) external;\n\n    /// @notice Update merkle root\n    /// @param _root Merkle root of the addresses white list.\n    function updateMerkleRoot(bytes32 _root) external;\n\n    /// @notice Update token address\n    /// @param _token New token address.\n    function updateToken(address _token) external;\n\n    /// @notice Update vesting address\n    /// @param _vesting New vesting address.\n    function updateVesting(address _vesting) external;\n\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n    /// @param _to The receiving address.\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\n    function cancelAirDrop(address payable _to) external;\n}\n"},"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../structures/KPI.sol\"; \n\ninterface IVesting {\n\n    /**\n     * @dev Indicates an error when empty token is provided.\n     */\n    error VestingEmptyToken();\n\n    /**\n     * @dev Indicates an error when empty airdrop is provided.\n     */\n    error VestingEmptyAirdrop();\n    /**\n     * @dev Indicates an error when unathorized person calls airdrop only function\n     * @param account Address who calls\n     */\n    error VestingUnauthorizedAccount(address account);\n    /**\n     * @dev Indicates an error when no tokens can be redeemed.\n     */\n    error VestingEmptyRedeem();\n    /**\n     * @dev Indicates an error when kpi redefines.\n     * @param code KPI code\n     */\n    error VestingKPIAlreadyDefined(bytes32 code);\n\n    /**\n     * @dev Indicates an error when kpi is not defined.\n     * @param code KPI code\n     */\n    error VestingKPINotDefined(bytes32 code);\n    /**\n     * @dev Indicates an error when kpi amount value is incorrect.\n     * @param code KPI code\n     * @param amount amount provided\n     */\n    error VestingIncorrectAmount(bytes32 code, uint16 amount);\n    /**\n     * @dev Indicates an error when kpi weight value is incorrect.\n     * @param code KPI code\n     * @param amount weight provided\n     */\n    error VestingIncorrectWeight(bytes32 code, uint16 amount);\n    event Redeem(address indexed account, uint256 amount);\n    event Distribute(address indexed account, uint256 amount);\n    event KPIAdded(\n        bytes32 indexed code,\n        uint256 indexed time,\n        KPITimeStatus indexed timeStatus,\n        uint16 weight\n    );\n    event KPIModified(\n        bytes32 indexed code,\n        uint256 indexed time,\n        KPITimeStatus indexed timeStatus,\n        uint16 weight\n    );\n    event KPIUpdated(bytes32 indexed code, uint16 amount);\n\n    event KPIRemoved(bytes32 indexed code);\n\n    /// @notice Update token address\n    /// @param _token New token address.\n    function updateToken(address _token) external;\n\n    /// @notice Update token address\n    /// @param _airdrop New token address.\n    function updateAirdrop(address _airdrop) external;\n\n    /// @notice Distribute the new vesting amount\n    /// @param _to Receiver address.\n    /// @param _amount Distributed amount.\n    function distribute(address _to, uint256 _amount) external;\n\n    /// @notice Take the current unlocked amount\n    function redeem(address _to) external returns (uint256);\n\n    /// @notice Set the new KPI\n    /// @param _code The KPI id code\n    /// @param _time timestamp\n    /// @param _timeStatus status of the time\n    /// @param _weight weight of the KPI parameter in the total KPI\n    function addKPI(\n        bytes32 _code,\n        uint256 _time,\n        KPITimeStatus _timeStatus,\n        uint16 _weight\n    ) external;\n\n    /// @notice Modify the KPI properties\n    /// @param _code The KPI id code\n    /// @param _time timestamp\n    /// @param _timeStatus status of the time\n    /// @param _weight weight of the KPI parameter in the total KPI\n    function modifyKPI(\n        bytes32 _code,\n        uint256 _time,\n        KPITimeStatus _timeStatus,\n        uint16 _weight\n    ) external;\n\n    /// @notice Update the  KPI value\n    /// @param _code The KPI id code\n    /// @param _amount the current value of KPI\n    function updateKPI(bytes32 _code, uint16 _amount) external;\n\n    /// @notice Increase the  KPI value\n    /// @param _code The KPI id code\n    /// @param _amount the added value of KPI\n    function increaseKPI(bytes32 _code, uint16 _amount) external;\n\n    /// @notice Remove the KPI from the list\n    /// @param _code The KPI id code\n    function removeKPI(bytes32 _code) external;\n\n    /// @notice Get the KPI from the list\n    /// @param _code The KPI id code\n    function getKPI(bytes32 _code) external view returns (KPI memory);\n}\n"},"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nenum KPITimeStatus {\n    // do not use timestamp\n    Ignore,\n    // kpi is always zero until the timestamp\n    NotBefore,\n    // kpi is always 1000 (1) after the timestamp\n    AlwaysAfter\n}\n/*\n * KPI allows calculation of vesting value according the different options and time.\n * All KPI values are calculated in promille (1/1000) and are between 0 & 1000 (1)\n */\nstruct KPI {\n    // the service timestamp for the KPI\n    uint256 time;\n    // how the timestamp should to be processed\n    KPITimeStatus timeStatus;\n    // current KPI value\n    uint16 current;\n    // KPI weight in total KPI\n    uint16 weight;\n}\n"},"@openzeppelin/contracts/access/manager/AccessManaged.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\nimport {AuthorityUtils} from \"./AuthorityUtils.sol\";\nimport {IAccessManager} from \"./IAccessManager.sol\";\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Context} from \"../../utils/Context.sol\";\n\n/**\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\n * permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface,\n * implementing a policy that allows certain callers to access certain functions.\n *\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\n * functions, and ideally only used in `external` functions. See {restricted}.\n */\nabstract contract AccessManaged is Context, IAccessManaged {\n    address private _authority;\n\n    bool private _consumingSchedule;\n\n    /**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n    constructor(address initialAuthority) {\n        _setAuthority(initialAuthority);\n    }\n\n    /**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n    modifier restricted() {\n        _checkCanCall(_msgSender(), _msgData());\n        _;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function authority() public view virtual returns (address) {\n        return _authority;\n    }\n\n    /// @inheritdoc IAccessManaged\n    function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }\n\n    /// @inheritdoc IAccessManaged\n    function isConsumingScheduledOp() public view returns (bytes4) {\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }\n\n    /**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n    function _setAuthority(address newAuthority) internal virtual {\n        _authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }\n\n    /**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                _consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                _consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/manager/AuthorityUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAuthority} from \"./IAuthority.sol\";\n\nlibrary AuthorityUtils {\n    /**\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\n     */\n    function canCallWithDelay(\n        address authority,\n        address caller,\n        address target,\n        bytes4 selector\n    ) internal view returns (bool immediate, uint32 delay) {\n        (bool success, bytes memory data) = authority.staticcall(\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\n        );\n        if (success) {\n            if (data.length >= 0x40) {\n                (immediate, delay) = abi.decode(data, (bool, uint32));\n            } else if (data.length >= 0x20) {\n                immediate = abi.decode(data, (bool));\n            }\n        }\n        return (immediate, delay);\n    }\n}\n"},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\n\npragma solidity ^0.8.20;\n\ninterface IAccessManaged {\n    /**\n     * @dev Authority that manages this contract was updated.\n     */\n    event AuthorityUpdated(address authority);\n\n    error AccessManagedUnauthorized(address caller);\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\n    error AccessManagedInvalidAuthority(address authority);\n\n    /**\n     * @dev Returns the current authority.\n     */\n    function authority() external view returns (address);\n\n    /**\n     * @dev Transfers control to a new authority. The caller must be the current authority.\n     */\n    function setAuthority(address) external;\n\n    /**\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n     * attacker controlled calls.\n     */\n    function isConsumingScheduledOp() external view returns (bytes4);\n}\n"},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessManaged} from \"./IAccessManaged.sol\";\nimport {Time} from \"../../utils/types/Time.sol\";\n\ninterface IAccessManager {\n    /**\n     * @dev A delayed operation was scheduled.\n     */\n    event OperationScheduled(\n        bytes32 indexed operationId,\n        uint32 indexed nonce,\n        uint48 schedule,\n        address caller,\n        address target,\n        bytes data\n    );\n\n    /**\n     * @dev A scheduled operation was executed.\n     */\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev A scheduled operation was canceled.\n     */\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\n\n    /**\n     * @dev Informational labelling for a roleId.\n     */\n    event RoleLabel(uint64 indexed roleId, string label);\n\n    /**\n     * @dev Emitted when `account` is granted `roleId`.\n     *\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n     * otherwise it indicates the execution delay for this account and roleId is updated.\n     */\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\n\n    /**\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\n     */\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\n\n    /**\n     * @dev Role acting as admin over a given `roleId` is updated.\n     */\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\n\n    /**\n     * @dev Role acting as guardian over a given `roleId` is updated.\n     */\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\n\n    /**\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\n     */\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\n\n    /**\n     * @dev Target mode is updated (true = closed, false = open).\n     */\n    event TargetClosed(address indexed target, bool closed);\n\n    /**\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\n     */\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\n\n    /**\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\n     */\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\n\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\n    error AccessManagerNotScheduled(bytes32 operationId);\n    error AccessManagerNotReady(bytes32 operationId);\n    error AccessManagerExpired(bytes32 operationId);\n    error AccessManagerLockedAccount(address account);\n    error AccessManagerLockedRole(uint64 roleId);\n    error AccessManagerBadConfirmation();\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\n    error AccessManagerUnauthorizedConsume(address target);\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\n\n    /**\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n     * & {execute} workflow.\n     *\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\n     * for future execution.\n     *\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n     * the operation can be executed if and only if delay is greater than 0.\n     *\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n     *\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\n     * {_canCallSelf} function instead.\n     */\n    function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) external view returns (bool allowed, uint32 delay);\n\n    /**\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n     *\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n     * disabling any scheduling usage.\n     */\n    function expiration() external view returns (uint32);\n\n    /**\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\n     * accidental increase). Defaults to 5 days.\n     */\n    function minSetback() external view returns (uint32);\n\n    /**\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\n     */\n    function isTargetClosed(address target) external view returns (bool);\n\n    /**\n     * @dev Get the role required to call a function.\n     */\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\n\n    /**\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\n     */\n    function getTargetAdminDelay(address target) external view returns (uint32);\n\n    /**\n     * @dev Get the id of the role that acts as an admin for the given role.\n     *\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n     * an operation that is restricted to this role.\n     */\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role that acts as a guardian for a given role.\n     *\n     * The guardian permission allows canceling operations that have been scheduled under the role.\n     */\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\n\n    /**\n     * @dev Get the role current grant delay.\n     *\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\n     */\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\n\n    /**\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\n     * level.\n     *\n     * Returns:\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n     * [1] Current execution delay for the account.\n     * [2] Pending execution delay for the account.\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\n     */\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\n\n    /**\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\n     */\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\n\n    /**\n     * @dev Give a label to a role, for improved role discoverability by UIs.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleLabel} event.\n     */\n    function labelRole(uint64 roleId, string calldata label) external;\n\n    /**\n     * @dev Add `account` to `roleId`, or change its execution delay.\n     *\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n     *\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - granted role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleGranted} event.\n     */\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\n\n    /**\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n     * no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin for the role (see {getRoleAdmin})\n     * - revoked role must not be the `PUBLIC_ROLE`\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function revokeRole(uint64 roleId, address account) external;\n\n    /**\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n     * the role this call has no effect.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\n\n    /**\n     * @dev Change admin role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleAdminChanged} event\n     */\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\n\n    /**\n     * @dev Change guardian role for a given role.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGuardianChanged} event\n     */\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\n\n    /**\n     * @dev Update the delay for granting a `roleId`.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\n\n    /**\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\n     */\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\n\n    /**\n     * @dev Set the delay for changing the configuration of a given target contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\n\n    /**\n     * @dev Set the closed flag for a contract.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     *\n     * Emits a {TargetClosed} event.\n     */\n    function setTargetClosed(address target, bool closed) external;\n\n    /**\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\n     */\n    function getSchedule(bytes32 id) external view returns (uint48);\n\n    /**\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n     * been scheduled.\n     */\n    function getNonce(bytes32 id) external view returns (uint32);\n\n    /**\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n     * required for the caller. The special value zero will automatically set the earliest possible time.\n     *\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n     *\n     * Emits a {OperationScheduled} event.\n     *\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n     * contract if it is using standard Solidity ABI encoding.\n     */\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\n\n    /**\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n     * execution delay is 0.\n     *\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n     *\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\n     */\n    function execute(address target, bytes calldata data) external payable returns (uint32);\n\n    /**\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n     * operation that is cancelled.\n     *\n     * Requirements:\n     *\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\n     *\n     * Emits a {OperationCanceled} event.\n     */\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\n\n    /**\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n     *\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n     * with all the verifications that it implies.\n     *\n     * Emit a {OperationExecuted} event.\n     */\n    function consumeScheduledOp(address caller, bytes calldata data) external;\n\n    /**\n     * @dev Hashing function for delayed operations.\n     */\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\n\n    /**\n     * @dev Changes the authority of a target managed by this manager instance.\n     *\n     * Requirements:\n     *\n     * - the caller must be a global admin\n     */\n    function updateAuthority(address target, address newAuthority) external;\n}\n"},"@openzeppelin/contracts/access/manager/IAuthority.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard interface for permissioning originally defined in Dappsys.\n */\ninterface IAuthority {\n    /**\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\n     */\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proofLen != totalHashes + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            if (proofPos != proofLen) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Sorts the pair (a, b) and hashes the result.\n     */\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n *\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\n * unlike the regular `bool` which would consume an entire slot for a single value.\n *\n * This results in gas savings in two ways:\n *\n * - Setting a zero value to non-zero only once every 256 times\n * - Accessing the same warm slot for every 256 _sequential_ indices\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 bucket => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"},"@openzeppelin/contracts/utils/types/Time.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"../math/Math.sol\";\nimport {SafeCast} from \"../math/SafeCast.sol\";\n\n/**\n * @dev This library provides helpers for manipulating time-related objects.\n *\n * It uses the following types:\n * - `uint48` for timepoints\n * - `uint32` for durations\n *\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n * - additional helper functions\n */\nlibrary Time {\n    using Time for *;\n\n    /**\n     * @dev Get the block timestamp as a Timepoint.\n     */\n    function timestamp() internal view returns (uint48) {\n        return SafeCast.toUint48(block.timestamp);\n    }\n\n    /**\n     * @dev Get the block number as a Timepoint.\n     */\n    function blockNumber() internal view returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    // ==================================================== Delay =====================================================\n    /**\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\n     * future. The \"effect\" timepoint describes when the transitions happens from the \"old\" value to the \"new\" value.\n     * This allows updating the delay applied to some operation while keeping some guarantees.\n     *\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\n     * still apply for some time.\n     *\n     *\n     * The `Delay` type is 112 bits long, and packs the following:\n     *\n     * ```\n     *   | [uint48]: effect date (timepoint)\n     *   |           | [uint32]: value before (duration)\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\n     * ```\n     *\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\n     * supported.\n     */\n    type Delay is uint112;\n\n    /**\n     * @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature\n     */\n    function toDelay(uint32 duration) internal pure returns (Delay) {\n        return Delay.wrap(duration);\n    }\n\n    /**\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\n     */\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n     * effect timepoint is 0, then the pending value should not be considered.\n     */\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\n        return _getFullAt(self, timestamp());\n    }\n\n    /**\n     * @dev Get the current value.\n     */\n    function get(Delay self) internal view returns (uint32) {\n        (uint32 delay, , ) = self.getFull();\n        return delay;\n    }\n\n    /**\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n     * new delay becomes effective.\n     */\n    function withUpdate(\n        Delay self,\n        uint32 newValue,\n        uint32 minSetback\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\n        uint32 value = self.get();\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\n        effect = timestamp() + setback;\n        return (pack(value, newValue, effect), effect);\n    }\n\n    /**\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\n     */\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\n        uint112 raw = Delay.unwrap(self);\n\n        valueAfter = uint32(raw);\n        valueBefore = uint32(raw >> 32);\n        effect = uint48(raw >> 64);\n\n        return (valueBefore, valueAfter, effect);\n    }\n\n    /**\n     * @dev pack the components into a Delay object.\n     */\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\n    }\n}\n"},"contracts/management/CXBTokenAirdrop.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\nimport \"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol\";\nimport \"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract CXBTokenAirdrop is AccessManaged, ReentrancyGuard, Pausable {\n    /**\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\n     * @param target Address who calls redeem..\n     */\n    error CXBTokenAirdropAlreadyRedeemed(address target);\n\n    /**\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\n     * @param target Address who calls redeem.\n     * @param amount Amount redeemed.\n     * @param proof The proof provided.\n     */\n    error CXBTokenAirdropWrongPath(\n        address target,\n        uint256 amount,\n        bytes32[] proof\n    );\n\n    /**\n     * @dev Indicates an error when empty token is provided.\n     */\n    error CXBTokenAirdropEmptyToken();\n\n    event Redeem(address indexed account, uint256 amount);\n    event Vesting(address indexed account, uint256 amount);\n\n    bytes32 public root;\n    IERC20 private token;\n    IVesting private vesting;\n    uint256 public redeemAmount;\n    mapping(address => bool) private redeemed;\n\n    constructor(\n        IERC20 _token,\n        IVesting _vesting,\n        address initialAuthority,\n        uint256 _amount,\n        bytes32 _root\n    ) AccessManaged(initialAuthority) {\n        if (address(_token) == address(0)) {\n            revert CXBTokenAirdropEmptyToken();\n        }\n        root = _root;\n        token = _token;\n        vesting = _vesting;\n        redeemAmount = _amount;\n    }\n\n    /// @notice Addresses can redeem their tokens.\n    /// @param proof Proof path.\n    function redeem(bytes32[] memory proof) public nonReentrant whenNotPaused {\n        if (redeemed[msg.sender]) {\n            revert CXBTokenAirdropAlreadyRedeemed(msg.sender);\n        }\n        bytes32 leaf = keccak256(\n            bytes.concat(keccak256(abi.encode(msg.sender, redeemAmount)))\n        );\n        if (!MerkleProof.verify(proof, root, leaf)) {\n            revert CXBTokenAirdropWrongPath(msg.sender, redeemAmount, proof);\n        }\n        redeemed[msg.sender] = true;\n        if (address(vesting) == address(0)) {\n            token.transfer(msg.sender, redeemAmount);\n            emit Redeem(msg.sender, redeemAmount);\n            return;\n        }\n        token.transfer(address(vesting), redeemAmount);\n        vesting.distribute(msg.sender, redeemAmount);\n        emit Vesting(msg.sender, redeemAmount);\n    }\n\n    /// @notice Update merkle root\n    /// @param _root Merkle root of the addresses white list.\n    function updateMerkleRoot(bytes32 _root) public restricted whenPaused{\n        root = _root;\n    }\n\n    /// @notice Update token address\n    /// @param _token New token address.\n    function updateToken(IERC20 _token) public restricted whenPaused{\n        if (address(_token) == address(0)) {\n            revert CXBTokenAirdropEmptyToken();\n        }\n        token = _token;\n    }\n\n    /// @notice Update vesting address\n    /// @param _vesting New vesting address.\n    function updateVesting(IVesting _vesting) public restricted whenPaused{\n        vesting = _vesting;\n    }\n\n    /// @notice Update redeem amount\n    /// @param _amount The redeemed amount.\n    function updateRedeemAmount(uint256 _amount) public restricted whenPaused{\n        redeemAmount = _amount;\n    }\n\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n    /// @param _to The receiving address.\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\n    function cancelAirDrop(address payable _to) public restricted whenPaused {\n        uint256 contractBalance = token.balanceOf(address(this));\n        token.transfer(_to, contractBalance); \n    }\n}\n"},"contracts/mocks/MockChainlink.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ncontract MockChainlink {\n  int256 private value;\n\n  constructor(int256 _value) {\n    value = _value;\n  }\n\n  function latestAnswer() external view returns (int256) {\n    return value;\n  }\n\n  function decimals() external pure returns (uint8) {\n    return 6;\n  }\n}\n"},"contracts/mocks/MockERC20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract MockERC20 is ERC20 {\n  constructor(uint256 premintAmount) ERC20('MockERC20', 'MOCK') {\n    _mint(msg.sender, premintAmount * 10 ** decimals());\n  }\n\n}\n"}},"settings":{"metadata":{"bytecodeHash":"none","useLiteralContent":true},"optimizer":{"enabled":true,"runs":800},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}}}},"output":{"sources":{"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol":{"ast":{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol","exportedSymbols":{"AccessManaged":[732],"Airdrop":[281],"AuthorityUtils":[814],"BitMaps":[5764],"Context":[2094],"IAccessManaged":[854],"IAccessManager":[1292],"IAirdrop":[360],"IAuthority":[1308],"IERC20":[2038],"IVesting":[531],"KPI":[547],"KPITimeStatus":[537],"MerkleProof":[2817]},"id":282,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":2818,"src":"58:68:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/AccessManaged.sol","file":"@openzeppelin/contracts/access/manager/AccessManaged.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":733,"src":"127:66:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/BitMaps.sol","file":"@openzeppelin/contracts/utils/structs/BitMaps.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":5765,"src":"194:59:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":2039,"src":"254:56:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol","file":"./IAirdrop.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":361,"src":"311:24:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol","file":"./IVesting.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":282,"sourceUnit":532,"src":"336:24:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"IAirdrop","nameLocations":["391:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":360,"src":"391:8:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"391:8:0"}],"canonicalName":"Airdrop","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":281,"linearizedBaseContracts":[281,360],"name":"Airdrop","nameLocation":"380:7:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":13,"libraryName":{"id":10,"name":"BitMaps","nameLocations":["412:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":5764,"src":"412:7:0"},"nodeType":"UsingForDirective","src":"406:33:0","typeName":{"id":12,"nodeType":"UserDefinedTypeName","pathNode":{"id":11,"name":"BitMaps.BitMap","nameLocations":["424:7:0","432:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"424:14:0"},"referencedDeclaration":5634,"src":"424:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}}},{"constant":false,"functionSelector":"ebf0c717","id":15,"mutability":"mutable","name":"root","nameLocation":"460:4:0","nodeType":"VariableDeclaration","scope":281,"src":"445:19:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"445:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"3222ae71","id":17,"mutability":"mutable","name":"airdropFinished","nameLocation":"482:15:0","nodeType":"VariableDeclaration","scope":281,"src":"470:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":16,"name":"bool","nodeType":"ElementaryTypeName","src":"470:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"id":20,"mutability":"mutable","name":"token","nameLocation":"518:5:0","nodeType":"VariableDeclaration","scope":281,"src":"503:20:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"},"typeName":{"id":19,"nodeType":"UserDefinedTypeName","pathNode":{"id":18,"name":"IERC20","nameLocations":["503:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"503:6:0"},"referencedDeclaration":2038,"src":"503:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"visibility":"private"},{"constant":false,"id":23,"mutability":"mutable","name":"vesting","nameLocation":"546:7:0","nodeType":"VariableDeclaration","scope":281,"src":"529:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"},"typeName":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"IVesting","nameLocations":["529:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":531,"src":"529:8:0"},"referencedDeclaration":531,"src":"529:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"visibility":"private"},{"constant":false,"id":26,"mutability":"mutable","name":"redeemed","nameLocation":"582:8:0","nodeType":"VariableDeclaration","scope":281,"src":"559:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage","typeString":"struct BitMaps.BitMap"},"typeName":{"id":25,"nodeType":"UserDefinedTypeName","pathNode":{"id":24,"name":"BitMaps.BitMap","nameLocations":["559:7:0","567:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"559:14:0"},"referencedDeclaration":5634,"src":"559:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"private"},{"body":{"id":35,"nodeType":"Block","src":"718:75:0","statements":[{"condition":{"id":29,"name":"airdropFinished","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"732:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":33,"nodeType":"IfStatement","src":"728:47:0","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":30,"name":"AirdropIsFinished","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"756:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"756:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":32,"nodeType":"RevertStatement","src":"749:26:0"}},{"id":34,"nodeType":"PlaceholderStatement","src":"785:1:0"}]},"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"597:93:0","text":" @dev Modifier to make a function callable only while aidrop working"},"id":36,"name":"notFinished","nameLocation":"704:11:0","nodeType":"ModifierDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"715:2:0"},"src":"695:98:0","virtual":false,"visibility":"internal"},{"body":{"id":73,"nodeType":"Block","src":"860:169:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":49,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"882:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}],"id":48,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"874:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":47,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:0","typeDescriptions":{}}},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"874:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"901:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":52,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"893:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":51,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:0","typeDescriptions":{}}},"id":54,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"893:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"874:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":60,"nodeType":"IfStatement","src":"870:79:0","trueBody":{"id":59,"nodeType":"Block","src":"905:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":56,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"926:10:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"RevertStatement","src":"919:19:0"}]}},{"expression":{"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":61,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"958:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":62,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"965:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"958:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":64,"nodeType":"ExpressionStatement","src":"958:12:0"},{"expression":{"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":65,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"980:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":66,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"988:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"src":"980:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":68,"nodeType":"ExpressionStatement","src":"980:14:0"},{"expression":{"id":71,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":69,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"1004:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":70,"name":"_vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1014:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"src":"1004:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":72,"nodeType":"ExpressionStatement","src":"1004:18:0"}]},"id":74,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"_token","nameLocation":"818:6:0","nodeType":"VariableDeclaration","scope":74,"src":"811:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"},"typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"IERC20","nameLocations":["811:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"811:6:0"},"referencedDeclaration":2038,"src":"811:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"_vesting","nameLocation":"835:8:0","nodeType":"VariableDeclaration","scope":74,"src":"826:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"},"typeName":{"id":41,"nodeType":"UserDefinedTypeName","pathNode":{"id":40,"name":"IVesting","nameLocations":["826:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":531,"src":"826:8:0"},"referencedDeclaration":531,"src":"826:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"_root","nameLocation":"853:5:0","nodeType":"VariableDeclaration","scope":74,"src":"845:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43,"name":"bytes32","nodeType":"ElementaryTypeName","src":"845:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"810:49:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"860:0:0"},"scope":281,"src":"799:230:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":198,"nodeType":"Block","src":"1257:832:0","statements":[{"assignments":[88],"declarations":[{"constant":false,"id":88,"mutability":"mutable","name":"redeemPos","nameLocation":"1275:9:0","nodeType":"VariableDeclaration","scope":198,"src":"1267:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":87,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":96,"initialValue":{"arguments":[{"arguments":[{"id":93,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1303:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1295:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":91,"name":"uint160","nodeType":"ElementaryTypeName","src":"1295:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1295:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":90,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1287:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"1287:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1287:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1267:44:0"},{"condition":{"arguments":[{"id":99,"name":"redeemPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1338:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":97,"name":"redeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1325:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage","typeString":"struct BitMaps.BitMap storage ref"}},"id":98,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1334:3:0","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":5670,"src":"1325:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_BitMap_$5634_storage_ptr_$_t_uint256_$returns$_t_bool_$attached_to$_t_struct$_BitMap_$5634_storage_ptr_$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256) view returns (bool)"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1325:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":106,"nodeType":"IfStatement","src":"1321:84:0","trueBody":{"id":105,"nodeType":"Block","src":"1350:55:0","statements":[{"errorCall":{"arguments":[{"id":102,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1387:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"AlreadyRedeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"1371:15:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1371:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":104,"nodeType":"RevertStatement","src":"1364:30:0"}]}},{"assignments":[108],"declarations":[{"constant":false,"id":108,"mutability":"mutable","name":"leaf","nameLocation":"1422:4:0","nodeType":"VariableDeclaration","scope":198,"src":"1414:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":122,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":116,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1486:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":117,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1494:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":114,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1475:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1479:6:0","memberName":"encode","nodeType":"MemberAccess","src":"1475:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1475:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":113,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1465:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1465:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1452:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":110,"name":"bytes","nodeType":"ElementaryTypeName","src":"1452:5:0","typeDescriptions":{}}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1458:6:0","memberName":"concat","nodeType":"MemberAccess","src":"1452:12:0","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1452:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":109,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1429:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:90:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1414:105:0"},{"condition":{"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1533:38:0","subExpression":{"arguments":[{"id":125,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1553:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":126,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"1560:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":127,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1566:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":123,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"1534:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2817_$","typeString":"type(library MerkleProof)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1546:6:0","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2307,"src":"1534:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1534:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":137,"nodeType":"IfStatement","src":"1529:114:0","trueBody":{"id":136,"nodeType":"Block","src":"1573:70:0","statements":[{"errorCall":{"arguments":[{"id":131,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1604:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":132,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1612:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":133,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1626:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":130,"name":"WrongPath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"1594:9:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32[] memory) pure"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":135,"nodeType":"RevertStatement","src":"1587:45:0"}]}},{"expression":{"arguments":[{"id":141,"name":"redeemPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1665:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":138,"name":"redeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1652:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage","typeString":"struct BitMaps.BitMap storage ref"}},"id":140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1661:3:0","memberName":"set","nodeType":"MemberAccess","referencedDeclaration":5729,"src":"1652:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$5634_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_BitMap_$5634_storage_ptr_$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1652:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"1652:23:0"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":146,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"1697:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1689:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"1689:7:0","typeDescriptions":{}}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1689:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1717:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1709:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":148,"name":"address","nodeType":"ElementaryTypeName","src":"1709:7:0","typeDescriptions":{}}},"id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1709:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1689:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":171,"nodeType":"IfStatement","src":"1685:206:0","trueBody":{"id":170,"nodeType":"Block","src":"1721:170:0","statements":[{"condition":{"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1739:37:0","subExpression":{"arguments":[{"id":155,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1755:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":156,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1763:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":153,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"1740:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1746:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"1740:14:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":163,"nodeType":"IfStatement","src":"1735:78:0","trueBody":{"errorCall":{"arguments":[{"id":160,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1800:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":159,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1785:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":162,"nodeType":"RevertStatement","src":"1778:35:0"}},{"eventCall":{"arguments":[{"id":165,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1839:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":166,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1847:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":164,"name":"Redeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"1832:6:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1832:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"EmitStatement","src":"1827:33:0"},{"functionReturnParameters":86,"id":169,"nodeType":"Return","src":"1874:7:0"}]}},{"condition":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1904:47:0","subExpression":{"arguments":[{"arguments":[{"id":176,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"1928:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1920:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":174,"name":"address","nodeType":"ElementaryTypeName","src":"1920:7:0","typeDescriptions":{}}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1920:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":178,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1938:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":172,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"1905:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1911:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"1905:14:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1905:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":185,"nodeType":"IfStatement","src":"1900:88:0","trueBody":{"errorCall":{"arguments":[{"id":182,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1975:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":181,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"1960:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1960:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"RevertStatement","src":"1953:35:0"}},{"expression":{"arguments":[{"id":189,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2017:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":190,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2025:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":186,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"1998:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2006:10:0","memberName":"distribute","nodeType":"MemberAccess","referencedDeclaration":465,"src":"1998:18:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1998:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":192,"nodeType":"ExpressionStatement","src":"1998:40:0"},{"eventCall":{"arguments":[{"id":194,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2061:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":195,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2069:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":193,"name":"Vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"2053:7:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2053:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":197,"nodeType":"EmitStatement","src":"2048:34:0"}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"1035:79:0","text":"@notice Addresses can redeem their tokens.\n @param proof Proof path."},"id":199,"implemented":true,"kind":"function","modifiers":[{"id":85,"kind":"modifierInvocation","modifierName":{"id":84,"name":"notFinished","nameLocations":["1245:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":36,"src":"1245:11:0"},"nodeType":"ModifierInvocation","src":"1245:11:0"}],"name":"_redeem","nameLocation":"1128:7:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"target","nameLocation":"1153:6:0","nodeType":"VariableDeclaration","scope":199,"src":"1145:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":76,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"proof","nameLocation":"1186:5:0","nodeType":"VariableDeclaration","scope":199,"src":"1169:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":78,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1169:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":79,"nodeType":"ArrayTypeName","src":"1169:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"redeemAmount","nameLocation":"1209:12:0","nodeType":"VariableDeclaration","scope":199,"src":"1201:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"1201:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1135:92:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"1257:0:0"},"scope":281,"src":"1119:970:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":209,"nodeType":"Block","src":"2251:29:0","statements":[{"expression":{"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":205,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"2261:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":206,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2268:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2261:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":208,"nodeType":"ExpressionStatement","src":"2261:12:0"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"2095:92:0","text":"@notice Update merkle root\n @param _root Merkle root of the addresses white list."},"id":210,"implemented":true,"kind":"function","modifiers":[],"name":"_updateMerkleRoot","nameLocation":"2201:17:0","nodeType":"FunctionDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"_root","nameLocation":"2227:5:0","nodeType":"VariableDeclaration","scope":210,"src":"2219:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2219:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2218:15:0"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[],"src":"2251:0:0"},"scope":281,"src":"2192:88:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":236,"nodeType":"Block","src":"2419:127:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":218,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"2441:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2433:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"2433:7:0","typeDescriptions":{}}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2433:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2460:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2452:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":220,"name":"address","nodeType":"ElementaryTypeName","src":"2452:7:0","typeDescriptions":{}}},"id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2452:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2433:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"IfStatement","src":"2429:79:0","trueBody":{"id":228,"nodeType":"Block","src":"2464:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":225,"name":"EmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"2485:10:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2485:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"RevertStatement","src":"2478:19:0"}]}},{"expression":{"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":230,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"2517:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":232,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"2532:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":231,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2038_$","typeString":"type(contract IERC20)"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2525:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"src":"2517:22:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":235,"nodeType":"ExpressionStatement","src":"2517:22:0"}]},"documentation":{"id":211,"nodeType":"StructuredDocumentation","src":"2286:73:0","text":"@notice Update token address\n @param _token New token address."},"id":237,"implemented":true,"kind":"function","modifiers":[],"name":"_updateToken","nameLocation":"2373:12:0","nodeType":"FunctionDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":213,"mutability":"mutable","name":"_token","nameLocation":"2394:6:0","nodeType":"VariableDeclaration","scope":237,"src":"2386:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"2386:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2385:16:0"},"returnParameters":{"id":215,"nodeType":"ParameterList","parameters":[],"src":"2419:0:0"},"scope":281,"src":"2364:182:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2695:45:0","statements":[{"expression":{"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":243,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"2705:7:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":245,"name":"_vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"2724:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":244,"name":"IVesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2715:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVesting_$531_$","typeString":"type(contract IVesting)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2715:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"src":"2705:28:0","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":248,"nodeType":"ExpressionStatement","src":"2705:28:0"}]},"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"2552:79:0","text":"@notice Update vesting address\n @param _vesting New vesting address."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"_updateVesting","nameLocation":"2645:14:0","nodeType":"FunctionDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"_vesting","nameLocation":"2668:8:0","nodeType":"VariableDeclaration","scope":250,"src":"2660:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"2660:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2659:18:0"},"returnParameters":{"id":242,"nodeType":"ParameterList","parameters":[],"src":"2695:0:0"},"scope":281,"src":"2636:104:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":279,"nodeType":"Block","src":"3044:183:0","statements":[{"assignments":[257],"declarations":[{"constant":false,"id":257,"mutability":"mutable","name":"contractBalance","nameLocation":"3062:15:0","nodeType":"VariableDeclaration","scope":279,"src":"3054:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3054:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":265,"initialValue":{"arguments":[{"arguments":[{"id":262,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3104:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Airdrop_$281","typeString":"contract Airdrop"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Airdrop_$281","typeString":"contract Airdrop"}],"id":261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3096:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"3096:7:0","typeDescriptions":{}}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":258,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"3080:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3086:9:0","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1995,"src":"3080:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3054:56:0"},{"condition":{"arguments":[{"id":268,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3139:3:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":269,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"3144:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":266,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"3124:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3130:8:0","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"3124:14:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3124:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":274,"nodeType":"IfStatement","src":"3120:68:0","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":271,"name":"CannotReturnFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"3169:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3169:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":273,"nodeType":"RevertStatement","src":"3162:26:0"}},{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":275,"name":"airdropFinished","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"3198:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3216:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3198:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"ExpressionStatement","src":"3198:22:0"}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2746:231:0","text":"@notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n @param _to The receiving address.\n @dev Only manager can perform this transaction. It selfdestructs the contract."},"id":280,"implemented":true,"kind":"function","modifiers":[],"name":"_cancelAirDrop","nameLocation":"2991:14:0","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":253,"mutability":"mutable","name":"_to","nameLocation":"3022:3:0","nodeType":"VariableDeclaration","scope":280,"src":"3006:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"3006:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3005:21:0"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"3044:0:0"},"scope":281,"src":"2982:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":282,"src":"362:2867:0","usedErrors":[289,299,302,305,310,312],"usedEvents":[318,324]}],"src":"32:3198:0"},"id":0},"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol":{"ast":{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol","exportedSymbols":{"IAirdrop":[360]},"id":361,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":283,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAirdrop","contractDependencies":[],"contractKind":"interface","documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"58:217:1","text":" Defines the contract for the airdrop with the optional attach to the vesting\n If the vesting contract address is set, tokens will be transferred to the vesting contract,\n othervise to the airdrop target"},"fullyImplemented":false,"id":360,"linearizedBaseContracts":[360],"name":"IAirdrop","nameLocation":"287:8:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"302:146:1","text":" @dev Indicates an error related to the already redeemed amount. Used in redeem.\n @param target Address who calls redeem.."},"errorSelector":"b381746f","id":289,"name":"AlreadyRedeemed","nameLocation":"459:15:1","nodeType":"ErrorDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"target","nameLocation":"483:6:1","nodeType":"VariableDeclaration","scope":289,"src":"475:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:1"},"src":"453:38:1"},{"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"497:221:1","text":" @dev Indicates an error related to the wrong tree validation. Used in redeem.\n @param target Address who calls redeem.\n @param amount Amount redeemed.\n @param proof The proof provided."},"errorSelector":"eb5fe2e5","id":299,"name":"WrongPath","nameLocation":"729:9:1","nodeType":"ErrorDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"target","nameLocation":"747:6:1","nodeType":"VariableDeclaration","scope":299,"src":"739:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":294,"mutability":"mutable","name":"amount","nameLocation":"763:6:1","nodeType":"VariableDeclaration","scope":299,"src":"755:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"755:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"proof","nameLocation":"781:5:1","nodeType":"VariableDeclaration","scope":299,"src":"771:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"771:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":296,"nodeType":"ArrayTypeName","src":"771:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"738:49:1"},"src":"723:65:1"},{"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"794:76:1","text":" @dev Indicates an error related to the end of the airdrop"},"errorSelector":"17028f9d","id":302,"name":"AirdropIsFinished","nameLocation":"881:17:1","nodeType":"ErrorDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[],"src":"898:2:1"},"src":"875:26:1"},{"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"907:72:1","text":" @dev Indicates an error when empty token is provided."},"errorSelector":"066f53b1","id":305,"name":"EmptyToken","nameLocation":"990:10:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[],"src":"1000:2:1"},"src":"984:19:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"1009:89:1","text":" @dev Indicates an error when no tokens are distributed to the airdrop."},"errorSelector":"8228b9cb","id":310,"name":"NotEnoughFunds","nameLocation":"1109:14:1","nodeType":"ErrorDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"redeemAmount","nameLocation":"1132:12:1","nodeType":"VariableDeclaration","scope":310,"src":"1124:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1124:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1123:22:1"},"src":"1103:43:1"},{"errorSelector":"e4dcf8c6","id":312,"name":"CannotReturnFunds","nameLocation":"1158:17:1","nodeType":"ErrorDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[],"src":"1175:2:1"},"src":"1152:26:1"},{"anonymous":false,"eventSelector":"222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6","id":318,"name":"Redeem","nameLocation":"1190:6:1","nodeType":"EventDefinition","parameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1213:7:1","nodeType":"VariableDeclaration","scope":318,"src":"1197:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":316,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1230:6:1","nodeType":"VariableDeclaration","scope":318,"src":"1222:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"1222:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1196:41:1"},"src":"1184:54:1"},{"anonymous":false,"eventSelector":"d8c062e1121a4d8261df9c04930989855139a33297e0f1598cf7779aa5695b81","id":324,"name":"Vesting","nameLocation":"1249:7:1","nodeType":"EventDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1273:7:1","nodeType":"VariableDeclaration","scope":324,"src":"1257:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":319,"name":"address","nodeType":"ElementaryTypeName","src":"1257:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":322,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1290:6:1","nodeType":"VariableDeclaration","scope":324,"src":"1282:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":321,"name":"uint256","nodeType":"ElementaryTypeName","src":"1282:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1256:41:1"},"src":"1243:55:1"},{"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"1304:79:1","text":"@notice Addresses can redeem their tokens.\n @param proof Proof path."},"functionSelector":"b714d80a","id":335,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"1397:6:1","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"target","nameLocation":"1421:6:1","nodeType":"VariableDeclaration","scope":335,"src":"1413:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"1413:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"proof","nameLocation":"1454:5:1","nodeType":"VariableDeclaration","scope":335,"src":"1437:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1437:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":329,"nodeType":"ArrayTypeName","src":"1437:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":332,"mutability":"mutable","name":"redeemAmount","nameLocation":"1477:12:1","nodeType":"VariableDeclaration","scope":335,"src":"1469:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"1469:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1403:92:1"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"1504:0:1"},"scope":360,"src":"1388:117:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"1511:92:1","text":"@notice Update merkle root\n @param _root Merkle root of the addresses white list."},"functionSelector":"4783f0ef","id":341,"implemented":false,"kind":"function","modifiers":[],"name":"updateMerkleRoot","nameLocation":"1617:16:1","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"_root","nameLocation":"1642:5:1","nodeType":"VariableDeclaration","scope":341,"src":"1634:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1634:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1633:15:1"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"1657:0:1"},"scope":360,"src":"1608:50:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"1664:73:1","text":"@notice Update token address\n @param _token New token address."},"functionSelector":"7ad3def2","id":347,"implemented":false,"kind":"function","modifiers":[],"name":"updateToken","nameLocation":"1751:11:1","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"_token","nameLocation":"1771:6:1","nodeType":"VariableDeclaration","scope":347,"src":"1763:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"1763:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1762:16:1"},"returnParameters":{"id":346,"nodeType":"ParameterList","parameters":[],"src":"1787:0:1"},"scope":360,"src":"1742:46:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"1794:79:1","text":"@notice Update vesting address\n @param _vesting New vesting address."},"functionSelector":"e4214471","id":353,"implemented":false,"kind":"function","modifiers":[],"name":"updateVesting","nameLocation":"1887:13:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"_vesting","nameLocation":"1909:8:1","nodeType":"VariableDeclaration","scope":353,"src":"1901:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1901:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1900:18:1"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[],"src":"1927:0:1"},"scope":360,"src":"1878:50:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"1934:231:1","text":"@notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n @param _to The receiving address.\n @dev Only manager can perform this transaction. It selfdestructs the contract."},"functionSelector":"635a0bee","id":359,"implemented":false,"kind":"function","modifiers":[],"name":"cancelAirDrop","nameLocation":"2179:13:1","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"_to","nameLocation":"2209:3:1","nodeType":"VariableDeclaration","scope":359,"src":"2193:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"2193:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2192:21:1"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"2222:0:1"},"scope":360,"src":"2170:53:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":361,"src":"277:1948:1","usedErrors":[289,299,302,305,310,312],"usedEvents":[318,324]}],"src":"32:2194:1"},"id":1},"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol":{"ast":{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol","exportedSymbols":{"IVesting":[531],"KPI":[547],"KPITimeStatus":[537]},"id":532,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":362,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol","file":"../structures/KPI.sol","id":363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":532,"sourceUnit":548,"src":"58:31:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IVesting","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":531,"linearizedBaseContracts":[531],"name":"IVesting","nameLocation":"102:8:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"118:72:2","text":" @dev Indicates an error when empty token is provided."},"errorSelector":"57708202","id":366,"name":"VestingEmptyToken","nameLocation":"201:17:2","nodeType":"ErrorDefinition","parameters":{"id":365,"nodeType":"ParameterList","parameters":[],"src":"218:2:2"},"src":"195:26:2"},{"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"227:74:2","text":" @dev Indicates an error when empty airdrop is provided."},"errorSelector":"e0cb7ff5","id":369,"name":"VestingEmptyAirdrop","nameLocation":"312:19:2","nodeType":"ErrorDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"331:2:2"},"src":"306:28:2"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"339:134:2","text":" @dev Indicates an error when unathorized person calls airdrop only function\n @param account Address who calls"},"errorSelector":"94631c29","id":374,"name":"VestingUnauthorizedAccount","nameLocation":"484:26:2","nodeType":"ErrorDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"account","nameLocation":"519:7:2","nodeType":"VariableDeclaration","scope":374,"src":"511:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":371,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"510:17:2"},"src":"478:50:2"},{"documentation":{"id":375,"nodeType":"StructuredDocumentation","src":"533:74:2","text":" @dev Indicates an error when no tokens can be redeemed."},"errorSelector":"b3ba2104","id":377,"name":"VestingEmptyRedeem","nameLocation":"618:18:2","nodeType":"ErrorDefinition","parameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"636:2:2"},"src":"612:27:2"},{"documentation":{"id":378,"nodeType":"StructuredDocumentation","src":"644:90:2","text":" @dev Indicates an error when kpi redefines.\n @param code KPI code"},"errorSelector":"978493a8","id":382,"name":"VestingKPIAlreadyDefined","nameLocation":"745:24:2","nodeType":"ErrorDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"code","nameLocation":"778:4:2","nodeType":"VariableDeclaration","scope":382,"src":"770:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"769:14:2"},"src":"739:45:2"},{"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"790:95:2","text":" @dev Indicates an error when kpi is not defined.\n @param code KPI code"},"errorSelector":"4fad6d57","id":387,"name":"VestingKPINotDefined","nameLocation":"896:20:2","nodeType":"ErrorDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"code","nameLocation":"925:4:2","nodeType":"VariableDeclaration","scope":387,"src":"917:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"917:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"916:14:2"},"src":"890:41:2"},{"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"936:143:2","text":" @dev Indicates an error when kpi amount value is incorrect.\n @param code KPI code\n @param amount amount provided"},"errorSelector":"baf38316","id":394,"name":"VestingIncorrectAmount","nameLocation":"1090:22:2","nodeType":"ErrorDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"code","nameLocation":"1121:4:2","nodeType":"VariableDeclaration","scope":394,"src":"1113:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":389,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"amount","nameLocation":"1134:6:2","nodeType":"VariableDeclaration","scope":394,"src":"1127:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":391,"name":"uint16","nodeType":"ElementaryTypeName","src":"1127:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1112:29:2"},"src":"1084:58:2"},{"documentation":{"id":395,"nodeType":"StructuredDocumentation","src":"1147:143:2","text":" @dev Indicates an error when kpi weight value is incorrect.\n @param code KPI code\n @param amount weight provided"},"errorSelector":"3834284f","id":401,"name":"VestingIncorrectWeight","nameLocation":"1301:22:2","nodeType":"ErrorDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"code","nameLocation":"1332:4:2","nodeType":"VariableDeclaration","scope":401,"src":"1324:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1324:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":399,"mutability":"mutable","name":"amount","nameLocation":"1345:6:2","nodeType":"VariableDeclaration","scope":401,"src":"1338:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":398,"name":"uint16","nodeType":"ElementaryTypeName","src":"1338:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1323:29:2"},"src":"1295:58:2"},{"anonymous":false,"eventSelector":"222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6","id":407,"name":"Redeem","nameLocation":"1364:6:2","nodeType":"EventDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1387:7:2","nodeType":"VariableDeclaration","scope":407,"src":"1371:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":402,"name":"address","nodeType":"ElementaryTypeName","src":"1371:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":405,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1404:6:2","nodeType":"VariableDeclaration","scope":407,"src":"1396:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"1396:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1370:41:2"},"src":"1358:54:2"},{"anonymous":false,"eventSelector":"c1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df","id":413,"name":"Distribute","nameLocation":"1423:10:2","nodeType":"EventDefinition","parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1450:7:2","nodeType":"VariableDeclaration","scope":413,"src":"1434:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"1434:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":411,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1467:6:2","nodeType":"VariableDeclaration","scope":413,"src":"1459:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1459:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1433:41:2"},"src":"1417:58:2"},{"anonymous":false,"eventSelector":"88a1f4e4f05480d6c02b094c7a6ca408cb709bb404912789ecfa294df6ab74dd","id":424,"name":"KPIAdded","nameLocation":"1486:8:2","nodeType":"EventDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"indexed":true,"mutability":"mutable","name":"code","nameLocation":"1520:4:2","nodeType":"VariableDeclaration","scope":424,"src":"1504:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":414,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1504:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":417,"indexed":true,"mutability":"mutable","name":"time","nameLocation":"1550:4:2","nodeType":"VariableDeclaration","scope":424,"src":"1534:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":420,"indexed":true,"mutability":"mutable","name":"timeStatus","nameLocation":"1586:10:2","nodeType":"VariableDeclaration","scope":424,"src":"1564:32:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"},"typeName":{"id":419,"nodeType":"UserDefinedTypeName","pathNode":{"id":418,"name":"KPITimeStatus","nameLocations":["1564:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":537,"src":"1564:13:2"},"referencedDeclaration":537,"src":"1564:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"}},"visibility":"internal"},{"constant":false,"id":422,"indexed":false,"mutability":"mutable","name":"weight","nameLocation":"1613:6:2","nodeType":"VariableDeclaration","scope":424,"src":"1606:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":421,"name":"uint16","nodeType":"ElementaryTypeName","src":"1606:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1494:131:2"},"src":"1480:146:2"},{"anonymous":false,"eventSelector":"166e93bf2d7b473996e13920a1b918f4d784824af5c39cbe5febf29b04d4ed19","id":435,"name":"KPIModified","nameLocation":"1637:11:2","nodeType":"EventDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"indexed":true,"mutability":"mutable","name":"code","nameLocation":"1674:4:2","nodeType":"VariableDeclaration","scope":435,"src":"1658:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1658:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":428,"indexed":true,"mutability":"mutable","name":"time","nameLocation":"1704:4:2","nodeType":"VariableDeclaration","scope":435,"src":"1688:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1688:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":431,"indexed":true,"mutability":"mutable","name":"timeStatus","nameLocation":"1740:10:2","nodeType":"VariableDeclaration","scope":435,"src":"1718:32:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"},"typeName":{"id":430,"nodeType":"UserDefinedTypeName","pathNode":{"id":429,"name":"KPITimeStatus","nameLocations":["1718:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":537,"src":"1718:13:2"},"referencedDeclaration":537,"src":"1718:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"}},"visibility":"internal"},{"constant":false,"id":433,"indexed":false,"mutability":"mutable","name":"weight","nameLocation":"1767:6:2","nodeType":"VariableDeclaration","scope":435,"src":"1760:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":432,"name":"uint16","nodeType":"ElementaryTypeName","src":"1760:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1648:131:2"},"src":"1631:149:2"},{"anonymous":false,"eventSelector":"a2b58ca2f91f3e805bf429ca1443b0e3ff24cc1a6e8caf970daf7425ab599330","id":441,"name":"KPIUpdated","nameLocation":"1791:10:2","nodeType":"EventDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"indexed":true,"mutability":"mutable","name":"code","nameLocation":"1818:4:2","nodeType":"VariableDeclaration","scope":441,"src":"1802:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1802:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":439,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1831:6:2","nodeType":"VariableDeclaration","scope":441,"src":"1824:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":438,"name":"uint16","nodeType":"ElementaryTypeName","src":"1824:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1801:37:2"},"src":"1785:54:2"},{"anonymous":false,"eventSelector":"20c83b576bdf59e63a6c446459ff1f29074382dde0ddb78fd48dc4465dbaaf56","id":445,"name":"KPIRemoved","nameLocation":"1851:10:2","nodeType":"EventDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"indexed":true,"mutability":"mutable","name":"code","nameLocation":"1878:4:2","nodeType":"VariableDeclaration","scope":445,"src":"1862:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1862:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1861:22:2"},"src":"1845:39:2"},{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"1890:73:2","text":"@notice Update token address\n @param _token New token address."},"functionSelector":"7ad3def2","id":451,"implemented":false,"kind":"function","modifiers":[],"name":"updateToken","nameLocation":"1977:11:2","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"_token","nameLocation":"1997:6:2","nodeType":"VariableDeclaration","scope":451,"src":"1989:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"1989:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1988:16:2"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"2013:0:2"},"scope":531,"src":"1968:46:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"2020:75:2","text":"@notice Update token address\n @param _airdrop New token address."},"functionSelector":"c489a649","id":457,"implemented":false,"kind":"function","modifiers":[],"name":"updateAirdrop","nameLocation":"2109:13:2","nodeType":"FunctionDefinition","parameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"_airdrop","nameLocation":"2131:8:2","nodeType":"VariableDeclaration","scope":457,"src":"2123:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:18:2"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"2149:0:2"},"scope":531,"src":"2100:50:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"2156:125:2","text":"@notice Distribute the new vesting amount\n @param _to Receiver address.\n @param _amount Distributed amount."},"functionSelector":"fb932108","id":465,"implemented":false,"kind":"function","modifiers":[],"name":"distribute","nameLocation":"2295:10:2","nodeType":"FunctionDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"_to","nameLocation":"2314:3:2","nodeType":"VariableDeclaration","scope":465,"src":"2306:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"2306:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"_amount","nameLocation":"2327:7:2","nodeType":"VariableDeclaration","scope":465,"src":"2319:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2305:30:2"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[],"src":"2344:0:2"},"scope":531,"src":"2286:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":466,"nodeType":"StructuredDocumentation","src":"2351:44:2","text":"@notice Take the current unlocked amount"},"functionSelector":"95a2251f","id":473,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"2409:6:2","nodeType":"FunctionDefinition","parameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"_to","nameLocation":"2424:3:2","nodeType":"VariableDeclaration","scope":473,"src":"2416:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"2416:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2415:13:2"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":473,"src":"2447:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"2447:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2446:9:2"},"scope":531,"src":"2400:56:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"2462:209:2","text":"@notice Set the new KPI\n @param _code The KPI id code\n @param _time timestamp\n @param _timeStatus status of the time\n @param _weight weight of the KPI parameter in the total KPI"},"functionSelector":"8b37d91e","id":486,"implemented":false,"kind":"function","modifiers":[],"name":"addKPI","nameLocation":"2685:6:2","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"_code","nameLocation":"2709:5:2","nodeType":"VariableDeclaration","scope":486,"src":"2701:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2701:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"_time","nameLocation":"2732:5:2","nodeType":"VariableDeclaration","scope":486,"src":"2724:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"2724:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"_timeStatus","nameLocation":"2761:11:2","nodeType":"VariableDeclaration","scope":486,"src":"2747:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"},"typeName":{"id":480,"nodeType":"UserDefinedTypeName","pathNode":{"id":479,"name":"KPITimeStatus","nameLocations":["2747:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":537,"src":"2747:13:2"},"referencedDeclaration":537,"src":"2747:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"_weight","nameLocation":"2789:7:2","nodeType":"VariableDeclaration","scope":486,"src":"2782:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":482,"name":"uint16","nodeType":"ElementaryTypeName","src":"2782:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"2691:111:2"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[],"src":"2811:0:2"},"scope":531,"src":"2676:136:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"2818:219:2","text":"@notice Modify the KPI properties\n @param _code The KPI id code\n @param _time timestamp\n @param _timeStatus status of the time\n @param _weight weight of the KPI parameter in the total KPI"},"functionSelector":"9150dbe3","id":499,"implemented":false,"kind":"function","modifiers":[],"name":"modifyKPI","nameLocation":"3051:9:2","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"_code","nameLocation":"3078:5:2","nodeType":"VariableDeclaration","scope":499,"src":"3070:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3070:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"_time","nameLocation":"3101:5:2","nodeType":"VariableDeclaration","scope":499,"src":"3093:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint256","nodeType":"ElementaryTypeName","src":"3093:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"_timeStatus","nameLocation":"3130:11:2","nodeType":"VariableDeclaration","scope":499,"src":"3116:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"},"typeName":{"id":493,"nodeType":"UserDefinedTypeName","pathNode":{"id":492,"name":"KPITimeStatus","nameLocations":["3116:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":537,"src":"3116:13:2"},"referencedDeclaration":537,"src":"3116:13:2","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"}},"visibility":"internal"},{"constant":false,"id":496,"mutability":"mutable","name":"_weight","nameLocation":"3158:7:2","nodeType":"VariableDeclaration","scope":499,"src":"3151:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":495,"name":"uint16","nodeType":"ElementaryTypeName","src":"3151:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3060:111:2"},"returnParameters":{"id":498,"nodeType":"ParameterList","parameters":[],"src":"3180:0:2"},"scope":531,"src":"3042:139:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":500,"nodeType":"StructuredDocumentation","src":"3187:118:2","text":"@notice Update the  KPI value\n @param _code The KPI id code\n @param _amount the current value of KPI"},"functionSelector":"b642b505","id":507,"implemented":false,"kind":"function","modifiers":[],"name":"updateKPI","nameLocation":"3319:9:2","nodeType":"FunctionDefinition","parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"_code","nameLocation":"3337:5:2","nodeType":"VariableDeclaration","scope":507,"src":"3329:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3329:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":504,"mutability":"mutable","name":"_amount","nameLocation":"3351:7:2","nodeType":"VariableDeclaration","scope":507,"src":"3344:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":503,"name":"uint16","nodeType":"ElementaryTypeName","src":"3344:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3328:31:2"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"3368:0:2"},"scope":531,"src":"3310:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"3375:118:2","text":"@notice Increase the  KPI value\n @param _code The KPI id code\n @param _amount the added value of KPI"},"functionSelector":"82112324","id":515,"implemented":false,"kind":"function","modifiers":[],"name":"increaseKPI","nameLocation":"3507:11:2","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"_code","nameLocation":"3527:5:2","nodeType":"VariableDeclaration","scope":515,"src":"3519:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3519:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"_amount","nameLocation":"3541:7:2","nodeType":"VariableDeclaration","scope":515,"src":"3534:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":511,"name":"uint16","nodeType":"ElementaryTypeName","src":"3534:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3518:31:2"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"3558:0:2"},"scope":531,"src":"3498:61:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"3565:77:2","text":"@notice Remove the KPI from the list\n @param _code The KPI id code"},"functionSelector":"022c4522","id":521,"implemented":false,"kind":"function","modifiers":[],"name":"removeKPI","nameLocation":"3656:9:2","nodeType":"FunctionDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"_code","nameLocation":"3674:5:2","nodeType":"VariableDeclaration","scope":521,"src":"3666:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3666:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3665:15:2"},"returnParameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"3689:0:2"},"scope":531,"src":"3647:43:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"3696:74:2","text":"@notice Get the KPI from the list\n @param _code The KPI id code"},"functionSelector":"5ef7efbd","id":530,"implemented":false,"kind":"function","modifiers":[],"name":"getKPI","nameLocation":"3784:6:2","nodeType":"FunctionDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"_code","nameLocation":"3799:5:2","nodeType":"VariableDeclaration","scope":530,"src":"3791:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3791:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3790:15:2"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":530,"src":"3829:10:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_KPI_$547_memory_ptr","typeString":"struct KPI"},"typeName":{"id":527,"nodeType":"UserDefinedTypeName","pathNode":{"id":526,"name":"KPI","nameLocations":["3829:3:2"],"nodeType":"IdentifierPath","referencedDeclaration":547,"src":"3829:3:2"},"referencedDeclaration":547,"src":"3829:3:2","typeDescriptions":{"typeIdentifier":"t_struct$_KPI_$547_storage_ptr","typeString":"struct KPI"}},"visibility":"internal"}],"src":"3828:12:2"},"scope":531,"src":"3775:66:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":532,"src":"92:3751:2","usedErrors":[366,369,374,377,382,387,394,401],"usedEvents":[407,413,424,435,441,445]}],"src":"32:3812:2"},"id":2},"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol":{"ast":{"absolutePath":"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol","exportedSymbols":{"KPI":[547],"KPITimeStatus":[537]},"id":548,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":533,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:3"},{"canonicalName":"KPITimeStatus","id":537,"members":[{"id":534,"name":"Ignore","nameLocation":"111:6:3","nodeType":"EnumValue","src":"111:6:3"},{"id":535,"name":"NotBefore","nameLocation":"169:9:3","nodeType":"EnumValue","src":"169:9:3"},{"id":536,"name":"AlwaysAfter","nameLocation":"234:11:3","nodeType":"EnumValue","src":"234:11:3"}],"name":"KPITimeStatus","nameLocation":"63:13:3","nodeType":"EnumDefinition","src":"58:189:3"},{"canonicalName":"KPI","id":547,"members":[{"constant":false,"id":539,"mutability":"mutable","name":"time","nameLocation":"489:4:3","nodeType":"VariableDeclaration","scope":547,"src":"481:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"481:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":542,"mutability":"mutable","name":"timeStatus","nameLocation":"561:10:3","nodeType":"VariableDeclaration","scope":547,"src":"547:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"},"typeName":{"id":541,"nodeType":"UserDefinedTypeName","pathNode":{"id":540,"name":"KPITimeStatus","nameLocations":["547:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":537,"src":"547:13:3"},"referencedDeclaration":537,"src":"547:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_KPITimeStatus_$537","typeString":"enum KPITimeStatus"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"current","nameLocation":"609:7:3","nodeType":"VariableDeclaration","scope":547,"src":"602:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":543,"name":"uint16","nodeType":"ElementaryTypeName","src":"602:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"weight","nameLocation":"660:6:3","nodeType":"VariableDeclaration","scope":547,"src":"653:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":545,"name":"uint16","nodeType":"ElementaryTypeName","src":"653:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"name":"KPI","nameLocation":"430:3:3","nodeType":"StructDefinition","scope":548,"src":"423:246:3","visibility":"public"}],"src":"32:638:3"},"id":3},"@openzeppelin/contracts/access/manager/AccessManaged.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/AccessManaged.sol","exportedSymbols":{"AccessManaged":[732],"AuthorityUtils":[814],"Context":[2094],"IAccessManaged":[854],"IAccessManager":[1292],"IAuthority":[1308]},"id":733,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":549,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:4"},{"absolutePath":"@openzeppelin/contracts/access/manager/IAuthority.sol","file":"./IAuthority.sol","id":551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":1309,"src":"142:44:4","symbolAliases":[{"foreign":{"id":550,"name":"IAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"150:10:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/AuthorityUtils.sol","file":"./AuthorityUtils.sol","id":553,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":815,"src":"187:52:4","symbolAliases":[{"foreign":{"id":552,"name":"AuthorityUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"195:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManager.sol","file":"./IAccessManager.sol","id":555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":1293,"src":"240:52:4","symbolAliases":[{"foreign":{"id":554,"name":"IAccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"248:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","file":"./IAccessManaged.sol","id":557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":855,"src":"293:52:4","symbolAliases":[{"foreign":{"id":556,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"301:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":2095,"src":"346:48:4","symbolAliases":[{"foreign":{"id":558,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"354:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":561,"name":"Context","nameLocations":["953:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2094,"src":"953:7:4"},"id":562,"nodeType":"InheritanceSpecifier","src":"953:7:4"},{"baseName":{"id":563,"name":"IAccessManaged","nameLocations":["962:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":854,"src":"962:14:4"},"id":564,"nodeType":"InheritanceSpecifier","src":"962:14:4"}],"canonicalName":"AccessManaged","contractDependencies":[],"contractKind":"contract","documentation":{"id":560,"nodeType":"StructuredDocumentation","src":"396:521:4","text":" @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\n permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface,\n implementing a policy that allows certain callers to access certain functions.\n IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\n functions, and ideally only used in `external` functions. See {restricted}."},"fullyImplemented":true,"id":732,"linearizedBaseContracts":[732,854,2094],"name":"AccessManaged","nameLocation":"936:13:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":566,"mutability":"mutable","name":"_authority","nameLocation":"999:10:4","nodeType":"VariableDeclaration","scope":732,"src":"983:26:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":568,"mutability":"mutable","name":"_consumingSchedule","nameLocation":"1029:18:4","nodeType":"VariableDeclaration","scope":732,"src":"1016:31:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":567,"name":"bool","nodeType":"ElementaryTypeName","src":"1016:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":578,"nodeType":"Block","src":"1180:48:4","statements":[{"expression":{"arguments":[{"id":575,"name":"initialAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"1204:16:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":574,"name":"_setAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1190:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1190:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":577,"nodeType":"ExpressionStatement","src":"1190:31:4"}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"1054:83:4","text":" @dev Initializes the contract connected to an initial authority."},"id":579,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"initialAuthority","nameLocation":"1162:16:4","nodeType":"VariableDeclaration","scope":579,"src":"1154:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1153:26:4"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[],"src":"1180:0:4"},"scope":732,"src":"1142:86:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":590,"nodeType":"Block","src":"2814:67:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":583,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2838:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2838:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":585,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"2852:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":582,"name":"_checkCanCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"2824:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (address,bytes calldata)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2824:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"ExpressionStatement","src":"2824:39:4"},{"id":589,"nodeType":"PlaceholderStatement","src":"2873:1:4"}]},"documentation":{"id":580,"nodeType":"StructuredDocumentation","src":"1234:1553:4","text":" @dev Restricts access to a function as defined by the connected Authority for this contract and the\n caller and selector of the function that entered the contract.\n [IMPORTANT]\n ====\n In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n functions that are used as external entry points and are not called internally. Unless you know what you're\n doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n ====\n [WARNING]\n ====\n Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\n since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n if no calldata is provided. (See {_checkCanCall}).\n The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n ===="},"id":591,"name":"restricted","nameLocation":"2801:10:4","nodeType":"ModifierDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[],"src":"2811:2:4"},"src":"2792:89:4","virtual":false,"visibility":"internal"},{"baseFunctions":[841],"body":{"id":599,"nodeType":"Block","src":"2981:34:4","statements":[{"expression":{"id":597,"name":"_authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2998:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":596,"id":598,"nodeType":"Return","src":"2991:17:4"}]},"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"2887:30:4","text":"@inheritdoc IAccessManaged"},"functionSelector":"bf7e214f","id":600,"implemented":true,"kind":"function","modifiers":[],"name":"authority","nameLocation":"2931:9:4","nodeType":"FunctionDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[],"src":"2940:2:4"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"2972:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2971:9:4"},"scope":732,"src":"2922:93:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[847],"body":{"id":636,"nodeType":"Block","src":"3115:303:4","statements":[{"assignments":[607],"declarations":[{"constant":false,"id":607,"mutability":"mutable","name":"caller","nameLocation":"3133:6:4","nodeType":"VariableDeclaration","scope":636,"src":"3125:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":606,"name":"address","nodeType":"ElementaryTypeName","src":"3125:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":610,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":608,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"3142:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3142:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3125:29:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"3168:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":612,"name":"authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"3178:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3178:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3168:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":620,"nodeType":"IfStatement","src":"3164:92:4","trueBody":{"id":619,"nodeType":"Block","src":"3191:65:4","statements":[{"errorCall":{"arguments":[{"id":616,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"3238:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":615,"name":"AccessManagedUnauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3212:25:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":618,"nodeType":"RevertStatement","src":"3205:40:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":621,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3269:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3282:4:4","memberName":"code","nodeType":"MemberAccess","src":"3269:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3287:6:4","memberName":"length","nodeType":"MemberAccess","src":"3269:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3297:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3269:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":631,"nodeType":"IfStatement","src":"3265:110:4","trueBody":{"id":630,"nodeType":"Block","src":"3300:75:4","statements":[{"errorCall":{"arguments":[{"id":627,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3351:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":626,"name":"AccessManagedInvalidAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"3321:29:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3321:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":629,"nodeType":"RevertStatement","src":"3314:50:4"}]}},{"expression":{"arguments":[{"id":633,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3398:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":632,"name":"_setAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"3384:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":635,"nodeType":"ExpressionStatement","src":"3384:27:4"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3021:30:4","text":"@inheritdoc IAccessManaged"},"functionSelector":"7a9e5e4b","id":637,"implemented":true,"kind":"function","modifiers":[],"name":"setAuthority","nameLocation":"3065:12:4","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"newAuthority","nameLocation":"3086:12:4","nodeType":"VariableDeclaration","scope":637,"src":"3078:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"3078:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3077:22:4"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[],"src":"3115:0:4"},"scope":732,"src":"3056:362:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[853],"body":{"id":653,"nodeType":"Block","src":"3522:93:4","statements":[{"expression":{"condition":{"id":643,"name":"_consumingSchedule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3539:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"hexValue":"30","id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3606:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3599:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":647,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3599:6:4","typeDescriptions":{}}},"id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3599:9:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3539:69:4","trueExpression":{"expression":{"expression":{"id":644,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3560:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManaged_$732","typeString":"contract AccessManaged"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3565:22:4","memberName":"isConsumingScheduledOp","nodeType":"MemberAccess","referencedDeclaration":654,"src":"3560:27:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes4_$","typeString":"function () view external returns (bytes4)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3588:8:4","memberName":"selector","nodeType":"MemberAccess","src":"3560:36:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":642,"id":652,"nodeType":"Return","src":"3532:76:4"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"3424:30:4","text":"@inheritdoc IAccessManaged"},"functionSelector":"8fb36037","id":654,"implemented":true,"kind":"function","modifiers":[],"name":"isConsumingScheduledOp","nameLocation":"3468:22:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"3490:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":654,"src":"3514:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":640,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3514:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3513:8:4"},"scope":732,"src":"3459:156:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":668,"nodeType":"Block","src":"3865:87:4","statements":[{"expression":{"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":660,"name":"_authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"3875:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":661,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3888:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3875:25:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":663,"nodeType":"ExpressionStatement","src":"3875:25:4"},{"eventCall":{"arguments":[{"id":665,"name":"newAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3932:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":664,"name":"AuthorityUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"3915:16:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3915:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"EmitStatement","src":"3910:35:4"}]},"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"3621:177:4","text":" @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n permissions set by the current authority."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_setAuthority","nameLocation":"3812:13:4","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"newAuthority","nameLocation":"3834:12:4","nodeType":"VariableDeclaration","scope":669,"src":"3826:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"3826:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3825:22:4"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"3865:0:4"},"scope":732,"src":"3803:149:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":730,"nodeType":"Block","src":"4204:517:4","statements":[{"assignments":[678,680],"declarations":[{"constant":false,"id":678,"mutability":"mutable","name":"immediate","nameLocation":"4220:9:4","nodeType":"VariableDeclaration","scope":730,"src":"4215:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":677,"name":"bool","nodeType":"ElementaryTypeName","src":"4215:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"delay","nameLocation":"4238:5:4","nodeType":"VariableDeclaration","scope":730,"src":"4231:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":679,"name":"uint32","nodeType":"ElementaryTypeName","src":"4231:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":698,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":683,"name":"authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"4292:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4292:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":685,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"4317:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":688,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4345:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AccessManaged_$732","typeString":"contract AccessManaged"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AccessManaged_$732","typeString":"contract AccessManaged"}],"id":687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4337:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"4337:7:4","typeDescriptions":{}}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4337:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"baseExpression":{"id":692,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"4371:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"hexValue":"34","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4378:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"4371:9:4","startExpression":{"hexValue":"30","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4376:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4364:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":690,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4364:6:4","typeDescriptions":{}}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4364:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":681,"name":"AuthorityUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"4247:14:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AuthorityUtils_$814_$","typeString":"type(library AuthorityUtils)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:16:4","memberName":"canCallWithDelay","nodeType":"MemberAccess","referencedDeclaration":813,"src":"4247:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_bytes4_$returns$_t_bool_$_t_uint32_$","typeString":"function (address,address,address,bytes4) view returns (bool,uint32)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4247:144:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"4214:177:4"},{"condition":{"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4405:10:4","subExpression":{"id":699,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":678,"src":"4406:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":729,"nodeType":"IfStatement","src":"4401:314:4","trueBody":{"id":728,"nodeType":"Block","src":"4417:298:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":701,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"4435:5:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4443:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4435:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":726,"nodeType":"Block","src":"4632:73:4","statements":[{"errorCall":{"arguments":[{"id":723,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"4683:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":722,"name":"AccessManagedUnauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4657:25:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4657:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"RevertStatement","src":"4650:40:4"}]},"id":727,"nodeType":"IfStatement","src":"4431:274:4","trueBody":{"id":721,"nodeType":"Block","src":"4446:180:4","statements":[{"expression":{"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":704,"name":"_consumingSchedule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"4464:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4485:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4464:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":707,"nodeType":"ExpressionStatement","src":"4464:25:4"},{"expression":{"arguments":[{"id":713,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"4554:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":714,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"4562:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":709,"name":"authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"4522:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4522:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":708,"name":"IAccessManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"4507:14:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessManager_$1292_$","typeString":"type(contract IAccessManager)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4507:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessManager_$1292","typeString":"contract IAccessManager"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4535:18:4","memberName":"consumeScheduledOp","nodeType":"MemberAccess","referencedDeclaration":1271,"src":"4507:46:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory) external"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4507:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"4507:60:4"},{"expression":{"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":717,"name":"_consumingSchedule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"4585:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4606:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4585:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":720,"nodeType":"ExpressionStatement","src":"4585:26:4"}]}}]}}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"3958:164:4","text":" @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n is less than 4 bytes long."},"id":731,"implemented":true,"kind":"function","modifiers":[],"name":"_checkCanCall","nameLocation":"4136:13:4","nodeType":"FunctionDefinition","parameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"caller","nameLocation":"4158:6:4","nodeType":"VariableDeclaration","scope":731,"src":"4150:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":674,"mutability":"mutable","name":"data","nameLocation":"4181:4:4","nodeType":"VariableDeclaration","scope":731,"src":"4166:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":673,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4149:37:4"},"returnParameters":{"id":676,"nodeType":"ParameterList","parameters":[],"src":"4204:0:4"},"scope":732,"src":"4127:594:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":733,"src":"918:3805:4","usedErrors":[825,831,835],"usedEvents":[821]}],"src":"116:4608:4"},"id":4},"@openzeppelin/contracts/access/manager/AuthorityUtils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/AuthorityUtils.sol","exportedSymbols":{"AuthorityUtils":[814],"IAuthority":[1308]},"id":815,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":734,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"117:24:5"},{"absolutePath":"@openzeppelin/contracts/access/manager/IAuthority.sol","file":"./IAuthority.sol","id":736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":815,"sourceUnit":1309,"src":"143:44:5","symbolAliases":[{"foreign":{"id":735,"name":"IAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"151:10:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AuthorityUtils","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":814,"linearizedBaseContracts":[814],"name":"AuthorityUtils","nameLocation":"197:14:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":812,"nodeType":"Block","src":"776:451:5","statements":[{"assignments":[753,755],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"success","nameLocation":"792:7:5","nodeType":"VariableDeclaration","scope":812,"src":"787:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"787:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":755,"mutability":"mutable","name":"data","nameLocation":"814:4:5","nodeType":"VariableDeclaration","scope":812,"src":"801:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":754,"name":"bytes","nodeType":"ElementaryTypeName","src":"801:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":768,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":760,"name":"IAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"871:10:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAuthority_$1308_$","typeString":"type(contract IAuthority)"}},"id":761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"882:7:5","memberName":"canCall","nodeType":"MemberAccess","referencedDeclaration":1307,"src":"871:18:5","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_address_$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function IAuthority.canCall(address,address,bytes4) view returns (bool)"}},{"components":[{"id":762,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"892:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"900:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":764,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"908:8:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"id":765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:26:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_bytes4_$","typeString":"tuple(address,address,bytes4)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_view$_t_address_$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function IAuthority.canCall(address,address,bytes4) view returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_bytes4_$","typeString":"tuple(address,address,bytes4)"}],"expression":{"id":758,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"856:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"860:10:5","memberName":"encodeCall","nodeType":"MemberAccess","src":"856:14:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"856:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":756,"name":"authority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"822:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"832:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"822:20:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"822:106:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"786:142:5"},{"condition":{"id":769,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"942:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":807,"nodeType":"IfStatement","src":"938:248:5","trueBody":{"id":806,"nodeType":"Block","src":"951:235:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":770,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"969:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"974:6:5","memberName":"length","nodeType":"MemberAccess","src":"969:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783430","id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"984:4:5","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"src":"969:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":789,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"1086:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1091:6:5","memberName":"length","nodeType":"MemberAccess","src":"1086:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783230","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1101:4:5","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"1086:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":804,"nodeType":"IfStatement","src":"1082:94:5","trueBody":{"id":803,"nodeType":"Block","src":"1107:69:5","statements":[{"expression":{"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":793,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1125:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":796,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"1148:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1155:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":797,"name":"bool","nodeType":"ElementaryTypeName","src":"1155:4:5","typeDescriptions":{}}}],"id":799,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1154:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":794,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1137:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1141:6:5","memberName":"decode","nodeType":"MemberAccess","src":"1137:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1137:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1125:36:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":802,"nodeType":"ExpressionStatement","src":"1125:36:5"}]}},"id":805,"nodeType":"IfStatement","src":"965:211:5","trueBody":{"id":788,"nodeType":"Block","src":"990:86:5","statements":[{"expression":{"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":774,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1009:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":775,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1020:5:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":776,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1008:18:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":779,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"1040:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1047:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":780,"name":"bool","nodeType":"ElementaryTypeName","src":"1047:4:5","typeDescriptions":{}}},{"id":783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1053:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":782,"name":"uint32","nodeType":"ElementaryTypeName","src":"1053:6:5","typeDescriptions":{}}}],"id":784,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1046:14:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(bool),type(uint32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_uint32_$_$","typeString":"tuple(type(bool),type(uint32))"}],"expression":{"id":777,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1029:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1033:6:5","memberName":"decode","nodeType":"MemberAccess","src":"1029:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1029:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"src":"1008:53:5","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"1008:53:5"}]}}]}},{"expression":{"components":[{"id":808,"name":"immediate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1203:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":809,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1214:5:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1202:18:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint32_$","typeString":"tuple(bool,uint32)"}},"functionReturnParameters":751,"id":811,"nodeType":"Return","src":"1195:25:5"}]},"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"218:368:5","text":" @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\n for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\n This helper function takes care of invoking `canCall` in a backwards compatible way without reverting."},"id":813,"implemented":true,"kind":"function","modifiers":[],"name":"canCallWithDelay","nameLocation":"600:16:5","nodeType":"FunctionDefinition","parameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"authority","nameLocation":"634:9:5","nodeType":"VariableDeclaration","scope":813,"src":"626:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"626:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"caller","nameLocation":"661:6:5","nodeType":"VariableDeclaration","scope":813,"src":"653:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"653:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"target","nameLocation":"685:6:5","nodeType":"VariableDeclaration","scope":813,"src":"677:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":742,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"selector","nameLocation":"708:8:5","nodeType":"VariableDeclaration","scope":813,"src":"701:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":744,"name":"bytes4","nodeType":"ElementaryTypeName","src":"701:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"616:106:5"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"immediate","nameLocation":"751:9:5","nodeType":"VariableDeclaration","scope":813,"src":"746:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":747,"name":"bool","nodeType":"ElementaryTypeName","src":"746:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"delay","nameLocation":"769:5:5","nodeType":"VariableDeclaration","scope":813,"src":"762:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":749,"name":"uint32","nodeType":"ElementaryTypeName","src":"762:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"745:30:5"},"scope":814,"src":"591:636:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":815,"src":"189:1040:5","usedErrors":[],"usedEvents":[]}],"src":"117:1113:5"},"id":5},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","exportedSymbols":{"IAccessManaged":[854]},"id":855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":816,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"117:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessManaged","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":854,"linearizedBaseContracts":[854],"name":"IAccessManaged","nameLocation":"153:14:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"174:73:6","text":" @dev Authority that manages this contract was updated."},"eventSelector":"2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad","id":821,"name":"AuthorityUpdated","nameLocation":"258:16:6","nodeType":"EventDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"indexed":false,"mutability":"mutable","name":"authority","nameLocation":"283:9:6","nodeType":"VariableDeclaration","scope":821,"src":"275:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:19:6"},"src":"252:42:6"},{"errorSelector":"068ca9d8","id":825,"name":"AccessManagedUnauthorized","nameLocation":"306:25:6","nodeType":"ErrorDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"caller","nameLocation":"340:6:6","nodeType":"VariableDeclaration","scope":825,"src":"332:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"332:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"331:16:6"},"src":"300:48:6"},{"errorSelector":"af77169d","id":831,"name":"AccessManagedRequiredDelay","nameLocation":"359:26:6","nodeType":"ErrorDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":827,"mutability":"mutable","name":"caller","nameLocation":"394:6:6","nodeType":"VariableDeclaration","scope":831,"src":"386:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":826,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":829,"mutability":"mutable","name":"delay","nameLocation":"409:5:6","nodeType":"VariableDeclaration","scope":831,"src":"402:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":828,"name":"uint32","nodeType":"ElementaryTypeName","src":"402:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"385:30:6"},"src":"353:63:6"},{"errorSelector":"c2f31e5e","id":835,"name":"AccessManagedInvalidAuthority","nameLocation":"427:29:6","nodeType":"ErrorDefinition","parameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":833,"mutability":"mutable","name":"authority","nameLocation":"465:9:6","nodeType":"VariableDeclaration","scope":835,"src":"457:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":832,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"456:19:6"},"src":"421:55:6"},{"documentation":{"id":836,"nodeType":"StructuredDocumentation","src":"482:54:6","text":" @dev Returns the current authority."},"functionSelector":"bf7e214f","id":841,"implemented":false,"kind":"function","modifiers":[],"name":"authority","nameLocation":"550:9:6","nodeType":"FunctionDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[],"src":"559:2:6"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":841,"src":"585:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"584:9:6"},"scope":854,"src":"541:53:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":842,"nodeType":"StructuredDocumentation","src":"600:103:6","text":" @dev Transfers control to a new authority. The caller must be the current authority."},"functionSelector":"7a9e5e4b","id":847,"implemented":false,"kind":"function","modifiers":[],"name":"setAuthority","nameLocation":"717:12:6","nodeType":"FunctionDefinition","parameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":847,"src":"730:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"730:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"729:9:6"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[],"src":"747:0:6"},"scope":854,"src":"708:40:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":848,"nodeType":"StructuredDocumentation","src":"754:284:6","text":" @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\n being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\n attacker controlled calls."},"functionSelector":"8fb36037","id":853,"implemented":false,"kind":"function","modifiers":[],"name":"isConsumingScheduledOp","nameLocation":"1052:22:6","nodeType":"FunctionDefinition","parameters":{"id":849,"nodeType":"ParameterList","parameters":[],"src":"1074:2:6"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":853,"src":"1100:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":850,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1100:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1099:8:6"},"scope":854,"src":"1043:65:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":855,"src":"143:967:6","usedErrors":[825,831,835],"usedEvents":[821]}],"src":"117:994:6"},"id":6},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManager.sol","exportedSymbols":{"IAccessManaged":[854],"IAccessManager":[1292],"Time":[6039]},"id":1293,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":856,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"117:24:7"},{"absolutePath":"@openzeppelin/contracts/access/manager/IAccessManaged.sol","file":"./IAccessManaged.sol","id":858,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1293,"sourceUnit":855,"src":"143:52:7","symbolAliases":[{"foreign":{"id":857,"name":"IAccessManaged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"151:14:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","file":"../../utils/types/Time.sol","id":860,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1293,"sourceUnit":6040,"src":"196:48:7","symbolAliases":[{"foreign":{"id":859,"name":"Time","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6039,"src":"204:4:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1292,"linearizedBaseContracts":[1292],"name":"IAccessManager","nameLocation":"256:14:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"277:58:7","text":" @dev A delayed operation was scheduled."},"eventSelector":"82a2da5dee54ea8021c6545b4444620291e07ee83be6dd57edb175062715f3b4","id":875,"name":"OperationScheduled","nameLocation":"346:18:7","nodeType":"EventDefinition","parameters":{"id":874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"390:11:7","nodeType":"VariableDeclaration","scope":875,"src":"374:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":865,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"426:5:7","nodeType":"VariableDeclaration","scope":875,"src":"411:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":864,"name":"uint32","nodeType":"ElementaryTypeName","src":"411:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":867,"indexed":false,"mutability":"mutable","name":"schedule","nameLocation":"448:8:7","nodeType":"VariableDeclaration","scope":875,"src":"441:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":866,"name":"uint48","nodeType":"ElementaryTypeName","src":"441:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":869,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"474:6:7","nodeType":"VariableDeclaration","scope":875,"src":"466:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"466:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":871,"indexed":false,"mutability":"mutable","name":"target","nameLocation":"498:6:7","nodeType":"VariableDeclaration","scope":875,"src":"490:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":870,"name":"address","nodeType":"ElementaryTypeName","src":"490:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":873,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"520:4:7","nodeType":"VariableDeclaration","scope":875,"src":"514:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":872,"name":"bytes","nodeType":"ElementaryTypeName","src":"514:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"364:166:7"},"src":"340:191:7"},{"anonymous":false,"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"537:59:7","text":" @dev A scheduled operation was executed."},"eventSelector":"76a2a46953689d4861a5d3f6ed883ad7e6af674a21f8e162707159fc9dde614d","id":882,"name":"OperationExecuted","nameLocation":"607:17:7","nodeType":"EventDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"641:11:7","nodeType":"VariableDeclaration","scope":882,"src":"625:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"625:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":880,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"669:5:7","nodeType":"VariableDeclaration","scope":882,"src":"654:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":879,"name":"uint32","nodeType":"ElementaryTypeName","src":"654:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"624:51:7"},"src":"601:75:7"},{"anonymous":false,"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"682:59:7","text":" @dev A scheduled operation was canceled."},"eventSelector":"bd9ac67a6e2f6463b80927326310338bcbb4bdb7936ce1365ea3e01067e7b9f7","id":889,"name":"OperationCanceled","nameLocation":"752:17:7","nodeType":"EventDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"indexed":true,"mutability":"mutable","name":"operationId","nameLocation":"786:11:7","nodeType":"VariableDeclaration","scope":889,"src":"770:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":887,"indexed":true,"mutability":"mutable","name":"nonce","nameLocation":"814:5:7","nodeType":"VariableDeclaration","scope":889,"src":"799:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":886,"name":"uint32","nodeType":"ElementaryTypeName","src":"799:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"769:51:7"},"src":"746:75:7"},{"anonymous":false,"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"827:61:7","text":" @dev Informational labelling for a roleId."},"eventSelector":"1256f5b5ecb89caec12db449738f2fbcd1ba5806cf38f35413f4e5c15bf6a450","id":896,"name":"RoleLabel","nameLocation":"899:9:7","nodeType":"EventDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"924:6:7","nodeType":"VariableDeclaration","scope":896,"src":"909:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":891,"name":"uint64","nodeType":"ElementaryTypeName","src":"909:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":894,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"939:5:7","nodeType":"VariableDeclaration","scope":896,"src":"932:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":893,"name":"string","nodeType":"ElementaryTypeName","src":"932:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"908:37:7"},"src":"893:53:7"},{"anonymous":false,"documentation":{"id":897,"nodeType":"StructuredDocumentation","src":"952:375:7","text":" @dev Emitted when `account` is granted `roleId`.\n NOTE: The meaning of the `since` argument depends on the `newMember` argument.\n If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\n otherwise it indicates the execution delay for this account and roleId is updated."},"eventSelector":"f98448b987f1428e0e230e1f3c6e2ce15b5693eaf31827fbd0b1ec4b424ae7cf","id":909,"name":"RoleGranted","nameLocation":"1338:11:7","nodeType":"EventDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1365:6:7","nodeType":"VariableDeclaration","scope":909,"src":"1350:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":898,"name":"uint64","nodeType":"ElementaryTypeName","src":"1350:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":901,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1389:7:7","nodeType":"VariableDeclaration","scope":909,"src":"1373:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"1373:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"1405:5:7","nodeType":"VariableDeclaration","scope":909,"src":"1398:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":902,"name":"uint32","nodeType":"ElementaryTypeName","src":"1398:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":905,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"1419:5:7","nodeType":"VariableDeclaration","scope":909,"src":"1412:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":904,"name":"uint48","nodeType":"ElementaryTypeName","src":"1412:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":907,"indexed":false,"mutability":"mutable","name":"newMember","nameLocation":"1431:9:7","nodeType":"VariableDeclaration","scope":909,"src":"1426:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":906,"name":"bool","nodeType":"ElementaryTypeName","src":"1426:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1349:92:7"},"src":"1332:110:7"},{"anonymous":false,"documentation":{"id":910,"nodeType":"StructuredDocumentation","src":"1448:125:7","text":" @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"eventSelector":"f229baa593af28c41b1d16b748cd7688f0c83aaf92d4be41c44005defe84c166","id":916,"name":"RoleRevoked","nameLocation":"1584:11:7","nodeType":"EventDefinition","parameters":{"id":915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1611:6:7","nodeType":"VariableDeclaration","scope":916,"src":"1596:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":911,"name":"uint64","nodeType":"ElementaryTypeName","src":"1596:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":914,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1635:7:7","nodeType":"VariableDeclaration","scope":916,"src":"1619:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"1619:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1595:48:7"},"src":"1578:66:7"},{"anonymous":false,"documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"1650:78:7","text":" @dev Role acting as admin over a given `roleId` is updated."},"eventSelector":"1fd6dd7631312dfac2205b52913f99de03b4d7e381d5d27d3dbfe0713e6e6340","id":923,"name":"RoleAdminChanged","nameLocation":"1739:16:7","nodeType":"EventDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1771:6:7","nodeType":"VariableDeclaration","scope":923,"src":"1756:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":918,"name":"uint64","nodeType":"ElementaryTypeName","src":"1756:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":921,"indexed":true,"mutability":"mutable","name":"admin","nameLocation":"1794:5:7","nodeType":"VariableDeclaration","scope":923,"src":"1779:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":920,"name":"uint64","nodeType":"ElementaryTypeName","src":"1779:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1755:45:7"},"src":"1733:68:7"},{"anonymous":false,"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"1807:81:7","text":" @dev Role acting as guardian over a given `roleId` is updated."},"eventSelector":"7a8059630b897b5de4c08ade69f8b90c3ead1f8596d62d10b6c4d14a0afb4ae2","id":930,"name":"RoleGuardianChanged","nameLocation":"1899:19:7","nodeType":"EventDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"1934:6:7","nodeType":"VariableDeclaration","scope":930,"src":"1919:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":925,"name":"uint64","nodeType":"ElementaryTypeName","src":"1919:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":928,"indexed":true,"mutability":"mutable","name":"guardian","nameLocation":"1957:8:7","nodeType":"VariableDeclaration","scope":930,"src":"1942:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":927,"name":"uint64","nodeType":"ElementaryTypeName","src":"1942:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1918:48:7"},"src":"1893:74:7"},{"anonymous":false,"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"1973:108:7","text":" @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"eventSelector":"feb69018ee8b8fd50ea86348f1267d07673379f72cffdeccec63853ee8ce8b48","id":939,"name":"RoleGrantDelayChanged","nameLocation":"2092:21:7","nodeType":"EventDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"2129:6:7","nodeType":"VariableDeclaration","scope":939,"src":"2114:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":932,"name":"uint64","nodeType":"ElementaryTypeName","src":"2114:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":935,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"2144:5:7","nodeType":"VariableDeclaration","scope":939,"src":"2137:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":934,"name":"uint32","nodeType":"ElementaryTypeName","src":"2137:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":937,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"2158:5:7","nodeType":"VariableDeclaration","scope":939,"src":"2151:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":936,"name":"uint48","nodeType":"ElementaryTypeName","src":"2151:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2113:51:7"},"src":"2086:79:7"},{"anonymous":false,"documentation":{"id":940,"nodeType":"StructuredDocumentation","src":"2171:77:7","text":" @dev Target mode is updated (true = closed, false = open)."},"eventSelector":"90d4e7bb7e5d933792b3562e1741306f8be94837e1348dacef9b6f1df56eb138","id":946,"name":"TargetClosed","nameLocation":"2259:12:7","nodeType":"EventDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2288:6:7","nodeType":"VariableDeclaration","scope":946,"src":"2272:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"2272:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":944,"indexed":false,"mutability":"mutable","name":"closed","nameLocation":"2301:6:7","nodeType":"VariableDeclaration","scope":946,"src":"2296:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":943,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2271:37:7"},"src":"2253:56:7"},{"anonymous":false,"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"2315:94:7","text":" @dev Role required to invoke `selector` on `target` is updated to `roleId`."},"eventSelector":"9ea6790c7dadfd01c9f8b9762b3682607af2c7e79e05a9f9fdf5580dde949151","id":955,"name":"TargetFunctionRoleUpdated","nameLocation":"2420:25:7","nodeType":"EventDefinition","parameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":949,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2462:6:7","nodeType":"VariableDeclaration","scope":955,"src":"2446:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":948,"name":"address","nodeType":"ElementaryTypeName","src":"2446:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":951,"indexed":false,"mutability":"mutable","name":"selector","nameLocation":"2477:8:7","nodeType":"VariableDeclaration","scope":955,"src":"2470:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":950,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2470:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":953,"indexed":true,"mutability":"mutable","name":"roleId","nameLocation":"2502:6:7","nodeType":"VariableDeclaration","scope":955,"src":"2487:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":952,"name":"uint64","nodeType":"ElementaryTypeName","src":"2487:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2445:64:7"},"src":"2414:96:7"},{"anonymous":false,"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"2516:108:7","text":" @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"eventSelector":"a56b76017453f399ec2327ba00375dbfb1fd070ff854341ad6191e6a2e2de19c","id":964,"name":"TargetAdminDelayUpdated","nameLocation":"2635:23:7","nodeType":"EventDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"indexed":true,"mutability":"mutable","name":"target","nameLocation":"2675:6:7","nodeType":"VariableDeclaration","scope":964,"src":"2659:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"2659:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"indexed":false,"mutability":"mutable","name":"delay","nameLocation":"2690:5:7","nodeType":"VariableDeclaration","scope":964,"src":"2683:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":959,"name":"uint32","nodeType":"ElementaryTypeName","src":"2683:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":962,"indexed":false,"mutability":"mutable","name":"since","nameLocation":"2704:5:7","nodeType":"VariableDeclaration","scope":964,"src":"2697:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":961,"name":"uint48","nodeType":"ElementaryTypeName","src":"2697:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2658:52:7"},"src":"2629:82:7"},{"errorSelector":"813e9459","id":968,"name":"AccessManagerAlreadyScheduled","nameLocation":"2723:29:7","nodeType":"ErrorDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"operationId","nameLocation":"2761:11:7","nodeType":"VariableDeclaration","scope":968,"src":"2753:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2753:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2752:21:7"},"src":"2717:57:7"},{"errorSelector":"60a299b0","id":972,"name":"AccessManagerNotScheduled","nameLocation":"2785:25:7","nodeType":"ErrorDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"operationId","nameLocation":"2819:11:7","nodeType":"VariableDeclaration","scope":972,"src":"2811:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2811:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2810:21:7"},"src":"2779:53:7"},{"errorSelector":"18cb6b7a","id":976,"name":"AccessManagerNotReady","nameLocation":"2843:21:7","nodeType":"ErrorDefinition","parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"operationId","nameLocation":"2873:11:7","nodeType":"VariableDeclaration","scope":976,"src":"2865:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":973,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2865:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2864:21:7"},"src":"2837:49:7"},{"errorSelector":"78a5d6e4","id":980,"name":"AccessManagerExpired","nameLocation":"2897:20:7","nodeType":"ErrorDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"operationId","nameLocation":"2926:11:7","nodeType":"VariableDeclaration","scope":980,"src":"2918:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":977,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2918:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2917:21:7"},"src":"2891:48:7"},{"errorSelector":"5a068bc8","id":984,"name":"AccessManagerLockedAccount","nameLocation":"2950:26:7","nodeType":"ErrorDefinition","parameters":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"account","nameLocation":"2985:7:7","nodeType":"VariableDeclaration","scope":984,"src":"2977:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":981,"name":"address","nodeType":"ElementaryTypeName","src":"2977:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2976:17:7"},"src":"2944:50:7"},{"errorSelector":"1871a90c","id":988,"name":"AccessManagerLockedRole","nameLocation":"3005:23:7","nodeType":"ErrorDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"roleId","nameLocation":"3036:6:7","nodeType":"VariableDeclaration","scope":988,"src":"3029:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":985,"name":"uint64","nodeType":"ElementaryTypeName","src":"3029:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3028:15:7"},"src":"2999:45:7"},{"errorSelector":"5f159e63","id":990,"name":"AccessManagerBadConfirmation","nameLocation":"3055:28:7","nodeType":"ErrorDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[],"src":"3083:2:7"},"src":"3049:37:7"},{"errorSelector":"f07e038f","id":996,"name":"AccessManagerUnauthorizedAccount","nameLocation":"3097:32:7","nodeType":"ErrorDefinition","parameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"msgsender","nameLocation":"3138:9:7","nodeType":"VariableDeclaration","scope":996,"src":"3130:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"3130:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"roleId","nameLocation":"3156:6:7","nodeType":"VariableDeclaration","scope":996,"src":"3149:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":993,"name":"uint64","nodeType":"ElementaryTypeName","src":"3149:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3129:34:7"},"src":"3091:73:7"},{"errorSelector":"81c6f24b","id":1004,"name":"AccessManagerUnauthorizedCall","nameLocation":"3175:29:7","nodeType":"ErrorDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"caller","nameLocation":"3213:6:7","nodeType":"VariableDeclaration","scope":1004,"src":"3205:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"3205:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"target","nameLocation":"3229:6:7","nodeType":"VariableDeclaration","scope":1004,"src":"3221:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"3221:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"selector","nameLocation":"3244:8:7","nodeType":"VariableDeclaration","scope":1004,"src":"3237:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1001,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3237:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3204:49:7"},"src":"3169:85:7"},{"errorSelector":"320ff748","id":1008,"name":"AccessManagerUnauthorizedConsume","nameLocation":"3265:32:7","nodeType":"ErrorDefinition","parameters":{"id":1007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"target","nameLocation":"3306:6:7","nodeType":"VariableDeclaration","scope":1008,"src":"3298:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1005,"name":"address","nodeType":"ElementaryTypeName","src":"3298:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3297:16:7"},"src":"3259:55:7"},{"errorSelector":"3fe2751c","id":1018,"name":"AccessManagerUnauthorizedCancel","nameLocation":"3325:31:7","nodeType":"ErrorDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"msgsender","nameLocation":"3365:9:7","nodeType":"VariableDeclaration","scope":1018,"src":"3357:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"3357:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"caller","nameLocation":"3384:6:7","nodeType":"VariableDeclaration","scope":1018,"src":"3376:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"3376:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"target","nameLocation":"3400:6:7","nodeType":"VariableDeclaration","scope":1018,"src":"3392:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"3392:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"selector","nameLocation":"3415:8:7","nodeType":"VariableDeclaration","scope":1018,"src":"3408:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1015,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3408:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3356:68:7"},"src":"3319:106:7"},{"errorSelector":"0813ada2","id":1022,"name":"AccessManagerInvalidInitialAdmin","nameLocation":"3436:32:7","nodeType":"ErrorDefinition","parameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1020,"mutability":"mutable","name":"initialAdmin","nameLocation":"3477:12:7","nodeType":"VariableDeclaration","scope":1022,"src":"3469:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1019,"name":"address","nodeType":"ElementaryTypeName","src":"3469:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3468:22:7"},"src":"3430:61:7"},{"documentation":{"id":1023,"nodeType":"StructuredDocumentation","src":"3497:1373:7","text":" @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\n no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\n & {execute} workflow.\n This function is usually called by the targeted contract to control immediate execution of restricted functions.\n Therefore we only return true if the call can be performed without any delay. If the call is subject to a\n previously set delay (not zero), then the function should return false and the caller should schedule the operation\n for future execution.\n If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\n the operation can be executed if and only if delay is greater than 0.\n NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\n is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\n to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\n NOTE: This function does not report the permissions of this manager itself. These are defined by the\n {_canCallSelf} function instead."},"functionSelector":"b7009613","id":1036,"implemented":false,"kind":"function","modifiers":[],"name":"canCall","nameLocation":"4884:7:7","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1025,"mutability":"mutable","name":"caller","nameLocation":"4909:6:7","nodeType":"VariableDeclaration","scope":1036,"src":"4901:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1024,"name":"address","nodeType":"ElementaryTypeName","src":"4901:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1027,"mutability":"mutable","name":"target","nameLocation":"4933:6:7","nodeType":"VariableDeclaration","scope":1036,"src":"4925:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1026,"name":"address","nodeType":"ElementaryTypeName","src":"4925:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"selector","nameLocation":"4956:8:7","nodeType":"VariableDeclaration","scope":1036,"src":"4949:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1028,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4949:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4891:79:7"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"allowed","nameLocation":"4999:7:7","nodeType":"VariableDeclaration","scope":1036,"src":"4994:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1031,"name":"bool","nodeType":"ElementaryTypeName","src":"4994:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"delay","nameLocation":"5015:5:7","nodeType":"VariableDeclaration","scope":1036,"src":"5008:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1033,"name":"uint32","nodeType":"ElementaryTypeName","src":"5008:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4993:28:7"},"scope":1292,"src":"4875:147:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1037,"nodeType":"StructuredDocumentation","src":"5028:252:7","text":" @dev Expiration delay for scheduled proposals. Defaults to 1 week.\n IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\n disabling any scheduling usage."},"functionSelector":"4665096d","id":1042,"implemented":false,"kind":"function","modifiers":[],"name":"expiration","nameLocation":"5294:10:7","nodeType":"FunctionDefinition","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[],"src":"5304:2:7"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1042,"src":"5330:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1039,"name":"uint32","nodeType":"ElementaryTypeName","src":"5330:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5329:8:7"},"scope":1292,"src":"5285:53:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"5344:246:7","text":" @dev Minimum setback for all delay updates, with the exception of execution delays. It\n can be increased without setback (and reset via {revokeRole} in the case event of an\n accidental increase). Defaults to 5 days."},"functionSelector":"cc1b6c81","id":1048,"implemented":false,"kind":"function","modifiers":[],"name":"minSetback","nameLocation":"5604:10:7","nodeType":"FunctionDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[],"src":"5614:2:7"},"returnParameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1048,"src":"5640:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1045,"name":"uint32","nodeType":"ElementaryTypeName","src":"5640:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5639:8:7"},"scope":1292,"src":"5595:53:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"5654:120:7","text":" @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"functionSelector":"a166aa89","id":1056,"implemented":false,"kind":"function","modifiers":[],"name":"isTargetClosed","nameLocation":"5788:14:7","nodeType":"FunctionDefinition","parameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"target","nameLocation":"5811:6:7","nodeType":"VariableDeclaration","scope":1056,"src":"5803:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1050,"name":"address","nodeType":"ElementaryTypeName","src":"5803:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5802:16:7"},"returnParameters":{"id":1055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1056,"src":"5842:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1053,"name":"bool","nodeType":"ElementaryTypeName","src":"5842:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5841:6:7"},"scope":1292,"src":"5779:69:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"5854:65:7","text":" @dev Get the role required to call a function."},"functionSelector":"6d5115bd","id":1066,"implemented":false,"kind":"function","modifiers":[],"name":"getTargetFunctionRole","nameLocation":"5933:21:7","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"target","nameLocation":"5963:6:7","nodeType":"VariableDeclaration","scope":1066,"src":"5955:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"5955:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"selector","nameLocation":"5978:8:7","nodeType":"VariableDeclaration","scope":1066,"src":"5971:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1060,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5971:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5954:33:7"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1066,"src":"6011:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1063,"name":"uint64","nodeType":"ElementaryTypeName","src":"6011:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6010:8:7"},"scope":1292,"src":"5924:95:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"6025:127:7","text":" @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"functionSelector":"4c1da1e2","id":1074,"implemented":false,"kind":"function","modifiers":[],"name":"getTargetAdminDelay","nameLocation":"6166:19:7","nodeType":"FunctionDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"mutability":"mutable","name":"target","nameLocation":"6194:6:7","nodeType":"VariableDeclaration","scope":1074,"src":"6186:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6185:16:7"},"returnParameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1074,"src":"6225:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1071,"name":"uint32","nodeType":"ElementaryTypeName","src":"6225:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"6224:8:7"},"scope":1292,"src":"6157:76:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"6239:265:7","text":" @dev Get the id of the role that acts as an admin for the given role.\n The admin permission is required to grant the role, revoke the role and update the execution delay to execute\n an operation that is restricted to this role."},"functionSelector":"530dd456","id":1082,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"6518:12:7","nodeType":"FunctionDefinition","parameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"roleId","nameLocation":"6538:6:7","nodeType":"VariableDeclaration","scope":1082,"src":"6531:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1076,"name":"uint64","nodeType":"ElementaryTypeName","src":"6531:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6530:15:7"},"returnParameters":{"id":1081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1082,"src":"6569:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1079,"name":"uint64","nodeType":"ElementaryTypeName","src":"6569:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6568:8:7"},"scope":1292,"src":"6509:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"6583:185:7","text":" @dev Get the role that acts as a guardian for a given role.\n The guardian permission allows canceling operations that have been scheduled under the role."},"functionSelector":"0b0a93ba","id":1090,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleGuardian","nameLocation":"6782:15:7","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"roleId","nameLocation":"6805:6:7","nodeType":"VariableDeclaration","scope":1090,"src":"6798:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1084,"name":"uint64","nodeType":"ElementaryTypeName","src":"6798:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6797:15:7"},"returnParameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1090,"src":"6836:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1087,"name":"uint64","nodeType":"ElementaryTypeName","src":"6836:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6835:8:7"},"scope":1292,"src":"6773:71:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"6850:286:7","text":" @dev Get the role current grant delay.\n Its value may change at any point without an event emitted following a call to {setGrantDelay}.\n Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"functionSelector":"12be8727","id":1098,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleGrantDelay","nameLocation":"7150:17:7","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"roleId","nameLocation":"7175:6:7","nodeType":"VariableDeclaration","scope":1098,"src":"7168:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1092,"name":"uint64","nodeType":"ElementaryTypeName","src":"7168:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7167:15:7"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1098,"src":"7206:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1095,"name":"uint32","nodeType":"ElementaryTypeName","src":"7206:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"7205:8:7"},"scope":1292,"src":"7141:73:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1099,"nodeType":"StructuredDocumentation","src":"7220:599:7","text":" @dev Get the access details for a given account for a given role. These details include the timepoint at which\n membership becomes active, and the delay applied to all operation by this user that requires this permission\n level.\n Returns:\n [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\n [1] Current execution delay for the account.\n [2] Pending execution delay for the account.\n [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"functionSelector":"3078f114","id":1114,"implemented":false,"kind":"function","modifiers":[],"name":"getAccess","nameLocation":"7833:9:7","nodeType":"FunctionDefinition","parameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"roleId","nameLocation":"7850:6:7","nodeType":"VariableDeclaration","scope":1114,"src":"7843:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1100,"name":"uint64","nodeType":"ElementaryTypeName","src":"7843:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"account","nameLocation":"7866:7:7","nodeType":"VariableDeclaration","scope":1114,"src":"7858:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1102,"name":"address","nodeType":"ElementaryTypeName","src":"7858:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7842:32:7"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"7898:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1105,"name":"uint48","nodeType":"ElementaryTypeName","src":"7898:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"7906:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1107,"name":"uint32","nodeType":"ElementaryTypeName","src":"7906:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"7914:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1109,"name":"uint32","nodeType":"ElementaryTypeName","src":"7914:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1114,"src":"7922:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1111,"name":"uint48","nodeType":"ElementaryTypeName","src":"7922:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"7897:32:7"},"scope":1292,"src":"7824:106:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1115,"nodeType":"StructuredDocumentation","src":"7936:230:7","text":" @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\n permission might be associated with an execution delay. {getAccess} can provide more details."},"functionSelector":"d1f856ee","id":1126,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"8180:7:7","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"roleId","nameLocation":"8195:6:7","nodeType":"VariableDeclaration","scope":1126,"src":"8188:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1116,"name":"uint64","nodeType":"ElementaryTypeName","src":"8188:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"account","nameLocation":"8211:7:7","nodeType":"VariableDeclaration","scope":1126,"src":"8203:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1118,"name":"address","nodeType":"ElementaryTypeName","src":"8203:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8187:32:7"},"returnParameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"8243:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1121,"name":"bool","nodeType":"ElementaryTypeName","src":"8243:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"8249:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1123,"name":"uint32","nodeType":"ElementaryTypeName","src":"8249:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8242:14:7"},"scope":1292,"src":"8171:86:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"8263:208:7","text":" @dev Give a label to a role, for improved role discoverability by UIs.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleLabel} event."},"functionSelector":"853551b8","id":1134,"implemented":false,"kind":"function","modifiers":[],"name":"labelRole","nameLocation":"8485:9:7","nodeType":"FunctionDefinition","parameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"roleId","nameLocation":"8502:6:7","nodeType":"VariableDeclaration","scope":1134,"src":"8495:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1128,"name":"uint64","nodeType":"ElementaryTypeName","src":"8495:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"label","nameLocation":"8526:5:7","nodeType":"VariableDeclaration","scope":1134,"src":"8510:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1130,"name":"string","nodeType":"ElementaryTypeName","src":"8510:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8494:38:7"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"8541:0:7"},"scope":1292,"src":"8476:66:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"8548:1222:7","text":" @dev Add `account` to `roleId`, or change its execution delay.\n This gives the account the authorization to call any function that is restricted to this role. An optional\n execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\n that is restricted to members of this role. The user will only be able to execute the operation after the delay has\n passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\n If the account has already been granted this role, the execution delay will be updated. This update is not\n immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\n called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\n operation executed in the 3 hours that follows this update was indeed scheduled before this update.\n Requirements:\n - the caller must be an admin for the role (see {getRoleAdmin})\n - granted role must not be the `PUBLIC_ROLE`\n Emits a {RoleGranted} event."},"functionSelector":"25c471a0","id":1144,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"9784:9:7","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"roleId","nameLocation":"9801:6:7","nodeType":"VariableDeclaration","scope":1144,"src":"9794:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1136,"name":"uint64","nodeType":"ElementaryTypeName","src":"9794:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"account","nameLocation":"9817:7:7","nodeType":"VariableDeclaration","scope":1144,"src":"9809:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"9809:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"executionDelay","nameLocation":"9833:14:7","nodeType":"VariableDeclaration","scope":1144,"src":"9826:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1140,"name":"uint32","nodeType":"ElementaryTypeName","src":"9826:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"9793:55:7"},"returnParameters":{"id":1143,"nodeType":"ParameterList","parameters":[],"src":"9857:0:7"},"scope":1292,"src":"9775:83:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1145,"nodeType":"StructuredDocumentation","src":"9864:377:7","text":" @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\n no effect.\n Requirements:\n - the caller must be an admin for the role (see {getRoleAdmin})\n - revoked role must not be the `PUBLIC_ROLE`\n Emits a {RoleRevoked} event if the account had the role."},"functionSelector":"b7d2b162","id":1152,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"10255:10:7","nodeType":"FunctionDefinition","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"roleId","nameLocation":"10273:6:7","nodeType":"VariableDeclaration","scope":1152,"src":"10266:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1146,"name":"uint64","nodeType":"ElementaryTypeName","src":"10266:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"account","nameLocation":"10289:7:7","nodeType":"VariableDeclaration","scope":1152,"src":"10281:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"10281:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10265:32:7"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[],"src":"10306:0:7"},"scope":1292,"src":"10246:61:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"10313:317:7","text":" @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\n the role this call has no effect.\n Requirements:\n - the caller must be `callerConfirmation`.\n Emits a {RoleRevoked} event if the account had the role."},"functionSelector":"fe0776f5","id":1160,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"10644:12:7","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"roleId","nameLocation":"10664:6:7","nodeType":"VariableDeclaration","scope":1160,"src":"10657:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1154,"name":"uint64","nodeType":"ElementaryTypeName","src":"10657:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"callerConfirmation","nameLocation":"10680:18:7","nodeType":"VariableDeclaration","scope":1160,"src":"10672:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1156,"name":"address","nodeType":"ElementaryTypeName","src":"10672:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10656:43:7"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[],"src":"10708:0:7"},"scope":1292,"src":"10635:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"10715:184:7","text":" @dev Change admin role for a given role.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleAdminChanged} event"},"functionSelector":"30cae187","id":1168,"implemented":false,"kind":"function","modifiers":[],"name":"setRoleAdmin","nameLocation":"10913:12:7","nodeType":"FunctionDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"roleId","nameLocation":"10933:6:7","nodeType":"VariableDeclaration","scope":1168,"src":"10926:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1162,"name":"uint64","nodeType":"ElementaryTypeName","src":"10926:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"admin","nameLocation":"10948:5:7","nodeType":"VariableDeclaration","scope":1168,"src":"10941:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1164,"name":"uint64","nodeType":"ElementaryTypeName","src":"10941:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10925:29:7"},"returnParameters":{"id":1167,"nodeType":"ParameterList","parameters":[],"src":"10963:0:7"},"scope":1292,"src":"10904:60:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"10970:190:7","text":" @dev Change guardian role for a given role.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleGuardianChanged} event"},"functionSelector":"52962952","id":1176,"implemented":false,"kind":"function","modifiers":[],"name":"setRoleGuardian","nameLocation":"11174:15:7","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"roleId","nameLocation":"11197:6:7","nodeType":"VariableDeclaration","scope":1176,"src":"11190:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1170,"name":"uint64","nodeType":"ElementaryTypeName","src":"11190:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"guardian","nameLocation":"11212:8:7","nodeType":"VariableDeclaration","scope":1176,"src":"11205:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1172,"name":"uint64","nodeType":"ElementaryTypeName","src":"11205:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11189:32:7"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"11230:0:7"},"scope":1292,"src":"11165:66:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"11237:196:7","text":" @dev Update the delay for granting a `roleId`.\n Requirements:\n - the caller must be a global admin\n Emits a {RoleGrantDelayChanged} event."},"functionSelector":"a64d95ce","id":1184,"implemented":false,"kind":"function","modifiers":[],"name":"setGrantDelay","nameLocation":"11447:13:7","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"roleId","nameLocation":"11468:6:7","nodeType":"VariableDeclaration","scope":1184,"src":"11461:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1178,"name":"uint64","nodeType":"ElementaryTypeName","src":"11461:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"newDelay","nameLocation":"11483:8:7","nodeType":"VariableDeclaration","scope":1184,"src":"11476:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1180,"name":"uint32","nodeType":"ElementaryTypeName","src":"11476:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"11460:32:7"},"returnParameters":{"id":1183,"nodeType":"ParameterList","parameters":[],"src":"11501:0:7"},"scope":1292,"src":"11438:64:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"11508:267:7","text":" @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetFunctionRoleUpdated} event per selector."},"functionSelector":"08d6122d","id":1195,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetFunctionRole","nameLocation":"11789:21:7","nodeType":"FunctionDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"target","nameLocation":"11819:6:7","nodeType":"VariableDeclaration","scope":1195,"src":"11811:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"11811:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1190,"mutability":"mutable","name":"selectors","nameLocation":"11845:9:7","nodeType":"VariableDeclaration","scope":1195,"src":"11827:27:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_calldata_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":1188,"name":"bytes4","nodeType":"ElementaryTypeName","src":"11827:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1189,"nodeType":"ArrayTypeName","src":"11827:8:7","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"roleId","nameLocation":"11863:6:7","nodeType":"VariableDeclaration","scope":1195,"src":"11856:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1191,"name":"uint64","nodeType":"ElementaryTypeName","src":"11856:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11810:60:7"},"returnParameters":{"id":1194,"nodeType":"ParameterList","parameters":[],"src":"11879:0:7"},"scope":1292,"src":"11780:100:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"11886:229:7","text":" @dev Set the delay for changing the configuration of a given target contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetAdminDelayUpdated} event."},"functionSelector":"d22b5989","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetAdminDelay","nameLocation":"12129:19:7","nodeType":"FunctionDefinition","parameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"target","nameLocation":"12157:6:7","nodeType":"VariableDeclaration","scope":1203,"src":"12149:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"12149:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"newDelay","nameLocation":"12172:8:7","nodeType":"VariableDeclaration","scope":1203,"src":"12165:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1199,"name":"uint32","nodeType":"ElementaryTypeName","src":"12165:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12148:33:7"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[],"src":"12190:0:7"},"scope":1292,"src":"12120:71:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"12197:181:7","text":" @dev Set the closed flag for a contract.\n Requirements:\n - the caller must be a global admin\n Emits a {TargetClosed} event."},"functionSelector":"167bd395","id":1211,"implemented":false,"kind":"function","modifiers":[],"name":"setTargetClosed","nameLocation":"12392:15:7","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"target","nameLocation":"12416:6:7","nodeType":"VariableDeclaration","scope":1211,"src":"12408:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"12408:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"closed","nameLocation":"12429:6:7","nodeType":"VariableDeclaration","scope":1211,"src":"12424:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1207,"name":"bool","nodeType":"ElementaryTypeName","src":"12424:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12407:29:7"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"12445:0:7"},"scope":1292,"src":"12383:63:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"12452:209:7","text":" @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\n operation is not yet scheduled, has expired, was executed, or was canceled."},"functionSelector":"3adc277a","id":1219,"implemented":false,"kind":"function","modifiers":[],"name":"getSchedule","nameLocation":"12675:11:7","nodeType":"FunctionDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"id","nameLocation":"12695:2:7","nodeType":"VariableDeclaration","scope":1219,"src":"12687:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12687:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12686:12:7"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1219,"src":"12722:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1216,"name":"uint48","nodeType":"ElementaryTypeName","src":"12722:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"12721:8:7"},"scope":1292,"src":"12666:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"12736:152:7","text":" @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\n been scheduled."},"functionSelector":"4136a33c","id":1227,"implemented":false,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"12902:8:7","nodeType":"FunctionDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"id","nameLocation":"12919:2:7","nodeType":"VariableDeclaration","scope":1227,"src":"12911:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12911:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12910:12:7"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1227,"src":"12946:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1224,"name":"uint32","nodeType":"ElementaryTypeName","src":"12946:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"12945:8:7"},"scope":1292,"src":"12893:61:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"12960:1068:7","text":" @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\n choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\n required for the caller. The special value zero will automatically set the earliest possible time.\n Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\n the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\n scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\n Emits a {OperationScheduled} event.\n NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\n this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\n contract if it is using standard Solidity ABI encoding."},"functionSelector":"f801a698","id":1241,"implemented":false,"kind":"function","modifiers":[],"name":"schedule","nameLocation":"14042:8:7","nodeType":"FunctionDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"target","nameLocation":"14059:6:7","nodeType":"VariableDeclaration","scope":1241,"src":"14051:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"14051:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"data","nameLocation":"14082:4:7","nodeType":"VariableDeclaration","scope":1241,"src":"14067:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1231,"name":"bytes","nodeType":"ElementaryTypeName","src":"14067:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"when","nameLocation":"14095:4:7","nodeType":"VariableDeclaration","scope":1241,"src":"14088:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1233,"name":"uint48","nodeType":"ElementaryTypeName","src":"14088:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14050:50:7"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1241,"src":"14119:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14119:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1241,"src":"14128:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1238,"name":"uint32","nodeType":"ElementaryTypeName","src":"14128:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14118:17:7"},"scope":1292,"src":"14033:103:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"14142:451:7","text":" @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\n execution delay is 0.\n Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\n operation wasn't previously scheduled (if the caller doesn't have an execution delay).\n Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"functionSelector":"1cff79cd","id":1251,"implemented":false,"kind":"function","modifiers":[],"name":"execute","nameLocation":"14607:7:7","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"target","nameLocation":"14623:6:7","nodeType":"VariableDeclaration","scope":1251,"src":"14615:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"14615:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"data","nameLocation":"14646:4:7","nodeType":"VariableDeclaration","scope":1251,"src":"14631:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1245,"name":"bytes","nodeType":"ElementaryTypeName","src":"14631:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14614:37:7"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1251,"src":"14678:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1248,"name":"uint32","nodeType":"ElementaryTypeName","src":"14678:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"14677:8:7"},"scope":1292,"src":"14598:88:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"14692:339:7","text":" @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\n operation that is cancelled.\n Requirements:\n - the caller must be the proposer, a guardian of the targeted function, or a global admin\n Emits a {OperationCanceled} event."},"functionSelector":"d6bb62c6","id":1263,"implemented":false,"kind":"function","modifiers":[],"name":"cancel","nameLocation":"15045:6:7","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"caller","nameLocation":"15060:6:7","nodeType":"VariableDeclaration","scope":1263,"src":"15052:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1253,"name":"address","nodeType":"ElementaryTypeName","src":"15052:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"target","nameLocation":"15076:6:7","nodeType":"VariableDeclaration","scope":1263,"src":"15068:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"15068:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"data","nameLocation":"15099:4:7","nodeType":"VariableDeclaration","scope":1263,"src":"15084:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1257,"name":"bytes","nodeType":"ElementaryTypeName","src":"15084:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15051:53:7"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1263,"src":"15123:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1260,"name":"uint32","nodeType":"ElementaryTypeName","src":"15123:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15122:8:7"},"scope":1292,"src":"15036:95:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1264,"nodeType":"StructuredDocumentation","src":"15137:434:7","text":" @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\n (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\n This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\n with all the verifications that it implies.\n Emit a {OperationExecuted} event."},"functionSelector":"94c7d7ee","id":1271,"implemented":false,"kind":"function","modifiers":[],"name":"consumeScheduledOp","nameLocation":"15585:18:7","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"caller","nameLocation":"15612:6:7","nodeType":"VariableDeclaration","scope":1271,"src":"15604:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"15604:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"data","nameLocation":"15635:4:7","nodeType":"VariableDeclaration","scope":1271,"src":"15620:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1267,"name":"bytes","nodeType":"ElementaryTypeName","src":"15620:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15603:37:7"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"15649:0:7"},"scope":1292,"src":"15576:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1272,"nodeType":"StructuredDocumentation","src":"15656:64:7","text":" @dev Hashing function for delayed operations."},"functionSelector":"abd9bd2a","id":1283,"implemented":false,"kind":"function","modifiers":[],"name":"hashOperation","nameLocation":"15734:13:7","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"caller","nameLocation":"15756:6:7","nodeType":"VariableDeclaration","scope":1283,"src":"15748:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"15748:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"target","nameLocation":"15772:6:7","nodeType":"VariableDeclaration","scope":1283,"src":"15764:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"15764:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"data","nameLocation":"15795:4:7","nodeType":"VariableDeclaration","scope":1283,"src":"15780:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1277,"name":"bytes","nodeType":"ElementaryTypeName","src":"15780:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15747:53:7"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1283,"src":"15824:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15824:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15823:9:7"},"scope":1292,"src":"15725:108:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1284,"nodeType":"StructuredDocumentation","src":"15839:169:7","text":" @dev Changes the authority of a target managed by this manager instance.\n Requirements:\n - the caller must be a global admin"},"functionSelector":"18ff183c","id":1291,"implemented":false,"kind":"function","modifiers":[],"name":"updateAuthority","nameLocation":"16022:15:7","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"target","nameLocation":"16046:6:7","nodeType":"VariableDeclaration","scope":1291,"src":"16038:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"16038:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1288,"mutability":"mutable","name":"newAuthority","nameLocation":"16062:12:7","nodeType":"VariableDeclaration","scope":1291,"src":"16054:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"16054:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16037:38:7"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[],"src":"16084:0:7"},"scope":1292,"src":"16013:72:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1293,"src":"246:15841:7","usedErrors":[968,972,976,980,984,988,990,996,1004,1008,1018,1022],"usedEvents":[875,882,889,896,909,916,923,930,939,946,955,964]}],"src":"117:15971:7"},"id":7},"@openzeppelin/contracts/access/manager/IAuthority.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/manager/IAuthority.sol","exportedSymbols":{"IAuthority":[1308]},"id":1309,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1294,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IAuthority","contractDependencies":[],"contractKind":"interface","documentation":{"id":1295,"nodeType":"StructuredDocumentation","src":"139:83:8","text":" @dev Standard interface for permissioning originally defined in Dappsys."},"fullyImplemented":false,"id":1308,"linearizedBaseContracts":[1308],"name":"IAuthority","nameLocation":"233:10:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"250:121:8","text":" @dev Returns true if the caller can invoke on a target the function identified by a function selector."},"functionSelector":"b7009613","id":1307,"implemented":false,"kind":"function","modifiers":[],"name":"canCall","nameLocation":"385:7:8","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"caller","nameLocation":"401:6:8","nodeType":"VariableDeclaration","scope":1307,"src":"393:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1300,"mutability":"mutable","name":"target","nameLocation":"417:6:8","nodeType":"VariableDeclaration","scope":1307,"src":"409:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"selector","nameLocation":"432:8:8","nodeType":"VariableDeclaration","scope":1307,"src":"425:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1301,"name":"bytes4","nodeType":"ElementaryTypeName","src":"425:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"392:49:8"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"allowed","nameLocation":"470:7:8","nodeType":"VariableDeclaration","scope":1307,"src":"465:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1304,"name":"bool","nodeType":"ElementaryTypeName","src":"465:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"464:14:8"},"scope":1308,"src":"376:103:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1309,"src":"223:258:8","usedErrors":[],"usedEvents":[]}],"src":"113:369:8"},"id":8},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[1445],"IERC20Errors":[1350],"IERC721Errors":[1398]},"id":1446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1310,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"138:139:9","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":1350,"linearizedBaseContracts":[1350],"name":"IERC20Errors","nameLocation":"288:12:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"307:309:9","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":1320,"name":"ERC20InsufficientBalance","nameLocation":"627:24:9","nodeType":"ErrorDefinition","parameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"sender","nameLocation":"660:6:9","nodeType":"VariableDeclaration","scope":1320,"src":"652:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"balance","nameLocation":"676:7:9","nodeType":"VariableDeclaration","scope":1320,"src":"668:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1315,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"needed","nameLocation":"693:6:9","nodeType":"VariableDeclaration","scope":1320,"src":"685:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:9"},"src":"621:80:9"},{"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"707:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":1325,"name":"ERC20InvalidSender","nameLocation":"870:18:9","nodeType":"ErrorDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"sender","nameLocation":"897:6:9","nodeType":"VariableDeclaration","scope":1325,"src":"889:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:9"},"src":"864:41:9"},{"documentation":{"id":1326,"nodeType":"StructuredDocumentation","src":"911:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":1330,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:9","nodeType":"ErrorDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:9","nodeType":"VariableDeclaration","scope":1330,"src":"1102:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:9"},"src":"1075:45:9"},{"documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"1126:345:9","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":1339,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:9","nodeType":"ErrorDefinition","parameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"spender","nameLocation":"1517:7:9","nodeType":"VariableDeclaration","scope":1339,"src":"1509:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1332,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1335,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:9","nodeType":"VariableDeclaration","scope":1339,"src":"1526:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1334,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"needed","nameLocation":"1553:6:9","nodeType":"VariableDeclaration","scope":1339,"src":"1545:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:9"},"src":"1476:85:9"},{"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"1567:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":1344,"name":"ERC20InvalidApprover","nameLocation":"1752:20:9","nodeType":"ErrorDefinition","parameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"approver","nameLocation":"1781:8:9","nodeType":"VariableDeclaration","scope":1344,"src":"1773:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1341,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:9"},"src":"1746:45:9"},{"documentation":{"id":1345,"nodeType":"StructuredDocumentation","src":"1797:195:9","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":1349,"name":"ERC20InvalidSpender","nameLocation":"2003:19:9","nodeType":"ErrorDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"spender","nameLocation":"2031:7:9","nodeType":"VariableDeclaration","scope":1349,"src":"2023:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:9"},"src":"1997:43:9"}],"scope":1446,"src":"278:1764:9","usedErrors":[1320,1325,1330,1339,1344,1349],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1351,"nodeType":"StructuredDocumentation","src":"2044:141:9","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":1398,"linearizedBaseContracts":[1398],"name":"IERC721Errors","nameLocation":"2196:13:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"2216:219:9","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":1356,"name":"ERC721InvalidOwner","nameLocation":"2446:18:9","nodeType":"ErrorDefinition","parameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"owner","nameLocation":"2473:5:9","nodeType":"VariableDeclaration","scope":1356,"src":"2465:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:9"},"src":"2440:40:9"},{"documentation":{"id":1357,"nodeType":"StructuredDocumentation","src":"2486:132:9","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":1361,"name":"ERC721NonexistentToken","nameLocation":"2629:22:9","nodeType":"ErrorDefinition","parameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:9","nodeType":"VariableDeclaration","scope":1361,"src":"2652:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:9"},"src":"2623:46:9"},{"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"2675:289:9","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":1370,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:9","nodeType":"ErrorDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"sender","nameLocation":"3004:6:9","nodeType":"VariableDeclaration","scope":1370,"src":"2996:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:9","nodeType":"VariableDeclaration","scope":1370,"src":"3012:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"owner","nameLocation":"3037:5:9","nodeType":"VariableDeclaration","scope":1370,"src":"3029:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:9"},"src":"2969:75:9"},{"documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"3050:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":1375,"name":"ERC721InvalidSender","nameLocation":"3213:19:9","nodeType":"ErrorDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"sender","nameLocation":"3241:6:9","nodeType":"VariableDeclaration","scope":1375,"src":"3233:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1372,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:9"},"src":"3207:42:9"},{"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"3255:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":1380,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:9","nodeType":"ErrorDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:9","nodeType":"VariableDeclaration","scope":1380,"src":"3447:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:9"},"src":"3419:46:9"},{"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"3471:247:9","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":1387,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:9","nodeType":"ErrorDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"mutability":"mutable","name":"operator","nameLocation":"3764:8:9","nodeType":"VariableDeclaration","scope":1387,"src":"3756:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:9","nodeType":"VariableDeclaration","scope":1387,"src":"3774:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:9"},"src":"3723:68:9"},{"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"3797:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":1392,"name":"ERC721InvalidApprover","nameLocation":"3982:21:9","nodeType":"ErrorDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"approver","nameLocation":"4012:8:9","nodeType":"VariableDeclaration","scope":1392,"src":"4004:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:9"},"src":"3976:46:9"},{"documentation":{"id":1393,"nodeType":"StructuredDocumentation","src":"4028:197:9","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":1397,"name":"ERC721InvalidOperator","nameLocation":"4236:21:9","nodeType":"ErrorDefinition","parameters":{"id":1396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"mutability":"mutable","name":"operator","nameLocation":"4266:8:9","nodeType":"VariableDeclaration","scope":1397,"src":"4258:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1394,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:9"},"src":"4230:46:9"}],"scope":1446,"src":"2186:2092:9","usedErrors":[1356,1361,1370,1375,1380,1387,1392,1397],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"4280:143:9","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":1445,"linearizedBaseContracts":[1445],"name":"IERC1155Errors","nameLocation":"4434:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"4455:361:9","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":1410,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:9","nodeType":"ErrorDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"sender","nameLocation":"4862:6:9","nodeType":"VariableDeclaration","scope":1410,"src":"4854:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1401,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"balance","nameLocation":"4878:7:9","nodeType":"VariableDeclaration","scope":1410,"src":"4870:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1403,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"needed","nameLocation":"4895:6:9","nodeType":"VariableDeclaration","scope":1410,"src":"4887:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:9","nodeType":"VariableDeclaration","scope":1410,"src":"4903:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:9"},"src":"4821:99:9"},{"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"4926:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":1415,"name":"ERC1155InvalidSender","nameLocation":"5089:20:9","nodeType":"ErrorDefinition","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"sender","nameLocation":"5118:6:9","nodeType":"VariableDeclaration","scope":1415,"src":"5110:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1412,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:9"},"src":"5083:43:9"},{"documentation":{"id":1416,"nodeType":"StructuredDocumentation","src":"5132:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":1420,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:9","nodeType":"ErrorDefinition","parameters":{"id":1419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:9","nodeType":"VariableDeclaration","scope":1420,"src":"5325:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:9"},"src":"5296:47:9"},{"documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"5349:256:9","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":1427,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:9","nodeType":"ErrorDefinition","parameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"operator","nameLocation":"5653:8:9","nodeType":"VariableDeclaration","scope":1427,"src":"5645:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1422,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1425,"mutability":"mutable","name":"owner","nameLocation":"5671:5:9","nodeType":"VariableDeclaration","scope":1427,"src":"5663:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:9"},"src":"5610:68:9"},{"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"5684:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":1432,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:9","nodeType":"ErrorDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"approver","nameLocation":"5900:8:9","nodeType":"VariableDeclaration","scope":1432,"src":"5892:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1429,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:9"},"src":"5863:47:9"},{"documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"5916:197:9","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":1437,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:9","nodeType":"ErrorDefinition","parameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"operator","nameLocation":"6155:8:9","nodeType":"VariableDeclaration","scope":1437,"src":"6147:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1434,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:9"},"src":"6118:47:9"},{"documentation":{"id":1438,"nodeType":"StructuredDocumentation","src":"6171:280:9","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":1444,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:9","nodeType":"ErrorDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:9","nodeType":"VariableDeclaration","scope":1444,"src":"6488:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:9","nodeType":"VariableDeclaration","scope":1444,"src":"6507:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:9"},"src":"6456:73:9"}],"scope":1446,"src":"4424:2107:9","usedErrors":[1410,1415,1420,1427,1432,1437,1444],"usedEvents":[]}],"src":"112:6420:9"},"id":9},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[2094],"ERC20":[1960],"IERC20":[2038],"IERC20Errors":[1350],"IERC20Metadata":[2064]},"id":1961,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1447,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":1449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1961,"sourceUnit":2039,"src":"131:36:10","symbolAliases":[{"foreign":{"id":1448,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"139:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":1451,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1961,"sourceUnit":2065,"src":"168:63:10","symbolAliases":[{"foreign":{"id":1450,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"176:14:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1961,"sourceUnit":2095,"src":"232:48:10","symbolAliases":[{"foreign":{"id":1452,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"240:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":1455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1961,"sourceUnit":1446,"src":"281:65:10","symbolAliases":[{"foreign":{"id":1454,"name":"IERC20Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"289:12:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1457,"name":"Context","nameLocations":["1428:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2094,"src":"1428:7:10"},"id":1458,"nodeType":"InheritanceSpecifier","src":"1428:7:10"},{"baseName":{"id":1459,"name":"IERC20","nameLocations":["1437:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"1437:6:10"},"id":1460,"nodeType":"InheritanceSpecifier","src":"1437:6:10"},{"baseName":{"id":1461,"name":"IERC20Metadata","nameLocations":["1445:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":2064,"src":"1445:14:10"},"id":1462,"nodeType":"InheritanceSpecifier","src":"1445:14:10"},{"baseName":{"id":1463,"name":"IERC20Errors","nameLocations":["1461:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":1350,"src":"1461:12:10"},"id":1464,"nodeType":"InheritanceSpecifier","src":"1461:12:10"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"348:1052:10","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."},"fullyImplemented":true,"id":1960,"linearizedBaseContracts":[1960,1350,2064,2038,2094],"name":"ERC20","nameLocation":"1419:5:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1468,"mutability":"mutable","name":"_balances","nameLocation":"1524:9:10","nodeType":"VariableDeclaration","scope":1960,"src":"1480:53:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1467,"keyName":"account","keyNameLocation":"1496:7:10","keyType":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"1488:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1480:35:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1474,"mutability":"mutable","name":"_allowances","nameLocation":"1612:11:10","nodeType":"VariableDeclaration","scope":1960,"src":"1540:83:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":1473,"keyName":"account","keyNameLocation":"1556:7:10","keyType":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1540:63:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1472,"keyName":"spender","keyNameLocation":"1583:7:10","keyType":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"1575:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1567:35:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":1476,"mutability":"mutable","name":"_totalSupply","nameLocation":"1646:12:10","nodeType":"VariableDeclaration","scope":1960,"src":"1630:28:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1475,"name":"uint256","nodeType":"ElementaryTypeName","src":"1630:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1478,"mutability":"mutable","name":"_name","nameLocation":"1680:5:10","nodeType":"VariableDeclaration","scope":1960,"src":"1665:20:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1477,"name":"string","nodeType":"ElementaryTypeName","src":"1665:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1480,"mutability":"mutable","name":"_symbol","nameLocation":"1706:7:10","nodeType":"VariableDeclaration","scope":1960,"src":"1691:22:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1479,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":1496,"nodeType":"Block","src":"1952:57:10","statements":[{"expression":{"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1488,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1962:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1489,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"1970:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1962:13:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1491,"nodeType":"ExpressionStatement","src":"1962:13:10"},{"expression":{"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1492,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"1985:7:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1493,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"1995:7:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1985:17:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1495,"nodeType":"ExpressionStatement","src":"1985:17:10"}]},"documentation":{"id":1481,"nodeType":"StructuredDocumentation","src":"1720:171:10","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":1497,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1483,"mutability":"mutable","name":"name_","nameLocation":"1922:5:10","nodeType":"VariableDeclaration","scope":1497,"src":"1908:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1482,"name":"string","nodeType":"ElementaryTypeName","src":"1908:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"symbol_","nameLocation":"1943:7:10","nodeType":"VariableDeclaration","scope":1497,"src":"1929:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1484,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1907:44:10"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"1952:0:10"},"scope":1960,"src":"1896:113:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2051],"body":{"id":1505,"nodeType":"Block","src":"2134:29:10","statements":[{"expression":{"id":1503,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2151:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1502,"id":1504,"nodeType":"Return","src":"2144:12:10"}]},"documentation":{"id":1498,"nodeType":"StructuredDocumentation","src":"2015:54:10","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1506,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2083:4:10","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[],"src":"2087:2:10"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1506,"src":"2119:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1500,"name":"string","nodeType":"ElementaryTypeName","src":"2119:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2118:15:10"},"scope":1960,"src":"2074:89:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2057],"body":{"id":1514,"nodeType":"Block","src":"2338:31:10","statements":[{"expression":{"id":1512,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"2355:7:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1511,"id":1513,"nodeType":"Return","src":"2348:14:10"}]},"documentation":{"id":1507,"nodeType":"StructuredDocumentation","src":"2169:102:10","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":1515,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2285:6:10","nodeType":"FunctionDefinition","parameters":{"id":1508,"nodeType":"ParameterList","parameters":[],"src":"2291:2:10"},"returnParameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1515,"src":"2323:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1509,"name":"string","nodeType":"ElementaryTypeName","src":"2323:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2322:15:10"},"scope":1960,"src":"2276:93:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2063],"body":{"id":1523,"nodeType":"Block","src":"3058:26:10","statements":[{"expression":{"hexValue":"3138","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3075:2:10","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":1520,"id":1522,"nodeType":"Return","src":"3068:9:10"}]},"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"2375:622:10","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":1524,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3011:8:10","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[],"src":"3019:2:10"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1524,"src":"3051:5:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1518,"name":"uint8","nodeType":"ElementaryTypeName","src":"3051:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3050:7:10"},"scope":1960,"src":"3002:82:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1987],"body":{"id":1532,"nodeType":"Block","src":"3205:36:10","statements":[{"expression":{"id":1530,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"3222:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1529,"id":1531,"nodeType":"Return","src":"3215:19:10"}]},"documentation":{"id":1525,"nodeType":"StructuredDocumentation","src":"3090:49:10","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":1533,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3153:11:10","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[],"src":"3164:2:10"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1533,"src":"3196:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"3196:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3195:9:10"},"scope":1960,"src":"3144:97:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1995],"body":{"id":1545,"nodeType":"Block","src":"3373:42:10","statements":[{"expression":{"baseExpression":{"id":1541,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"3390:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1543,"indexExpression":{"id":1542,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"3400:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3390:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1540,"id":1544,"nodeType":"Return","src":"3383:25:10"}]},"documentation":{"id":1534,"nodeType":"StructuredDocumentation","src":"3247:47:10","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":1546,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3308:9:10","nodeType":"FunctionDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"account","nameLocation":"3326:7:10","nodeType":"VariableDeclaration","scope":1546,"src":"3318:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1535,"name":"address","nodeType":"ElementaryTypeName","src":"3318:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3317:17:10"},"returnParameters":{"id":1540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1546,"src":"3364:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1538,"name":"uint256","nodeType":"ElementaryTypeName","src":"3364:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3363:9:10"},"scope":1960,"src":"3299:116:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2005],"body":{"id":1569,"nodeType":"Block","src":"3685:103:10","statements":[{"assignments":[1557],"declarations":[{"constant":false,"id":1557,"mutability":"mutable","name":"owner","nameLocation":"3703:5:10","nodeType":"VariableDeclaration","scope":1569,"src":"3695:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1556,"name":"address","nodeType":"ElementaryTypeName","src":"3695:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1560,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1558,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"3711:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3695:28:10"},{"expression":{"arguments":[{"id":1562,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"3743:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1563,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"3750:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"3754:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1561,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3733:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3733:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"ExpressionStatement","src":"3733:27:10"},{"expression":{"hexValue":"74727565","id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3777:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1555,"id":1568,"nodeType":"Return","src":"3770:11:10"}]},"documentation":{"id":1547,"nodeType":"StructuredDocumentation","src":"3421:184:10","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."},"functionSelector":"a9059cbb","id":1570,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3619:8:10","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"to","nameLocation":"3636:2:10","nodeType":"VariableDeclaration","scope":1570,"src":"3628:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1548,"name":"address","nodeType":"ElementaryTypeName","src":"3628:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"value","nameLocation":"3648:5:10","nodeType":"VariableDeclaration","scope":1570,"src":"3640:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3627:27:10"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"3679:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1553,"name":"bool","nodeType":"ElementaryTypeName","src":"3679:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3678:6:10"},"scope":1960,"src":"3610:178:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2015],"body":{"id":1586,"nodeType":"Block","src":"3935:51:10","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1580,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"3952:11:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1582,"indexExpression":{"id":1581,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"3964:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1584,"indexExpression":{"id":1583,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"3971:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3952:27:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1579,"id":1585,"nodeType":"Return","src":"3945:34:10"}]},"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"3794:47:10","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":1587,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3855:9:10","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"owner","nameLocation":"3873:5:10","nodeType":"VariableDeclaration","scope":1587,"src":"3865:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"3865:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"spender","nameLocation":"3888:7:10","nodeType":"VariableDeclaration","scope":1587,"src":"3880:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"3880:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3864:32:10"},"returnParameters":{"id":1579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1587,"src":"3926:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1577,"name":"uint256","nodeType":"ElementaryTypeName","src":"3926:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3925:9:10"},"scope":1960,"src":"3846:140:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2025],"body":{"id":1610,"nodeType":"Block","src":"4372:107:10","statements":[{"assignments":[1598],"declarations":[{"constant":false,"id":1598,"mutability":"mutable","name":"owner","nameLocation":"4390:5:10","nodeType":"VariableDeclaration","scope":1610,"src":"4382:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"4382:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1601,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1599,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"4398:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4398:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4382:28:10"},{"expression":{"arguments":[{"id":1603,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"4429:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1604,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"4436:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"4445:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1602,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1851,1911],"referencedDeclaration":1851,"src":"4420:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4420:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1607,"nodeType":"ExpressionStatement","src":"4420:31:10"},{"expression":{"hexValue":"74727565","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4468:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1596,"id":1609,"nodeType":"Return","src":"4461:11:10"}]},"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"3992:296:10","text":" @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":1611,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4302:7:10","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"spender","nameLocation":"4318:7:10","nodeType":"VariableDeclaration","scope":1611,"src":"4310:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"4310:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1592,"mutability":"mutable","name":"value","nameLocation":"4335:5:10","nodeType":"VariableDeclaration","scope":1611,"src":"4327:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1591,"name":"uint256","nodeType":"ElementaryTypeName","src":"4327:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4309:32:10"},"returnParameters":{"id":1596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1611,"src":"4366:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1594,"name":"bool","nodeType":"ElementaryTypeName","src":"4366:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:6:10"},"scope":1960,"src":"4293:186:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2037],"body":{"id":1642,"nodeType":"Block","src":"5132:151:10","statements":[{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"spender","nameLocation":"5150:7:10","nodeType":"VariableDeclaration","scope":1642,"src":"5142:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"5142:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1627,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1625,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"5160:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5142:30:10"},{"expression":{"arguments":[{"id":1629,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"5198:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1630,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"5204:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"5213:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1628,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"5182:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5182:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1633,"nodeType":"ExpressionStatement","src":"5182:37:10"},{"expression":{"arguments":[{"id":1635,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"5239:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1636,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5245:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"5249:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1634,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"5229:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5229:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1639,"nodeType":"ExpressionStatement","src":"5229:26:10"},{"expression":{"hexValue":"74727565","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5272:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1622,"id":1641,"nodeType":"Return","src":"5265:11:10"}]},"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"4485:549:10","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."},"functionSelector":"23b872dd","id":1643,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5048:12:10","nodeType":"FunctionDefinition","parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"from","nameLocation":"5069:4:10","nodeType":"VariableDeclaration","scope":1643,"src":"5061:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"to","nameLocation":"5083:2:10","nodeType":"VariableDeclaration","scope":1643,"src":"5075:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1615,"name":"address","nodeType":"ElementaryTypeName","src":"5075:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"value","nameLocation":"5095:5:10","nodeType":"VariableDeclaration","scope":1643,"src":"5087:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1617,"name":"uint256","nodeType":"ElementaryTypeName","src":"5087:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5060:41:10"},"returnParameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1643,"src":"5126:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1620,"name":"bool","nodeType":"ElementaryTypeName","src":"5126:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5125:6:10"},"scope":1960,"src":"5039:244:10","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1689,"nodeType":"Block","src":"5725:231:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1653,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"5739:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5755:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5747:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1654,"name":"address","nodeType":"ElementaryTypeName","src":"5747:7:10","typeDescriptions":{}}},"id":1657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5747:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5739:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1667,"nodeType":"IfStatement","src":"5735:86:10","trueBody":{"id":1666,"nodeType":"Block","src":"5759:62:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5807:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5799:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1660,"name":"address","nodeType":"ElementaryTypeName","src":"5799:7:10","typeDescriptions":{}}},"id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5799:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1659,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"5780:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5780:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1665,"nodeType":"RevertStatement","src":"5773:37:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"5834:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5848:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5840:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1669,"name":"address","nodeType":"ElementaryTypeName","src":"5840:7:10","typeDescriptions":{}}},"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5840:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5834:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1682,"nodeType":"IfStatement","src":"5830:86:10","trueBody":{"id":1681,"nodeType":"Block","src":"5852:64:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5902:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5894:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"5894:7:10","typeDescriptions":{}}},"id":1678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1674,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"5873:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5873:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1680,"nodeType":"RevertStatement","src":"5866:39:10"}]}},{"expression":{"arguments":[{"id":1684,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"5933:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1685,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"5939:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1686,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"5943:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1683,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"5925:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5925:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"5925:24:10"}]},"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"5289:362:10","text":" @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1690,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5665:9:10","nodeType":"FunctionDefinition","parameters":{"id":1651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1646,"mutability":"mutable","name":"from","nameLocation":"5683:4:10","nodeType":"VariableDeclaration","scope":1690,"src":"5675:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"5675:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"to","nameLocation":"5697:2:10","nodeType":"VariableDeclaration","scope":1690,"src":"5689:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1647,"name":"address","nodeType":"ElementaryTypeName","src":"5689:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1650,"mutability":"mutable","name":"value","nameLocation":"5709:5:10","nodeType":"VariableDeclaration","scope":1690,"src":"5701:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"5701:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5674:41:10"},"returnParameters":{"id":1652,"nodeType":"ParameterList","parameters":[],"src":"5725:0:10"},"scope":1960,"src":"5656:300:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1766,"nodeType":"Block","src":"6346:1032:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"6360:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6368:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"6368:7:10","typeDescriptions":{}}},"id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6368:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6360:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1737,"nodeType":"Block","src":"6534:362:10","statements":[{"assignments":[1712],"declarations":[{"constant":false,"id":1712,"mutability":"mutable","name":"fromBalance","nameLocation":"6556:11:10","nodeType":"VariableDeclaration","scope":1737,"src":"6548:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1711,"name":"uint256","nodeType":"ElementaryTypeName","src":"6548:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1716,"initialValue":{"baseExpression":{"id":1713,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"6570:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1715,"indexExpression":{"id":1714,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"6580:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6570:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6548:37:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1717,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"6603:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6617:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6603:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1727,"nodeType":"IfStatement","src":"6599:115:10","trueBody":{"id":1726,"nodeType":"Block","src":"6624:90:10","statements":[{"errorCall":{"arguments":[{"id":1721,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"6674:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1722,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"6680:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6693:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1720,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"6649:24:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6649:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1725,"nodeType":"RevertStatement","src":"6642:57:10"}]}},{"id":1736,"nodeType":"UncheckedBlock","src":"6727:159:10","statements":[{"expression":{"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1728,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"6834:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1730,"indexExpression":{"id":1729,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"6844:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6834:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"6852:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6866:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6852:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6834:37:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1735,"nodeType":"ExpressionStatement","src":"6834:37:10"}]}]},"id":1738,"nodeType":"IfStatement","src":"6356:540:10","trueBody":{"id":1710,"nodeType":"Block","src":"6380:148:10","statements":[{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1706,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"6496:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6512:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6496:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1709,"nodeType":"ExpressionStatement","src":"6496:21:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1739,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"6910:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1740,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:10","typeDescriptions":{}}},"id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6910:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1758,"nodeType":"Block","src":"7125:206:10","statements":[{"id":1757,"nodeType":"UncheckedBlock","src":"7139:182:10","statements":[{"expression":{"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1751,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"7284:9:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1753,"indexExpression":{"id":1752,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"7294:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7284:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"7301:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7284:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1756,"nodeType":"ExpressionStatement","src":"7284:22:10"}]}]},"id":1759,"nodeType":"IfStatement","src":"6906:425:10","trueBody":{"id":1750,"nodeType":"Block","src":"6928:191:10","statements":[{"id":1749,"nodeType":"UncheckedBlock","src":"6942:167:10","statements":[{"expression":{"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1745,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"7073:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"7089:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7073:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1748,"nodeType":"ExpressionStatement","src":"7073:21:10"}]}]}},{"eventCall":{"arguments":[{"id":1761,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"7355:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1762,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"7361:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1763,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"7365:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1760,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"7346:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7346:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1765,"nodeType":"EmitStatement","src":"7341:30:10"}]},"documentation":{"id":1691,"nodeType":"StructuredDocumentation","src":"5962:304:10","text":" @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."},"id":1767,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"6280:7:10","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"from","nameLocation":"6296:4:10","nodeType":"VariableDeclaration","scope":1767,"src":"6288:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1692,"name":"address","nodeType":"ElementaryTypeName","src":"6288:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"to","nameLocation":"6310:2:10","nodeType":"VariableDeclaration","scope":1767,"src":"6302:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1694,"name":"address","nodeType":"ElementaryTypeName","src":"6302:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"value","nameLocation":"6322:5:10","nodeType":"VariableDeclaration","scope":1767,"src":"6314:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"6314:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6287:41:10"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[],"src":"6346:0:10"},"scope":1960,"src":"6271:1107:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1799,"nodeType":"Block","src":"7777:152:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1775,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"7791:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7810:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7802:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"7802:7:10","typeDescriptions":{}}},"id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7802:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7791:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1789,"nodeType":"IfStatement","src":"7787:91:10","trueBody":{"id":1788,"nodeType":"Block","src":"7814:64:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7864:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7856:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1782,"name":"address","nodeType":"ElementaryTypeName","src":"7856:7:10","typeDescriptions":{}}},"id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7856:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1781,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"7835:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7835:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1787,"nodeType":"RevertStatement","src":"7828:39:10"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7903:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7895:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1791,"name":"address","nodeType":"ElementaryTypeName","src":"7895:7:10","typeDescriptions":{}}},"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7895:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1795,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"7907:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"7916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1790,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"7887:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7887:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1798,"nodeType":"ExpressionStatement","src":"7887:35:10"}]},"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"7384:332:10","text":" @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1800,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7730:5:10","nodeType":"FunctionDefinition","parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"account","nameLocation":"7744:7:10","nodeType":"VariableDeclaration","scope":1800,"src":"7736:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"7736:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"value","nameLocation":"7761:5:10","nodeType":"VariableDeclaration","scope":1800,"src":"7753:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"7753:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7735:32:10"},"returnParameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"7777:0:10"},"scope":1960,"src":"7721:208:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1832,"nodeType":"Block","src":"8303:150:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1808,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"8317:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8336:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8328:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"8328:7:10","typeDescriptions":{}}},"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8328:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8317:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1822,"nodeType":"IfStatement","src":"8313:89:10","trueBody":{"id":1821,"nodeType":"Block","src":"8340:62:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8388:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8380:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"8380:7:10","typeDescriptions":{}}},"id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8380:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1814,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"8361:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8361:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1820,"nodeType":"RevertStatement","src":"8354:37:10"}]}},{"expression":{"arguments":[{"id":1824,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"8419:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8436:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8428:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"8428:7:10","typeDescriptions":{}}},"id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8428:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"8440:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1823,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"8411:7:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8411:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1831,"nodeType":"ExpressionStatement","src":"8411:35:10"}]},"documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"7935:307:10","text":" @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"},"id":1833,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"8256:5:10","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1803,"mutability":"mutable","name":"account","nameLocation":"8270:7:10","nodeType":"VariableDeclaration","scope":1833,"src":"8262:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1802,"name":"address","nodeType":"ElementaryTypeName","src":"8262:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1805,"mutability":"mutable","name":"value","nameLocation":"8287:5:10","nodeType":"VariableDeclaration","scope":1833,"src":"8279:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"8279:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8261:32:10"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[],"src":"8303:0:10"},"scope":1960,"src":"8247:206:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1850,"nodeType":"Block","src":"9063:54:10","statements":[{"expression":{"arguments":[{"id":1844,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"9082:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1845,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"9089:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"9098:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9105:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1843,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1851,1911],"referencedDeclaration":1911,"src":"9073:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9073:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1849,"nodeType":"ExpressionStatement","src":"9073:37:10"}]},"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"8459:525:10","text":" @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1851,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"8998:8:10","nodeType":"FunctionDefinition","parameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"owner","nameLocation":"9015:5:10","nodeType":"VariableDeclaration","scope":1851,"src":"9007:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"9007:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"spender","nameLocation":"9030:7:10","nodeType":"VariableDeclaration","scope":1851,"src":"9022:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1837,"name":"address","nodeType":"ElementaryTypeName","src":"9022:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"value","nameLocation":"9047:5:10","nodeType":"VariableDeclaration","scope":1851,"src":"9039:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"9039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9006:47:10"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[],"src":"9063:0:10"},"scope":1960,"src":"8989:128:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1910,"nodeType":"Block","src":"10047:334:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"10061:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10078:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10070:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"10070:7:10","typeDescriptions":{}}},"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10070:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10061:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1877,"nodeType":"IfStatement","src":"10057:89:10","trueBody":{"id":1876,"nodeType":"Block","src":"10082:64:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10124:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1870,"name":"address","nodeType":"ElementaryTypeName","src":"10124:7:10","typeDescriptions":{}}},"id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10124:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1869,"name":"ERC20InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"10103:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10103:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1875,"nodeType":"RevertStatement","src":"10096:39:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1878,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"10159:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10178:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10170:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1879,"name":"address","nodeType":"ElementaryTypeName","src":"10170:7:10","typeDescriptions":{}}},"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10170:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10159:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1892,"nodeType":"IfStatement","src":"10155:90:10","trueBody":{"id":1891,"nodeType":"Block","src":"10182:63:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10231:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10223:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"10223:7:10","typeDescriptions":{}}},"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10223:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1884,"name":"ERC20InvalidSpender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"10203:19:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10203:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1890,"nodeType":"RevertStatement","src":"10196:38:10"}]}},{"expression":{"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1893,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"10254:11:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1896,"indexExpression":{"id":1894,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"10266:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10254:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1897,"indexExpression":{"id":1895,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"10273:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10254:27:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"10284:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10254:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"nodeType":"ExpressionStatement","src":"10254:35:10"},{"condition":{"id":1901,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"10303:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1909,"nodeType":"IfStatement","src":"10299:76:10","trueBody":{"id":1908,"nodeType":"Block","src":"10314:61:10","statements":[{"eventCall":{"arguments":[{"id":1903,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"10342:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1904,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"10349:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1905,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"10358:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1902,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"10333:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10333:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1907,"nodeType":"EmitStatement","src":"10328:36:10"}]}}]},"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"9123:821:10","text":" @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."},"id":1911,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"9958:8:10","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"owner","nameLocation":"9975:5:10","nodeType":"VariableDeclaration","scope":1911,"src":"9967:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"9967:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"spender","nameLocation":"9990:7:10","nodeType":"VariableDeclaration","scope":1911,"src":"9982:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1855,"name":"address","nodeType":"ElementaryTypeName","src":"9982:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"value","nameLocation":"10007:5:10","nodeType":"VariableDeclaration","scope":1911,"src":"9999:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"9999:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"emitEvent","nameLocation":"10019:9:10","nodeType":"VariableDeclaration","scope":1911,"src":"10014:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1859,"name":"bool","nodeType":"ElementaryTypeName","src":"10014:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9966:63:10"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[],"src":"10047:0:10"},"scope":1960,"src":"9949:432:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1958,"nodeType":"Block","src":"10752:388:10","statements":[{"assignments":[1922],"declarations":[{"constant":false,"id":1922,"mutability":"mutable","name":"currentAllowance","nameLocation":"10770:16:10","nodeType":"VariableDeclaration","scope":1958,"src":"10762:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"10762:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1927,"initialValue":{"arguments":[{"id":1924,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"10799:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1925,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"10806:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1923,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"10789:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10789:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10762:52:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1928,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"10828:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10853:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1930,"name":"uint256","nodeType":"ElementaryTypeName","src":"10853:7:10","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1929,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10848:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10848:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10862:3:10","memberName":"max","nodeType":"MemberAccess","src":"10848:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10828:37:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1957,"nodeType":"IfStatement","src":"10824:310:10","trueBody":{"id":1956,"nodeType":"Block","src":"10867:267:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"10885:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"10904:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10885:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1945,"nodeType":"IfStatement","src":"10881:130:10","trueBody":{"id":1944,"nodeType":"Block","src":"10911:100:10","statements":[{"errorCall":{"arguments":[{"id":1939,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"10963:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1940,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"10972:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"10990:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1938,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"10936:26:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:60:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1943,"nodeType":"RevertStatement","src":"10929:67:10"}]}},{"id":1955,"nodeType":"UncheckedBlock","src":"11024:100:10","statements":[{"expression":{"arguments":[{"id":1947,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"11061:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1948,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"11068:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"11077:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"11096:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11077:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11103:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1946,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1851,1911],"referencedDeclaration":1911,"src":"11052:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11052:57:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1954,"nodeType":"ExpressionStatement","src":"11052:57:10"}]}]}}]},"documentation":{"id":1912,"nodeType":"StructuredDocumentation","src":"10387:271:10","text":" @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."},"id":1959,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10672:15:10","nodeType":"FunctionDefinition","parameters":{"id":1919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"owner","nameLocation":"10696:5:10","nodeType":"VariableDeclaration","scope":1959,"src":"10688:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1913,"name":"address","nodeType":"ElementaryTypeName","src":"10688:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"spender","nameLocation":"10711:7:10","nodeType":"VariableDeclaration","scope":1959,"src":"10703:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1915,"name":"address","nodeType":"ElementaryTypeName","src":"10703:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"value","nameLocation":"10728:5:10","nodeType":"VariableDeclaration","scope":1959,"src":"10720:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1917,"name":"uint256","nodeType":"ElementaryTypeName","src":"10720:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10687:47:10"},"returnParameters":{"id":1920,"nodeType":"ParameterList","parameters":[],"src":"10752:0:10"},"scope":1960,"src":"10663:477:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1961,"src":"1401:9741:10","usedErrors":[1320,1325,1330,1339,1344,1349],"usedEvents":[1972,1981]}],"src":"105:11038:10"},"id":10},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2038]},"id":2039,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1962,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1963,"nodeType":"StructuredDocumentation","src":"132:70:11","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2038,"linearizedBaseContracts":[2038],"name":"IERC20","nameLocation":"213:6:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"226:158:11","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1972,"name":"Transfer","nameLocation":"395:8:11","nodeType":"EventDefinition","parameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:11","nodeType":"VariableDeclaration","scope":1972,"src":"404:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1965,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1968,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:11","nodeType":"VariableDeclaration","scope":1972,"src":"426:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1967,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1970,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:11","nodeType":"VariableDeclaration","scope":1972,"src":"446:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:11"},"src":"389:72:11"},{"anonymous":false,"documentation":{"id":1973,"nodeType":"StructuredDocumentation","src":"467:148:11","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1981,"name":"Approval","nameLocation":"626:8:11","nodeType":"EventDefinition","parameters":{"id":1980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:11","nodeType":"VariableDeclaration","scope":1981,"src":"635:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1974,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1977,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:11","nodeType":"VariableDeclaration","scope":1981,"src":"658:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1976,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1979,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:11","nodeType":"VariableDeclaration","scope":1981,"src":"683:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1978,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:11"},"src":"620:78:11"},{"documentation":{"id":1982,"nodeType":"StructuredDocumentation","src":"704:65:11","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":1987,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:11","nodeType":"FunctionDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[],"src":"794:2:11"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1987,"src":"820:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:11"},"scope":2038,"src":"774:55:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"835:71:11","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":1995,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:11","nodeType":"FunctionDefinition","parameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"account","nameLocation":"938:7:11","nodeType":"VariableDeclaration","scope":1995,"src":"930:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1989,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:11"},"returnParameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1995,"src":"970:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:11"},"scope":2038,"src":"911:68:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"985:213:11","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2005,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:11","nodeType":"FunctionDefinition","parameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"to","nameLocation":"1229:2:11","nodeType":"VariableDeclaration","scope":2005,"src":"1221:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1997,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2000,"mutability":"mutable","name":"value","nameLocation":"1241:5:11","nodeType":"VariableDeclaration","scope":2005,"src":"1233:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:11"},"returnParameters":{"id":2004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2003,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"1266:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2002,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:11"},"scope":2038,"src":"1203:69:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"1278:264:11","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2015,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:11","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"owner","nameLocation":"1574:5:11","nodeType":"VariableDeclaration","scope":2015,"src":"1566:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2007,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"spender","nameLocation":"1589:7:11","nodeType":"VariableDeclaration","scope":2015,"src":"1581:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2009,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:11"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2015,"src":"1621:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:11"},"scope":2038,"src":"1547:83:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"1636:667:11","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2025,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:11","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"spender","nameLocation":"2333:7:11","nodeType":"VariableDeclaration","scope":2025,"src":"2325:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2017,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2020,"mutability":"mutable","name":"value","nameLocation":"2350:5:11","nodeType":"VariableDeclaration","scope":2025,"src":"2342:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:11"},"returnParameters":{"id":2024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2025,"src":"2375:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2022,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:11"},"scope":2038,"src":"2308:73:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"2387:297:11","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2037,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:11","nodeType":"FunctionDefinition","parameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"from","nameLocation":"2719:4:11","nodeType":"VariableDeclaration","scope":2037,"src":"2711:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"to","nameLocation":"2733:2:11","nodeType":"VariableDeclaration","scope":2037,"src":"2725:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"value","nameLocation":"2745:5:11","nodeType":"VariableDeclaration","scope":2037,"src":"2737:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:11"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2037,"src":"2770:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2034,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:11"},"scope":2038,"src":"2689:87:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2039,"src":"203:2575:11","usedErrors":[],"usedEvents":[1972,1981]}],"src":"106:2673:11"},"id":11},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[2038],"IERC20Metadata":[2064]},"id":2065,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2040,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"125:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2042,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2065,"sourceUnit":2039,"src":"151:37:12","symbolAliases":[{"foreign":{"id":2041,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"159:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2044,"name":"IERC20","nameLocations":["305:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"305:6:12"},"id":2045,"nodeType":"InheritanceSpecifier","src":"305:6:12"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2043,"nodeType":"StructuredDocumentation","src":"190:86:12","text":" @dev Interface for the optional metadata functions from the ERC20 standard."},"fullyImplemented":false,"id":2064,"linearizedBaseContracts":[2064,2038],"name":"IERC20Metadata","nameLocation":"287:14:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2046,"nodeType":"StructuredDocumentation","src":"318:54:12","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2051,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:12","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[],"src":"390:2:12"},"returnParameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2051,"src":"416:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2048,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:12"},"scope":2064,"src":"377:54:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"437:56:12","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2057,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:12","nodeType":"FunctionDefinition","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[],"src":"513:2:12"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2057,"src":"539:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2054,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:12"},"scope":2064,"src":"498:56:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"560:65:12","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2063,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:12","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[],"src":"647:2:12"},"returnParameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2063,"src":"673:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2060,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:12"},"scope":2064,"src":"630:50:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2065,"src":"277:405:12","usedErrors":[],"usedEvents":[1972,1981]}],"src":"125:558:12"},"id":12},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2094]},"id":2095,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2066,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:13"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"127:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2094,"linearizedBaseContracts":[2094],"name":"Context","nameLocation":"642:7:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2075,"nodeType":"Block","src":"718:34:13","statements":[{"expression":{"expression":{"id":2072,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:13","memberName":"sender","nodeType":"MemberAccess","src":"735:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2071,"id":2074,"nodeType":"Return","src":"728:17:13"}]},"id":2076,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:13","nodeType":"FunctionDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[],"src":"675:2:13"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2076,"src":"709:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:13"},"scope":2094,"src":"656:96:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2084,"nodeType":"Block","src":"825:32:13","statements":[{"expression":{"expression":{"id":2081,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:13","memberName":"data","nodeType":"MemberAccess","src":"842:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2080,"id":2083,"nodeType":"Return","src":"835:15:13"}]},"id":2085,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:13","nodeType":"FunctionDefinition","parameters":{"id":2077,"nodeType":"ParameterList","parameters":[],"src":"775:2:13"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2085,"src":"809:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2078,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:13"},"scope":2094,"src":"758:99:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2092,"nodeType":"Block","src":"935:25:13","statements":[{"expression":{"hexValue":"30","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2089,"id":2091,"nodeType":"Return","src":"945:8:13"}]},"id":2093,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:13","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[],"src":"892:2:13"},"returnParameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2093,"src":"926:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:13"},"scope":2094,"src":"863:97:13","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2095,"src":"624:338:13","usedErrors":[],"usedEvents":[]}],"src":"101:862:13"},"id":13},"@openzeppelin/contracts/utils/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","exportedSymbols":{"Context":[2094],"Pausable":[2211]},"id":2212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2096,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2098,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2212,"sourceUnit":2095,"src":"128:45:14","symbolAliases":[{"foreign":{"id":2097,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"136:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2100,"name":"Context","nameLocations":["645:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2094,"src":"645:7:14"},"id":2101,"nodeType":"InheritanceSpecifier","src":"645:7:14"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"175:439:14","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":2211,"linearizedBaseContracts":[2211,2094],"name":"Pausable","nameLocation":"633:8:14","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2103,"mutability":"mutable","name":"_paused","nameLocation":"672:7:14","nodeType":"VariableDeclaration","scope":2211,"src":"659:20:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2102,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":2104,"nodeType":"StructuredDocumentation","src":"686:73:14","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":2108,"name":"Paused","nameLocation":"770:6:14","nodeType":"EventDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"785:7:14","nodeType":"VariableDeclaration","scope":2108,"src":"777:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2105,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"776:17:14"},"src":"764:30:14"},{"anonymous":false,"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"800:70:14","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":2113,"name":"Unpaused","nameLocation":"881:8:14","nodeType":"EventDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"898:7:14","nodeType":"VariableDeclaration","scope":2113,"src":"890:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2110,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"889:17:14"},"src":"875:32:14"},{"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"913:76:14","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":2116,"name":"EnforcedPause","nameLocation":"1000:13:14","nodeType":"ErrorDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[],"src":"1013:2:14"},"src":"994:22:14"},{"documentation":{"id":2117,"nodeType":"StructuredDocumentation","src":"1022:80:14","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":2119,"name":"ExpectedPause","nameLocation":"1113:13:14","nodeType":"ErrorDefinition","parameters":{"id":2118,"nodeType":"ParameterList","parameters":[],"src":"1126:2:14"},"src":"1107:22:14"},{"body":{"id":2127,"nodeType":"Block","src":"1221:32:14","statements":[{"expression":{"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2123,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1231:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1241:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1231:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2126,"nodeType":"ExpressionStatement","src":"1231:15:14"}]},"documentation":{"id":2120,"nodeType":"StructuredDocumentation","src":"1135:67:14","text":" @dev Initializes the contract in unpaused state."},"id":2128,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2121,"nodeType":"ParameterList","parameters":[],"src":"1218:2:14"},"returnParameters":{"id":2122,"nodeType":"ParameterList","parameters":[],"src":"1221:0:14"},"scope":2211,"src":"1207:46:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2135,"nodeType":"Block","src":"1464:47:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2131,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"1474:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1474:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2133,"nodeType":"ExpressionStatement","src":"1474:19:14"},{"id":2134,"nodeType":"PlaceholderStatement","src":"1503:1:14"}]},"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"1259:175:14","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":2136,"name":"whenNotPaused","nameLocation":"1448:13:14","nodeType":"ModifierDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[],"src":"1461:2:14"},"src":"1439:72:14","virtual":false,"visibility":"internal"},{"body":{"id":2143,"nodeType":"Block","src":"1711:44:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2139,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"1721:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2141,"nodeType":"ExpressionStatement","src":"1721:16:14"},{"id":2142,"nodeType":"PlaceholderStatement","src":"1747:1:14"}]},"documentation":{"id":2137,"nodeType":"StructuredDocumentation","src":"1517:167:14","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":2144,"name":"whenPaused","nameLocation":"1698:10:14","nodeType":"ModifierDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[],"src":"1708:2:14"},"src":"1689:66:14","virtual":false,"visibility":"internal"},{"body":{"id":2152,"nodeType":"Block","src":"1903:31:14","statements":[{"expression":{"id":2150,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1920:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2149,"id":2151,"nodeType":"Return","src":"1913:14:14"}]},"documentation":{"id":2145,"nodeType":"StructuredDocumentation","src":"1761:84:14","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":2153,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1859:6:14","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"1865:2:14"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2153,"src":"1897:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"1897:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1896:6:14"},"scope":2211,"src":"1850:84:14","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2164,"nodeType":"Block","src":"2053:77:14","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":2157,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2067:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2163,"nodeType":"IfStatement","src":"2063:61:14","trueBody":{"id":2162,"nodeType":"Block","src":"2077:47:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2159,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"2098:13:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2161,"nodeType":"RevertStatement","src":"2091:22:14"}]}}]},"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"1940:57:14","text":" @dev Throws if the contract is paused."},"id":2165,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2011:17:14","nodeType":"FunctionDefinition","parameters":{"id":2155,"nodeType":"ParameterList","parameters":[],"src":"2028:2:14"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[],"src":"2053:0:14"},"scope":2211,"src":"2002:128:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2177,"nodeType":"Block","src":"2250:78:14","statements":[{"condition":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2264:9:14","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2169,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"2265:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2265:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2176,"nodeType":"IfStatement","src":"2260:62:14","trueBody":{"id":2175,"nodeType":"Block","src":"2275:47:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2172,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"2296:13:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2174,"nodeType":"RevertStatement","src":"2289:22:14"}]}}]},"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"2136:61:14","text":" @dev Throws if the contract is not paused."},"id":2178,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2211:14:14","nodeType":"FunctionDefinition","parameters":{"id":2167,"nodeType":"ParameterList","parameters":[],"src":"2225:2:14"},"returnParameters":{"id":2168,"nodeType":"ParameterList","parameters":[],"src":"2250:0:14"},"scope":2211,"src":"2202:126:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2193,"nodeType":"Block","src":"2512:66:14","statements":[{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"2522:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2532:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2522:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2187,"nodeType":"ExpressionStatement","src":"2522:14:14"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2189,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2558:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2558:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2188,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"2551:6:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2192,"nodeType":"EmitStatement","src":"2546:25:14"}]},"documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"2334:124:14","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":2194,"implemented":true,"kind":"function","modifiers":[{"id":2182,"kind":"modifierInvocation","modifierName":{"id":2181,"name":"whenNotPaused","nameLocations":["2498:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":2136,"src":"2498:13:14"},"nodeType":"ModifierInvocation","src":"2498:13:14"}],"name":"_pause","nameLocation":"2472:6:14","nodeType":"FunctionDefinition","parameters":{"id":2180,"nodeType":"ParameterList","parameters":[],"src":"2478:2:14"},"returnParameters":{"id":2183,"nodeType":"ParameterList","parameters":[],"src":"2512:0:14"},"scope":2211,"src":"2463:115:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2209,"nodeType":"Block","src":"2758:69:14","statements":[{"expression":{"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2200,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"2768:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2778:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2768:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2203,"nodeType":"ExpressionStatement","src":"2768:15:14"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2205,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"2807:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2807:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2204,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2798:8:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2798:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2208,"nodeType":"EmitStatement","src":"2793:27:14"}]},"documentation":{"id":2195,"nodeType":"StructuredDocumentation","src":"2584:121:14","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":2210,"implemented":true,"kind":"function","modifiers":[{"id":2198,"kind":"modifierInvocation","modifierName":{"id":2197,"name":"whenPaused","nameLocations":["2747:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"2747:10:14"},"nodeType":"ModifierInvocation","src":"2747:10:14"}],"name":"_unpause","nameLocation":"2719:8:14","nodeType":"FunctionDefinition","parameters":{"id":2196,"nodeType":"ParameterList","parameters":[],"src":"2727:2:14"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[],"src":"2758:0:14"},"scope":2211,"src":"2710:117:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2212,"src":"615:2214:14","usedErrors":[2116,2119],"usedEvents":[2108,2113]}],"src":"102:2728:14"},"id":14},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[2280]},"id":2281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2213,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:15"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":2214,"nodeType":"StructuredDocumentation","src":"135:750:15","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":2280,"linearizedBaseContracts":[2280],"name":"ReentrancyGuard","nameLocation":"904:15:15","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2217,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:15","nodeType":"VariableDeclaration","scope":2280,"src":"1674:40:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":2220,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:15","nodeType":"VariableDeclaration","scope":2280,"src":"1720:36:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":2222,"mutability":"mutable","name":"_status","nameLocation":"1779:7:15","nodeType":"VariableDeclaration","scope":2280,"src":"1763:23:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"1793:52:15","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":2225,"name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:15","nodeType":"ErrorDefinition","parameters":{"id":2224,"nodeType":"ParameterList","parameters":[],"src":"1884:2:15"},"src":"1850:37:15"},{"body":{"id":2232,"nodeType":"Block","src":"1907:38:15","statements":[{"expression":{"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2228,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1917:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2229,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"1927:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2231,"nodeType":"ExpressionStatement","src":"1917:21:15"}]},"id":2233,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[],"src":"1904:2:15"},"returnParameters":{"id":2227,"nodeType":"ParameterList","parameters":[],"src":"1907:0:15"},"scope":2280,"src":"1893:52:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2243,"nodeType":"Block","src":"2346:79:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2236,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"2356:19:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2238,"nodeType":"ExpressionStatement","src":"2356:21:15"},{"id":2239,"nodeType":"PlaceholderStatement","src":"2387:1:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2240,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"2398:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2242,"nodeType":"ExpressionStatement","src":"2398:20:15"}]},"documentation":{"id":2234,"nodeType":"StructuredDocumentation","src":"1951:366:15","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":2244,"name":"nonReentrant","nameLocation":"2331:12:15","nodeType":"ModifierDefinition","parameters":{"id":2235,"nodeType":"ParameterList","parameters":[],"src":"2343:2:15"},"src":"2322:103:15","virtual":false,"visibility":"internal"},{"body":{"id":2259,"nodeType":"Block","src":"2470:268:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"2558:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2248,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"2569:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2254,"nodeType":"IfStatement","src":"2554:86:15","trueBody":{"id":2253,"nodeType":"Block","src":"2578:62:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2250,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2599:28:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2252,"nodeType":"RevertStatement","src":"2592:37:15"}]}},{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"2714:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2256,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"2724:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"2714:17:15"}]},"id":2260,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:15","nodeType":"FunctionDefinition","parameters":{"id":2245,"nodeType":"ParameterList","parameters":[],"src":"2459:2:15"},"returnParameters":{"id":2246,"nodeType":"ParameterList","parameters":[],"src":"2470:0:15"},"scope":2280,"src":"2431:307:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2267,"nodeType":"Block","src":"2782:170:15","statements":[{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2263,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"2924:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2264,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"2934:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"2924:21:15"}]},"id":2268,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:15","nodeType":"FunctionDefinition","parameters":{"id":2261,"nodeType":"ParameterList","parameters":[],"src":"2771:2:15"},"returnParameters":{"id":2262,"nodeType":"ParameterList","parameters":[],"src":"2782:0:15"},"scope":2280,"src":"2744:208:15","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2278,"nodeType":"Block","src":"3195:42:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"3212:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2275,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"3223:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2273,"id":2277,"nodeType":"Return","src":"3205:25:15"}]},"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"2958:168:15","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":2279,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:15","nodeType":"FunctionDefinition","parameters":{"id":2270,"nodeType":"ParameterList","parameters":[],"src":"3163:2:15"},"returnParameters":{"id":2273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2279,"src":"3189:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2271,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:15"},"scope":2280,"src":"3131:106:15","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2281,"src":"886:2353:15","usedErrors":[2225],"usedEvents":[]}],"src":"109:3131:15"},"id":15},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2817]},"id":2818,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2282,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2283,"nodeType":"StructuredDocumentation","src":"144:658:16","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2817,"linearizedBaseContracts":[2817],"name":"MerkleProof","nameLocation":"811:11:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2284,"nodeType":"StructuredDocumentation","src":"829:60:16","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":2286,"name":"MerkleProofInvalidMultiproof","nameLocation":"900:28:16","nodeType":"ErrorDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[],"src":"928:2:16"},"src":"894:37:16"},{"body":{"id":2306,"nodeType":"Block","src":"1362:57:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2300,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2290,"src":"1392:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2301,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"1399:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2299,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"1379:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2303,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"1408:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1379:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2298,"id":2305,"nodeType":"Return","src":"1372:40:16"}]},"documentation":{"id":2287,"nodeType":"StructuredDocumentation","src":"937:323:16","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2307,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1274:6:16","nodeType":"FunctionDefinition","parameters":{"id":2295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2290,"mutability":"mutable","name":"proof","nameLocation":"1298:5:16","nodeType":"VariableDeclaration","scope":2307,"src":"1281:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1281:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2289,"nodeType":"ArrayTypeName","src":"1281:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2292,"mutability":"mutable","name":"root","nameLocation":"1313:4:16","nodeType":"VariableDeclaration","scope":2307,"src":"1305:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1305:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2294,"mutability":"mutable","name":"leaf","nameLocation":"1327:4:16","nodeType":"VariableDeclaration","scope":2307,"src":"1319:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1319:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1280:52:16"},"returnParameters":{"id":2298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2307,"src":"1356:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2296,"name":"bool","nodeType":"ElementaryTypeName","src":"1356:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1355:6:16"},"scope":2817,"src":"1265:154:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2327,"nodeType":"Block","src":"1589:65:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2321,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1627:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2322,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2315,"src":"1634:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2320,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"1606:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1606:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2324,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"1643:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1606:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2319,"id":2326,"nodeType":"Return","src":"1599:48:16"}]},"documentation":{"id":2308,"nodeType":"StructuredDocumentation","src":"1425:52:16","text":" @dev Calldata version of {verify}"},"id":2328,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1491:14:16","nodeType":"FunctionDefinition","parameters":{"id":2316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"proof","nameLocation":"1525:5:16","nodeType":"VariableDeclaration","scope":2328,"src":"1506:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2309,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1506:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2310,"nodeType":"ArrayTypeName","src":"1506:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2313,"mutability":"mutable","name":"root","nameLocation":"1540:4:16","nodeType":"VariableDeclaration","scope":2328,"src":"1532:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1532:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2315,"mutability":"mutable","name":"leaf","nameLocation":"1554:4:16","nodeType":"VariableDeclaration","scope":2328,"src":"1546:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1546:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1505:54:16"},"returnParameters":{"id":2319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2328,"src":"1583:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2317,"name":"bool","nodeType":"ElementaryTypeName","src":"1583:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1582:6:16"},"scope":2817,"src":"1482:172:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2367,"nodeType":"Block","src":"2059:198:16","statements":[{"assignments":[2340],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"computedHash","nameLocation":"2077:12:16","nodeType":"VariableDeclaration","scope":2367,"src":"2069:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2339,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2342,"initialValue":{"id":2341,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"2092:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2069:27:16"},{"body":{"id":2363,"nodeType":"Block","src":"2149:73:16","statements":[{"expression":{"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"2163:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2356,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"2188:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2357,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2202:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2359,"indexExpression":{"id":2358,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"2208:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2202:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2355,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"2178:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2178:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2163:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2362,"nodeType":"ExpressionStatement","src":"2163:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"2126:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2348,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2130:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2136:6:16","memberName":"length","nodeType":"MemberAccess","src":"2130:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2126:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2364,"initializationExpression":{"assignments":[2344],"declarations":[{"constant":false,"id":2344,"mutability":"mutable","name":"i","nameLocation":"2119:1:16","nodeType":"VariableDeclaration","scope":2364,"src":"2111:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2346,"initialValue":{"hexValue":"30","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2123:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2111:13:16"},"loopExpression":{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2144:3:16","subExpression":{"id":2351,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"2144:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"2144:3:16"},"nodeType":"ForStatement","src":"2106:116:16"},{"expression":{"id":2365,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"2238:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2338,"id":2366,"nodeType":"Return","src":"2231:19:16"}]},"documentation":{"id":2329,"nodeType":"StructuredDocumentation","src":"1660:302:16","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted."},"id":2368,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1976:12:16","nodeType":"FunctionDefinition","parameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"proof","nameLocation":"2006:5:16","nodeType":"VariableDeclaration","scope":2368,"src":"1989:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1989:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2331,"nodeType":"ArrayTypeName","src":"1989:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2334,"mutability":"mutable","name":"leaf","nameLocation":"2021:4:16","nodeType":"VariableDeclaration","scope":2368,"src":"2013:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2333,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2013:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1988:38:16"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2368,"src":"2050:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2050:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2049:9:16"},"scope":2817,"src":"1967:290:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2407,"nodeType":"Block","src":"2428:198:16","statements":[{"assignments":[2380],"declarations":[{"constant":false,"id":2380,"mutability":"mutable","name":"computedHash","nameLocation":"2446:12:16","nodeType":"VariableDeclaration","scope":2407,"src":"2438:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2438:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2382,"initialValue":{"id":2381,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"2461:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2438:27:16"},{"body":{"id":2403,"nodeType":"Block","src":"2518:73:16","statements":[{"expression":{"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2394,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"2532:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2396,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"2557:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2397,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"2571:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2399,"indexExpression":{"id":2398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"2577:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2571:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2395,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"2547:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2532:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2402,"nodeType":"ExpressionStatement","src":"2532:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2387,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"2495:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2388,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"2499:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2505:6:16","memberName":"length","nodeType":"MemberAccess","src":"2499:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2495:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2404,"initializationExpression":{"assignments":[2384],"declarations":[{"constant":false,"id":2384,"mutability":"mutable","name":"i","nameLocation":"2488:1:16","nodeType":"VariableDeclaration","scope":2404,"src":"2480:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2383,"name":"uint256","nodeType":"ElementaryTypeName","src":"2480:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2386,"initialValue":{"hexValue":"30","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2492:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2480:13:16"},"loopExpression":{"expression":{"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2513:3:16","subExpression":{"id":2391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"2513:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2393,"nodeType":"ExpressionStatement","src":"2513:3:16"},"nodeType":"ForStatement","src":"2475:116:16"},{"expression":{"id":2405,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"2607:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2378,"id":2406,"nodeType":"Return","src":"2600:19:16"}]},"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"2263:58:16","text":" @dev Calldata version of {processProof}"},"id":2408,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2335:20:16","nodeType":"FunctionDefinition","parameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"proof","nameLocation":"2375:5:16","nodeType":"VariableDeclaration","scope":2408,"src":"2356:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2356:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2371,"nodeType":"ArrayTypeName","src":"2356:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"leaf","nameLocation":"2390:4:16","nodeType":"VariableDeclaration","scope":2408,"src":"2382:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2382:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2355:40:16"},"returnParameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2408,"src":"2419:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2419:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2418:9:16"},"scope":2817,"src":"2326:300:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2433,"nodeType":"Block","src":"3131:76:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2426,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"3166:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2427,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"3173:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2428,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"3185:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2425,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"3148:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3148:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2430,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"3196:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3148:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2424,"id":2432,"nodeType":"Return","src":"3141:59:16"}]},"documentation":{"id":2409,"nodeType":"StructuredDocumentation","src":"2632:312:16","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"2958:16:16","nodeType":"FunctionDefinition","parameters":{"id":2421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"proof","nameLocation":"3001:5:16","nodeType":"VariableDeclaration","scope":2434,"src":"2984:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2984:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2411,"nodeType":"ArrayTypeName","src":"2984:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2415,"mutability":"mutable","name":"proofFlags","nameLocation":"3030:10:16","nodeType":"VariableDeclaration","scope":2434,"src":"3016:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2413,"name":"bool","nodeType":"ElementaryTypeName","src":"3016:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2414,"nodeType":"ArrayTypeName","src":"3016:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2417,"mutability":"mutable","name":"root","nameLocation":"3058:4:16","nodeType":"VariableDeclaration","scope":2434,"src":"3050:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3050:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"leaves","nameLocation":"3089:6:16","nodeType":"VariableDeclaration","scope":2434,"src":"3072:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2418,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3072:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2419,"nodeType":"ArrayTypeName","src":"3072:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2974:127:16"},"returnParameters":{"id":2424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"3125:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2422,"name":"bool","nodeType":"ElementaryTypeName","src":"3125:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3124:6:16"},"scope":2817,"src":"2949:258:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2459,"nodeType":"Block","src":"3574:84:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2452,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"3617:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2453,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"3624:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2454,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"3636:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2451,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"3591:25:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3591:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2456,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"3647:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3591:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2450,"id":2458,"nodeType":"Return","src":"3584:67:16"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"3213:162:16","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":2460,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3389:24:16","nodeType":"FunctionDefinition","parameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2438,"mutability":"mutable","name":"proof","nameLocation":"3442:5:16","nodeType":"VariableDeclaration","scope":2460,"src":"3423:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3423:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2437,"nodeType":"ArrayTypeName","src":"3423:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"proofFlags","nameLocation":"3473:10:16","nodeType":"VariableDeclaration","scope":2460,"src":"3457:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2439,"name":"bool","nodeType":"ElementaryTypeName","src":"3457:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2440,"nodeType":"ArrayTypeName","src":"3457:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"root","nameLocation":"3501:4:16","nodeType":"VariableDeclaration","scope":2460,"src":"3493:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3493:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"leaves","nameLocation":"3532:6:16","nodeType":"VariableDeclaration","scope":2460,"src":"3515:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3515:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2445,"nodeType":"ArrayTypeName","src":"3515:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3413:131:16"},"returnParameters":{"id":2450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"3568:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2448,"name":"bool","nodeType":"ElementaryTypeName","src":"3568:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3567:6:16"},"scope":2817,"src":"3380:278:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2619,"nodeType":"Block","src":"4574:2107:16","statements":[{"assignments":[2476],"declarations":[{"constant":false,"id":2476,"mutability":"mutable","name":"leavesLen","nameLocation":"4966:9:16","nodeType":"VariableDeclaration","scope":2619,"src":"4958:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"4958:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2479,"initialValue":{"expression":{"id":2477,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"4978:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4985:6:16","memberName":"length","nodeType":"MemberAccess","src":"4978:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4958:33:16"},{"assignments":[2481],"declarations":[{"constant":false,"id":2481,"mutability":"mutable","name":"proofLen","nameLocation":"5009:8:16","nodeType":"VariableDeclaration","scope":2619,"src":"5001:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"5001:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2484,"initialValue":{"expression":{"id":2482,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"5020:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5026:6:16","memberName":"length","nodeType":"MemberAccess","src":"5020:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5001:31:16"},{"assignments":[2486],"declarations":[{"constant":false,"id":2486,"mutability":"mutable","name":"totalHashes","nameLocation":"5050:11:16","nodeType":"VariableDeclaration","scope":2619,"src":"5042:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"5042:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2489,"initialValue":{"expression":{"id":2487,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"5064:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5075:6:16","memberName":"length","nodeType":"MemberAccess","src":"5064:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5042:39:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2490,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"5129:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2491,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"5141:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5129:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2493,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"5153:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5153:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5129:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2501,"nodeType":"IfStatement","src":"5125:107:16","trueBody":{"id":2500,"nodeType":"Block","src":"5170:62:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2497,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"5191:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5191:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2499,"nodeType":"RevertStatement","src":"5184:37:16"}]}},{"assignments":[2506],"declarations":[{"constant":false,"id":2506,"mutability":"mutable","name":"hashes","nameLocation":"5493:6:16","nodeType":"VariableDeclaration","scope":2619,"src":"5476:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5476:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2505,"nodeType":"ArrayTypeName","src":"5476:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2512,"initialValue":{"arguments":[{"id":2510,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"5516:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5502:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5506:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2508,"nodeType":"ArrayTypeName","src":"5506:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5502:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5476:52:16"},{"assignments":[2514],"declarations":[{"constant":false,"id":2514,"mutability":"mutable","name":"leafPos","nameLocation":"5546:7:16","nodeType":"VariableDeclaration","scope":2619,"src":"5538:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5538:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2516,"initialValue":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5556:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5538:19:16"},{"assignments":[2518],"declarations":[{"constant":false,"id":2518,"mutability":"mutable","name":"hashPos","nameLocation":"5575:7:16","nodeType":"VariableDeclaration","scope":2619,"src":"5567:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"5567:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2520,"initialValue":{"hexValue":"30","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5585:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5567:19:16"},{"assignments":[2522],"declarations":[{"constant":false,"id":2522,"mutability":"mutable","name":"proofPos","nameLocation":"5604:8:16","nodeType":"VariableDeclaration","scope":2619,"src":"5596:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"5596:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2524,"initialValue":{"hexValue":"30","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5615:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5596:20:16"},{"body":{"id":2583,"nodeType":"Block","src":"6034:292:16","statements":[{"assignments":[2536],"declarations":[{"constant":false,"id":2536,"mutability":"mutable","name":"a","nameLocation":"6056:1:16","nodeType":"VariableDeclaration","scope":2583,"src":"6048:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6048:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2549,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2537,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6060:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2538,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"6070:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6060:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2544,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"6102:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2547,"indexExpression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6109:9:16","subExpression":{"id":2545,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6109:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6102:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6060:59:16","trueExpression":{"baseExpression":{"id":2540,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"6082:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2543,"indexExpression":{"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6089:9:16","subExpression":{"id":2541,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6089:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6082:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6048:71:16"},{"assignments":[2551],"declarations":[{"constant":false,"id":2551,"mutability":"mutable","name":"b","nameLocation":"6141:1:16","nodeType":"VariableDeclaration","scope":2583,"src":"6133:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6133:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2573,"initialValue":{"condition":{"baseExpression":{"id":2552,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"6145:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2554,"indexExpression":{"id":2553,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"6156:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6145:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2568,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"6257:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2571,"indexExpression":{"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6263:10:16","subExpression":{"id":2569,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"6263:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6257:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6145:129:16","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2555,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6178:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2556,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"6188:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6178:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2562,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"6220:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2565,"indexExpression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6227:9:16","subExpression":{"id":2563,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6227:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6220:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6178:59:16","trueExpression":{"baseExpression":{"id":2558,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"6200:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2561,"indexExpression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6207:9:16","subExpression":{"id":2559,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6207:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6200:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6177:61:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6133:141:16"},{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2574,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"6288:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2576,"indexExpression":{"id":2575,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"6295:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6288:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2578,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"6310:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2579,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"6313:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2577,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"6300:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6300:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6288:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2582,"nodeType":"ExpressionStatement","src":"6288:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"6012:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2530,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"6016:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6012:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2584,"initializationExpression":{"assignments":[2526],"declarations":[{"constant":false,"id":2526,"mutability":"mutable","name":"i","nameLocation":"6005:1:16","nodeType":"VariableDeclaration","scope":2584,"src":"5997:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"5997:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2528,"initialValue":{"hexValue":"30","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6009:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5997:13:16"},"loopExpression":{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6029:3:16","subExpression":{"id":2532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"6029:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"6029:3:16"},"nodeType":"ForStatement","src":"5992:334:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"6340:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6340:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"6573:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6585:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6573:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2616,"nodeType":"Block","src":"6635:40:16","statements":[{"expression":{"baseExpression":{"id":2612,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"6656:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2614,"indexExpression":{"hexValue":"30","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6662:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6656:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2474,"id":2615,"nodeType":"Return","src":"6649:15:16"}]},"id":2617,"nodeType":"IfStatement","src":"6569:106:16","trueBody":{"id":2611,"nodeType":"Block","src":"6588:41:16","statements":[{"expression":{"baseExpression":{"id":2607,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"6609:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2609,"indexExpression":{"hexValue":"30","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6616:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6609:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2474,"id":2610,"nodeType":"Return","src":"6602:16:16"}]}},"id":2618,"nodeType":"IfStatement","src":"6336:339:16","trueBody":{"id":2603,"nodeType":"Block","src":"6357:206:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2588,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"6375:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2589,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"6387:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2595,"nodeType":"IfStatement","src":"6371:96:16","trueBody":{"id":2594,"nodeType":"Block","src":"6397:70:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2591,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"6422:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2593,"nodeType":"RevertStatement","src":"6415:37:16"}]}},{"id":2602,"nodeType":"UncheckedBlock","src":"6480:73:16","statements":[{"expression":{"baseExpression":{"id":2596,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"6515:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2600,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2597,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"6522:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6536:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6522:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6515:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2474,"id":2601,"nodeType":"Return","src":"6508:30:16"}]}]}}]},"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"3664:730:16","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer)."},"id":2620,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4408:17:16","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"proof","nameLocation":"4452:5:16","nodeType":"VariableDeclaration","scope":2620,"src":"4435:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4435:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2463,"nodeType":"ArrayTypeName","src":"4435:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2467,"mutability":"mutable","name":"proofFlags","nameLocation":"4481:10:16","nodeType":"VariableDeclaration","scope":2620,"src":"4467:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2465,"name":"bool","nodeType":"ElementaryTypeName","src":"4467:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2466,"nodeType":"ArrayTypeName","src":"4467:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"leaves","nameLocation":"4518:6:16","nodeType":"VariableDeclaration","scope":2620,"src":"4501:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4501:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2469,"nodeType":"ArrayTypeName","src":"4501:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4425:105:16"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"merkleRoot","nameLocation":"4562:10:16","nodeType":"VariableDeclaration","scope":2620,"src":"4554:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4554:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4553:20:16"},"scope":2817,"src":"4399:2282:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2779,"nodeType":"Block","src":"7043:2107:16","statements":[{"assignments":[2636],"declarations":[{"constant":false,"id":2636,"mutability":"mutable","name":"leavesLen","nameLocation":"7435:9:16","nodeType":"VariableDeclaration","scope":2779,"src":"7427:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"7427:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2639,"initialValue":{"expression":{"id":2637,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"7447:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7454:6:16","memberName":"length","nodeType":"MemberAccess","src":"7447:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7427:33:16"},{"assignments":[2641],"declarations":[{"constant":false,"id":2641,"mutability":"mutable","name":"proofLen","nameLocation":"7478:8:16","nodeType":"VariableDeclaration","scope":2779,"src":"7470:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"7470:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2644,"initialValue":{"expression":{"id":2642,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"7489:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7495:6:16","memberName":"length","nodeType":"MemberAccess","src":"7489:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7470:31:16"},{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"totalHashes","nameLocation":"7519:11:16","nodeType":"VariableDeclaration","scope":2779,"src":"7511:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"7511:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2649,"initialValue":{"expression":{"id":2647,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"7533:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7544:6:16","memberName":"length","nodeType":"MemberAccess","src":"7533:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7511:39:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2650,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"7598:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2651,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"7610:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7598:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2653,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"7622:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7636:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7622:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7598:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2661,"nodeType":"IfStatement","src":"7594:107:16","trueBody":{"id":2660,"nodeType":"Block","src":"7639:62:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2657,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"7660:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7660:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2659,"nodeType":"RevertStatement","src":"7653:37:16"}]}},{"assignments":[2666],"declarations":[{"constant":false,"id":2666,"mutability":"mutable","name":"hashes","nameLocation":"7962:6:16","nodeType":"VariableDeclaration","scope":2779,"src":"7945:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7945:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2665,"nodeType":"ArrayTypeName","src":"7945:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2672,"initialValue":{"arguments":[{"id":2670,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"7985:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7971:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7975:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2668,"nodeType":"ArrayTypeName","src":"7975:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7971:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7945:52:16"},{"assignments":[2674],"declarations":[{"constant":false,"id":2674,"mutability":"mutable","name":"leafPos","nameLocation":"8015:7:16","nodeType":"VariableDeclaration","scope":2779,"src":"8007:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"8007:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2676,"initialValue":{"hexValue":"30","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8025:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8007:19:16"},{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"hashPos","nameLocation":"8044:7:16","nodeType":"VariableDeclaration","scope":2779,"src":"8036:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2680,"initialValue":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8054:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8036:19:16"},{"assignments":[2682],"declarations":[{"constant":false,"id":2682,"mutability":"mutable","name":"proofPos","nameLocation":"8073:8:16","nodeType":"VariableDeclaration","scope":2779,"src":"8065:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2681,"name":"uint256","nodeType":"ElementaryTypeName","src":"8065:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2684,"initialValue":{"hexValue":"30","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8084:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8065:20:16"},{"body":{"id":2743,"nodeType":"Block","src":"8503:292:16","statements":[{"assignments":[2696],"declarations":[{"constant":false,"id":2696,"mutability":"mutable","name":"a","nameLocation":"8525:1:16","nodeType":"VariableDeclaration","scope":2743,"src":"8517:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8517:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2709,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"8529:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2698,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"8539:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8529:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2704,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"8571:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2707,"indexExpression":{"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8578:9:16","subExpression":{"id":2705,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"8578:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8571:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8529:59:16","trueExpression":{"baseExpression":{"id":2700,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"8551:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2703,"indexExpression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8558:9:16","subExpression":{"id":2701,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"8558:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8551:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8517:71:16"},{"assignments":[2711],"declarations":[{"constant":false,"id":2711,"mutability":"mutable","name":"b","nameLocation":"8610:1:16","nodeType":"VariableDeclaration","scope":2743,"src":"8602:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8602:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2733,"initialValue":{"condition":{"baseExpression":{"id":2712,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"8614:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2714,"indexExpression":{"id":2713,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"8625:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8614:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2728,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"8726:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2731,"indexExpression":{"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8732:10:16","subExpression":{"id":2729,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"8732:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8726:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8614:129:16","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2715,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"8647:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2716,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"8657:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8647:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2722,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"8689:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2725,"indexExpression":{"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8696:9:16","subExpression":{"id":2723,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"8696:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8689:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8647:59:16","trueExpression":{"baseExpression":{"id":2718,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"8669:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2721,"indexExpression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8676:9:16","subExpression":{"id":2719,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"8676:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8669:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2727,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8646:61:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8602:141:16"},{"expression":{"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2734,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"8757:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2736,"indexExpression":{"id":2735,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"8764:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8757:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2738,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"8779:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2739,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"8782:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2737,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"8769:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8769:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8757:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2742,"nodeType":"ExpressionStatement","src":"8757:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2689,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"8481:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2690,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"8485:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8481:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2744,"initializationExpression":{"assignments":[2686],"declarations":[{"constant":false,"id":2686,"mutability":"mutable","name":"i","nameLocation":"8474:1:16","nodeType":"VariableDeclaration","scope":2744,"src":"8466:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2685,"name":"uint256","nodeType":"ElementaryTypeName","src":"8466:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2688,"initialValue":{"hexValue":"30","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8478:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8466:13:16"},"loopExpression":{"expression":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8498:3:16","subExpression":{"id":2692,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"8498:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2694,"nodeType":"ExpressionStatement","src":"8498:3:16"},"nodeType":"ForStatement","src":"8461:334:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2745,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"8809:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8823:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8809:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2764,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"9042:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9054:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9042:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2776,"nodeType":"Block","src":"9104:40:16","statements":[{"expression":{"baseExpression":{"id":2772,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"9125:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2774,"indexExpression":{"hexValue":"30","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9131:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9125:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2634,"id":2775,"nodeType":"Return","src":"9118:15:16"}]},"id":2777,"nodeType":"IfStatement","src":"9038:106:16","trueBody":{"id":2771,"nodeType":"Block","src":"9057:41:16","statements":[{"expression":{"baseExpression":{"id":2767,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"9078:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2769,"indexExpression":{"hexValue":"30","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9085:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9078:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2634,"id":2770,"nodeType":"Return","src":"9071:16:16"}]}},"id":2778,"nodeType":"IfStatement","src":"8805:339:16","trueBody":{"id":2763,"nodeType":"Block","src":"8826:206:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"8844:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2749,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"8856:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8844:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2755,"nodeType":"IfStatement","src":"8840:96:16","trueBody":{"id":2754,"nodeType":"Block","src":"8866:70:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2751,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"8891:28:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8891:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2753,"nodeType":"RevertStatement","src":"8884:37:16"}]}},{"id":2762,"nodeType":"UncheckedBlock","src":"8949:73:16","statements":[{"expression":{"baseExpression":{"id":2756,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"8984:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2760,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2757,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"8991:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9005:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8991:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8984:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2634,"id":2761,"nodeType":"Return","src":"8977:30:16"}]}]}}]},"documentation":{"id":2621,"nodeType":"StructuredDocumentation","src":"6687:164:16","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details."},"id":2780,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6865:25:16","nodeType":"FunctionDefinition","parameters":{"id":2631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2624,"mutability":"mutable","name":"proof","nameLocation":"6919:5:16","nodeType":"VariableDeclaration","scope":2780,"src":"6900:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6900:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2623,"nodeType":"ArrayTypeName","src":"6900:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2627,"mutability":"mutable","name":"proofFlags","nameLocation":"6950:10:16","nodeType":"VariableDeclaration","scope":2780,"src":"6934:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2625,"name":"bool","nodeType":"ElementaryTypeName","src":"6934:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2626,"nodeType":"ArrayTypeName","src":"6934:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2630,"mutability":"mutable","name":"leaves","nameLocation":"6987:6:16","nodeType":"VariableDeclaration","scope":2780,"src":"6970:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2628,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6970:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2629,"nodeType":"ArrayTypeName","src":"6970:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6890:109:16"},"returnParameters":{"id":2634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"merkleRoot","nameLocation":"7031:10:16","nodeType":"VariableDeclaration","scope":2780,"src":"7023:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2632,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7023:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7022:20:16"},"scope":2817,"src":"6856:2294:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2803,"nodeType":"Block","src":"9301:75:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"9318:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2791,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9322:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9318:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2798,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9364:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2799,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"9367:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2797,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"9349:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9349:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9318:51:16","trueExpression":{"arguments":[{"id":2794,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"9341:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2795,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9344:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2793,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"9326:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9326:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2789,"id":2802,"nodeType":"Return","src":"9311:58:16"}]},"documentation":{"id":2781,"nodeType":"StructuredDocumentation","src":"9156:68:16","text":" @dev Sorts the pair (a, b) and hashes the result."},"id":2804,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"9238:9:16","nodeType":"FunctionDefinition","parameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2783,"mutability":"mutable","name":"a","nameLocation":"9256:1:16","nodeType":"VariableDeclaration","scope":2804,"src":"9248:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9248:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2785,"mutability":"mutable","name":"b","nameLocation":"9267:1:16","nodeType":"VariableDeclaration","scope":2804,"src":"9259:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9259:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9247:22:16"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2804,"src":"9292:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9292:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9291:9:16"},"scope":2817,"src":"9229:147:16","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2815,"nodeType":"Block","src":"9579:178:16","statements":[{"AST":{"nodeType":"YulBlock","src":"9641:110:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9662:4:16","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9668:1:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9655:6:16"},"nodeType":"YulFunctionCall","src":"9655:15:16"},"nodeType":"YulExpressionStatement","src":"9655:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9690:4:16","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9696:1:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9683:6:16"},"nodeType":"YulFunctionCall","src":"9683:15:16"},"nodeType":"YulExpressionStatement","src":"9683:15:16"},{"nodeType":"YulAssignment","src":"9711:30:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9730:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9736:4:16","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9720:9:16"},"nodeType":"YulFunctionCall","src":"9720:21:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9711:5:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2807,"isOffset":false,"isSlot":false,"src":"9668:1:16","valueSize":1},{"declaration":2809,"isOffset":false,"isSlot":false,"src":"9696:1:16","valueSize":1},{"declaration":2812,"isOffset":false,"isSlot":false,"src":"9711:5:16","valueSize":1}],"id":2814,"nodeType":"InlineAssembly","src":"9632:119:16"}]},"documentation":{"id":2805,"nodeType":"StructuredDocumentation","src":"9382:109:16","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":2816,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9505:14:16","nodeType":"FunctionDefinition","parameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"a","nameLocation":"9528:1:16","nodeType":"VariableDeclaration","scope":2816,"src":"9520:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2806,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9520:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2809,"mutability":"mutable","name":"b","nameLocation":"9539:1:16","nodeType":"VariableDeclaration","scope":2816,"src":"9531:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2808,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9531:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9519:22:16"},"returnParameters":{"id":2813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2812,"mutability":"mutable","name":"value","nameLocation":"9572:5:16","nodeType":"VariableDeclaration","scope":2816,"src":"9564:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9564:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9563:15:16"},"scope":2817,"src":"9496:261:16","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2818,"src":"803:8956:16","usedErrors":[2286],"usedEvents":[]}],"src":"118:9642:16"},"id":16},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3871]},"id":3872,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2819,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2820,"nodeType":"StructuredDocumentation","src":"129:73:17","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3871,"linearizedBaseContracts":[3871],"name":"Math","nameLocation":"211:4:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"222:50:17","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2823,"name":"MathOverflowedMulDiv","nameLocation":"283:20:17","nodeType":"ErrorDefinition","parameters":{"id":2822,"nodeType":"ParameterList","parameters":[],"src":"303:2:17"},"src":"277:29:17"},{"canonicalName":"Math.Rounding","id":2828,"members":[{"id":2824,"name":"Floor","nameLocation":"336:5:17","nodeType":"EnumValue","src":"336:5:17"},{"id":2825,"name":"Ceil","nameLocation":"379:4:17","nodeType":"EnumValue","src":"379:4:17"},{"id":2826,"name":"Trunc","nameLocation":"421:5:17","nodeType":"EnumValue","src":"421:5:17"},{"id":2827,"name":"Expand","nameLocation":"451:6:17","nodeType":"EnumValue","src":"451:6:17"}],"name":"Rounding","nameLocation":"317:8:17","nodeType":"EnumDefinition","src":"312:169:17"},{"body":{"id":2859,"nodeType":"Block","src":"661:140:17","statements":[{"id":2858,"nodeType":"UncheckedBlock","src":"671:124:17","statements":[{"assignments":[2841],"declarations":[{"constant":false,"id":2841,"mutability":"mutable","name":"c","nameLocation":"703:1:17","nodeType":"VariableDeclaration","scope":2858,"src":"695:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2845,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"707:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2843,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"711:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2846,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"730:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2847,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"734:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2853,"nodeType":"IfStatement","src":"726:28:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2851,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2839,"id":2852,"nodeType":"Return","src":"737:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2855,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"782:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2856,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2839,"id":2857,"nodeType":"Return","src":"768:16:17"}]}]},"documentation":{"id":2829,"nodeType":"StructuredDocumentation","src":"487:93:17","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2860,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:17","nodeType":"FunctionDefinition","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"a","nameLocation":"609:1:17","nodeType":"VariableDeclaration","scope":2860,"src":"601:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"b","nameLocation":"620:1:17","nodeType":"VariableDeclaration","scope":2860,"src":"612:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2832,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:17"},"returnParameters":{"id":2839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2860,"src":"646:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2835,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2860,"src":"652:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2837,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:17"},"scope":3871,"src":"585:216:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2887,"nodeType":"Block","src":"984:113:17","statements":[{"id":2886,"nodeType":"UncheckedBlock","src":"994:97:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"1022:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2873,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"1026:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2879,"nodeType":"IfStatement","src":"1018:28:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2877,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2871,"id":2878,"nodeType":"Return","src":"1029:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2881,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"1074:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2882,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"1078:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2884,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2871,"id":2885,"nodeType":"Return","src":"1060:20:17"}]}]},"documentation":{"id":2861,"nodeType":"StructuredDocumentation","src":"807:96:17","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2888,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:17","nodeType":"FunctionDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"a","nameLocation":"932:1:17","nodeType":"VariableDeclaration","scope":2888,"src":"924:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"b","nameLocation":"943:1:17","nodeType":"VariableDeclaration","scope":2888,"src":"935:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:17"},"returnParameters":{"id":2871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2888,"src":"969:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2867,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2888,"src":"975:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2869,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:17"},"scope":3871,"src":"908:189:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2929,"nodeType":"Block","src":"1283:417:17","statements":[{"id":2928,"nodeType":"UncheckedBlock","src":"1293:401:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2900,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"1551:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2907,"nodeType":"IfStatement","src":"1547:28:17","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2899,"id":2906,"nodeType":"Return","src":"1559:16:17"}},{"assignments":[2909],"declarations":[{"constant":false,"id":2909,"mutability":"mutable","name":"c","nameLocation":"1597:1:17","nodeType":"VariableDeclaration","scope":2928,"src":"1589:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2908,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2913,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2910,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"1601:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2911,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"1605:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2914,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"1624:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2915,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"1628:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2917,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"1633:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2923,"nodeType":"IfStatement","src":"1620:33:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2921,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2899,"id":2922,"nodeType":"Return","src":"1636:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2925,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2909,"src":"1681:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2926,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2899,"id":2927,"nodeType":"Return","src":"1667:16:17"}]}]},"documentation":{"id":2889,"nodeType":"StructuredDocumentation","src":"1103:99:17","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2930,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:17","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"a","nameLocation":"1231:1:17","nodeType":"VariableDeclaration","scope":2930,"src":"1223:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"b","nameLocation":"1242:1:17","nodeType":"VariableDeclaration","scope":2930,"src":"1234:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:17"},"returnParameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2930,"src":"1268:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2895,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2930,"src":"1274:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:17"},"scope":3871,"src":"1207:493:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2957,"nodeType":"Block","src":"1887:114:17","statements":[{"id":2956,"nodeType":"UncheckedBlock","src":"1897:98:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2942,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"1925:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2949,"nodeType":"IfStatement","src":"1921:29:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2941,"id":2948,"nodeType":"Return","src":"1933:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2933,"src":"1978:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2952,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"1982:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2954,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2941,"id":2955,"nodeType":"Return","src":"1964:20:17"}]}]},"documentation":{"id":2931,"nodeType":"StructuredDocumentation","src":"1706:100:17","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2958,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:17","nodeType":"FunctionDefinition","parameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2933,"mutability":"mutable","name":"a","nameLocation":"1835:1:17","nodeType":"VariableDeclaration","scope":2958,"src":"1827:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2932,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2935,"mutability":"mutable","name":"b","nameLocation":"1846:1:17","nodeType":"VariableDeclaration","scope":2958,"src":"1838:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:17"},"returnParameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2958,"src":"1872:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2937,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2958,"src":"1878:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:17"},"scope":3871,"src":"1811:190:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2985,"nodeType":"Block","src":"2198:114:17","statements":[{"id":2984,"nodeType":"UncheckedBlock","src":"2208:98:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2970,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"2236:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2977,"nodeType":"IfStatement","src":"2232:29:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2975,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2969,"id":2976,"nodeType":"Return","src":"2244:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2979,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2289:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2980,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"2293:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2982,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2969,"id":2983,"nodeType":"Return","src":"2275:20:17"}]}]},"documentation":{"id":2959,"nodeType":"StructuredDocumentation","src":"2007:110:17","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2986,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:17","nodeType":"FunctionDefinition","parameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2961,"mutability":"mutable","name":"a","nameLocation":"2146:1:17","nodeType":"VariableDeclaration","scope":2986,"src":"2138:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2960,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2963,"mutability":"mutable","name":"b","nameLocation":"2157:1:17","nodeType":"VariableDeclaration","scope":2986,"src":"2149:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2962,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:17"},"returnParameters":{"id":2969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2986,"src":"2183:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2965,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2986,"src":"2189:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2967,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:17"},"scope":3871,"src":"2122:190:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3003,"nodeType":"Block","src":"2449:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2996,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2466:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2997,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2470:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3000,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"2478:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:17","trueExpression":{"id":2999,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2474:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2995,"id":3002,"nodeType":"Return","src":"2459:20:17"}]},"documentation":{"id":2987,"nodeType":"StructuredDocumentation","src":"2318:59:17","text":" @dev Returns the largest of two numbers."},"id":3004,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:17","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2989,"mutability":"mutable","name":"a","nameLocation":"2403:1:17","nodeType":"VariableDeclaration","scope":3004,"src":"2395:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2991,"mutability":"mutable","name":"b","nameLocation":"2414:1:17","nodeType":"VariableDeclaration","scope":3004,"src":"2406:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:17"},"returnParameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3004,"src":"2440:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2993,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:17"},"scope":3871,"src":"2382:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3021,"nodeType":"Block","src":"2624:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3014,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2641:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3015,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2645:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3018,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"2653:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:17","trueExpression":{"id":3017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2649:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3013,"id":3020,"nodeType":"Return","src":"2634:20:17"}]},"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"2492:60:17","text":" @dev Returns the smallest of two numbers."},"id":3022,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:17","nodeType":"FunctionDefinition","parameters":{"id":3010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3007,"mutability":"mutable","name":"a","nameLocation":"2578:1:17","nodeType":"VariableDeclaration","scope":3022,"src":"2570:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3006,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3009,"mutability":"mutable","name":"b","nameLocation":"2589:1:17","nodeType":"VariableDeclaration","scope":3022,"src":"2581:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:17"},"returnParameters":{"id":3013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3022,"src":"2615:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:17"},"scope":3871,"src":"2557:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3044,"nodeType":"Block","src":"2845:82:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3032,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2900:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3033,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"2904:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3036,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2910:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3037,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"2914:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3039,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3031,"id":3043,"nodeType":"Return","src":"2892:28:17"}]},"documentation":{"id":3023,"nodeType":"StructuredDocumentation","src":"2667:102:17","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3045,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:17","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3025,"mutability":"mutable","name":"a","nameLocation":"2799:1:17","nodeType":"VariableDeclaration","scope":3045,"src":"2791:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3027,"mutability":"mutable","name":"b","nameLocation":"2810:1:17","nodeType":"VariableDeclaration","scope":3045,"src":"2802:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:17"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3045,"src":"2836:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:17"},"scope":3871,"src":"2774:153:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3078,"nodeType":"Block","src":"3219:260:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3055,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"3233:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3063,"nodeType":"IfStatement","src":"3229:127:17","trueBody":{"id":3062,"nodeType":"Block","src":"3241:115:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3340:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3059,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"3344:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3054,"id":3061,"nodeType":"Return","src":"3333:12:17"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3444:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3068,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3048,"src":"3458:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3072,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"3467:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:17","trueExpression":{"hexValue":"30","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3054,"id":3077,"nodeType":"Return","src":"3437:35:17"}]},"documentation":{"id":3046,"nodeType":"StructuredDocumentation","src":"2933:210:17","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3079,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:17","nodeType":"FunctionDefinition","parameters":{"id":3051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3048,"mutability":"mutable","name":"a","nameLocation":"3173:1:17","nodeType":"VariableDeclaration","scope":3079,"src":"3165:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3047,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3050,"mutability":"mutable","name":"b","nameLocation":"3184:1:17","nodeType":"VariableDeclaration","scope":3079,"src":"3176:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3049,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:17"},"returnParameters":{"id":3054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3079,"src":"3210:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3052,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:17"},"scope":3871,"src":"3148:331:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3204,"nodeType":"Block","src":"3901:4018:17","statements":[{"id":3203,"nodeType":"UncheckedBlock","src":"3911:4002:17","statements":[{"assignments":[3092],"declarations":[{"constant":false,"id":3092,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:17","nodeType":"VariableDeclaration","scope":3203,"src":"4232:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3091,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3096,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3093,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"4248:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3094,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4252:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:17"},{"assignments":[3098],"declarations":[{"constant":false,"id":3098,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:17","nodeType":"VariableDeclaration","scope":3203,"src":"4312:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3097,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3099,"nodeType":"VariableDeclarationStatement","src":"4312:13:17"},{"AST":{"nodeType":"YulBlock","src":"4392:122:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:17"},"nodeType":"YulFunctionCall","src":"4433:6:17"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:17"},"nodeType":"YulFunctionCall","src":"4420:20:17"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:17","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:17","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:17"},"nodeType":"YulFunctionCall","src":"4470:14:17"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:17"},"nodeType":"YulFunctionCall","src":"4486:13:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:17"},"nodeType":"YulFunctionCall","src":"4466:34:17"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3092,"isOffset":false,"isSlot":false,"src":"4478:5:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"4493:5:17","valueSize":1},{"declaration":3098,"isOffset":false,"isSlot":false,"src":"4457:5:17","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"4427:1:17","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"4430:1:17","valueSize":1}],"id":3100,"nodeType":"InlineAssembly","src":"4383:131:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3101,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"4595:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3109,"nodeType":"IfStatement","src":"4591:368:17","trueBody":{"id":3108,"nodeType":"Block","src":"4607:352:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3104,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"4925:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3105,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"4933:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3090,"id":3107,"nodeType":"Return","src":"4918:26:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3110,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"5065:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3111,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"5080:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3117,"nodeType":"IfStatement","src":"5061:88:17","trueBody":{"id":3116,"nodeType":"Block","src":"5087:62:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3113,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"5112:20:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3115,"nodeType":"RevertStatement","src":"5105:29:17"}]}},{"assignments":[3119],"declarations":[{"constant":false,"id":3119,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:17","nodeType":"VariableDeclaration","scope":3203,"src":"5404:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3118,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3120,"nodeType":"VariableDeclarationStatement","src":"5404:17:17"},{"AST":{"nodeType":"YulBlock","src":"5444:291:17","statements":[{"nodeType":"YulAssignment","src":"5513:38:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:17"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:17"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:17"},"nodeType":"YulFunctionCall","src":"5526:25:17"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:17"}]},{"nodeType":"YulAssignment","src":"5633:41:17","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:17"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:17"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:17"},"nodeType":"YulFunctionCall","src":"5653:20:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:17"},"nodeType":"YulFunctionCall","src":"5642:32:17"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:17"}]},{"nodeType":"YulAssignment","src":"5691:30:17","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:17"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:17"},"nodeType":"YulFunctionCall","src":"5700:21:17"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3086,"isOffset":false,"isSlot":false,"src":"5539:11:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"5667:5:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"5691:5:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"5704:5:17","valueSize":1},{"declaration":3098,"isOffset":false,"isSlot":false,"src":"5633:5:17","valueSize":1},{"declaration":3098,"isOffset":false,"isSlot":false,"src":"5646:5:17","valueSize":1},{"declaration":3119,"isOffset":false,"isSlot":false,"src":"5513:9:17","valueSize":1},{"declaration":3119,"isOffset":false,"isSlot":false,"src":"5656:9:17","valueSize":1},{"declaration":3119,"isOffset":false,"isSlot":false,"src":"5711:9:17","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"5533:1:17","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"5536:1:17","valueSize":1}],"id":3121,"nodeType":"InlineAssembly","src":"5435:300:17"},{"assignments":[3123],"declarations":[{"constant":false,"id":3123,"mutability":"mutable","name":"twos","nameLocation":"5947:4:17","nodeType":"VariableDeclaration","scope":3203,"src":"5939:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3122,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3130,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3124,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"5954:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3126,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"5973:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:17"},{"AST":{"nodeType":"YulBlock","src":"6008:362:17","statements":[{"nodeType":"YulAssignment","src":"6073:37:17","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:17"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:17"},"nodeType":"YulFunctionCall","src":"6088:22:17"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:17"}]},{"nodeType":"YulAssignment","src":"6177:25:17","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:17"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:17"},"nodeType":"YulFunctionCall","src":"6186:16:17"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:17"}]},{"nodeType":"YulAssignment","src":"6317:39:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:17","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:17"},"nodeType":"YulFunctionCall","src":"6333:12:17"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:17"},"nodeType":"YulFunctionCall","src":"6329:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:17"},"nodeType":"YulFunctionCall","src":"6325:31:17"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3086,"isOffset":false,"isSlot":false,"src":"6073:11:17","valueSize":1},{"declaration":3086,"isOffset":false,"isSlot":false,"src":"6092:11:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"6177:5:17","valueSize":1},{"declaration":3092,"isOffset":false,"isSlot":false,"src":"6190:5:17","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"6105:4:17","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"6197:4:17","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"6317:4:17","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"6340:4:17","valueSize":1},{"declaration":3123,"isOffset":false,"isSlot":false,"src":"6347:4:17","valueSize":1}],"id":3131,"nodeType":"InlineAssembly","src":"5999:371:17"},{"expression":{"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3132,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"6436:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3133,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"6445:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3134,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"6453:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3137,"nodeType":"ExpressionStatement","src":"6436:21:17"},{"assignments":[3139],"declarations":[{"constant":false,"id":3139,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:17","nodeType":"VariableDeclaration","scope":3203,"src":"6775:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3138,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3146,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3141,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"6798:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:17"},{"expression":{"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3147,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7031:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3149,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7046:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3150,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7060:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3154,"nodeType":"ExpressionStatement","src":"7031:36:17"},{"expression":{"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3155,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7100:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7115:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3158,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7129:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3162,"nodeType":"ExpressionStatement","src":"7100:36:17"},{"expression":{"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3163,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7170:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3165,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7185:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3166,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7199:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3170,"nodeType":"ExpressionStatement","src":"7170:36:17"},{"expression":{"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3171,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7240:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3173,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7255:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3174,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7269:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3178,"nodeType":"ExpressionStatement","src":"7240:36:17"},{"expression":{"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3179,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7310:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3181,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7325:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3182,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7339:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3186,"nodeType":"ExpressionStatement","src":"7310:36:17"},{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3187,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7381:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3189,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"7396:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3190,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7410:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3194,"nodeType":"ExpressionStatement","src":"7381:36:17"},{"expression":{"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7851:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3196,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"7860:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3197,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"7868:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3200,"nodeType":"ExpressionStatement","src":"7851:24:17"},{"expression":{"id":3201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"7896:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3090,"id":3202,"nodeType":"Return","src":"7889:13:17"}]}]},"documentation":{"id":3080,"nodeType":"StructuredDocumentation","src":"3485:313:17","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3205,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:17","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"x","nameLocation":"3827:1:17","nodeType":"VariableDeclaration","scope":3205,"src":"3819:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3081,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"y","nameLocation":"3838:1:17","nodeType":"VariableDeclaration","scope":3205,"src":"3830:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:17","nodeType":"VariableDeclaration","scope":3205,"src":"3841:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:17"},"returnParameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3089,"mutability":"mutable","name":"result","nameLocation":"3893:6:17","nodeType":"VariableDeclaration","scope":3205,"src":"3885:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3088,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:17"},"scope":3871,"src":"3803:4116:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3247,"nodeType":"Block","src":"8161:192:17","statements":[{"assignments":[3221],"declarations":[{"constant":false,"id":3221,"mutability":"mutable","name":"result","nameLocation":"8179:6:17","nodeType":"VariableDeclaration","scope":3247,"src":"8171:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3227,"initialValue":{"arguments":[{"id":3223,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"8195:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3224,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"8198:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3225,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"8201:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3222,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3205,3248],"referencedDeclaration":3205,"src":"8188:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3229,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"8244:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3228,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"8227:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2828_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3232,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"8264:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3233,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"8267:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3234,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3212,"src":"8270:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3231,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:17","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3244,"nodeType":"IfStatement","src":"8223:101:17","trueBody":{"id":3243,"nodeType":"Block","src":"8288:36:17","statements":[{"expression":{"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3239,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"8302:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3242,"nodeType":"ExpressionStatement","src":"8302:11:17"}]}},{"expression":{"id":3245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"8340:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3219,"id":3246,"nodeType":"Return","src":"8333:13:17"}]},"documentation":{"id":3206,"nodeType":"StructuredDocumentation","src":"7925:121:17","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3248,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:17","nodeType":"FunctionDefinition","parameters":{"id":3216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"x","nameLocation":"8075:1:17","nodeType":"VariableDeclaration","scope":3248,"src":"8067:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3210,"mutability":"mutable","name":"y","nameLocation":"8086:1:17","nodeType":"VariableDeclaration","scope":3248,"src":"8078:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3209,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3212,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:17","nodeType":"VariableDeclaration","scope":3248,"src":"8089:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3211,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3215,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:17","nodeType":"VariableDeclaration","scope":3248,"src":"8110:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3214,"nodeType":"UserDefinedTypeName","pathNode":{"id":3213,"name":"Rounding","nameLocations":["8110:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"8110:8:17"},"referencedDeclaration":2828,"src":"8110:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:17"},"returnParameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3248,"src":"8152:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3217,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:17"},"scope":3871,"src":"8051:302:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3359,"nodeType":"Block","src":"8644:1585:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"8658:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3262,"nodeType":"IfStatement","src":"8654:45:17","trueBody":{"id":3261,"nodeType":"Block","src":"8666:33:17","statements":[{"expression":{"hexValue":"30","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3255,"id":3260,"nodeType":"Return","src":"8680:8:17"}]}},{"assignments":[3264],"declarations":[{"constant":false,"id":3264,"mutability":"mutable","name":"result","nameLocation":"9386:6:17","nodeType":"VariableDeclaration","scope":3359,"src":"9378:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3273,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3267,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"9406:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3266,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3527,3562],"referencedDeclaration":3527,"src":"9401:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3271,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:17"},{"id":3358,"nodeType":"UncheckedBlock","src":"9815:408:17","statements":[{"expression":{"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3274,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9839:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3275,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9849:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3276,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"9858:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9862:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3284,"nodeType":"ExpressionStatement","src":"9839:35:17"},{"expression":{"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9888:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9898:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3287,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"9907:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9911:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3291,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3295,"nodeType":"ExpressionStatement","src":"9888:35:17"},{"expression":{"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3296,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9937:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9947:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3298,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"9956:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3299,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9960:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3306,"nodeType":"ExpressionStatement","src":"9937:35:17"},{"expression":{"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3307,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9986:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"9996:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3309,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10005:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10009:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3317,"nodeType":"ExpressionStatement","src":"9986:35:17"},{"expression":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10035:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3319,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10045:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3320,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10054:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3321,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10058:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3328,"nodeType":"ExpressionStatement","src":"10035:35:17"},{"expression":{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3329,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10084:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3330,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10094:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3331,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10103:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10107:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3339,"nodeType":"ExpressionStatement","src":"10084:35:17"},{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3340,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10133:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10143:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10152:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10156:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3346,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"10133:35:17"},{"expression":{"arguments":[{"id":3352,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10193:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3353,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"10201:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10205:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3351,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"10189:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3255,"id":3357,"nodeType":"Return","src":"10182:30:17"}]}]},"documentation":{"id":3249,"nodeType":"StructuredDocumentation","src":"8359:223:17","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3360,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:17","nodeType":"FunctionDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"a","nameLocation":"8609:1:17","nodeType":"VariableDeclaration","scope":3360,"src":"8601:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:17"},"returnParameters":{"id":3255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3360,"src":"8635:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:17"},"scope":3871,"src":"8587:1642:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3394,"nodeType":"Block","src":"10405:164:17","statements":[{"id":3393,"nodeType":"UncheckedBlock","src":"10415:148:17","statements":[{"assignments":[3372],"declarations":[{"constant":false,"id":3372,"mutability":"mutable","name":"result","nameLocation":"10447:6:17","nodeType":"VariableDeclaration","scope":3393,"src":"10439:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3371,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3376,"initialValue":{"arguments":[{"id":3374,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10461:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3373,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3360,3395],"referencedDeclaration":3360,"src":"10456:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"10484:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3379,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"10511:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3378,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"10494:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2828_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"10524:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"10533:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3384,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"10542:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:17","trueExpression":{"hexValue":"31","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3390,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3370,"id":3392,"nodeType":"Return","src":"10477:75:17"}]}]},"documentation":{"id":3361,"nodeType":"StructuredDocumentation","src":"10235:89:17","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3395,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:17","nodeType":"FunctionDefinition","parameters":{"id":3367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"a","nameLocation":"10351:1:17","nodeType":"VariableDeclaration","scope":3395,"src":"10343:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3362,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3366,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:17","nodeType":"VariableDeclaration","scope":3395,"src":"10354:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3365,"nodeType":"UserDefinedTypeName","pathNode":{"id":3364,"name":"Rounding","nameLocations":["10354:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"10354:8:17"},"referencedDeclaration":2828,"src":"10354:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:17"},"returnParameters":{"id":3370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3395,"src":"10396:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:17"},"scope":3871,"src":"10329:240:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3526,"nodeType":"Block","src":"10760:922:17","statements":[{"assignments":[3404],"declarations":[{"constant":false,"id":3404,"mutability":"mutable","name":"result","nameLocation":"10778:6:17","nodeType":"VariableDeclaration","scope":3526,"src":"10770:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3403,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3406,"initialValue":{"hexValue":"30","id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:17"},{"id":3523,"nodeType":"UncheckedBlock","src":"10798:855:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10826:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3421,"nodeType":"IfStatement","src":"10822:99:17","trueBody":{"id":3420,"nodeType":"Block","src":"10844:77:17","statements":[{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10862:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"10862:13:17"},{"expression":{"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3416,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"10893:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3419,"nodeType":"ExpressionStatement","src":"10893:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10938:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3436,"nodeType":"IfStatement","src":"10934:96:17","trueBody":{"id":3435,"nodeType":"Block","src":"10955:75:17","statements":[{"expression":{"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10973:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3430,"nodeType":"ExpressionStatement","src":"10973:12:17"},{"expression":{"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11003:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3434,"nodeType":"ExpressionStatement","src":"11003:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11047:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3451,"nodeType":"IfStatement","src":"11043:96:17","trueBody":{"id":3450,"nodeType":"Block","src":"11064:75:17","statements":[{"expression":{"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11082:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3445,"nodeType":"ExpressionStatement","src":"11082:12:17"},{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11112:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3449,"nodeType":"ExpressionStatement","src":"11112:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11156:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3466,"nodeType":"IfStatement","src":"11152:96:17","trueBody":{"id":3465,"nodeType":"Block","src":"11173:75:17","statements":[{"expression":{"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11191:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3460,"nodeType":"ExpressionStatement","src":"11191:12:17"},{"expression":{"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11221:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3464,"nodeType":"ExpressionStatement","src":"11221:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11265:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3481,"nodeType":"IfStatement","src":"11261:93:17","trueBody":{"id":3480,"nodeType":"Block","src":"11281:73:17","statements":[{"expression":{"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11299:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3475,"nodeType":"ExpressionStatement","src":"11299:11:17"},{"expression":{"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3476,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11328:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3479,"nodeType":"ExpressionStatement","src":"11328:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11371:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3496,"nodeType":"IfStatement","src":"11367:93:17","trueBody":{"id":3495,"nodeType":"Block","src":"11387:73:17","statements":[{"expression":{"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11405:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3490,"nodeType":"ExpressionStatement","src":"11405:11:17"},{"expression":{"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11434:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3494,"nodeType":"ExpressionStatement","src":"11434:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11477:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3511,"nodeType":"IfStatement","src":"11473:93:17","trueBody":{"id":3510,"nodeType":"Block","src":"11493:73:17","statements":[{"expression":{"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11511:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"nodeType":"ExpressionStatement","src":"11511:11:17"},{"expression":{"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11540:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3509,"nodeType":"ExpressionStatement","src":"11540:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"11583:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3522,"nodeType":"IfStatement","src":"11579:64:17","trueBody":{"id":3521,"nodeType":"Block","src":"11599:44:17","statements":[{"expression":{"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3517,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11617:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3520,"nodeType":"ExpressionStatement","src":"11617:11:17"}]}}]},{"expression":{"id":3524,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"11669:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3402,"id":3525,"nodeType":"Return","src":"11662:13:17"}]},"documentation":{"id":3396,"nodeType":"StructuredDocumentation","src":"10575:119:17","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3527,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:17","nodeType":"FunctionDefinition","parameters":{"id":3399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3398,"mutability":"mutable","name":"value","nameLocation":"10721:5:17","nodeType":"VariableDeclaration","scope":3527,"src":"10713:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3397,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:17"},"returnParameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3527,"src":"10751:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3400,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:17"},"scope":3871,"src":"10699:983:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3561,"nodeType":"Block","src":"11915:168:17","statements":[{"id":3560,"nodeType":"UncheckedBlock","src":"11925:152:17","statements":[{"assignments":[3539],"declarations":[{"constant":false,"id":3539,"mutability":"mutable","name":"result","nameLocation":"11957:6:17","nodeType":"VariableDeclaration","scope":3560,"src":"11949:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3538,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3543,"initialValue":{"arguments":[{"id":3541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"11971:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3540,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3527,3562],"referencedDeclaration":3527,"src":"11966:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"11998:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3546,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"12025:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3545,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"12008:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2828_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3549,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"12043:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"12052:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:17","trueExpression":{"hexValue":"31","id":3554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3557,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3537,"id":3559,"nodeType":"Return","src":"11991:75:17"}]}]},"documentation":{"id":3528,"nodeType":"StructuredDocumentation","src":"11688:142:17","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3562,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:17","nodeType":"FunctionDefinition","parameters":{"id":3534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3530,"mutability":"mutable","name":"value","nameLocation":"11857:5:17","nodeType":"VariableDeclaration","scope":3562,"src":"11849:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3529,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:17","nodeType":"VariableDeclaration","scope":3562,"src":"11864:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3532,"nodeType":"UserDefinedTypeName","pathNode":{"id":3531,"name":"Rounding","nameLocations":["11864:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"11864:8:17"},"referencedDeclaration":2828,"src":"11864:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:17"},"returnParameters":{"id":3537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3562,"src":"11906:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:17"},"scope":3871,"src":"11835:248:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3690,"nodeType":"Block","src":"12276:854:17","statements":[{"assignments":[3571],"declarations":[{"constant":false,"id":3571,"mutability":"mutable","name":"result","nameLocation":"12294:6:17","nodeType":"VariableDeclaration","scope":3690,"src":"12286:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3573,"initialValue":{"hexValue":"30","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:17"},{"id":3687,"nodeType":"UncheckedBlock","src":"12314:787:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12342:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3590,"nodeType":"IfStatement","src":"12338:103:17","trueBody":{"id":3589,"nodeType":"Block","src":"12361:80:17","statements":[{"expression":{"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12379:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3584,"nodeType":"ExpressionStatement","src":"12379:17:17"},{"expression":{"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12414:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3588,"nodeType":"ExpressionStatement","src":"12414:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3591,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12458:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3607,"nodeType":"IfStatement","src":"12454:103:17","trueBody":{"id":3606,"nodeType":"Block","src":"12477:80:17","statements":[{"expression":{"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3596,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12495:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3601,"nodeType":"ExpressionStatement","src":"12495:17:17"},{"expression":{"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12530:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3605,"nodeType":"ExpressionStatement","src":"12530:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12574:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3624,"nodeType":"IfStatement","src":"12570:103:17","trueBody":{"id":3623,"nodeType":"Block","src":"12593:80:17","statements":[{"expression":{"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12611:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3618,"nodeType":"ExpressionStatement","src":"12611:17:17"},{"expression":{"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3619,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12646:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3622,"nodeType":"ExpressionStatement","src":"12646:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12690:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3641,"nodeType":"IfStatement","src":"12686:100:17","trueBody":{"id":3640,"nodeType":"Block","src":"12708:78:17","statements":[{"expression":{"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12726:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3635,"nodeType":"ExpressionStatement","src":"12726:16:17"},{"expression":{"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3636,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12760:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3639,"nodeType":"ExpressionStatement","src":"12760:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12803:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3658,"nodeType":"IfStatement","src":"12799:100:17","trueBody":{"id":3657,"nodeType":"Block","src":"12821:78:17","statements":[{"expression":{"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3647,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12839:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3652,"nodeType":"ExpressionStatement","src":"12839:16:17"},{"expression":{"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12873:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3656,"nodeType":"ExpressionStatement","src":"12873:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3675,"nodeType":"IfStatement","src":"12912:100:17","trueBody":{"id":3674,"nodeType":"Block","src":"12934:78:17","statements":[{"expression":{"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"12952:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3669,"nodeType":"ExpressionStatement","src":"12952:16:17"},{"expression":{"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"12986:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3673,"nodeType":"ExpressionStatement","src":"12986:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"13029:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3686,"nodeType":"IfStatement","src":"13025:66:17","trueBody":{"id":3685,"nodeType":"Block","src":"13047:44:17","statements":[{"expression":{"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"13065:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3684,"nodeType":"ExpressionStatement","src":"13065:11:17"}]}}]},{"expression":{"id":3688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"13117:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3569,"id":3689,"nodeType":"Return","src":"13110:13:17"}]},"documentation":{"id":3563,"nodeType":"StructuredDocumentation","src":"12089:120:17","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3691,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:17","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"value","nameLocation":"12237:5:17","nodeType":"VariableDeclaration","scope":3691,"src":"12229:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:17"},"returnParameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3691,"src":"12267:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:17"},"scope":3871,"src":"12214:916:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3725,"nodeType":"Block","src":"13365:170:17","statements":[{"id":3724,"nodeType":"UncheckedBlock","src":"13375:154:17","statements":[{"assignments":[3703],"declarations":[{"constant":false,"id":3703,"mutability":"mutable","name":"result","nameLocation":"13407:6:17","nodeType":"VariableDeclaration","scope":3724,"src":"13399:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3702,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3707,"initialValue":{"arguments":[{"id":3705,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"13422:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3704,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3691,3726],"referencedDeclaration":3691,"src":"13416:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"13449:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3710,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"13476:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3709,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"13459:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2828_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"13495:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3715,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"13504:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:17","trueExpression":{"hexValue":"31","id":3718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3701,"id":3723,"nodeType":"Return","src":"13442:76:17"}]}]},"documentation":{"id":3692,"nodeType":"StructuredDocumentation","src":"13136:143:17","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3726,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:17","nodeType":"FunctionDefinition","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"value","nameLocation":"13307:5:17","nodeType":"VariableDeclaration","scope":3726,"src":"13299:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3697,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:17","nodeType":"VariableDeclaration","scope":3726,"src":"13314:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3696,"nodeType":"UserDefinedTypeName","pathNode":{"id":3695,"name":"Rounding","nameLocations":["13314:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"13314:8:17"},"referencedDeclaration":2828,"src":"13314:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:17"},"returnParameters":{"id":3701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3726,"src":"13356:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:17"},"scope":3871,"src":"13284:251:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3812,"nodeType":"Block","src":"13855:600:17","statements":[{"assignments":[3735],"declarations":[{"constant":false,"id":3735,"mutability":"mutable","name":"result","nameLocation":"13873:6:17","nodeType":"VariableDeclaration","scope":3812,"src":"13865:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3737,"initialValue":{"hexValue":"30","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:17"},{"id":3809,"nodeType":"UncheckedBlock","src":"13893:533:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13921:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3752,"nodeType":"IfStatement","src":"13917:98:17","trueBody":{"id":3751,"nodeType":"Block","src":"13939:76:17","statements":[{"expression":{"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"13957:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3746,"nodeType":"ExpressionStatement","src":"13957:13:17"},{"expression":{"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"13988:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3750,"nodeType":"ExpressionStatement","src":"13988:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14032:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3767,"nodeType":"IfStatement","src":"14028:95:17","trueBody":{"id":3766,"nodeType":"Block","src":"14049:74:17","statements":[{"expression":{"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14067:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3761,"nodeType":"ExpressionStatement","src":"14067:12:17"},{"expression":{"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3762,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"14097:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3765,"nodeType":"ExpressionStatement","src":"14097:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14140:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3782,"nodeType":"IfStatement","src":"14136:95:17","trueBody":{"id":3781,"nodeType":"Block","src":"14157:74:17","statements":[{"expression":{"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14175:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3776,"nodeType":"ExpressionStatement","src":"14175:12:17"},{"expression":{"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"14205:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3780,"nodeType":"ExpressionStatement","src":"14205:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14248:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3797,"nodeType":"IfStatement","src":"14244:95:17","trueBody":{"id":3796,"nodeType":"Block","src":"14265:74:17","statements":[{"expression":{"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14283:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3791,"nodeType":"ExpressionStatement","src":"14283:12:17"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"14313:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3795,"nodeType":"ExpressionStatement","src":"14313:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"14356:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3808,"nodeType":"IfStatement","src":"14352:64:17","trueBody":{"id":3807,"nodeType":"Block","src":"14372:44:17","statements":[{"expression":{"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3803,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"14390:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3806,"nodeType":"ExpressionStatement","src":"14390:11:17"}]}}]},{"expression":{"id":3810,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"14442:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3733,"id":3811,"nodeType":"Return","src":"14435:13:17"}]},"documentation":{"id":3727,"nodeType":"StructuredDocumentation","src":"13541:246:17","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3813,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:17","nodeType":"FunctionDefinition","parameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"value","nameLocation":"13816:5:17","nodeType":"VariableDeclaration","scope":3813,"src":"13808:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3728,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:17"},"returnParameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3813,"src":"13846:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:17"},"scope":3871,"src":"13792:663:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3850,"nodeType":"Block","src":"14692:177:17","statements":[{"id":3849,"nodeType":"UncheckedBlock","src":"14702:161:17","statements":[{"assignments":[3825],"declarations":[{"constant":false,"id":3825,"mutability":"mutable","name":"result","nameLocation":"14734:6:17","nodeType":"VariableDeclaration","scope":3849,"src":"14726:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3824,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3829,"initialValue":{"arguments":[{"id":3827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"14750:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3826,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3813,3851],"referencedDeclaration":3813,"src":"14743:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"14777:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3832,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"14804:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3831,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"14787:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2828_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3835,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"14823:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"14838:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:17","trueExpression":{"hexValue":"31","id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3823,"id":3848,"nodeType":"Return","src":"14770:82:17"}]}]},"documentation":{"id":3814,"nodeType":"StructuredDocumentation","src":"14461:144:17","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3851,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:17","nodeType":"FunctionDefinition","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3816,"mutability":"mutable","name":"value","nameLocation":"14634:5:17","nodeType":"VariableDeclaration","scope":3851,"src":"14626:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3815,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3819,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:17","nodeType":"VariableDeclaration","scope":3851,"src":"14641:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3818,"nodeType":"UserDefinedTypeName","pathNode":{"id":3817,"name":"Rounding","nameLocations":["14641:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"14641:8:17"},"referencedDeclaration":2828,"src":"14641:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:17"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3851,"src":"14683:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3821,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:17"},"scope":3871,"src":"14610:259:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3869,"nodeType":"Block","src":"15067:48:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3862,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"15090:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}],"id":3861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3860,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:17","typeDescriptions":{}}},"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3859,"id":3868,"nodeType":"Return","src":"15077:31:17"}]},"documentation":{"id":3852,"nodeType":"StructuredDocumentation","src":"14875:113:17","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3870,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:17","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:17","nodeType":"VariableDeclaration","scope":3870,"src":"15019:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"},"typeName":{"id":3854,"nodeType":"UserDefinedTypeName","pathNode":{"id":3853,"name":"Rounding","nameLocations":["15019:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"15019:8:17"},"referencedDeclaration":2828,"src":"15019:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2828","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:17"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3870,"src":"15061:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3857,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:17"},"scope":3871,"src":"14993:122:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3872,"src":"203:14914:17","usedErrors":[2823],"usedEvents":[]}],"src":"103:15015:17"},"id":17},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[5626]},"id":5627,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3873,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":3874,"nodeType":"StructuredDocumentation","src":"218:545:18","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":5626,"linearizedBaseContracts":[5626],"name":"SafeCast","nameLocation":"772:8:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3875,"nodeType":"StructuredDocumentation","src":"787:68:18","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":3881,"name":"SafeCastOverflowedUintDowncast","nameLocation":"866:30:18","nodeType":"ErrorDefinition","parameters":{"id":3880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"bits","nameLocation":"903:4:18","nodeType":"VariableDeclaration","scope":3881,"src":"897:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3876,"name":"uint8","nodeType":"ElementaryTypeName","src":"897:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3879,"mutability":"mutable","name":"value","nameLocation":"917:5:18","nodeType":"VariableDeclaration","scope":3881,"src":"909:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"896:27:18"},"src":"860:64:18"},{"documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"930:75:18","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":3886,"name":"SafeCastOverflowedIntToUint","nameLocation":"1016:27:18","nodeType":"ErrorDefinition","parameters":{"id":3885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3884,"mutability":"mutable","name":"value","nameLocation":"1051:5:18","nodeType":"VariableDeclaration","scope":3886,"src":"1044:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3883,"name":"int256","nodeType":"ElementaryTypeName","src":"1044:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1043:14:18"},"src":"1010:48:18"},{"documentation":{"id":3887,"nodeType":"StructuredDocumentation","src":"1064:67:18","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":3893,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1142:29:18","nodeType":"ErrorDefinition","parameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"bits","nameLocation":"1178:4:18","nodeType":"VariableDeclaration","scope":3893,"src":"1172:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3888,"name":"uint8","nodeType":"ElementaryTypeName","src":"1172:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3891,"mutability":"mutable","name":"value","nameLocation":"1191:5:18","nodeType":"VariableDeclaration","scope":3893,"src":"1184:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3890,"name":"int256","nodeType":"ElementaryTypeName","src":"1184:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1171:26:18"},"src":"1136:62:18"},{"documentation":{"id":3894,"nodeType":"StructuredDocumentation","src":"1204:75:18","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":3898,"name":"SafeCastOverflowedUintToInt","nameLocation":"1290:27:18","nodeType":"ErrorDefinition","parameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"value","nameLocation":"1326:5:18","nodeType":"VariableDeclaration","scope":3898,"src":"1318:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1317:15:18"},"src":"1284:49:18"},{"body":{"id":3925,"nodeType":"Block","src":"1690:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1704:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1717:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3908,"name":"uint248","nodeType":"ElementaryTypeName","src":"1717:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":3907,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1712:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1712:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1726:3:18","memberName":"max","nodeType":"MemberAccess","src":"1712:17:18","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1704:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3919,"nodeType":"IfStatement","src":"1700:105:18","trueBody":{"id":3918,"nodeType":"Block","src":"1731:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:3:18","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":3915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1788:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3913,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"1752:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3917,"nodeType":"RevertStatement","src":"1745:49:18"}]}},{"expression":{"arguments":[{"id":3922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"1829:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1821:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3920,"name":"uint248","nodeType":"ElementaryTypeName","src":"1821:7:18","typeDescriptions":{}}},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1821:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":3905,"id":3924,"nodeType":"Return","src":"1814:21:18"}]},"documentation":{"id":3899,"nodeType":"StructuredDocumentation","src":"1339:280:18","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":3926,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1633:9:18","nodeType":"FunctionDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3901,"mutability":"mutable","name":"value","nameLocation":"1651:5:18","nodeType":"VariableDeclaration","scope":3926,"src":"1643:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1642:15:18"},"returnParameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3926,"src":"1681:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":3903,"name":"uint248","nodeType":"ElementaryTypeName","src":"1681:7:18","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1680:9:18"},"scope":5626,"src":"1624:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3953,"nodeType":"Block","src":"2199:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3934,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2213:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2226:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3936,"name":"uint240","nodeType":"ElementaryTypeName","src":"2226:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":3935,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2221:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":3939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2235:3:18","memberName":"max","nodeType":"MemberAccess","src":"2221:17:18","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2213:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3947,"nodeType":"IfStatement","src":"2209:105:18","trueBody":{"id":3946,"nodeType":"Block","src":"2240:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2292:3:18","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":3943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2297:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3941,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"2261:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3945,"nodeType":"RevertStatement","src":"2254:49:18"}]}},{"expression":{"arguments":[{"id":3950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2338:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2330:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3948,"name":"uint240","nodeType":"ElementaryTypeName","src":"2330:7:18","typeDescriptions":{}}},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":3933,"id":3952,"nodeType":"Return","src":"2323:21:18"}]},"documentation":{"id":3927,"nodeType":"StructuredDocumentation","src":"1848:280:18","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":3954,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2142:9:18","nodeType":"FunctionDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3929,"mutability":"mutable","name":"value","nameLocation":"2160:5:18","nodeType":"VariableDeclaration","scope":3954,"src":"2152:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2151:15:18"},"returnParameters":{"id":3933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3954,"src":"2190:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":3931,"name":"uint240","nodeType":"ElementaryTypeName","src":"2190:7:18","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2189:9:18"},"scope":5626,"src":"2133:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3981,"nodeType":"Block","src":"2708:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"2722:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2735:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3964,"name":"uint232","nodeType":"ElementaryTypeName","src":"2735:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":3963,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2730:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":3967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:3:18","memberName":"max","nodeType":"MemberAccess","src":"2730:17:18","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2722:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3975,"nodeType":"IfStatement","src":"2718:105:18","trueBody":{"id":3974,"nodeType":"Block","src":"2749:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2801:3:18","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":3971,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"2806:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3969,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"2770:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2770:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3973,"nodeType":"RevertStatement","src":"2763:49:18"}]}},{"expression":{"arguments":[{"id":3978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3957,"src":"2847:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2839:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3976,"name":"uint232","nodeType":"ElementaryTypeName","src":"2839:7:18","typeDescriptions":{}}},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":3961,"id":3980,"nodeType":"Return","src":"2832:21:18"}]},"documentation":{"id":3955,"nodeType":"StructuredDocumentation","src":"2357:280:18","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":3982,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2651:9:18","nodeType":"FunctionDefinition","parameters":{"id":3958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3957,"mutability":"mutable","name":"value","nameLocation":"2669:5:18","nodeType":"VariableDeclaration","scope":3982,"src":"2661:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3956,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2660:15:18"},"returnParameters":{"id":3961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3982,"src":"2699:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":3959,"name":"uint232","nodeType":"ElementaryTypeName","src":"2699:7:18","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2698:9:18"},"scope":5626,"src":"2642:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4009,"nodeType":"Block","src":"3217:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"3231:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3244:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3992,"name":"uint224","nodeType":"ElementaryTypeName","src":"3244:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":3991,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3239:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3253:3:18","memberName":"max","nodeType":"MemberAccess","src":"3239:17:18","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3231:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4003,"nodeType":"IfStatement","src":"3227:105:18","trueBody":{"id":4002,"nodeType":"Block","src":"3258:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:3:18","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":3999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"3315:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3997,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"3279:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4001,"nodeType":"RevertStatement","src":"3272:49:18"}]}},{"expression":{"arguments":[{"id":4006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"3356:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3348:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4004,"name":"uint224","nodeType":"ElementaryTypeName","src":"3348:7:18","typeDescriptions":{}}},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":3989,"id":4008,"nodeType":"Return","src":"3341:21:18"}]},"documentation":{"id":3983,"nodeType":"StructuredDocumentation","src":"2866:280:18","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4010,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3160:9:18","nodeType":"FunctionDefinition","parameters":{"id":3986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3985,"mutability":"mutable","name":"value","nameLocation":"3178:5:18","nodeType":"VariableDeclaration","scope":4010,"src":"3170:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3984,"name":"uint256","nodeType":"ElementaryTypeName","src":"3170:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3169:15:18"},"returnParameters":{"id":3989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4010,"src":"3208:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3987,"name":"uint224","nodeType":"ElementaryTypeName","src":"3208:7:18","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3207:9:18"},"scope":5626,"src":"3151:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4037,"nodeType":"Block","src":"3726:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"3740:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3753:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4020,"name":"uint216","nodeType":"ElementaryTypeName","src":"3753:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":4019,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3748:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3748:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3762:3:18","memberName":"max","nodeType":"MemberAccess","src":"3748:17:18","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3740:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4031,"nodeType":"IfStatement","src":"3736:105:18","trueBody":{"id":4030,"nodeType":"Block","src":"3767:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3819:3:18","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"3824:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4025,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"3788:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3788:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4029,"nodeType":"RevertStatement","src":"3781:49:18"}]}},{"expression":{"arguments":[{"id":4034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"3865:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3857:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4032,"name":"uint216","nodeType":"ElementaryTypeName","src":"3857:7:18","typeDescriptions":{}}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3857:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":4017,"id":4036,"nodeType":"Return","src":"3850:21:18"}]},"documentation":{"id":4011,"nodeType":"StructuredDocumentation","src":"3375:280:18","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4038,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3669:9:18","nodeType":"FunctionDefinition","parameters":{"id":4014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4013,"mutability":"mutable","name":"value","nameLocation":"3687:5:18","nodeType":"VariableDeclaration","scope":4038,"src":"3679:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4012,"name":"uint256","nodeType":"ElementaryTypeName","src":"3679:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3678:15:18"},"returnParameters":{"id":4017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4038,"src":"3717:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":4015,"name":"uint216","nodeType":"ElementaryTypeName","src":"3717:7:18","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3716:9:18"},"scope":5626,"src":"3660:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4065,"nodeType":"Block","src":"4235:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"4249:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4262:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4048,"name":"uint208","nodeType":"ElementaryTypeName","src":"4262:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":4047,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4257:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4257:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":4051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4271:3:18","memberName":"max","nodeType":"MemberAccess","src":"4257:17:18","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4249:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4059,"nodeType":"IfStatement","src":"4245:105:18","trueBody":{"id":4058,"nodeType":"Block","src":"4276:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4328:3:18","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"4333:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4053,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"4297:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4057,"nodeType":"RevertStatement","src":"4290:49:18"}]}},{"expression":{"arguments":[{"id":4062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"4374:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4366:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4060,"name":"uint208","nodeType":"ElementaryTypeName","src":"4366:7:18","typeDescriptions":{}}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4366:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":4045,"id":4064,"nodeType":"Return","src":"4359:21:18"}]},"documentation":{"id":4039,"nodeType":"StructuredDocumentation","src":"3884:280:18","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4066,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4178:9:18","nodeType":"FunctionDefinition","parameters":{"id":4042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4041,"mutability":"mutable","name":"value","nameLocation":"4196:5:18","nodeType":"VariableDeclaration","scope":4066,"src":"4188:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4040,"name":"uint256","nodeType":"ElementaryTypeName","src":"4188:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4187:15:18"},"returnParameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4066,"src":"4226:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":4043,"name":"uint208","nodeType":"ElementaryTypeName","src":"4226:7:18","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4225:9:18"},"scope":5626,"src":"4169:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4093,"nodeType":"Block","src":"4744:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4758:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4771:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4076,"name":"uint200","nodeType":"ElementaryTypeName","src":"4771:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":4075,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4766:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4766:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4780:3:18","memberName":"max","nodeType":"MemberAccess","src":"4766:17:18","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4758:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4087,"nodeType":"IfStatement","src":"4754:105:18","trueBody":{"id":4086,"nodeType":"Block","src":"4785:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4837:3:18","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4842:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4081,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"4806:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4085,"nodeType":"RevertStatement","src":"4799:49:18"}]}},{"expression":{"arguments":[{"id":4090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4883:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4875:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4088,"name":"uint200","nodeType":"ElementaryTypeName","src":"4875:7:18","typeDescriptions":{}}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4875:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":4073,"id":4092,"nodeType":"Return","src":"4868:21:18"}]},"documentation":{"id":4067,"nodeType":"StructuredDocumentation","src":"4393:280:18","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4094,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4687:9:18","nodeType":"FunctionDefinition","parameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4069,"mutability":"mutable","name":"value","nameLocation":"4705:5:18","nodeType":"VariableDeclaration","scope":4094,"src":"4697:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"4697:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4696:15:18"},"returnParameters":{"id":4073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4094,"src":"4735:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":4071,"name":"uint200","nodeType":"ElementaryTypeName","src":"4735:7:18","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4734:9:18"},"scope":5626,"src":"4678:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4121,"nodeType":"Block","src":"5253:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"5267:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5280:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4104,"name":"uint192","nodeType":"ElementaryTypeName","src":"5280:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":4103,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5275:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5275:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5289:3:18","memberName":"max","nodeType":"MemberAccess","src":"5275:17:18","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5267:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4115,"nodeType":"IfStatement","src":"5263:105:18","trueBody":{"id":4114,"nodeType":"Block","src":"5294:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5346:3:18","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":4111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"5351:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4109,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"5315:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5315:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4113,"nodeType":"RevertStatement","src":"5308:49:18"}]}},{"expression":{"arguments":[{"id":4118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"5392:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5384:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":4116,"name":"uint192","nodeType":"ElementaryTypeName","src":"5384:7:18","typeDescriptions":{}}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5384:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":4101,"id":4120,"nodeType":"Return","src":"5377:21:18"}]},"documentation":{"id":4095,"nodeType":"StructuredDocumentation","src":"4902:280:18","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":4122,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5196:9:18","nodeType":"FunctionDefinition","parameters":{"id":4098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"value","nameLocation":"5214:5:18","nodeType":"VariableDeclaration","scope":4122,"src":"5206:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4096,"name":"uint256","nodeType":"ElementaryTypeName","src":"5206:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5205:15:18"},"returnParameters":{"id":4101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4122,"src":"5244:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":4099,"name":"uint192","nodeType":"ElementaryTypeName","src":"5244:7:18","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5243:9:18"},"scope":5626,"src":"5187:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4149,"nodeType":"Block","src":"5762:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5776:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5789:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4132,"name":"uint184","nodeType":"ElementaryTypeName","src":"5789:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":4131,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5784:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5798:3:18","memberName":"max","nodeType":"MemberAccess","src":"5784:17:18","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5776:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4143,"nodeType":"IfStatement","src":"5772:105:18","trueBody":{"id":4142,"nodeType":"Block","src":"5803:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5855:3:18","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":4139,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5860:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4137,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"5824:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5824:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4141,"nodeType":"RevertStatement","src":"5817:49:18"}]}},{"expression":{"arguments":[{"id":4146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"5901:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5893:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":4144,"name":"uint184","nodeType":"ElementaryTypeName","src":"5893:7:18","typeDescriptions":{}}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5893:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":4129,"id":4148,"nodeType":"Return","src":"5886:21:18"}]},"documentation":{"id":4123,"nodeType":"StructuredDocumentation","src":"5411:280:18","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":4150,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5705:9:18","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4125,"mutability":"mutable","name":"value","nameLocation":"5723:5:18","nodeType":"VariableDeclaration","scope":4150,"src":"5715:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4124,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5714:15:18"},"returnParameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4150,"src":"5753:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":4127,"name":"uint184","nodeType":"ElementaryTypeName","src":"5753:7:18","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5752:9:18"},"scope":5626,"src":"5696:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4177,"nodeType":"Block","src":"6271:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"6285:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6298:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4160,"name":"uint176","nodeType":"ElementaryTypeName","src":"6298:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":4159,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6293:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6307:3:18","memberName":"max","nodeType":"MemberAccess","src":"6293:17:18","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6285:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4171,"nodeType":"IfStatement","src":"6281:105:18","trueBody":{"id":4170,"nodeType":"Block","src":"6312:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6364:3:18","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":4167,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"6369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4165,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"6333:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4169,"nodeType":"RevertStatement","src":"6326:49:18"}]}},{"expression":{"arguments":[{"id":4174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"6410:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6402:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":4172,"name":"uint176","nodeType":"ElementaryTypeName","src":"6402:7:18","typeDescriptions":{}}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":4157,"id":4176,"nodeType":"Return","src":"6395:21:18"}]},"documentation":{"id":4151,"nodeType":"StructuredDocumentation","src":"5920:280:18","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":4178,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6214:9:18","nodeType":"FunctionDefinition","parameters":{"id":4154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4153,"mutability":"mutable","name":"value","nameLocation":"6232:5:18","nodeType":"VariableDeclaration","scope":4178,"src":"6224:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4152,"name":"uint256","nodeType":"ElementaryTypeName","src":"6224:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6223:15:18"},"returnParameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4178,"src":"6262:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":4155,"name":"uint176","nodeType":"ElementaryTypeName","src":"6262:7:18","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6261:9:18"},"scope":5626,"src":"6205:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4205,"nodeType":"Block","src":"6780:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"6794:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6807:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4188,"name":"uint168","nodeType":"ElementaryTypeName","src":"6807:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":4187,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6802:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6802:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":4191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6816:3:18","memberName":"max","nodeType":"MemberAccess","src":"6802:17:18","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6794:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4199,"nodeType":"IfStatement","src":"6790:105:18","trueBody":{"id":4198,"nodeType":"Block","src":"6821:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":4194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6873:3:18","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":4195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"6878:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4193,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"6842:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6842:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4197,"nodeType":"RevertStatement","src":"6835:49:18"}]}},{"expression":{"arguments":[{"id":4202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"6919:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":4200,"name":"uint168","nodeType":"ElementaryTypeName","src":"6911:7:18","typeDescriptions":{}}},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":4185,"id":4204,"nodeType":"Return","src":"6904:21:18"}]},"documentation":{"id":4179,"nodeType":"StructuredDocumentation","src":"6429:280:18","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":4206,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6723:9:18","nodeType":"FunctionDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4181,"mutability":"mutable","name":"value","nameLocation":"6741:5:18","nodeType":"VariableDeclaration","scope":4206,"src":"6733:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4180,"name":"uint256","nodeType":"ElementaryTypeName","src":"6733:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6732:15:18"},"returnParameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4206,"src":"6771:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":4183,"name":"uint168","nodeType":"ElementaryTypeName","src":"6771:7:18","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6770:9:18"},"scope":5626,"src":"6714:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4233,"nodeType":"Block","src":"7289:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"7303:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7316:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4216,"name":"uint160","nodeType":"ElementaryTypeName","src":"7316:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":4215,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7311:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7325:3:18","memberName":"max","nodeType":"MemberAccess","src":"7311:17:18","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7303:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4227,"nodeType":"IfStatement","src":"7299:105:18","trueBody":{"id":4226,"nodeType":"Block","src":"7330:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":4222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7382:3:18","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":4223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"7387:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4221,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7351:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7351:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4225,"nodeType":"RevertStatement","src":"7344:49:18"}]}},{"expression":{"arguments":[{"id":4230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"7428:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7420:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4228,"name":"uint160","nodeType":"ElementaryTypeName","src":"7420:7:18","typeDescriptions":{}}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7420:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":4213,"id":4232,"nodeType":"Return","src":"7413:21:18"}]},"documentation":{"id":4207,"nodeType":"StructuredDocumentation","src":"6938:280:18","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":4234,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7232:9:18","nodeType":"FunctionDefinition","parameters":{"id":4210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4209,"mutability":"mutable","name":"value","nameLocation":"7250:5:18","nodeType":"VariableDeclaration","scope":4234,"src":"7242:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4208,"name":"uint256","nodeType":"ElementaryTypeName","src":"7242:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7241:15:18"},"returnParameters":{"id":4213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4234,"src":"7280:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":4211,"name":"uint160","nodeType":"ElementaryTypeName","src":"7280:7:18","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7279:9:18"},"scope":5626,"src":"7223:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4261,"nodeType":"Block","src":"7798:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"7812:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7825:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4244,"name":"uint152","nodeType":"ElementaryTypeName","src":"7825:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":4243,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7820:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7820:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":4247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7834:3:18","memberName":"max","nodeType":"MemberAccess","src":"7820:17:18","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7812:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4255,"nodeType":"IfStatement","src":"7808:105:18","trueBody":{"id":4254,"nodeType":"Block","src":"7839:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7891:3:18","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":4251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"7896:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4249,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"7860:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7860:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4253,"nodeType":"RevertStatement","src":"7853:49:18"}]}},{"expression":{"arguments":[{"id":4258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"7937:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7929:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4256,"name":"uint152","nodeType":"ElementaryTypeName","src":"7929:7:18","typeDescriptions":{}}},"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7929:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":4241,"id":4260,"nodeType":"Return","src":"7922:21:18"}]},"documentation":{"id":4235,"nodeType":"StructuredDocumentation","src":"7447:280:18","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":4262,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7741:9:18","nodeType":"FunctionDefinition","parameters":{"id":4238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"value","nameLocation":"7759:5:18","nodeType":"VariableDeclaration","scope":4262,"src":"7751:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4236,"name":"uint256","nodeType":"ElementaryTypeName","src":"7751:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7750:15:18"},"returnParameters":{"id":4241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4262,"src":"7789:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":4239,"name":"uint152","nodeType":"ElementaryTypeName","src":"7789:7:18","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7788:9:18"},"scope":5626,"src":"7732:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4289,"nodeType":"Block","src":"8307:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"8321:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8334:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4272,"name":"uint144","nodeType":"ElementaryTypeName","src":"8334:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":4271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8329:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8329:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8343:3:18","memberName":"max","nodeType":"MemberAccess","src":"8329:17:18","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8321:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4283,"nodeType":"IfStatement","src":"8317:105:18","trueBody":{"id":4282,"nodeType":"Block","src":"8348:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":4278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8400:3:18","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":4279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"8405:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4277,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"8369:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8369:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4281,"nodeType":"RevertStatement","src":"8362:49:18"}]}},{"expression":{"arguments":[{"id":4286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"8446:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8438:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4284,"name":"uint144","nodeType":"ElementaryTypeName","src":"8438:7:18","typeDescriptions":{}}},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":4269,"id":4288,"nodeType":"Return","src":"8431:21:18"}]},"documentation":{"id":4263,"nodeType":"StructuredDocumentation","src":"7956:280:18","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":4290,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8250:9:18","nodeType":"FunctionDefinition","parameters":{"id":4266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4265,"mutability":"mutable","name":"value","nameLocation":"8268:5:18","nodeType":"VariableDeclaration","scope":4290,"src":"8260:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4264,"name":"uint256","nodeType":"ElementaryTypeName","src":"8260:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8259:15:18"},"returnParameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4290,"src":"8298:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":4267,"name":"uint144","nodeType":"ElementaryTypeName","src":"8298:7:18","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8297:9:18"},"scope":5626,"src":"8241:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4317,"nodeType":"Block","src":"8816:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4298,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"8830:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8843:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4300,"name":"uint136","nodeType":"ElementaryTypeName","src":"8843:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":4299,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8838:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8838:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8852:3:18","memberName":"max","nodeType":"MemberAccess","src":"8838:17:18","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8830:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4311,"nodeType":"IfStatement","src":"8826:105:18","trueBody":{"id":4310,"nodeType":"Block","src":"8857:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":4306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8909:3:18","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":4307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"8914:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4305,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"8878:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8878:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4309,"nodeType":"RevertStatement","src":"8871:49:18"}]}},{"expression":{"arguments":[{"id":4314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"8955:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8947:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4312,"name":"uint136","nodeType":"ElementaryTypeName","src":"8947:7:18","typeDescriptions":{}}},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8947:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":4297,"id":4316,"nodeType":"Return","src":"8940:21:18"}]},"documentation":{"id":4291,"nodeType":"StructuredDocumentation","src":"8465:280:18","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":4318,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8759:9:18","nodeType":"FunctionDefinition","parameters":{"id":4294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4293,"mutability":"mutable","name":"value","nameLocation":"8777:5:18","nodeType":"VariableDeclaration","scope":4318,"src":"8769:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4292,"name":"uint256","nodeType":"ElementaryTypeName","src":"8769:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8768:15:18"},"returnParameters":{"id":4297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4318,"src":"8807:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":4295,"name":"uint136","nodeType":"ElementaryTypeName","src":"8807:7:18","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8806:9:18"},"scope":5626,"src":"8750:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4345,"nodeType":"Block","src":"9325:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4321,"src":"9339:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9352:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4328,"name":"uint128","nodeType":"ElementaryTypeName","src":"9352:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4327,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9347:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9347:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9361:3:18","memberName":"max","nodeType":"MemberAccess","src":"9347:17:18","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9339:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4339,"nodeType":"IfStatement","src":"9335:105:18","trueBody":{"id":4338,"nodeType":"Block","src":"9366:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":4334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9418:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":4335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4321,"src":"9423:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4333,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"9387:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9387:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4337,"nodeType":"RevertStatement","src":"9380:49:18"}]}},{"expression":{"arguments":[{"id":4342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4321,"src":"9464:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9456:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4340,"name":"uint128","nodeType":"ElementaryTypeName","src":"9456:7:18","typeDescriptions":{}}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9456:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4325,"id":4344,"nodeType":"Return","src":"9449:21:18"}]},"documentation":{"id":4319,"nodeType":"StructuredDocumentation","src":"8974:280:18","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":4346,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9268:9:18","nodeType":"FunctionDefinition","parameters":{"id":4322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"mutability":"mutable","name":"value","nameLocation":"9286:5:18","nodeType":"VariableDeclaration","scope":4346,"src":"9278:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4320,"name":"uint256","nodeType":"ElementaryTypeName","src":"9278:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9277:15:18"},"returnParameters":{"id":4325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4346,"src":"9316:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4323,"name":"uint128","nodeType":"ElementaryTypeName","src":"9316:7:18","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9315:9:18"},"scope":5626,"src":"9259:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4373,"nodeType":"Block","src":"9834:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9848:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9861:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4356,"name":"uint120","nodeType":"ElementaryTypeName","src":"9861:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":4355,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9856:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9870:3:18","memberName":"max","nodeType":"MemberAccess","src":"9856:17:18","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9848:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4367,"nodeType":"IfStatement","src":"9844:105:18","trueBody":{"id":4366,"nodeType":"Block","src":"9875:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9927:3:18","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":4363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9932:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4361,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"9896:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9896:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4365,"nodeType":"RevertStatement","src":"9889:49:18"}]}},{"expression":{"arguments":[{"id":4370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"9973:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9965:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4368,"name":"uint120","nodeType":"ElementaryTypeName","src":"9965:7:18","typeDescriptions":{}}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":4353,"id":4372,"nodeType":"Return","src":"9958:21:18"}]},"documentation":{"id":4347,"nodeType":"StructuredDocumentation","src":"9483:280:18","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":4374,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9777:9:18","nodeType":"FunctionDefinition","parameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"value","nameLocation":"9795:5:18","nodeType":"VariableDeclaration","scope":4374,"src":"9787:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4348,"name":"uint256","nodeType":"ElementaryTypeName","src":"9787:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9786:15:18"},"returnParameters":{"id":4353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4374,"src":"9825:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":4351,"name":"uint120","nodeType":"ElementaryTypeName","src":"9825:7:18","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9824:9:18"},"scope":5626,"src":"9768:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4401,"nodeType":"Block","src":"10343:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"10357:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10370:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4384,"name":"uint112","nodeType":"ElementaryTypeName","src":"10370:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":4383,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10365:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10365:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10379:3:18","memberName":"max","nodeType":"MemberAccess","src":"10365:17:18","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10357:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4395,"nodeType":"IfStatement","src":"10353:105:18","trueBody":{"id":4394,"nodeType":"Block","src":"10384:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":4390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10436:3:18","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":4391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"10441:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4389,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"10405:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10405:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4393,"nodeType":"RevertStatement","src":"10398:49:18"}]}},{"expression":{"arguments":[{"id":4398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"10482:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4396,"name":"uint112","nodeType":"ElementaryTypeName","src":"10474:7:18","typeDescriptions":{}}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10474:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":4381,"id":4400,"nodeType":"Return","src":"10467:21:18"}]},"documentation":{"id":4375,"nodeType":"StructuredDocumentation","src":"9992:280:18","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":4402,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10286:9:18","nodeType":"FunctionDefinition","parameters":{"id":4378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4377,"mutability":"mutable","name":"value","nameLocation":"10304:5:18","nodeType":"VariableDeclaration","scope":4402,"src":"10296:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4376,"name":"uint256","nodeType":"ElementaryTypeName","src":"10296:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10295:15:18"},"returnParameters":{"id":4381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4402,"src":"10334:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":4379,"name":"uint112","nodeType":"ElementaryTypeName","src":"10334:7:18","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10333:9:18"},"scope":5626,"src":"10277:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4429,"nodeType":"Block","src":"10852:152:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"10866:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10879:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4412,"name":"uint104","nodeType":"ElementaryTypeName","src":"10879:7:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":4411,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10874:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10874:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":4415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10888:3:18","memberName":"max","nodeType":"MemberAccess","src":"10874:17:18","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10866:25:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4423,"nodeType":"IfStatement","src":"10862:105:18","trueBody":{"id":4422,"nodeType":"Block","src":"10893:74:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":4418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10945:3:18","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":4419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"10950:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4417,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"10914:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10914:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4421,"nodeType":"RevertStatement","src":"10907:49:18"}]}},{"expression":{"arguments":[{"id":4426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4405,"src":"10991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10983:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4424,"name":"uint104","nodeType":"ElementaryTypeName","src":"10983:7:18","typeDescriptions":{}}},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10983:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":4409,"id":4428,"nodeType":"Return","src":"10976:21:18"}]},"documentation":{"id":4403,"nodeType":"StructuredDocumentation","src":"10501:280:18","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":4430,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10795:9:18","nodeType":"FunctionDefinition","parameters":{"id":4406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4405,"mutability":"mutable","name":"value","nameLocation":"10813:5:18","nodeType":"VariableDeclaration","scope":4430,"src":"10805:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4404,"name":"uint256","nodeType":"ElementaryTypeName","src":"10805:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10804:15:18"},"returnParameters":{"id":4409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4430,"src":"10843:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":4407,"name":"uint104","nodeType":"ElementaryTypeName","src":"10843:7:18","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10842:9:18"},"scope":5626,"src":"10786:218:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4457,"nodeType":"Block","src":"11355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4440,"name":"uint96","nodeType":"ElementaryTypeName","src":"11382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":4439,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11390:3:18","memberName":"max","nodeType":"MemberAccess","src":"11377:16:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4451,"nodeType":"IfStatement","src":"11365:103:18","trueBody":{"id":4450,"nodeType":"Block","src":"11395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":4446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":4447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4445,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"11416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4449,"nodeType":"RevertStatement","src":"11409:48:18"}]}},{"expression":{"arguments":[{"id":4454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4452,"name":"uint96","nodeType":"ElementaryTypeName","src":"11484:6:18","typeDescriptions":{}}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4437,"id":4456,"nodeType":"Return","src":"11477:20:18"}]},"documentation":{"id":4431,"nodeType":"StructuredDocumentation","src":"11010:276:18","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":4458,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4433,"mutability":"mutable","name":"value","nameLocation":"11317:5:18","nodeType":"VariableDeclaration","scope":4458,"src":"11309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4432,"name":"uint256","nodeType":"ElementaryTypeName","src":"11309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11308:15:18"},"returnParameters":{"id":4437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4458,"src":"11347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4435,"name":"uint96","nodeType":"ElementaryTypeName","src":"11347:6:18","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11346:8:18"},"scope":5626,"src":"11291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4485,"nodeType":"Block","src":"11855:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"11869:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11882:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4468,"name":"uint88","nodeType":"ElementaryTypeName","src":"11882:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":4467,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11877:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11877:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":4471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11890:3:18","memberName":"max","nodeType":"MemberAccess","src":"11877:16:18","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11869:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4479,"nodeType":"IfStatement","src":"11865:103:18","trueBody":{"id":4478,"nodeType":"Block","src":"11895:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":4475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"11951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4473,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"11916:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11916:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4477,"nodeType":"RevertStatement","src":"11909:48:18"}]}},{"expression":{"arguments":[{"id":4482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"11991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4480,"name":"uint88","nodeType":"ElementaryTypeName","src":"11984:6:18","typeDescriptions":{}}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":4465,"id":4484,"nodeType":"Return","src":"11977:20:18"}]},"documentation":{"id":4459,"nodeType":"StructuredDocumentation","src":"11510:276:18","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":4486,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11800:8:18","nodeType":"FunctionDefinition","parameters":{"id":4462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4461,"mutability":"mutable","name":"value","nameLocation":"11817:5:18","nodeType":"VariableDeclaration","scope":4486,"src":"11809:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4460,"name":"uint256","nodeType":"ElementaryTypeName","src":"11809:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11808:15:18"},"returnParameters":{"id":4465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4486,"src":"11847:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":4463,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:18","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11846:8:18"},"scope":5626,"src":"11791:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4513,"nodeType":"Block","src":"12355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"12369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4496,"name":"uint80","nodeType":"ElementaryTypeName","src":"12382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":4495,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12390:3:18","memberName":"max","nodeType":"MemberAccess","src":"12377:16:18","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4507,"nodeType":"IfStatement","src":"12365:103:18","trueBody":{"id":4506,"nodeType":"Block","src":"12395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":4502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":4503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"12451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4501,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"12416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4505,"nodeType":"RevertStatement","src":"12409:48:18"}]}},{"expression":{"arguments":[{"id":4510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"12491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4508,"name":"uint80","nodeType":"ElementaryTypeName","src":"12484:6:18","typeDescriptions":{}}},"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":4493,"id":4512,"nodeType":"Return","src":"12477:20:18"}]},"documentation":{"id":4487,"nodeType":"StructuredDocumentation","src":"12010:276:18","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":4514,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4489,"mutability":"mutable","name":"value","nameLocation":"12317:5:18","nodeType":"VariableDeclaration","scope":4514,"src":"12309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4488,"name":"uint256","nodeType":"ElementaryTypeName","src":"12309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12308:15:18"},"returnParameters":{"id":4493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4514,"src":"12347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":4491,"name":"uint80","nodeType":"ElementaryTypeName","src":"12347:6:18","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12346:8:18"},"scope":5626,"src":"12291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4541,"nodeType":"Block","src":"12855:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"12869:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12882:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4524,"name":"uint72","nodeType":"ElementaryTypeName","src":"12882:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":4523,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12877:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12877:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":4527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12890:3:18","memberName":"max","nodeType":"MemberAccess","src":"12877:16:18","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12869:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4535,"nodeType":"IfStatement","src":"12865:103:18","trueBody":{"id":4534,"nodeType":"Block","src":"12895:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":4531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"12951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4529,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"12916:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12916:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4533,"nodeType":"RevertStatement","src":"12909:48:18"}]}},{"expression":{"arguments":[{"id":4538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"12991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4536,"name":"uint72","nodeType":"ElementaryTypeName","src":"12984:6:18","typeDescriptions":{}}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":4521,"id":4540,"nodeType":"Return","src":"12977:20:18"}]},"documentation":{"id":4515,"nodeType":"StructuredDocumentation","src":"12510:276:18","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":4542,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12800:8:18","nodeType":"FunctionDefinition","parameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4517,"mutability":"mutable","name":"value","nameLocation":"12817:5:18","nodeType":"VariableDeclaration","scope":4542,"src":"12809:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4516,"name":"uint256","nodeType":"ElementaryTypeName","src":"12809:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12808:15:18"},"returnParameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4542,"src":"12847:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":4519,"name":"uint72","nodeType":"ElementaryTypeName","src":"12847:6:18","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12846:8:18"},"scope":5626,"src":"12791:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4569,"nodeType":"Block","src":"13355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4550,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"13369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4552,"name":"uint64","nodeType":"ElementaryTypeName","src":"13382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13390:3:18","memberName":"max","nodeType":"MemberAccess","src":"13377:16:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4563,"nodeType":"IfStatement","src":"13365:103:18","trueBody":{"id":4562,"nodeType":"Block","src":"13395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":4559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"13451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4557,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"13416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4561,"nodeType":"RevertStatement","src":"13409:48:18"}]}},{"expression":{"arguments":[{"id":4566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"13491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4564,"name":"uint64","nodeType":"ElementaryTypeName","src":"13484:6:18","typeDescriptions":{}}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4549,"id":4568,"nodeType":"Return","src":"13477:20:18"}]},"documentation":{"id":4543,"nodeType":"StructuredDocumentation","src":"13010:276:18","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":4570,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4545,"mutability":"mutable","name":"value","nameLocation":"13317:5:18","nodeType":"VariableDeclaration","scope":4570,"src":"13309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4544,"name":"uint256","nodeType":"ElementaryTypeName","src":"13309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13308:15:18"},"returnParameters":{"id":4549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4570,"src":"13347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4547,"name":"uint64","nodeType":"ElementaryTypeName","src":"13347:6:18","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13346:8:18"},"scope":5626,"src":"13291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4597,"nodeType":"Block","src":"13855:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"13869:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13882:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4580,"name":"uint56","nodeType":"ElementaryTypeName","src":"13882:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":4579,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13877:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13877:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":4583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13890:3:18","memberName":"max","nodeType":"MemberAccess","src":"13877:16:18","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13869:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4591,"nodeType":"IfStatement","src":"13865:103:18","trueBody":{"id":4590,"nodeType":"Block","src":"13895:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":4586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":4587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"13951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4585,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"13916:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13916:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4589,"nodeType":"RevertStatement","src":"13909:48:18"}]}},{"expression":{"arguments":[{"id":4594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4573,"src":"13991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4592,"name":"uint56","nodeType":"ElementaryTypeName","src":"13984:6:18","typeDescriptions":{}}},"id":4595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":4577,"id":4596,"nodeType":"Return","src":"13977:20:18"}]},"documentation":{"id":4571,"nodeType":"StructuredDocumentation","src":"13510:276:18","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":4598,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13800:8:18","nodeType":"FunctionDefinition","parameters":{"id":4574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4573,"mutability":"mutable","name":"value","nameLocation":"13817:5:18","nodeType":"VariableDeclaration","scope":4598,"src":"13809:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4572,"name":"uint256","nodeType":"ElementaryTypeName","src":"13809:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13808:15:18"},"returnParameters":{"id":4577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4598,"src":"13847:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":4575,"name":"uint56","nodeType":"ElementaryTypeName","src":"13847:6:18","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13846:8:18"},"scope":5626,"src":"13791:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4625,"nodeType":"Block","src":"14355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"14369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4608,"name":"uint48","nodeType":"ElementaryTypeName","src":"14382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":4607,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14390:3:18","memberName":"max","nodeType":"MemberAccess","src":"14377:16:18","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4619,"nodeType":"IfStatement","src":"14365:103:18","trueBody":{"id":4618,"nodeType":"Block","src":"14395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":4614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":4615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"14451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4613,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"14416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4617,"nodeType":"RevertStatement","src":"14409:48:18"}]}},{"expression":{"arguments":[{"id":4622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"14491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4620,"name":"uint48","nodeType":"ElementaryTypeName","src":"14484:6:18","typeDescriptions":{}}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":4605,"id":4624,"nodeType":"Return","src":"14477:20:18"}]},"documentation":{"id":4599,"nodeType":"StructuredDocumentation","src":"14010:276:18","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":4626,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4601,"mutability":"mutable","name":"value","nameLocation":"14317:5:18","nodeType":"VariableDeclaration","scope":4626,"src":"14309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"14309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14308:15:18"},"returnParameters":{"id":4605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4626,"src":"14347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4603,"name":"uint48","nodeType":"ElementaryTypeName","src":"14347:6:18","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14346:8:18"},"scope":5626,"src":"14291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4653,"nodeType":"Block","src":"14855:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"14869:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14882:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4636,"name":"uint40","nodeType":"ElementaryTypeName","src":"14882:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":4635,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14877:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14877:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14890:3:18","memberName":"max","nodeType":"MemberAccess","src":"14877:16:18","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14869:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4647,"nodeType":"IfStatement","src":"14865:103:18","trueBody":{"id":4646,"nodeType":"Block","src":"14895:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":4642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":4643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"14951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4641,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"14916:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14916:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4645,"nodeType":"RevertStatement","src":"14909:48:18"}]}},{"expression":{"arguments":[{"id":4650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"14991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4648,"name":"uint40","nodeType":"ElementaryTypeName","src":"14984:6:18","typeDescriptions":{}}},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":4633,"id":4652,"nodeType":"Return","src":"14977:20:18"}]},"documentation":{"id":4627,"nodeType":"StructuredDocumentation","src":"14510:276:18","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":4654,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14800:8:18","nodeType":"FunctionDefinition","parameters":{"id":4630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4629,"mutability":"mutable","name":"value","nameLocation":"14817:5:18","nodeType":"VariableDeclaration","scope":4654,"src":"14809:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4628,"name":"uint256","nodeType":"ElementaryTypeName","src":"14809:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14808:15:18"},"returnParameters":{"id":4633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4654,"src":"14847:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":4631,"name":"uint40","nodeType":"ElementaryTypeName","src":"14847:6:18","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14846:8:18"},"scope":5626,"src":"14791:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4681,"nodeType":"Block","src":"15355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"15369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4664,"name":"uint32","nodeType":"ElementaryTypeName","src":"15382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4663,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15390:3:18","memberName":"max","nodeType":"MemberAccess","src":"15377:16:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4675,"nodeType":"IfStatement","src":"15365:103:18","trueBody":{"id":4674,"nodeType":"Block","src":"15395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":4671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"15451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4669,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"15416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4673,"nodeType":"RevertStatement","src":"15409:48:18"}]}},{"expression":{"arguments":[{"id":4678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"15491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4676,"name":"uint32","nodeType":"ElementaryTypeName","src":"15484:6:18","typeDescriptions":{}}},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4661,"id":4680,"nodeType":"Return","src":"15477:20:18"}]},"documentation":{"id":4655,"nodeType":"StructuredDocumentation","src":"15010:276:18","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":4682,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4657,"mutability":"mutable","name":"value","nameLocation":"15317:5:18","nodeType":"VariableDeclaration","scope":4682,"src":"15309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4656,"name":"uint256","nodeType":"ElementaryTypeName","src":"15309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15308:15:18"},"returnParameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4682,"src":"15347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4659,"name":"uint32","nodeType":"ElementaryTypeName","src":"15347:6:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15346:8:18"},"scope":5626,"src":"15291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4709,"nodeType":"Block","src":"15855:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"15869:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15882:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4692,"name":"uint24","nodeType":"ElementaryTypeName","src":"15882:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":4691,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15877:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15877:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":4695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15890:3:18","memberName":"max","nodeType":"MemberAccess","src":"15877:16:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15869:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4703,"nodeType":"IfStatement","src":"15865:103:18","trueBody":{"id":4702,"nodeType":"Block","src":"15895:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":4699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"15951:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4697,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"15916:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4701,"nodeType":"RevertStatement","src":"15909:48:18"}]}},{"expression":{"arguments":[{"id":4706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"15991:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4704,"name":"uint24","nodeType":"ElementaryTypeName","src":"15984:6:18","typeDescriptions":{}}},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":4689,"id":4708,"nodeType":"Return","src":"15977:20:18"}]},"documentation":{"id":4683,"nodeType":"StructuredDocumentation","src":"15510:276:18","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":4710,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15800:8:18","nodeType":"FunctionDefinition","parameters":{"id":4686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"value","nameLocation":"15817:5:18","nodeType":"VariableDeclaration","scope":4710,"src":"15809:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4684,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15808:15:18"},"returnParameters":{"id":4689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4710,"src":"15847:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4687,"name":"uint24","nodeType":"ElementaryTypeName","src":"15847:6:18","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15846:8:18"},"scope":5626,"src":"15791:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4737,"nodeType":"Block","src":"16355:149:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"16369:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16382:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4720,"name":"uint16","nodeType":"ElementaryTypeName","src":"16382:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":4719,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16377:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16377:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16390:3:18","memberName":"max","nodeType":"MemberAccess","src":"16377:16:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16369:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4731,"nodeType":"IfStatement","src":"16365:103:18","trueBody":{"id":4730,"nodeType":"Block","src":"16395:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16447:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":4727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"16451:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4725,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"16416:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16416:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4729,"nodeType":"RevertStatement","src":"16409:48:18"}]}},{"expression":{"arguments":[{"id":4734,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"16491:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16484:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4732,"name":"uint16","nodeType":"ElementaryTypeName","src":"16484:6:18","typeDescriptions":{}}},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16484:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":4717,"id":4736,"nodeType":"Return","src":"16477:20:18"}]},"documentation":{"id":4711,"nodeType":"StructuredDocumentation","src":"16010:276:18","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":4738,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16300:8:18","nodeType":"FunctionDefinition","parameters":{"id":4714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4713,"mutability":"mutable","name":"value","nameLocation":"16317:5:18","nodeType":"VariableDeclaration","scope":4738,"src":"16309:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4712,"name":"uint256","nodeType":"ElementaryTypeName","src":"16309:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16308:15:18"},"returnParameters":{"id":4717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4738,"src":"16347:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4715,"name":"uint16","nodeType":"ElementaryTypeName","src":"16347:6:18","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16346:8:18"},"scope":5626,"src":"16291:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4765,"nodeType":"Block","src":"16849:146:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4741,"src":"16863:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16876:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4748,"name":"uint8","nodeType":"ElementaryTypeName","src":"16876:5:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":4747,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16871:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16871:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":4751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16883:3:18","memberName":"max","nodeType":"MemberAccess","src":"16871:15:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16863:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4759,"nodeType":"IfStatement","src":"16859:101:18","trueBody":{"id":4758,"nodeType":"Block","src":"16888:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":4754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16940:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":4755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4741,"src":"16943:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4753,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"16909:30:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16909:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4757,"nodeType":"RevertStatement","src":"16902:47:18"}]}},{"expression":{"arguments":[{"id":4762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4741,"src":"16982:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16976:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4760,"name":"uint8","nodeType":"ElementaryTypeName","src":"16976:5:18","typeDescriptions":{}}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16976:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4745,"id":4764,"nodeType":"Return","src":"16969:19:18"}]},"documentation":{"id":4739,"nodeType":"StructuredDocumentation","src":"16510:272:18","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":4766,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16796:7:18","nodeType":"FunctionDefinition","parameters":{"id":4742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4741,"mutability":"mutable","name":"value","nameLocation":"16812:5:18","nodeType":"VariableDeclaration","scope":4766,"src":"16804:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4740,"name":"uint256","nodeType":"ElementaryTypeName","src":"16804:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16803:15:18"},"returnParameters":{"id":4745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4766,"src":"16842:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4743,"name":"uint8","nodeType":"ElementaryTypeName","src":"16842:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16841:7:18"},"scope":5626,"src":"16787:208:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4788,"nodeType":"Block","src":"17231:128:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"17245:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17253:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17245:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4782,"nodeType":"IfStatement","src":"17241:81:18","trueBody":{"id":4781,"nodeType":"Block","src":"17256:66:18","statements":[{"errorCall":{"arguments":[{"id":4778,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"17305:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4777,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"17277:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$__$","typeString":"function (int256) pure"}},"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17277:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4780,"nodeType":"RevertStatement","src":"17270:41:18"}]}},{"expression":{"arguments":[{"id":4785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"17346:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17338:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4783,"name":"uint256","nodeType":"ElementaryTypeName","src":"17338:7:18","typeDescriptions":{}}},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17338:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4773,"id":4787,"nodeType":"Return","src":"17331:21:18"}]},"documentation":{"id":4767,"nodeType":"StructuredDocumentation","src":"17001:160:18","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":4789,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17175:9:18","nodeType":"FunctionDefinition","parameters":{"id":4770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4769,"mutability":"mutable","name":"value","nameLocation":"17192:5:18","nodeType":"VariableDeclaration","scope":4789,"src":"17185:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4768,"name":"int256","nodeType":"ElementaryTypeName","src":"17185:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17184:14:18"},"returnParameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4789,"src":"17222:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4771,"name":"uint256","nodeType":"ElementaryTypeName","src":"17222:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17221:9:18"},"scope":5626,"src":"17166:193:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4814,"nodeType":"Block","src":"17756:150:18","statements":[{"expression":{"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4797,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4795,"src":"17766:10:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"17786:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17779:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4798,"name":"int248","nodeType":"ElementaryTypeName","src":"17779:6:18","typeDescriptions":{}}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17779:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17766:26:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":4803,"nodeType":"ExpressionStatement","src":"17766:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4804,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4795,"src":"17806:10:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"17820:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17806:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4813,"nodeType":"IfStatement","src":"17802:98:18","trueBody":{"id":4812,"nodeType":"Block","src":"17827:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":4808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17878:3:18","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":4809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"17883:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4807,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"17848:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17848:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4811,"nodeType":"RevertStatement","src":"17841:48:18"}]}}]},"documentation":{"id":4790,"nodeType":"StructuredDocumentation","src":"17365:312:18","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":4815,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17691:8:18","nodeType":"FunctionDefinition","parameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"value","nameLocation":"17707:5:18","nodeType":"VariableDeclaration","scope":4815,"src":"17700:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4791,"name":"int256","nodeType":"ElementaryTypeName","src":"17700:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17699:14:18"},"returnParameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4795,"mutability":"mutable","name":"downcasted","nameLocation":"17744:10:18","nodeType":"VariableDeclaration","scope":4815,"src":"17737:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":4794,"name":"int248","nodeType":"ElementaryTypeName","src":"17737:6:18","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17736:19:18"},"scope":5626,"src":"17682:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4840,"nodeType":"Block","src":"18303:150:18","statements":[{"expression":{"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4823,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"18313:10:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"18333:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18326:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4824,"name":"int240","nodeType":"ElementaryTypeName","src":"18326:6:18","typeDescriptions":{}}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18326:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18313:26:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":4829,"nodeType":"ExpressionStatement","src":"18313:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4830,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"18353:10:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4831,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"18367:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18353:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4839,"nodeType":"IfStatement","src":"18349:98:18","trueBody":{"id":4838,"nodeType":"Block","src":"18374:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18425:3:18","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":4835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"18430:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4833,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"18395:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18395:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4837,"nodeType":"RevertStatement","src":"18388:48:18"}]}}]},"documentation":{"id":4816,"nodeType":"StructuredDocumentation","src":"17912:312:18","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":4841,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18238:8:18","nodeType":"FunctionDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4818,"mutability":"mutable","name":"value","nameLocation":"18254:5:18","nodeType":"VariableDeclaration","scope":4841,"src":"18247:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4817,"name":"int256","nodeType":"ElementaryTypeName","src":"18247:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18246:14:18"},"returnParameters":{"id":4822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"downcasted","nameLocation":"18291:10:18","nodeType":"VariableDeclaration","scope":4841,"src":"18284:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":4820,"name":"int240","nodeType":"ElementaryTypeName","src":"18284:6:18","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18283:19:18"},"scope":5626,"src":"18229:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4866,"nodeType":"Block","src":"18850:150:18","statements":[{"expression":{"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4849,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"18860:10:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4852,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"18880:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18873:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4850,"name":"int232","nodeType":"ElementaryTypeName","src":"18873:6:18","typeDescriptions":{}}},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18873:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18860:26:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":4855,"nodeType":"ExpressionStatement","src":"18860:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4856,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"18900:10:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"18914:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18900:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4865,"nodeType":"IfStatement","src":"18896:98:18","trueBody":{"id":4864,"nodeType":"Block","src":"18921:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":4860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18972:3:18","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":4861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"18977:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4859,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"18942:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18942:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4863,"nodeType":"RevertStatement","src":"18935:48:18"}]}}]},"documentation":{"id":4842,"nodeType":"StructuredDocumentation","src":"18459:312:18","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":4867,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18785:8:18","nodeType":"FunctionDefinition","parameters":{"id":4845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4844,"mutability":"mutable","name":"value","nameLocation":"18801:5:18","nodeType":"VariableDeclaration","scope":4867,"src":"18794:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4843,"name":"int256","nodeType":"ElementaryTypeName","src":"18794:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18793:14:18"},"returnParameters":{"id":4848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4847,"mutability":"mutable","name":"downcasted","nameLocation":"18838:10:18","nodeType":"VariableDeclaration","scope":4867,"src":"18831:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":4846,"name":"int232","nodeType":"ElementaryTypeName","src":"18831:6:18","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18830:19:18"},"scope":5626,"src":"18776:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4892,"nodeType":"Block","src":"19397:150:18","statements":[{"expression":{"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4875,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"19407:10:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"19427:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19420:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4876,"name":"int224","nodeType":"ElementaryTypeName","src":"19420:6:18","typeDescriptions":{}}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19420:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19407:26:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":4881,"nodeType":"ExpressionStatement","src":"19407:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4882,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"19447:10:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"19461:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19447:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4891,"nodeType":"IfStatement","src":"19443:98:18","trueBody":{"id":4890,"nodeType":"Block","src":"19468:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":4886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19519:3:18","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":4887,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"19524:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4885,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"19489:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19489:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4889,"nodeType":"RevertStatement","src":"19482:48:18"}]}}]},"documentation":{"id":4868,"nodeType":"StructuredDocumentation","src":"19006:312:18","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4893,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19332:8:18","nodeType":"FunctionDefinition","parameters":{"id":4871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4870,"mutability":"mutable","name":"value","nameLocation":"19348:5:18","nodeType":"VariableDeclaration","scope":4893,"src":"19341:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4869,"name":"int256","nodeType":"ElementaryTypeName","src":"19341:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19340:14:18"},"returnParameters":{"id":4874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4873,"mutability":"mutable","name":"downcasted","nameLocation":"19385:10:18","nodeType":"VariableDeclaration","scope":4893,"src":"19378:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":4872,"name":"int224","nodeType":"ElementaryTypeName","src":"19378:6:18","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19377:19:18"},"scope":5626,"src":"19323:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4918,"nodeType":"Block","src":"19944:150:18","statements":[{"expression":{"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4901,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"19954:10:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"19974:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19967:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4902,"name":"int216","nodeType":"ElementaryTypeName","src":"19967:6:18","typeDescriptions":{}}},"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19967:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19954:26:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":4907,"nodeType":"ExpressionStatement","src":"19954:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4908,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"19994:10:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4909,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"20008:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19994:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4917,"nodeType":"IfStatement","src":"19990:98:18","trueBody":{"id":4916,"nodeType":"Block","src":"20015:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20066:3:18","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4896,"src":"20071:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4911,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"20036:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20036:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4915,"nodeType":"RevertStatement","src":"20029:48:18"}]}}]},"documentation":{"id":4894,"nodeType":"StructuredDocumentation","src":"19553:312:18","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4919,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19879:8:18","nodeType":"FunctionDefinition","parameters":{"id":4897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4896,"mutability":"mutable","name":"value","nameLocation":"19895:5:18","nodeType":"VariableDeclaration","scope":4919,"src":"19888:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4895,"name":"int256","nodeType":"ElementaryTypeName","src":"19888:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19887:14:18"},"returnParameters":{"id":4900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4899,"mutability":"mutable","name":"downcasted","nameLocation":"19932:10:18","nodeType":"VariableDeclaration","scope":4919,"src":"19925:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":4898,"name":"int216","nodeType":"ElementaryTypeName","src":"19925:6:18","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19924:19:18"},"scope":5626,"src":"19870:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4944,"nodeType":"Block","src":"20491:150:18","statements":[{"expression":{"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4927,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"20501:10:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4922,"src":"20521:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20514:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":4928,"name":"int208","nodeType":"ElementaryTypeName","src":"20514:6:18","typeDescriptions":{}}},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20514:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20501:26:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":4933,"nodeType":"ExpressionStatement","src":"20501:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4934,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4925,"src":"20541:10:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4935,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4922,"src":"20555:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20541:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4943,"nodeType":"IfStatement","src":"20537:98:18","trueBody":{"id":4942,"nodeType":"Block","src":"20562:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20613:3:18","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4922,"src":"20618:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4937,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"20583:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20583:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4941,"nodeType":"RevertStatement","src":"20576:48:18"}]}}]},"documentation":{"id":4920,"nodeType":"StructuredDocumentation","src":"20100:312:18","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4945,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20426:8:18","nodeType":"FunctionDefinition","parameters":{"id":4923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4922,"mutability":"mutable","name":"value","nameLocation":"20442:5:18","nodeType":"VariableDeclaration","scope":4945,"src":"20435:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4921,"name":"int256","nodeType":"ElementaryTypeName","src":"20435:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20434:14:18"},"returnParameters":{"id":4926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4925,"mutability":"mutable","name":"downcasted","nameLocation":"20479:10:18","nodeType":"VariableDeclaration","scope":4945,"src":"20472:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":4924,"name":"int208","nodeType":"ElementaryTypeName","src":"20472:6:18","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20471:19:18"},"scope":5626,"src":"20417:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4970,"nodeType":"Block","src":"21038:150:18","statements":[{"expression":{"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4953,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"21048:10:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4956,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"21068:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21061:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":4954,"name":"int200","nodeType":"ElementaryTypeName","src":"21061:6:18","typeDescriptions":{}}},"id":4957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21061:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21048:26:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":4959,"nodeType":"ExpressionStatement","src":"21048:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4960,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"21088:10:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"21102:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21088:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4969,"nodeType":"IfStatement","src":"21084:98:18","trueBody":{"id":4968,"nodeType":"Block","src":"21109:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21160:3:18","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"21165:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4963,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"21130:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21130:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4967,"nodeType":"RevertStatement","src":"21123:48:18"}]}}]},"documentation":{"id":4946,"nodeType":"StructuredDocumentation","src":"20647:312:18","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4971,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20973:8:18","nodeType":"FunctionDefinition","parameters":{"id":4949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4948,"mutability":"mutable","name":"value","nameLocation":"20989:5:18","nodeType":"VariableDeclaration","scope":4971,"src":"20982:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4947,"name":"int256","nodeType":"ElementaryTypeName","src":"20982:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20981:14:18"},"returnParameters":{"id":4952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4951,"mutability":"mutable","name":"downcasted","nameLocation":"21026:10:18","nodeType":"VariableDeclaration","scope":4971,"src":"21019:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":4950,"name":"int200","nodeType":"ElementaryTypeName","src":"21019:6:18","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21018:19:18"},"scope":5626,"src":"20964:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4996,"nodeType":"Block","src":"21585:150:18","statements":[{"expression":{"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4979,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"21595:10:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"21615:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21608:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":4980,"name":"int192","nodeType":"ElementaryTypeName","src":"21608:6:18","typeDescriptions":{}}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21608:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21595:26:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":4985,"nodeType":"ExpressionStatement","src":"21595:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4986,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"21635:10:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"21649:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21635:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4995,"nodeType":"IfStatement","src":"21631:98:18","trueBody":{"id":4994,"nodeType":"Block","src":"21656:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":4990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21707:3:18","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":4991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"21712:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4989,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"21677:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21677:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4993,"nodeType":"RevertStatement","src":"21670:48:18"}]}}]},"documentation":{"id":4972,"nodeType":"StructuredDocumentation","src":"21194:312:18","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":4997,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21520:8:18","nodeType":"FunctionDefinition","parameters":{"id":4975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4974,"mutability":"mutable","name":"value","nameLocation":"21536:5:18","nodeType":"VariableDeclaration","scope":4997,"src":"21529:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4973,"name":"int256","nodeType":"ElementaryTypeName","src":"21529:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21528:14:18"},"returnParameters":{"id":4978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4977,"mutability":"mutable","name":"downcasted","nameLocation":"21573:10:18","nodeType":"VariableDeclaration","scope":4997,"src":"21566:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":4976,"name":"int192","nodeType":"ElementaryTypeName","src":"21566:6:18","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21565:19:18"},"scope":5626,"src":"21511:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5022,"nodeType":"Block","src":"22132:150:18","statements":[{"expression":{"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5005,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"22142:10:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"22162:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22155:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5006,"name":"int184","nodeType":"ElementaryTypeName","src":"22155:6:18","typeDescriptions":{}}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22155:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22142:26:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":5011,"nodeType":"ExpressionStatement","src":"22142:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5012,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5003,"src":"22182:10:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"22196:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22182:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5021,"nodeType":"IfStatement","src":"22178:98:18","trueBody":{"id":5020,"nodeType":"Block","src":"22203:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22254:3:18","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":5017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"22259:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5015,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"22224:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22224:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5019,"nodeType":"RevertStatement","src":"22217:48:18"}]}}]},"documentation":{"id":4998,"nodeType":"StructuredDocumentation","src":"21741:312:18","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":5023,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22067:8:18","nodeType":"FunctionDefinition","parameters":{"id":5001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5000,"mutability":"mutable","name":"value","nameLocation":"22083:5:18","nodeType":"VariableDeclaration","scope":5023,"src":"22076:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4999,"name":"int256","nodeType":"ElementaryTypeName","src":"22076:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22075:14:18"},"returnParameters":{"id":5004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5003,"mutability":"mutable","name":"downcasted","nameLocation":"22120:10:18","nodeType":"VariableDeclaration","scope":5023,"src":"22113:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":5002,"name":"int184","nodeType":"ElementaryTypeName","src":"22113:6:18","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22112:19:18"},"scope":5626,"src":"22058:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5048,"nodeType":"Block","src":"22679:150:18","statements":[{"expression":{"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5031,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5029,"src":"22689:10:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"22709:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22702:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5032,"name":"int176","nodeType":"ElementaryTypeName","src":"22702:6:18","typeDescriptions":{}}},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22702:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22689:26:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":5037,"nodeType":"ExpressionStatement","src":"22689:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5038,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5029,"src":"22729:10:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5039,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"22743:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22729:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5047,"nodeType":"IfStatement","src":"22725:98:18","trueBody":{"id":5046,"nodeType":"Block","src":"22750:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":5042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22801:3:18","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":5043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"22806:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5041,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"22771:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22771:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5045,"nodeType":"RevertStatement","src":"22764:48:18"}]}}]},"documentation":{"id":5024,"nodeType":"StructuredDocumentation","src":"22288:312:18","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":5049,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22614:8:18","nodeType":"FunctionDefinition","parameters":{"id":5027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5026,"mutability":"mutable","name":"value","nameLocation":"22630:5:18","nodeType":"VariableDeclaration","scope":5049,"src":"22623:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5025,"name":"int256","nodeType":"ElementaryTypeName","src":"22623:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22622:14:18"},"returnParameters":{"id":5030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5029,"mutability":"mutable","name":"downcasted","nameLocation":"22667:10:18","nodeType":"VariableDeclaration","scope":5049,"src":"22660:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":5028,"name":"int176","nodeType":"ElementaryTypeName","src":"22660:6:18","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22659:19:18"},"scope":5626,"src":"22605:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5074,"nodeType":"Block","src":"23226:150:18","statements":[{"expression":{"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5057,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5055,"src":"23236:10:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"23256:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23249:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5058,"name":"int168","nodeType":"ElementaryTypeName","src":"23249:6:18","typeDescriptions":{}}},"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23249:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23236:26:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":5063,"nodeType":"ExpressionStatement","src":"23236:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5064,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5055,"src":"23276:10:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5065,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"23290:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23276:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5073,"nodeType":"IfStatement","src":"23272:98:18","trueBody":{"id":5072,"nodeType":"Block","src":"23297:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":5068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23348:3:18","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":5069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5052,"src":"23353:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5067,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"23318:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23318:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5071,"nodeType":"RevertStatement","src":"23311:48:18"}]}}]},"documentation":{"id":5050,"nodeType":"StructuredDocumentation","src":"22835:312:18","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":5075,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23161:8:18","nodeType":"FunctionDefinition","parameters":{"id":5053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5052,"mutability":"mutable","name":"value","nameLocation":"23177:5:18","nodeType":"VariableDeclaration","scope":5075,"src":"23170:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5051,"name":"int256","nodeType":"ElementaryTypeName","src":"23170:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23169:14:18"},"returnParameters":{"id":5056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5055,"mutability":"mutable","name":"downcasted","nameLocation":"23214:10:18","nodeType":"VariableDeclaration","scope":5075,"src":"23207:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":5054,"name":"int168","nodeType":"ElementaryTypeName","src":"23207:6:18","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23206:19:18"},"scope":5626,"src":"23152:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5100,"nodeType":"Block","src":"23773:150:18","statements":[{"expression":{"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5083,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"23783:10:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"23803:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23796:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5084,"name":"int160","nodeType":"ElementaryTypeName","src":"23796:6:18","typeDescriptions":{}}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23796:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23783:26:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":5089,"nodeType":"ExpressionStatement","src":"23783:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5090,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5081,"src":"23823:10:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"23837:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23823:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5099,"nodeType":"IfStatement","src":"23819:98:18","trueBody":{"id":5098,"nodeType":"Block","src":"23844:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23895:3:18","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":5095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"23900:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5093,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"23865:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23865:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5097,"nodeType":"RevertStatement","src":"23858:48:18"}]}}]},"documentation":{"id":5076,"nodeType":"StructuredDocumentation","src":"23382:312:18","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":5101,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23708:8:18","nodeType":"FunctionDefinition","parameters":{"id":5079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5078,"mutability":"mutable","name":"value","nameLocation":"23724:5:18","nodeType":"VariableDeclaration","scope":5101,"src":"23717:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5077,"name":"int256","nodeType":"ElementaryTypeName","src":"23717:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23716:14:18"},"returnParameters":{"id":5082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5081,"mutability":"mutable","name":"downcasted","nameLocation":"23761:10:18","nodeType":"VariableDeclaration","scope":5101,"src":"23754:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":5080,"name":"int160","nodeType":"ElementaryTypeName","src":"23754:6:18","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23753:19:18"},"scope":5626,"src":"23699:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5126,"nodeType":"Block","src":"24320:150:18","statements":[{"expression":{"id":5114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5109,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"24330:10:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"24350:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24343:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":5110,"name":"int152","nodeType":"ElementaryTypeName","src":"24343:6:18","typeDescriptions":{}}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24343:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24330:26:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":5115,"nodeType":"ExpressionStatement","src":"24330:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5116,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5107,"src":"24370:10:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"24384:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24370:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5125,"nodeType":"IfStatement","src":"24366:98:18","trueBody":{"id":5124,"nodeType":"Block","src":"24391:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24442:3:18","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":5121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5104,"src":"24447:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5119,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"24412:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24412:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5123,"nodeType":"RevertStatement","src":"24405:48:18"}]}}]},"documentation":{"id":5102,"nodeType":"StructuredDocumentation","src":"23929:312:18","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":5127,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24255:8:18","nodeType":"FunctionDefinition","parameters":{"id":5105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5104,"mutability":"mutable","name":"value","nameLocation":"24271:5:18","nodeType":"VariableDeclaration","scope":5127,"src":"24264:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5103,"name":"int256","nodeType":"ElementaryTypeName","src":"24264:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24263:14:18"},"returnParameters":{"id":5108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5107,"mutability":"mutable","name":"downcasted","nameLocation":"24308:10:18","nodeType":"VariableDeclaration","scope":5127,"src":"24301:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":5106,"name":"int152","nodeType":"ElementaryTypeName","src":"24301:6:18","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24300:19:18"},"scope":5626,"src":"24246:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5152,"nodeType":"Block","src":"24867:150:18","statements":[{"expression":{"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5135,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5133,"src":"24877:10:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"24897:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24890:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":5136,"name":"int144","nodeType":"ElementaryTypeName","src":"24890:6:18","typeDescriptions":{}}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24890:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24877:26:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":5141,"nodeType":"ExpressionStatement","src":"24877:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5142,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5133,"src":"24917:10:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"24931:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24917:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5151,"nodeType":"IfStatement","src":"24913:98:18","trueBody":{"id":5150,"nodeType":"Block","src":"24938:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":5146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24989:3:18","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":5147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5130,"src":"24994:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5145,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"24959:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24959:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5149,"nodeType":"RevertStatement","src":"24952:48:18"}]}}]},"documentation":{"id":5128,"nodeType":"StructuredDocumentation","src":"24476:312:18","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":5153,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24802:8:18","nodeType":"FunctionDefinition","parameters":{"id":5131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5130,"mutability":"mutable","name":"value","nameLocation":"24818:5:18","nodeType":"VariableDeclaration","scope":5153,"src":"24811:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5129,"name":"int256","nodeType":"ElementaryTypeName","src":"24811:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24810:14:18"},"returnParameters":{"id":5134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5133,"mutability":"mutable","name":"downcasted","nameLocation":"24855:10:18","nodeType":"VariableDeclaration","scope":5153,"src":"24848:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":5132,"name":"int144","nodeType":"ElementaryTypeName","src":"24848:6:18","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24847:19:18"},"scope":5626,"src":"24793:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5178,"nodeType":"Block","src":"25414:150:18","statements":[{"expression":{"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5161,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"25424:10:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"25444:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25437:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":5162,"name":"int136","nodeType":"ElementaryTypeName","src":"25437:6:18","typeDescriptions":{}}},"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25437:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25424:26:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":5167,"nodeType":"ExpressionStatement","src":"25424:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5168,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"25464:10:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"25478:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25464:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5177,"nodeType":"IfStatement","src":"25460:98:18","trueBody":{"id":5176,"nodeType":"Block","src":"25485:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":5172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25536:3:18","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":5173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5156,"src":"25541:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5171,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"25506:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25506:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5175,"nodeType":"RevertStatement","src":"25499:48:18"}]}}]},"documentation":{"id":5154,"nodeType":"StructuredDocumentation","src":"25023:312:18","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":5179,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25349:8:18","nodeType":"FunctionDefinition","parameters":{"id":5157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5156,"mutability":"mutable","name":"value","nameLocation":"25365:5:18","nodeType":"VariableDeclaration","scope":5179,"src":"25358:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5155,"name":"int256","nodeType":"ElementaryTypeName","src":"25358:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25357:14:18"},"returnParameters":{"id":5160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5159,"mutability":"mutable","name":"downcasted","nameLocation":"25402:10:18","nodeType":"VariableDeclaration","scope":5179,"src":"25395:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":5158,"name":"int136","nodeType":"ElementaryTypeName","src":"25395:6:18","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25394:19:18"},"scope":5626,"src":"25340:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5204,"nodeType":"Block","src":"25961:150:18","statements":[{"expression":{"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5187,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"25971:10:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"25991:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25984:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":5188,"name":"int128","nodeType":"ElementaryTypeName","src":"25984:6:18","typeDescriptions":{}}},"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25984:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25971:26:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":5193,"nodeType":"ExpressionStatement","src":"25971:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5194,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"26011:10:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"26025:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26011:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5203,"nodeType":"IfStatement","src":"26007:98:18","trueBody":{"id":5202,"nodeType":"Block","src":"26032:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":5198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26083:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":5199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5182,"src":"26088:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5197,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"26053:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26053:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5201,"nodeType":"RevertStatement","src":"26046:48:18"}]}}]},"documentation":{"id":5180,"nodeType":"StructuredDocumentation","src":"25570:312:18","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":5205,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25896:8:18","nodeType":"FunctionDefinition","parameters":{"id":5183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5182,"mutability":"mutable","name":"value","nameLocation":"25912:5:18","nodeType":"VariableDeclaration","scope":5205,"src":"25905:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5181,"name":"int256","nodeType":"ElementaryTypeName","src":"25905:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25904:14:18"},"returnParameters":{"id":5186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5185,"mutability":"mutable","name":"downcasted","nameLocation":"25949:10:18","nodeType":"VariableDeclaration","scope":5205,"src":"25942:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":5184,"name":"int128","nodeType":"ElementaryTypeName","src":"25942:6:18","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25941:19:18"},"scope":5626,"src":"25887:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5230,"nodeType":"Block","src":"26508:150:18","statements":[{"expression":{"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5213,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"26518:10:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5216,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"26538:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26531:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":5214,"name":"int120","nodeType":"ElementaryTypeName","src":"26531:6:18","typeDescriptions":{}}},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26531:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26518:26:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":5219,"nodeType":"ExpressionStatement","src":"26518:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5220,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"26558:10:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5221,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"26572:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26558:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5229,"nodeType":"IfStatement","src":"26554:98:18","trueBody":{"id":5228,"nodeType":"Block","src":"26579:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":5224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26630:3:18","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":5225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"26635:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5223,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"26600:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26600:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5227,"nodeType":"RevertStatement","src":"26593:48:18"}]}}]},"documentation":{"id":5206,"nodeType":"StructuredDocumentation","src":"26117:312:18","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":5231,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26443:8:18","nodeType":"FunctionDefinition","parameters":{"id":5209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5208,"mutability":"mutable","name":"value","nameLocation":"26459:5:18","nodeType":"VariableDeclaration","scope":5231,"src":"26452:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5207,"name":"int256","nodeType":"ElementaryTypeName","src":"26452:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26451:14:18"},"returnParameters":{"id":5212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5211,"mutability":"mutable","name":"downcasted","nameLocation":"26496:10:18","nodeType":"VariableDeclaration","scope":5231,"src":"26489:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":5210,"name":"int120","nodeType":"ElementaryTypeName","src":"26489:6:18","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26488:19:18"},"scope":5626,"src":"26434:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5256,"nodeType":"Block","src":"27055:150:18","statements":[{"expression":{"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5239,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"27065:10:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"27085:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27078:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":5240,"name":"int112","nodeType":"ElementaryTypeName","src":"27078:6:18","typeDescriptions":{}}},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27078:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27065:26:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":5245,"nodeType":"ExpressionStatement","src":"27065:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5246,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"27105:10:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"27119:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27105:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5255,"nodeType":"IfStatement","src":"27101:98:18","trueBody":{"id":5254,"nodeType":"Block","src":"27126:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27177:3:18","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":5251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5234,"src":"27182:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5249,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"27147:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27147:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5253,"nodeType":"RevertStatement","src":"27140:48:18"}]}}]},"documentation":{"id":5232,"nodeType":"StructuredDocumentation","src":"26664:312:18","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":5257,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26990:8:18","nodeType":"FunctionDefinition","parameters":{"id":5235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"value","nameLocation":"27006:5:18","nodeType":"VariableDeclaration","scope":5257,"src":"26999:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5233,"name":"int256","nodeType":"ElementaryTypeName","src":"26999:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26998:14:18"},"returnParameters":{"id":5238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5237,"mutability":"mutable","name":"downcasted","nameLocation":"27043:10:18","nodeType":"VariableDeclaration","scope":5257,"src":"27036:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":5236,"name":"int112","nodeType":"ElementaryTypeName","src":"27036:6:18","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27035:19:18"},"scope":5626,"src":"26981:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5282,"nodeType":"Block","src":"27602:150:18","statements":[{"expression":{"id":5270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5265,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"27612:10:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5268,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"27632:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27625:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":5266,"name":"int104","nodeType":"ElementaryTypeName","src":"27625:6:18","typeDescriptions":{}}},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27625:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27612:26:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":5271,"nodeType":"ExpressionStatement","src":"27612:26:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5272,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"27652:10:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5273,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"27666:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27652:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5281,"nodeType":"IfStatement","src":"27648:98:18","trueBody":{"id":5280,"nodeType":"Block","src":"27673:73:18","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":5276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27724:3:18","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":5277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"27729:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5275,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"27694:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27694:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5279,"nodeType":"RevertStatement","src":"27687:48:18"}]}}]},"documentation":{"id":5258,"nodeType":"StructuredDocumentation","src":"27211:312:18","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":5283,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27537:8:18","nodeType":"FunctionDefinition","parameters":{"id":5261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5260,"mutability":"mutable","name":"value","nameLocation":"27553:5:18","nodeType":"VariableDeclaration","scope":5283,"src":"27546:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5259,"name":"int256","nodeType":"ElementaryTypeName","src":"27546:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27545:14:18"},"returnParameters":{"id":5264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"downcasted","nameLocation":"27590:10:18","nodeType":"VariableDeclaration","scope":5283,"src":"27583:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":5262,"name":"int104","nodeType":"ElementaryTypeName","src":"27583:6:18","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27582:19:18"},"scope":5626,"src":"27528:224:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5308,"nodeType":"Block","src":"28142:148:18","statements":[{"expression":{"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5291,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"28152:10:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"28171:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28165:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":5292,"name":"int96","nodeType":"ElementaryTypeName","src":"28165:5:18","typeDescriptions":{}}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28165:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28152:25:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":5297,"nodeType":"ExpressionStatement","src":"28152:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5298,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"28191:10:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"28205:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28191:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5307,"nodeType":"IfStatement","src":"28187:97:18","trueBody":{"id":5306,"nodeType":"Block","src":"28212:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":5302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28263:2:18","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":5303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"28267:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5301,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"28233:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28233:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5305,"nodeType":"RevertStatement","src":"28226:47:18"}]}}]},"documentation":{"id":5284,"nodeType":"StructuredDocumentation","src":"27758:307:18","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":5309,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28079:7:18","nodeType":"FunctionDefinition","parameters":{"id":5287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5286,"mutability":"mutable","name":"value","nameLocation":"28094:5:18","nodeType":"VariableDeclaration","scope":5309,"src":"28087:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5285,"name":"int256","nodeType":"ElementaryTypeName","src":"28087:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28086:14:18"},"returnParameters":{"id":5290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5289,"mutability":"mutable","name":"downcasted","nameLocation":"28130:10:18","nodeType":"VariableDeclaration","scope":5309,"src":"28124:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":5288,"name":"int96","nodeType":"ElementaryTypeName","src":"28124:5:18","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28123:18:18"},"scope":5626,"src":"28070:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5334,"nodeType":"Block","src":"28680:148:18","statements":[{"expression":{"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5317,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"28690:10:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"28709:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28703:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":5318,"name":"int88","nodeType":"ElementaryTypeName","src":"28703:5:18","typeDescriptions":{}}},"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28703:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28690:25:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":5323,"nodeType":"ExpressionStatement","src":"28690:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5324,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"28729:10:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"28743:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28729:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5333,"nodeType":"IfStatement","src":"28725:97:18","trueBody":{"id":5332,"nodeType":"Block","src":"28750:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":5328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28801:2:18","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":5329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5312,"src":"28805:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5327,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"28771:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28771:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5331,"nodeType":"RevertStatement","src":"28764:47:18"}]}}]},"documentation":{"id":5310,"nodeType":"StructuredDocumentation","src":"28296:307:18","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":5335,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28617:7:18","nodeType":"FunctionDefinition","parameters":{"id":5313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"mutability":"mutable","name":"value","nameLocation":"28632:5:18","nodeType":"VariableDeclaration","scope":5335,"src":"28625:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5311,"name":"int256","nodeType":"ElementaryTypeName","src":"28625:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28624:14:18"},"returnParameters":{"id":5316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5315,"mutability":"mutable","name":"downcasted","nameLocation":"28668:10:18","nodeType":"VariableDeclaration","scope":5335,"src":"28662:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":5314,"name":"int88","nodeType":"ElementaryTypeName","src":"28662:5:18","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28661:18:18"},"scope":5626,"src":"28608:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5360,"nodeType":"Block","src":"29218:148:18","statements":[{"expression":{"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5343,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"29228:10:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"29247:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29241:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":5344,"name":"int80","nodeType":"ElementaryTypeName","src":"29241:5:18","typeDescriptions":{}}},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29241:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29228:25:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":5349,"nodeType":"ExpressionStatement","src":"29228:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5350,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"29267:10:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"29281:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29267:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5359,"nodeType":"IfStatement","src":"29263:97:18","trueBody":{"id":5358,"nodeType":"Block","src":"29288:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":5354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29339:2:18","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":5355,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"29343:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5353,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"29309:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29309:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5357,"nodeType":"RevertStatement","src":"29302:47:18"}]}}]},"documentation":{"id":5336,"nodeType":"StructuredDocumentation","src":"28834:307:18","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":5361,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29155:7:18","nodeType":"FunctionDefinition","parameters":{"id":5339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"value","nameLocation":"29170:5:18","nodeType":"VariableDeclaration","scope":5361,"src":"29163:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5337,"name":"int256","nodeType":"ElementaryTypeName","src":"29163:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29162:14:18"},"returnParameters":{"id":5342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5341,"mutability":"mutable","name":"downcasted","nameLocation":"29206:10:18","nodeType":"VariableDeclaration","scope":5361,"src":"29200:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":5340,"name":"int80","nodeType":"ElementaryTypeName","src":"29200:5:18","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29199:18:18"},"scope":5626,"src":"29146:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5386,"nodeType":"Block","src":"29756:148:18","statements":[{"expression":{"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5369,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5367,"src":"29766:10:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"29785:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29779:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5370,"name":"int72","nodeType":"ElementaryTypeName","src":"29779:5:18","typeDescriptions":{}}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29779:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29766:25:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":5375,"nodeType":"ExpressionStatement","src":"29766:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5376,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5367,"src":"29805:10:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"29819:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29805:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5385,"nodeType":"IfStatement","src":"29801:97:18","trueBody":{"id":5384,"nodeType":"Block","src":"29826:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":5380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29877:2:18","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":5381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"29881:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5379,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"29847:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29847:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5383,"nodeType":"RevertStatement","src":"29840:47:18"}]}}]},"documentation":{"id":5362,"nodeType":"StructuredDocumentation","src":"29372:307:18","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":5387,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29693:7:18","nodeType":"FunctionDefinition","parameters":{"id":5365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5364,"mutability":"mutable","name":"value","nameLocation":"29708:5:18","nodeType":"VariableDeclaration","scope":5387,"src":"29701:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5363,"name":"int256","nodeType":"ElementaryTypeName","src":"29701:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29700:14:18"},"returnParameters":{"id":5368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5367,"mutability":"mutable","name":"downcasted","nameLocation":"29744:10:18","nodeType":"VariableDeclaration","scope":5387,"src":"29738:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":5366,"name":"int72","nodeType":"ElementaryTypeName","src":"29738:5:18","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29737:18:18"},"scope":5626,"src":"29684:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5412,"nodeType":"Block","src":"30294:148:18","statements":[{"expression":{"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5395,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"30304:10:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"30323:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30317:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5396,"name":"int64","nodeType":"ElementaryTypeName","src":"30317:5:18","typeDescriptions":{}}},"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30317:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30304:25:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":5401,"nodeType":"ExpressionStatement","src":"30304:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5402,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"30343:10:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"30357:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30343:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5411,"nodeType":"IfStatement","src":"30339:97:18","trueBody":{"id":5410,"nodeType":"Block","src":"30364:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":5406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30415:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":5407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"30419:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5405,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"30385:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30385:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5409,"nodeType":"RevertStatement","src":"30378:47:18"}]}}]},"documentation":{"id":5388,"nodeType":"StructuredDocumentation","src":"29910:307:18","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":5413,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30231:7:18","nodeType":"FunctionDefinition","parameters":{"id":5391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"value","nameLocation":"30246:5:18","nodeType":"VariableDeclaration","scope":5413,"src":"30239:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5389,"name":"int256","nodeType":"ElementaryTypeName","src":"30239:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30238:14:18"},"returnParameters":{"id":5394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"mutability":"mutable","name":"downcasted","nameLocation":"30282:10:18","nodeType":"VariableDeclaration","scope":5413,"src":"30276:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":5392,"name":"int64","nodeType":"ElementaryTypeName","src":"30276:5:18","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30275:18:18"},"scope":5626,"src":"30222:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5438,"nodeType":"Block","src":"30832:148:18","statements":[{"expression":{"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5421,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"30842:10:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"30861:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30855:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5422,"name":"int56","nodeType":"ElementaryTypeName","src":"30855:5:18","typeDescriptions":{}}},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30855:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30842:25:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":5427,"nodeType":"ExpressionStatement","src":"30842:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5428,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"30881:10:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"30895:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30881:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5437,"nodeType":"IfStatement","src":"30877:97:18","trueBody":{"id":5436,"nodeType":"Block","src":"30902:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":5432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30953:2:18","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":5433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"30957:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5431,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"30923:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30923:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5435,"nodeType":"RevertStatement","src":"30916:47:18"}]}}]},"documentation":{"id":5414,"nodeType":"StructuredDocumentation","src":"30448:307:18","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":5439,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30769:7:18","nodeType":"FunctionDefinition","parameters":{"id":5417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5416,"mutability":"mutable","name":"value","nameLocation":"30784:5:18","nodeType":"VariableDeclaration","scope":5439,"src":"30777:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5415,"name":"int256","nodeType":"ElementaryTypeName","src":"30777:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30776:14:18"},"returnParameters":{"id":5420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5419,"mutability":"mutable","name":"downcasted","nameLocation":"30820:10:18","nodeType":"VariableDeclaration","scope":5439,"src":"30814:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5418,"name":"int56","nodeType":"ElementaryTypeName","src":"30814:5:18","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30813:18:18"},"scope":5626,"src":"30760:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5464,"nodeType":"Block","src":"31370:148:18","statements":[{"expression":{"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5447,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"31380:10:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5442,"src":"31399:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31393:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5448,"name":"int48","nodeType":"ElementaryTypeName","src":"31393:5:18","typeDescriptions":{}}},"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31393:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31380:25:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":5453,"nodeType":"ExpressionStatement","src":"31380:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5454,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5445,"src":"31419:10:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5442,"src":"31433:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31419:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5463,"nodeType":"IfStatement","src":"31415:97:18","trueBody":{"id":5462,"nodeType":"Block","src":"31440:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":5458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31491:2:18","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":5459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5442,"src":"31495:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5457,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"31461:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31461:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5461,"nodeType":"RevertStatement","src":"31454:47:18"}]}}]},"documentation":{"id":5440,"nodeType":"StructuredDocumentation","src":"30986:307:18","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":5465,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31307:7:18","nodeType":"FunctionDefinition","parameters":{"id":5443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5442,"mutability":"mutable","name":"value","nameLocation":"31322:5:18","nodeType":"VariableDeclaration","scope":5465,"src":"31315:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5441,"name":"int256","nodeType":"ElementaryTypeName","src":"31315:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31314:14:18"},"returnParameters":{"id":5446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5445,"mutability":"mutable","name":"downcasted","nameLocation":"31358:10:18","nodeType":"VariableDeclaration","scope":5465,"src":"31352:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":5444,"name":"int48","nodeType":"ElementaryTypeName","src":"31352:5:18","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31351:18:18"},"scope":5626,"src":"31298:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5490,"nodeType":"Block","src":"31908:148:18","statements":[{"expression":{"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5473,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"31918:10:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5476,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"31937:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31931:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5474,"name":"int40","nodeType":"ElementaryTypeName","src":"31931:5:18","typeDescriptions":{}}},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31931:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31918:25:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":5479,"nodeType":"ExpressionStatement","src":"31918:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5480,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5471,"src":"31957:10:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"31971:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31957:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5489,"nodeType":"IfStatement","src":"31953:97:18","trueBody":{"id":5488,"nodeType":"Block","src":"31978:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":5484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32029:2:18","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":5485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"32033:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5483,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"31999:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31999:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5487,"nodeType":"RevertStatement","src":"31992:47:18"}]}}]},"documentation":{"id":5466,"nodeType":"StructuredDocumentation","src":"31524:307:18","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":5491,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31845:7:18","nodeType":"FunctionDefinition","parameters":{"id":5469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5468,"mutability":"mutable","name":"value","nameLocation":"31860:5:18","nodeType":"VariableDeclaration","scope":5491,"src":"31853:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5467,"name":"int256","nodeType":"ElementaryTypeName","src":"31853:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31852:14:18"},"returnParameters":{"id":5472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5471,"mutability":"mutable","name":"downcasted","nameLocation":"31896:10:18","nodeType":"VariableDeclaration","scope":5491,"src":"31890:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":5470,"name":"int40","nodeType":"ElementaryTypeName","src":"31890:5:18","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31889:18:18"},"scope":5626,"src":"31836:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5516,"nodeType":"Block","src":"32446:148:18","statements":[{"expression":{"id":5504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5499,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5497,"src":"32456:10:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"32475:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32469:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5500,"name":"int32","nodeType":"ElementaryTypeName","src":"32469:5:18","typeDescriptions":{}}},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32469:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32456:25:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":5505,"nodeType":"ExpressionStatement","src":"32456:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5506,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5497,"src":"32495:10:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"32509:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32495:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5515,"nodeType":"IfStatement","src":"32491:97:18","trueBody":{"id":5514,"nodeType":"Block","src":"32516:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":5510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32567:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":5511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"32571:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5509,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"32537:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32537:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5513,"nodeType":"RevertStatement","src":"32530:47:18"}]}}]},"documentation":{"id":5492,"nodeType":"StructuredDocumentation","src":"32062:307:18","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":5517,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32383:7:18","nodeType":"FunctionDefinition","parameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"value","nameLocation":"32398:5:18","nodeType":"VariableDeclaration","scope":5517,"src":"32391:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5493,"name":"int256","nodeType":"ElementaryTypeName","src":"32391:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32390:14:18"},"returnParameters":{"id":5498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5497,"mutability":"mutable","name":"downcasted","nameLocation":"32434:10:18","nodeType":"VariableDeclaration","scope":5517,"src":"32428:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":5496,"name":"int32","nodeType":"ElementaryTypeName","src":"32428:5:18","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32427:18:18"},"scope":5626,"src":"32374:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5542,"nodeType":"Block","src":"32984:148:18","statements":[{"expression":{"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5525,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"32994:10:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5520,"src":"33013:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33007:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5526,"name":"int24","nodeType":"ElementaryTypeName","src":"33007:5:18","typeDescriptions":{}}},"id":5529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33007:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32994:25:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5531,"nodeType":"ExpressionStatement","src":"32994:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5532,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"33033:10:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5520,"src":"33047:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33033:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5541,"nodeType":"IfStatement","src":"33029:97:18","trueBody":{"id":5540,"nodeType":"Block","src":"33054:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":5536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33105:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":5537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5520,"src":"33109:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5535,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"33075:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33075:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5539,"nodeType":"RevertStatement","src":"33068:47:18"}]}}]},"documentation":{"id":5518,"nodeType":"StructuredDocumentation","src":"32600:307:18","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":5543,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32921:7:18","nodeType":"FunctionDefinition","parameters":{"id":5521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5520,"mutability":"mutable","name":"value","nameLocation":"32936:5:18","nodeType":"VariableDeclaration","scope":5543,"src":"32929:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5519,"name":"int256","nodeType":"ElementaryTypeName","src":"32929:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32928:14:18"},"returnParameters":{"id":5524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5523,"mutability":"mutable","name":"downcasted","nameLocation":"32972:10:18","nodeType":"VariableDeclaration","scope":5543,"src":"32966:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5522,"name":"int24","nodeType":"ElementaryTypeName","src":"32966:5:18","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32965:18:18"},"scope":5626,"src":"32912:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5568,"nodeType":"Block","src":"33522:148:18","statements":[{"expression":{"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5551,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5549,"src":"33532:10:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"33551:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33545:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5552,"name":"int16","nodeType":"ElementaryTypeName","src":"33545:5:18","typeDescriptions":{}}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33545:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33532:25:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":5557,"nodeType":"ExpressionStatement","src":"33532:25:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5558,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5549,"src":"33571:10:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"33585:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33571:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5567,"nodeType":"IfStatement","src":"33567:97:18","trueBody":{"id":5566,"nodeType":"Block","src":"33592:72:18","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":5562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33643:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":5563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"33647:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5561,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"33613:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33613:40:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5565,"nodeType":"RevertStatement","src":"33606:47:18"}]}}]},"documentation":{"id":5544,"nodeType":"StructuredDocumentation","src":"33138:307:18","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":5569,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33459:7:18","nodeType":"FunctionDefinition","parameters":{"id":5547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5546,"mutability":"mutable","name":"value","nameLocation":"33474:5:18","nodeType":"VariableDeclaration","scope":5569,"src":"33467:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5545,"name":"int256","nodeType":"ElementaryTypeName","src":"33467:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33466:14:18"},"returnParameters":{"id":5550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5549,"mutability":"mutable","name":"downcasted","nameLocation":"33510:10:18","nodeType":"VariableDeclaration","scope":5569,"src":"33504:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":5548,"name":"int16","nodeType":"ElementaryTypeName","src":"33504:5:18","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33503:18:18"},"scope":5626,"src":"33450:220:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5594,"nodeType":"Block","src":"34053:146:18","statements":[{"expression":{"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5577,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5575,"src":"34063:10:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"34081:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34076:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5578,"name":"int8","nodeType":"ElementaryTypeName","src":"34076:4:18","typeDescriptions":{}}},"id":5581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34076:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34063:24:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":5583,"nodeType":"ExpressionStatement","src":"34063:24:18"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5584,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5575,"src":"34101:10:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"34115:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34101:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5593,"nodeType":"IfStatement","src":"34097:96:18","trueBody":{"id":5592,"nodeType":"Block","src":"34122:71:18","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":5588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34173:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":5589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"34176:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5587,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"34143:29:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34143:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5591,"nodeType":"RevertStatement","src":"34136:46:18"}]}}]},"documentation":{"id":5570,"nodeType":"StructuredDocumentation","src":"33676:302:18","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":5595,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33992:6:18","nodeType":"FunctionDefinition","parameters":{"id":5573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5572,"mutability":"mutable","name":"value","nameLocation":"34006:5:18","nodeType":"VariableDeclaration","scope":5595,"src":"33999:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5571,"name":"int256","nodeType":"ElementaryTypeName","src":"33999:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33998:14:18"},"returnParameters":{"id":5576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5575,"mutability":"mutable","name":"downcasted","nameLocation":"34041:10:18","nodeType":"VariableDeclaration","scope":5595,"src":"34036:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":5574,"name":"int8","nodeType":"ElementaryTypeName","src":"34036:4:18","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34035:17:18"},"scope":5626,"src":"33983:216:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5624,"nodeType":"Block","src":"34439:250:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"34552:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":5608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34573:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5607,"name":"int256","nodeType":"ElementaryTypeName","src":"34573:6:18","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":5606,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34568:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34568:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":5610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34581:3:18","memberName":"max","nodeType":"MemberAccess","src":"34568:16:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34560:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5604,"name":"uint256","nodeType":"ElementaryTypeName","src":"34560:7:18","typeDescriptions":{}}},"id":5611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34560:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34552:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5618,"nodeType":"IfStatement","src":"34548:105:18","trueBody":{"id":5617,"nodeType":"Block","src":"34587:66:18","statements":[{"errorCall":{"arguments":[{"id":5614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"34636:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5613,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"34608:27:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34608:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5616,"nodeType":"RevertStatement","src":"34601:41:18"}]}},{"expression":{"arguments":[{"id":5621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5598,"src":"34676:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34669:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5619,"name":"int256","nodeType":"ElementaryTypeName","src":"34669:6:18","typeDescriptions":{}}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34669:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5602,"id":5623,"nodeType":"Return","src":"34662:20:18"}]},"documentation":{"id":5596,"nodeType":"StructuredDocumentation","src":"34205:165:18","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":5625,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34384:8:18","nodeType":"FunctionDefinition","parameters":{"id":5599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5598,"mutability":"mutable","name":"value","nameLocation":"34401:5:18","nodeType":"VariableDeclaration","scope":5625,"src":"34393:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5597,"name":"uint256","nodeType":"ElementaryTypeName","src":"34393:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34392:15:18"},"returnParameters":{"id":5602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"34431:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5600,"name":"int256","nodeType":"ElementaryTypeName","src":"34431:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34430:8:18"},"scope":5626,"src":"34375:314:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5627,"src":"764:33927:18","usedErrors":[3881,3886,3893,3898],"usedEvents":[]}],"src":"192:34500:18"},"id":18},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/BitMaps.sol","exportedSymbols":{"BitMaps":[5764]},"id":5765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5628,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"BitMaps","contractDependencies":[],"contractKind":"library","documentation":{"id":5629,"nodeType":"StructuredDocumentation","src":"134:723:19","text":" @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\n Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\n Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\n unlike the regular `bool` which would consume an entire slot for a single value.\n This results in gas savings in two ways:\n - Setting a zero value to non-zero only once every 256 times\n - Accessing the same warm slot for every 256 _sequential_ indices"},"fullyImplemented":true,"id":5764,"linearizedBaseContracts":[5764],"name":"BitMaps","nameLocation":"866:7:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BitMaps.BitMap","id":5634,"members":[{"constant":false,"id":5633,"mutability":"mutable","name":"_data","nameLocation":"939:5:19","nodeType":"VariableDeclaration","scope":5634,"src":"904:40:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5632,"keyName":"bucket","keyNameLocation":"920:6:19","keyType":{"id":5630,"name":"uint256","nodeType":"ElementaryTypeName","src":"912:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"904:34:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5631,"name":"uint256","nodeType":"ElementaryTypeName","src":"930:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"BitMap","nameLocation":"887:6:19","nodeType":"StructDefinition","scope":5764,"src":"880:71:19","visibility":"public"},{"body":{"id":5669,"nodeType":"Block","src":"1108:137:19","statements":[{"assignments":[5646],"declarations":[{"constant":false,"id":5646,"mutability":"mutable","name":"bucket","nameLocation":"1126:6:19","nodeType":"VariableDeclaration","scope":5669,"src":"1118:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1118:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5650,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5647,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"1135:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1144:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1135:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1118:27:19"},{"assignments":[5652],"declarations":[{"constant":false,"id":5652,"mutability":"mutable","name":"mask","nameLocation":"1163:4:19","nodeType":"VariableDeclaration","scope":5669,"src":"1155:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1155:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5659,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1170:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5654,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5640,"src":"1176:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":5655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1184:4:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1176:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5657,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1175:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1170:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1155:34:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":5660,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5638,"src":"1206:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":5661,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1213:5:19","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":5633,"src":"1206:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5663,"indexExpression":{"id":5662,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5646,"src":"1219:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1206:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5664,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5652,"src":"1229:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1206:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1237:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1206:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5644,"id":5668,"nodeType":"Return","src":"1199:39:19"}]},"documentation":{"id":5635,"nodeType":"StructuredDocumentation","src":"957:66:19","text":" @dev Returns whether the bit at `index` is set."},"id":5670,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"1037:3:19","nodeType":"FunctionDefinition","parameters":{"id":5641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5638,"mutability":"mutable","name":"bitmap","nameLocation":"1056:6:19","nodeType":"VariableDeclaration","scope":5670,"src":"1041:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":5637,"nodeType":"UserDefinedTypeName","pathNode":{"id":5636,"name":"BitMap","nameLocations":["1041:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"1041:6:19"},"referencedDeclaration":5634,"src":"1041:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":5640,"mutability":"mutable","name":"index","nameLocation":"1072:5:19","nodeType":"VariableDeclaration","scope":5670,"src":"1064:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1064:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1040:38:19"},"returnParameters":{"id":5644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5670,"src":"1102:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5642,"name":"bool","nodeType":"ElementaryTypeName","src":"1102:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1101:6:19"},"scope":5764,"src":"1028:217:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5695,"nodeType":"Block","src":"1401:121:19","statements":[{"condition":{"id":5681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"1415:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5693,"nodeType":"Block","src":"1471:45:19","statements":[{"expression":{"arguments":[{"id":5689,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"1491:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},{"id":5690,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5676,"src":"1499:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5688,"name":"unset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5763,"src":"1485:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$5634_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256)"}},"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1485:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5692,"nodeType":"ExpressionStatement","src":"1485:20:19"}]},"id":5694,"nodeType":"IfStatement","src":"1411:105:19","trueBody":{"id":5687,"nodeType":"Block","src":"1422:43:19","statements":[{"expression":{"arguments":[{"id":5683,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"1440:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},{"id":5684,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5676,"src":"1448:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5682,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"1436:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_BitMap_$5634_storage_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BitMaps.BitMap storage pointer,uint256)"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5686,"nodeType":"ExpressionStatement","src":"1436:18:19"}]}}]},"documentation":{"id":5671,"nodeType":"StructuredDocumentation","src":"1251:71:19","text":" @dev Sets the bit at `index` to the boolean `value`."},"id":5696,"implemented":true,"kind":"function","modifiers":[],"name":"setTo","nameLocation":"1336:5:19","nodeType":"FunctionDefinition","parameters":{"id":5679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5674,"mutability":"mutable","name":"bitmap","nameLocation":"1357:6:19","nodeType":"VariableDeclaration","scope":5696,"src":"1342:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":5673,"nodeType":"UserDefinedTypeName","pathNode":{"id":5672,"name":"BitMap","nameLocations":["1342:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"1342:6:19"},"referencedDeclaration":5634,"src":"1342:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":5676,"mutability":"mutable","name":"index","nameLocation":"1373:5:19","nodeType":"VariableDeclaration","scope":5696,"src":"1365:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5675,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5678,"mutability":"mutable","name":"value","nameLocation":"1385:5:19","nodeType":"VariableDeclaration","scope":5696,"src":"1380:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5677,"name":"bool","nodeType":"ElementaryTypeName","src":"1380:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1341:50:19"},"returnParameters":{"id":5680,"nodeType":"ParameterList","parameters":[],"src":"1401:0:19"},"scope":5764,"src":"1327:195:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5728,"nodeType":"Block","src":"1641:126:19","statements":[{"assignments":[5706],"declarations":[{"constant":false,"id":5706,"mutability":"mutable","name":"bucket","nameLocation":"1659:6:19","nodeType":"VariableDeclaration","scope":5728,"src":"1651:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5705,"name":"uint256","nodeType":"ElementaryTypeName","src":"1651:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5710,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5707,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"1668:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1668:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1651:27:19"},{"assignments":[5712],"declarations":[{"constant":false,"id":5712,"mutability":"mutable","name":"mask","nameLocation":"1696:4:19","nodeType":"VariableDeclaration","scope":5728,"src":"1688:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5711,"name":"uint256","nodeType":"ElementaryTypeName","src":"1688:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5719,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1703:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5714,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"1709:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":5715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1717:4:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1709:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5717,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1708:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1703:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1688:34:19"},{"expression":{"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5720,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5700,"src":"1732:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":5723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1739:5:19","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":5633,"src":"1732:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5724,"indexExpression":{"id":5722,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"1745:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1732:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"id":5725,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"1756:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1732:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5727,"nodeType":"ExpressionStatement","src":"1732:28:19"}]},"documentation":{"id":5697,"nodeType":"StructuredDocumentation","src":"1528:48:19","text":" @dev Sets the bit at `index`."},"id":5729,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"1590:3:19","nodeType":"FunctionDefinition","parameters":{"id":5703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5700,"mutability":"mutable","name":"bitmap","nameLocation":"1609:6:19","nodeType":"VariableDeclaration","scope":5729,"src":"1594:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":5699,"nodeType":"UserDefinedTypeName","pathNode":{"id":5698,"name":"BitMap","nameLocations":["1594:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"1594:6:19"},"referencedDeclaration":5634,"src":"1594:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":5702,"mutability":"mutable","name":"index","nameLocation":"1625:5:19","nodeType":"VariableDeclaration","scope":5729,"src":"1617:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1617:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1593:38:19"},"returnParameters":{"id":5704,"nodeType":"ParameterList","parameters":[],"src":"1641:0:19"},"scope":5764,"src":"1581:186:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5762,"nodeType":"Block","src":"1890:127:19","statements":[{"assignments":[5739],"declarations":[{"constant":false,"id":5739,"mutability":"mutable","name":"bucket","nameLocation":"1908:6:19","nodeType":"VariableDeclaration","scope":5762,"src":"1900:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1900:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5743,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5740,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"1917:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1926:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1917:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1900:27:19"},{"assignments":[5745],"declarations":[{"constant":false,"id":5745,"mutability":"mutable","name":"mask","nameLocation":"1945:4:19","nodeType":"VariableDeclaration","scope":5762,"src":"1937:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1937:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5752,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1952:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5747,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5735,"src":"1958:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30786666","id":5748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1966:4:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"},"src":"1958:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5750,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1957:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1952:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1937:34:19"},{"expression":{"id":5760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5753,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5733,"src":"1981:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap storage pointer"}},"id":5756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1988:5:19","memberName":"_data","nodeType":"MemberAccess","referencedDeclaration":5633,"src":"1981:12:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5757,"indexExpression":{"id":5755,"name":"bucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5739,"src":"1994:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1981:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"&=","rightHandSide":{"id":5759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"2005:5:19","subExpression":{"id":5758,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5745,"src":"2006:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1981:29:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5761,"nodeType":"ExpressionStatement","src":"1981:29:19"}]},"documentation":{"id":5730,"nodeType":"StructuredDocumentation","src":"1773:50:19","text":" @dev Unsets the bit at `index`."},"id":5763,"implemented":true,"kind":"function","modifiers":[],"name":"unset","nameLocation":"1837:5:19","nodeType":"FunctionDefinition","parameters":{"id":5736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5733,"mutability":"mutable","name":"bitmap","nameLocation":"1858:6:19","nodeType":"VariableDeclaration","scope":5763,"src":"1843:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"},"typeName":{"id":5732,"nodeType":"UserDefinedTypeName","pathNode":{"id":5731,"name":"BitMap","nameLocations":["1843:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":5634,"src":"1843:6:19"},"referencedDeclaration":5634,"src":"1843:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_BitMap_$5634_storage_ptr","typeString":"struct BitMaps.BitMap"}},"visibility":"internal"},{"constant":false,"id":5735,"mutability":"mutable","name":"index","nameLocation":"1874:5:19","nodeType":"VariableDeclaration","scope":5763,"src":"1866:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1866:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1842:38:19"},"returnParameters":{"id":5737,"nodeType":"ParameterList","parameters":[],"src":"1890:0:19"},"scope":5764,"src":"1828:189:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5765,"src":"858:1161:19","usedErrors":[],"usedEvents":[]}],"src":"108:1912:19"},"id":19},"@openzeppelin/contracts/utils/types/Time.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/types/Time.sol","exportedSymbols":{"Math":[3871],"SafeCast":[5626],"Time":[6039]},"id":6040,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5766,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"104:24:20"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../math/Math.sol","id":5768,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6040,"sourceUnit":3872,"src":"130:38:20","symbolAliases":[{"foreign":{"id":5767,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"138:4:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"../math/SafeCast.sol","id":5770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6040,"sourceUnit":5627,"src":"169:46:20","symbolAliases":[{"foreign":{"id":5769,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5626,"src":"177:8:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Time","contractDependencies":[],"contractKind":"library","documentation":{"id":5771,"nodeType":"StructuredDocumentation","src":"217:422:20","text":" @dev This library provides helpers for manipulating time-related objects.\n It uses the following types:\n - `uint48` for timepoints\n - `uint32` for durations\n While the library doesn't provide specific types for timepoints and duration, it does provide:\n - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\n - additional helper functions"},"fullyImplemented":true,"id":6039,"linearizedBaseContracts":[6039],"name":"Time","nameLocation":"648:4:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5773,"libraryName":{"id":5772,"name":"Time","nameLocations":["665:4:20"],"nodeType":"IdentifierPath","referencedDeclaration":6039,"src":"665:4:20"},"nodeType":"UsingForDirective","src":"659:17:20"},{"body":{"id":5785,"nodeType":"Block","src":"802:58:20","statements":[{"expression":{"arguments":[{"expression":{"id":5781,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"837:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"837:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5779,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5626,"src":"819:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5626_$","typeString":"type(library SafeCast)"}},"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"828:8:20","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"819:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"819:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":5778,"id":5784,"nodeType":"Return","src":"812:41:20"}]},"documentation":{"id":5774,"nodeType":"StructuredDocumentation","src":"682:63:20","text":" @dev Get the block timestamp as a Timepoint."},"id":5786,"implemented":true,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"759:9:20","nodeType":"FunctionDefinition","parameters":{"id":5775,"nodeType":"ParameterList","parameters":[],"src":"768:2:20"},"returnParameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5777,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5786,"src":"794:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5776,"name":"uint48","nodeType":"ElementaryTypeName","src":"794:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"793:8:20"},"scope":6039,"src":"750:110:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5798,"nodeType":"Block","src":"985:55:20","statements":[{"expression":{"arguments":[{"expression":{"id":5794,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1020:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:6:20","memberName":"number","nodeType":"MemberAccess","src":"1020:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5792,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5626,"src":"1002:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$5626_$","typeString":"type(library SafeCast)"}},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1011:8:20","memberName":"toUint48","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"1002:17:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint48_$","typeString":"function (uint256) pure returns (uint48)"}},"id":5796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1002:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":5791,"id":5797,"nodeType":"Return","src":"995:38:20"}]},"documentation":{"id":5787,"nodeType":"StructuredDocumentation","src":"866:60:20","text":" @dev Get the block number as a Timepoint."},"id":5799,"implemented":true,"kind":"function","modifiers":[],"name":"blockNumber","nameLocation":"940:11:20","nodeType":"FunctionDefinition","parameters":{"id":5788,"nodeType":"ParameterList","parameters":[],"src":"951:2:20"},"returnParameters":{"id":5791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5799,"src":"977:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5789,"name":"uint48","nodeType":"ElementaryTypeName","src":"977:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"976:8:20"},"scope":6039,"src":"931:109:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"Time.Delay","id":5801,"name":"Delay","nameLocation":"2377:5:20","nodeType":"UserDefinedValueTypeDefinition","src":"2372:22:20","underlyingType":{"id":5800,"name":"uint112","nodeType":"ElementaryTypeName","src":"2386:7:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}},{"body":{"id":5815,"nodeType":"Block","src":"2572:44:20","statements":[{"expression":{"arguments":[{"id":5812,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"2600:8:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":5810,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5801,"src":"2589:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$5801_$","typeString":"type(Time.Delay)"}},"id":5811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2595:4:20","memberName":"wrap","nodeType":"MemberAccess","src":"2589:10:20","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"functionReturnParameters":5809,"id":5814,"nodeType":"Return","src":"2582:27:20"}]},"documentation":{"id":5802,"nodeType":"StructuredDocumentation","src":"2400:103:20","text":" @dev Wrap a duration into a Delay to add the one-step \"update in the future\" feature"},"id":5816,"implemented":true,"kind":"function","modifiers":[],"name":"toDelay","nameLocation":"2517:7:20","nodeType":"FunctionDefinition","parameters":{"id":5805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5804,"mutability":"mutable","name":"duration","nameLocation":"2532:8:20","nodeType":"VariableDeclaration","scope":5816,"src":"2525:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5803,"name":"uint32","nodeType":"ElementaryTypeName","src":"2525:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2524:17:20"},"returnParameters":{"id":5809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5816,"src":"2565:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5807,"nodeType":"UserDefinedTypeName","pathNode":{"id":5806,"name":"Delay","nameLocations":["2565:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"2565:5:20"},"referencedDeclaration":5801,"src":"2565:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"2564:7:20"},"scope":6039,"src":"2508:108:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5854,"nodeType":"Block","src":"2964:180:20","statements":[{"assignments":[5832,5834,5836],"declarations":[{"constant":false,"id":5832,"mutability":"mutable","name":"valueBefore","nameLocation":"2982:11:20","nodeType":"VariableDeclaration","scope":5854,"src":"2975:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5831,"name":"uint32","nodeType":"ElementaryTypeName","src":"2975:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5834,"mutability":"mutable","name":"valueAfter","nameLocation":"3002:10:20","nodeType":"VariableDeclaration","scope":5854,"src":"2995:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5833,"name":"uint32","nodeType":"ElementaryTypeName","src":"2995:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5836,"mutability":"mutable","name":"effect","nameLocation":"3021:6:20","nodeType":"VariableDeclaration","scope":5854,"src":"3014:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5835,"name":"uint48","nodeType":"ElementaryTypeName","src":"3014:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":5840,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5837,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"3031:4:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"id":5838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3036:6:20","memberName":"unpack","nodeType":"MemberAccess","referencedDeclaration":6000,"src":"3031:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$5801_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (Time.Delay) pure returns (uint32,uint32,uint48)"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3031:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"2974:70:20"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":5843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5841,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5836,"src":"3061:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5842,"name":"timepoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"3071:9:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"3061:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":5848,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5832,"src":"3105:11:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5849,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"3118:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5850,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5836,"src":"3130:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":5851,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3104:33:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3061:76:20","trueExpression":{"components":[{"id":5844,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"3084:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":5845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3099:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5847,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3083:18:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(uint32,int_const 0,int_const 0)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":5830,"id":5853,"nodeType":"Return","src":"3054:83:20"}]},"documentation":{"id":5817,"nodeType":"StructuredDocumentation","src":"2622:241:20","text":" @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\n change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered."},"id":5855,"implemented":true,"kind":"function","modifiers":[],"name":"_getFullAt","nameLocation":"2877:10:20","nodeType":"FunctionDefinition","parameters":{"id":5823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5820,"mutability":"mutable","name":"self","nameLocation":"2894:4:20","nodeType":"VariableDeclaration","scope":5855,"src":"2888:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5819,"nodeType":"UserDefinedTypeName","pathNode":{"id":5818,"name":"Delay","nameLocations":["2888:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"2888:5:20"},"referencedDeclaration":5801,"src":"2888:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":5822,"mutability":"mutable","name":"timepoint","nameLocation":"2907:9:20","nodeType":"VariableDeclaration","scope":5855,"src":"2900:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5821,"name":"uint48","nodeType":"ElementaryTypeName","src":"2900:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2887:30:20"},"returnParameters":{"id":5830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5855,"src":"2940:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5824,"name":"uint32","nodeType":"ElementaryTypeName","src":"2940:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5855,"src":"2948:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5826,"name":"uint32","nodeType":"ElementaryTypeName","src":"2948:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5855,"src":"2956:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5828,"name":"uint48","nodeType":"ElementaryTypeName","src":"2956:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2939:24:20"},"scope":6039,"src":"2868:276:20","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":5874,"nodeType":"Block","src":"3438:53:20","statements":[{"expression":{"arguments":[{"id":5869,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5859,"src":"3466:4:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},{"arguments":[],"expression":{"argumentTypes":[],"id":5870,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5786,"src":"3472:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3472:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":5868,"name":"_getFullAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5855,"src":"3455:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_Delay_$5801_$_t_uint48_$returns$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"function (Time.Delay,uint48) pure returns (uint32,uint32,uint48)"}},"id":5872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3455:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":5867,"id":5873,"nodeType":"Return","src":"3448:36:20"}]},"documentation":{"id":5856,"nodeType":"StructuredDocumentation","src":"3150:207:20","text":" @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\n effect timepoint is 0, then the pending value should not be considered."},"id":5875,"implemented":true,"kind":"function","modifiers":[],"name":"getFull","nameLocation":"3371:7:20","nodeType":"FunctionDefinition","parameters":{"id":5860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5859,"mutability":"mutable","name":"self","nameLocation":"3385:4:20","nodeType":"VariableDeclaration","scope":5875,"src":"3379:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5858,"nodeType":"UserDefinedTypeName","pathNode":{"id":5857,"name":"Delay","nameLocations":["3379:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"3379:5:20"},"referencedDeclaration":5801,"src":"3379:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3378:12:20"},"returnParameters":{"id":5867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5875,"src":"3414:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5861,"name":"uint32","nodeType":"ElementaryTypeName","src":"3414:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5875,"src":"3422:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5863,"name":"uint32","nodeType":"ElementaryTypeName","src":"3422:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5875,"src":"3430:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5865,"name":"uint48","nodeType":"ElementaryTypeName","src":"3430:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"3413:24:20"},"scope":6039,"src":"3362:129:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5892,"nodeType":"Block","src":"3604:74:20","statements":[{"assignments":[5885,null,null],"declarations":[{"constant":false,"id":5885,"mutability":"mutable","name":"delay","nameLocation":"3622:5:20","nodeType":"VariableDeclaration","scope":5892,"src":"3615:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5884,"name":"uint32","nodeType":"ElementaryTypeName","src":"3615:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},null,null],"id":5889,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5886,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5879,"src":"3635:4:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3640:7:20","memberName":"getFull","nodeType":"MemberAccess","referencedDeclaration":5875,"src":"3635:12:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$5801_$returns$_t_uint32_$_t_uint32_$_t_uint48_$attached_to$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (Time.Delay) view returns (uint32,uint32,uint48)"}},"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3635:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"nodeType":"VariableDeclarationStatement","src":"3614:35:20"},{"expression":{"id":5890,"name":"delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5885,"src":"3666:5:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":5883,"id":5891,"nodeType":"Return","src":"3659:12:20"}]},"documentation":{"id":5876,"nodeType":"StructuredDocumentation","src":"3497:46:20","text":" @dev Get the current value."},"id":5893,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"3557:3:20","nodeType":"FunctionDefinition","parameters":{"id":5880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5879,"mutability":"mutable","name":"self","nameLocation":"3567:4:20","nodeType":"VariableDeclaration","scope":5893,"src":"3561:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5878,"nodeType":"UserDefinedTypeName","pathNode":{"id":5877,"name":"Delay","nameLocations":["3561:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"3561:5:20"},"referencedDeclaration":5801,"src":"3561:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"3560:12:20"},"returnParameters":{"id":5883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5893,"src":"3596:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5881,"name":"uint32","nodeType":"ElementaryTypeName","src":"3596:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3595:8:20"},"scope":6039,"src":"3548:130:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5948,"nodeType":"Block","src":"4128:234:20","statements":[{"assignments":[5910],"declarations":[{"constant":false,"id":5910,"mutability":"mutable","name":"value","nameLocation":"4145:5:20","nodeType":"VariableDeclaration","scope":5948,"src":"4138:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5909,"name":"uint32","nodeType":"ElementaryTypeName","src":"4138:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":5914,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5911,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5897,"src":"4153:4:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4158:3:20","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":5893,"src":"4153:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_userDefinedValueType$_Delay_$5801_$returns$_t_uint32_$attached_to$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (Time.Delay) view returns (uint32)"}},"id":5913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4138:25:20"},{"assignments":[5916],"declarations":[{"constant":false,"id":5916,"mutability":"mutable","name":"setback","nameLocation":"4180:7:20","nodeType":"VariableDeclaration","scope":5948,"src":"4173:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5915,"name":"uint32","nodeType":"ElementaryTypeName","src":"4173:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":5932,"initialValue":{"arguments":[{"arguments":[{"id":5921,"name":"minSetback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5901,"src":"4206:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":5924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"4218:5:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5923,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"4226:8:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4218:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4256:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4218:39:20","trueExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":5927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"4237:5:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5926,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"4245:8:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4237:16:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":5919,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"4197:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3871_$","typeString":"type(library Math)"}},"id":5920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4202:3:20","memberName":"max","nodeType":"MemberAccess","referencedDeclaration":3004,"src":"4197:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4190:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5917,"name":"uint32","nodeType":"ElementaryTypeName","src":"4190:6:20","typeDescriptions":{}}},"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4190:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"4173:86:20"},{"expression":{"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5933,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"4269:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":5937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5934,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5786,"src":"4278:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint48_$","typeString":"function () view returns (uint48)"}},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4278:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5936,"name":"setback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5916,"src":"4292:7:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4278:21:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4269:30:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":5939,"nodeType":"ExpressionStatement","src":"4269:30:20"},{"expression":{"components":[{"arguments":[{"id":5941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"4322:5:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5942,"name":"newValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"4329:8:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5943,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"4339:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":5940,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6038,"src":"4317:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint32_$_t_uint32_$_t_uint48_$returns$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (uint32,uint32,uint48) pure returns (Time.Delay)"}},"id":5944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4317:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},{"id":5945,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"4348:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":5946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4316:39:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_userDefinedValueType$_Delay_$5801_$_t_uint48_$","typeString":"tuple(Time.Delay,uint48)"}},"functionReturnParameters":5908,"id":5947,"nodeType":"Return","src":"4309:46:20"}]},"documentation":{"id":5894,"nodeType":"StructuredDocumentation","src":"3684:283:20","text":" @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\n enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\n new delay becomes effective."},"id":5949,"implemented":true,"kind":"function","modifiers":[],"name":"withUpdate","nameLocation":"3981:10:20","nodeType":"FunctionDefinition","parameters":{"id":5902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5897,"mutability":"mutable","name":"self","nameLocation":"4007:4:20","nodeType":"VariableDeclaration","scope":5949,"src":"4001:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5896,"nodeType":"UserDefinedTypeName","pathNode":{"id":5895,"name":"Delay","nameLocations":["4001:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"4001:5:20"},"referencedDeclaration":5801,"src":"4001:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":5899,"mutability":"mutable","name":"newValue","nameLocation":"4028:8:20","nodeType":"VariableDeclaration","scope":5949,"src":"4021:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5898,"name":"uint32","nodeType":"ElementaryTypeName","src":"4021:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"minSetback","nameLocation":"4053:10:20","nodeType":"VariableDeclaration","scope":5949,"src":"4046:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5900,"name":"uint32","nodeType":"ElementaryTypeName","src":"4046:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3991:78:20"},"returnParameters":{"id":5908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5905,"mutability":"mutable","name":"updatedDelay","nameLocation":"4099:12:20","nodeType":"VariableDeclaration","scope":5949,"src":"4093:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5904,"nodeType":"UserDefinedTypeName","pathNode":{"id":5903,"name":"Delay","nameLocations":["4093:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"4093:5:20"},"referencedDeclaration":5801,"src":"4093:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"},{"constant":false,"id":5907,"mutability":"mutable","name":"effect","nameLocation":"4120:6:20","nodeType":"VariableDeclaration","scope":5949,"src":"4113:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5906,"name":"uint48","nodeType":"ElementaryTypeName","src":"4113:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4092:35:20"},"scope":6039,"src":"3972:390:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5999,"nodeType":"Block","src":"4595:212:20","statements":[{"assignments":[5963],"declarations":[{"constant":false,"id":5963,"mutability":"mutable","name":"raw","nameLocation":"4613:3:20","nodeType":"VariableDeclaration","scope":5999,"src":"4605:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":5962,"name":"uint112","nodeType":"ElementaryTypeName","src":"4605:7:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"id":5968,"initialValue":{"arguments":[{"id":5966,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5953,"src":"4632:4:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}],"expression":{"id":5964,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5801,"src":"4619:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$5801_$","typeString":"type(Time.Delay)"}},"id":5965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4625:6:20","memberName":"unwrap","nodeType":"MemberAccess","src":"4619:12:20","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_Delay_$5801_$returns$_t_uint112_$","typeString":"function (Time.Delay) pure returns (uint112)"}},"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4619:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"VariableDeclarationStatement","src":"4605:32:20"},{"expression":{"id":5974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5969,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"4648:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5972,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"4668:3:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":5971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4661:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5970,"name":"uint32","nodeType":"ElementaryTypeName","src":"4661:6:20","typeDescriptions":{}}},"id":5973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4661:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4648:24:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":5975,"nodeType":"ExpressionStatement","src":"4648:24:20"},{"expression":{"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5976,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"4682:11:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5979,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"4703:3:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4710:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4703:9:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":5978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4696:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5977,"name":"uint32","nodeType":"ElementaryTypeName","src":"4696:6:20","typeDescriptions":{}}},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4696:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4682:31:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":5984,"nodeType":"ExpressionStatement","src":"4682:31:20"},{"expression":{"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5985,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5960,"src":"4723:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5988,"name":"raw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5963,"src":"4739:3:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4746:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"4739:9:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"id":5987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4732:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":5986,"name":"uint48","nodeType":"ElementaryTypeName","src":"4732:6:20","typeDescriptions":{}}},"id":5991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4732:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"4723:26:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":5993,"nodeType":"ExpressionStatement","src":"4723:26:20"},{"expression":{"components":[{"id":5994,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"4768:11:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5995,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"4781:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5996,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5960,"src":"4793:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"id":5997,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4767:33:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_uint32_$_t_uint48_$","typeString":"tuple(uint32,uint32,uint48)"}},"functionReturnParameters":5961,"id":5998,"nodeType":"Return","src":"4760:40:20"}]},"documentation":{"id":5950,"nodeType":"StructuredDocumentation","src":"4368:117:20","text":" @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint)."},"id":6000,"implemented":true,"kind":"function","modifiers":[],"name":"unpack","nameLocation":"4499:6:20","nodeType":"FunctionDefinition","parameters":{"id":5954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5953,"mutability":"mutable","name":"self","nameLocation":"4512:4:20","nodeType":"VariableDeclaration","scope":6000,"src":"4506:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":5952,"nodeType":"UserDefinedTypeName","pathNode":{"id":5951,"name":"Delay","nameLocations":["4506:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"4506:5:20"},"referencedDeclaration":5801,"src":"4506:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"4505:12:20"},"returnParameters":{"id":5961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5956,"mutability":"mutable","name":"valueBefore","nameLocation":"4548:11:20","nodeType":"VariableDeclaration","scope":6000,"src":"4541:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5955,"name":"uint32","nodeType":"ElementaryTypeName","src":"4541:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5958,"mutability":"mutable","name":"valueAfter","nameLocation":"4568:10:20","nodeType":"VariableDeclaration","scope":6000,"src":"4561:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5957,"name":"uint32","nodeType":"ElementaryTypeName","src":"4561:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5960,"mutability":"mutable","name":"effect","nameLocation":"4587:6:20","nodeType":"VariableDeclaration","scope":6000,"src":"4580:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5959,"name":"uint48","nodeType":"ElementaryTypeName","src":"4580:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4540:54:20"},"scope":6039,"src":"4490:317:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6037,"nodeType":"Block","src":"4980:112:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":6034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":6029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":6020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6017,"name":"effect","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"5017:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":6016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5009:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":6015,"name":"uint112","nodeType":"ElementaryTypeName","src":"5009:7:20","typeDescriptions":{}}},"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5009:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":6019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5028:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"5009:21:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":6021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5008:23:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint112","typeString":"uint112"},"id":6027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6024,"name":"valueBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"5043:11:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":6023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5035:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":6022,"name":"uint112","nodeType":"ElementaryTypeName","src":"5035:7:20","typeDescriptions":{}}},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5035:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":6026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5059:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5035:26:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"id":6028,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5034:28:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5008:54:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":6032,"name":"valueAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6005,"src":"5073:10:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":6031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5065:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":6030,"name":"uint112","nodeType":"ElementaryTypeName","src":"5065:7:20","typeDescriptions":{}}},"id":6033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5065:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"5008:76:20","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint112","typeString":"uint112"}],"expression":{"id":6013,"name":"Delay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5801,"src":"4997:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_Delay_$5801_$","typeString":"type(Time.Delay)"}},"id":6014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5003:4:20","memberName":"wrap","nodeType":"MemberAccess","src":"4997:10:20","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint112_$returns$_t_userDefinedValueType$_Delay_$5801_$","typeString":"function (uint112) pure returns (Time.Delay)"}},"id":6035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4997:88:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"functionReturnParameters":6012,"id":6036,"nodeType":"Return","src":"4990:95:20"}]},"documentation":{"id":6001,"nodeType":"StructuredDocumentation","src":"4813:64:20","text":" @dev pack the components into a Delay object."},"id":6038,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"4891:4:20","nodeType":"FunctionDefinition","parameters":{"id":6008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6003,"mutability":"mutable","name":"valueBefore","nameLocation":"4903:11:20","nodeType":"VariableDeclaration","scope":6038,"src":"4896:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6002,"name":"uint32","nodeType":"ElementaryTypeName","src":"4896:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6005,"mutability":"mutable","name":"valueAfter","nameLocation":"4923:10:20","nodeType":"VariableDeclaration","scope":6038,"src":"4916:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6004,"name":"uint32","nodeType":"ElementaryTypeName","src":"4916:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":6007,"mutability":"mutable","name":"effect","nameLocation":"4942:6:20","nodeType":"VariableDeclaration","scope":6038,"src":"4935:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":6006,"name":"uint48","nodeType":"ElementaryTypeName","src":"4935:6:20","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"4895:54:20"},"returnParameters":{"id":6012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6038,"src":"4973:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"},"typeName":{"id":6010,"nodeType":"UserDefinedTypeName","pathNode":{"id":6009,"name":"Delay","nameLocations":["4973:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":5801,"src":"4973:5:20"},"referencedDeclaration":5801,"src":"4973:5:20","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Delay_$5801","typeString":"Time.Delay"}},"visibility":"internal"}],"src":"4972:7:20"},"scope":6039,"src":"4882:210:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6040,"src":"640:4454:20","usedErrors":[],"usedEvents":[]}],"src":"104:4991:20"},"id":20},"contracts/management/CXBTokenAirdrop.sol":{"ast":{"absolutePath":"contracts/management/CXBTokenAirdrop.sol","exportedSymbols":{"AccessManaged":[732],"Airdrop":[281],"AuthorityUtils":[814],"BitMaps":[5764],"CXBTokenAirdrop":[6363],"Context":[2094],"IAccessManaged":[854],"IAccessManager":[1292],"IAirdrop":[360],"IAuthority":[1308],"IERC20":[2038],"IVesting":[531],"KPI":[547],"KPITimeStatus":[537],"MerkleProof":[2817],"Pausable":[2211],"ReentrancyGuard":[2280]},"id":6364,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":6041,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:21"},{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol","file":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol","id":6042,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6364,"sourceUnit":282,"src":"63:68:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol","file":"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol","id":6043,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6364,"sourceUnit":532,"src":"132:69:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":6044,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6364,"sourceUnit":2039,"src":"202:56:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","file":"@openzeppelin/contracts/utils/Pausable.sol","id":6045,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6364,"sourceUnit":2212,"src":"259:52:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":6046,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6364,"sourceUnit":2281,"src":"312:59:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6047,"name":"AccessManaged","nameLocations":["401:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":732,"src":"401:13:21"},"id":6048,"nodeType":"InheritanceSpecifier","src":"401:13:21"},{"baseName":{"id":6049,"name":"ReentrancyGuard","nameLocations":["416:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":2280,"src":"416:15:21"},"id":6050,"nodeType":"InheritanceSpecifier","src":"416:15:21"},{"baseName":{"id":6051,"name":"Pausable","nameLocations":["433:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":2211,"src":"433:8:21"},"id":6052,"nodeType":"InheritanceSpecifier","src":"433:8:21"}],"canonicalName":"CXBTokenAirdrop","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6363,"linearizedBaseContracts":[6363,2211,2280,732,854,2094],"name":"CXBTokenAirdrop","nameLocation":"382:15:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":6053,"nodeType":"StructuredDocumentation","src":"448:146:21","text":" @dev Indicates an error related to the already redeemed amount. Used in redeem.\n @param target Address who calls redeem.."},"errorSelector":"4d4b0793","id":6057,"name":"CXBTokenAirdropAlreadyRedeemed","nameLocation":"605:30:21","nodeType":"ErrorDefinition","parameters":{"id":6056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6055,"mutability":"mutable","name":"target","nameLocation":"644:6:21","nodeType":"VariableDeclaration","scope":6057,"src":"636:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6054,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"635:16:21"},"src":"599:53:21"},{"documentation":{"id":6058,"nodeType":"StructuredDocumentation","src":"658:221:21","text":" @dev Indicates an error related to the wrong tree validation. Used in redeem.\n @param target Address who calls redeem.\n @param amount Amount redeemed.\n @param proof The proof provided."},"errorSelector":"2ff37ed4","id":6067,"name":"CXBTokenAirdropWrongPath","nameLocation":"890:24:21","nodeType":"ErrorDefinition","parameters":{"id":6066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6060,"mutability":"mutable","name":"target","nameLocation":"932:6:21","nodeType":"VariableDeclaration","scope":6067,"src":"924:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6059,"name":"address","nodeType":"ElementaryTypeName","src":"924:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6062,"mutability":"mutable","name":"amount","nameLocation":"956:6:21","nodeType":"VariableDeclaration","scope":6067,"src":"948:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6061,"name":"uint256","nodeType":"ElementaryTypeName","src":"948:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6065,"mutability":"mutable","name":"proof","nameLocation":"982:5:21","nodeType":"VariableDeclaration","scope":6067,"src":"972:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"972:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6064,"nodeType":"ArrayTypeName","src":"972:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"914:79:21"},"src":"884:110:21"},{"documentation":{"id":6068,"nodeType":"StructuredDocumentation","src":"1000:72:21","text":" @dev Indicates an error when empty token is provided."},"errorSelector":"432c3fea","id":6070,"name":"CXBTokenAirdropEmptyToken","nameLocation":"1083:25:21","nodeType":"ErrorDefinition","parameters":{"id":6069,"nodeType":"ParameterList","parameters":[],"src":"1108:2:21"},"src":"1077:34:21"},{"anonymous":false,"eventSelector":"222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6","id":6076,"name":"Redeem","nameLocation":"1123:6:21","nodeType":"EventDefinition","parameters":{"id":6075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6072,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1146:7:21","nodeType":"VariableDeclaration","scope":6076,"src":"1130:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6071,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6074,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1163:6:21","nodeType":"VariableDeclaration","scope":6076,"src":"1155:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6073,"name":"uint256","nodeType":"ElementaryTypeName","src":"1155:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1129:41:21"},"src":"1117:54:21"},{"anonymous":false,"eventSelector":"d8c062e1121a4d8261df9c04930989855139a33297e0f1598cf7779aa5695b81","id":6082,"name":"Vesting","nameLocation":"1182:7:21","nodeType":"EventDefinition","parameters":{"id":6081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6078,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1206:7:21","nodeType":"VariableDeclaration","scope":6082,"src":"1190:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6077,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6080,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1223:6:21","nodeType":"VariableDeclaration","scope":6082,"src":"1215:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6079,"name":"uint256","nodeType":"ElementaryTypeName","src":"1215:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1189:41:21"},"src":"1176:55:21"},{"constant":false,"functionSelector":"ebf0c717","id":6084,"mutability":"mutable","name":"root","nameLocation":"1252:4:21","nodeType":"VariableDeclaration","scope":6363,"src":"1237:19:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1237:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":6087,"mutability":"mutable","name":"token","nameLocation":"1277:5:21","nodeType":"VariableDeclaration","scope":6363,"src":"1262:20:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"},"typeName":{"id":6086,"nodeType":"UserDefinedTypeName","pathNode":{"id":6085,"name":"IERC20","nameLocations":["1262:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"1262:6:21"},"referencedDeclaration":2038,"src":"1262:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"visibility":"private"},{"constant":false,"id":6090,"mutability":"mutable","name":"vesting","nameLocation":"1305:7:21","nodeType":"VariableDeclaration","scope":6363,"src":"1288:24:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"},"typeName":{"id":6089,"nodeType":"UserDefinedTypeName","pathNode":{"id":6088,"name":"IVesting","nameLocations":["1288:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":531,"src":"1288:8:21"},"referencedDeclaration":531,"src":"1288:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"visibility":"private"},{"constant":false,"functionSelector":"0373c909","id":6092,"mutability":"mutable","name":"redeemAmount","nameLocation":"1333:12:21","nodeType":"VariableDeclaration","scope":6363,"src":"1318:27:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6091,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":6096,"mutability":"mutable","name":"redeemed","nameLocation":"1384:8:21","nodeType":"VariableDeclaration","scope":6363,"src":"1351:41:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":6095,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6093,"name":"address","nodeType":"ElementaryTypeName","src":"1359:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1351:24:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6094,"name":"bool","nodeType":"ElementaryTypeName","src":"1370:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"body":{"id":6144,"nodeType":"Block","src":"1581:216:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6116,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"1603:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}],"id":6115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1595:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6114,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:21","typeDescriptions":{}}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1622:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1614:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6118,"name":"address","nodeType":"ElementaryTypeName","src":"1614:7:21","typeDescriptions":{}}},"id":6121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1614:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1595:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6127,"nodeType":"IfStatement","src":"1591:94:21","trueBody":{"id":6126,"nodeType":"Block","src":"1626:59:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6123,"name":"CXBTokenAirdropEmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6070,"src":"1647:25:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1647:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6125,"nodeType":"RevertStatement","src":"1640:34:21"}]}},{"expression":{"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6128,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"1694:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6129,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6108,"src":"1701:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1694:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6131,"nodeType":"ExpressionStatement","src":"1694:12:21"},{"expression":{"id":6134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6132,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"1716:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6133,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"1724:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"src":"1716:14:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6135,"nodeType":"ExpressionStatement","src":"1716:14:21"},{"expression":{"id":6138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6136,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"1740:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6137,"name":"_vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6102,"src":"1750:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"src":"1740:18:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":6139,"nodeType":"ExpressionStatement","src":"1740:18:21"},{"expression":{"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6140,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"1768:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6141,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6106,"src":"1783:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1768:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6143,"nodeType":"ExpressionStatement","src":"1768:22:21"}]},"id":6145,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6111,"name":"initialAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6104,"src":"1563:16:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6112,"kind":"baseConstructorSpecifier","modifierName":{"id":6110,"name":"AccessManaged","nameLocations":["1549:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":732,"src":"1549:13:21"},"nodeType":"ModifierInvocation","src":"1549:31:21"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"_token","nameLocation":"1427:6:21","nodeType":"VariableDeclaration","scope":6145,"src":"1420:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"},"typeName":{"id":6098,"nodeType":"UserDefinedTypeName","pathNode":{"id":6097,"name":"IERC20","nameLocations":["1420:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"1420:6:21"},"referencedDeclaration":2038,"src":"1420:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":6102,"mutability":"mutable","name":"_vesting","nameLocation":"1452:8:21","nodeType":"VariableDeclaration","scope":6145,"src":"1443:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"},"typeName":{"id":6101,"nodeType":"UserDefinedTypeName","pathNode":{"id":6100,"name":"IVesting","nameLocations":["1443:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":531,"src":"1443:8:21"},"referencedDeclaration":531,"src":"1443:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"visibility":"internal"},{"constant":false,"id":6104,"mutability":"mutable","name":"initialAuthority","nameLocation":"1478:16:21","nodeType":"VariableDeclaration","scope":6145,"src":"1470:24:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6103,"name":"address","nodeType":"ElementaryTypeName","src":"1470:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6106,"mutability":"mutable","name":"_amount","nameLocation":"1512:7:21","nodeType":"VariableDeclaration","scope":6145,"src":"1504:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1504:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6108,"mutability":"mutable","name":"_root","nameLocation":"1537:5:21","nodeType":"VariableDeclaration","scope":6145,"src":"1529:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1529:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1410:138:21"},"returnParameters":{"id":6113,"nodeType":"ParameterList","parameters":[],"src":"1581:0:21"},"scope":6363,"src":"1399:398:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6257,"nodeType":"Block","src":"1961:753:21","statements":[{"condition":{"baseExpression":{"id":6156,"name":"redeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6096,"src":"1975:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6159,"indexExpression":{"expression":{"id":6157,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1984:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1988:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1984:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1975:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6166,"nodeType":"IfStatement","src":"1971:100:21","trueBody":{"id":6165,"nodeType":"Block","src":"1997:74:21","statements":[{"errorCall":{"arguments":[{"expression":{"id":6161,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2049:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2053:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2049:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6160,"name":"CXBTokenAirdropAlreadyRedeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6057,"src":"2018:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":6163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6164,"nodeType":"RevertStatement","src":"2011:49:21"}]}},{"assignments":[6168],"declarations":[{"constant":false,"id":6168,"mutability":"mutable","name":"leaf","nameLocation":"2088:4:21","nodeType":"VariableDeclaration","scope":6257,"src":"2080:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2080:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6183,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":6176,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2152:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2156:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2152:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6178,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2164:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6174,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2141:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2145:6:21","memberName":"encode","nodeType":"MemberAccess","src":"2141:10:21","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2141:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6173,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2131:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2131:47:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2118:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":6170,"name":"bytes","nodeType":"ElementaryTypeName","src":"2118:5:21","typeDescriptions":{}}},"id":6172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2124:6:21","memberName":"concat","nodeType":"MemberAccess","src":"2118:12:21","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2118:61:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6169,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2095:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2095:94:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2080:109:21"},{"condition":{"id":6190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2203:38:21","subExpression":{"arguments":[{"id":6186,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6149,"src":"2223:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":6187,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"2230:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6188,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6168,"src":"2236:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6184,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"2204:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2817_$","typeString":"type(library MerkleProof)"}},"id":6185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2216:6:21","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2307,"src":"2204:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":6189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:37:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6199,"nodeType":"IfStatement","src":"2199:133:21","trueBody":{"id":6198,"nodeType":"Block","src":"2243:89:21","statements":[{"errorCall":{"arguments":[{"expression":{"id":6192,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2289:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2293:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2289:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6194,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2301:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6195,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6149,"src":"2315:5:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":6191,"name":"CXBTokenAirdropWrongPath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6067,"src":"2264:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32[] memory) pure"}},"id":6196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2264:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6197,"nodeType":"RevertStatement","src":"2257:64:21"}]}},{"expression":{"id":6205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6200,"name":"redeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6096,"src":"2341:8:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6203,"indexExpression":{"expression":{"id":6201,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2350:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2350:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2341:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2364:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2341:27:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6206,"nodeType":"ExpressionStatement","src":"2341:27:21"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6209,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"2390:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}],"id":6208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2382:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6207,"name":"address","nodeType":"ElementaryTypeName","src":"2382:7:21","typeDescriptions":{}}},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2410:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2402:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6211,"name":"address","nodeType":"ElementaryTypeName","src":"2402:7:21","typeDescriptions":{}}},"id":6214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2402:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2382:30:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6232,"nodeType":"IfStatement","src":"2378:172:21","trueBody":{"id":6231,"nodeType":"Block","src":"2414:136:21","statements":[{"expression":{"arguments":[{"expression":{"id":6219,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2443:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2447:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2443:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6221,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2455:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6216,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"2428:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2434:8:21","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"2428:14:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2428:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6223,"nodeType":"ExpressionStatement","src":"2428:40:21"},{"eventCall":{"arguments":[{"expression":{"id":6225,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2494:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2498:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2494:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6227,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2506:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6224,"name":"Redeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6076,"src":"2487:6:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6229,"nodeType":"EmitStatement","src":"2482:37:21"},{"functionReturnParameters":6155,"id":6230,"nodeType":"Return","src":"2533:7:21"}]}},{"expression":{"arguments":[{"arguments":[{"id":6238,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"2582:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}],"id":6237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2574:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6236,"name":"address","nodeType":"ElementaryTypeName","src":"2574:7:21","typeDescriptions":{}}},"id":6239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2574:16:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6240,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2592:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6233,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"2559:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2565:8:21","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"2559:14:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2559:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6242,"nodeType":"ExpressionStatement","src":"2559:46:21"},{"expression":{"arguments":[{"expression":{"id":6246,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2634:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2638:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2634:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6248,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2646:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6243,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"2615:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":6245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2623:10:21","memberName":"distribute","nodeType":"MemberAccess","referencedDeclaration":465,"src":"2615:18:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2615:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6250,"nodeType":"ExpressionStatement","src":"2615:44:21"},{"eventCall":{"arguments":[{"expression":{"id":6252,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2682:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2686:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2682:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6254,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"2694:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6251,"name":"Vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6082,"src":"2674:7:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6256,"nodeType":"EmitStatement","src":"2669:38:21"}]},"documentation":{"id":6146,"nodeType":"StructuredDocumentation","src":"1803:79:21","text":"@notice Addresses can redeem their tokens.\n @param proof Proof path."},"functionSelector":"524c2a04","id":6258,"implemented":true,"kind":"function","modifiers":[{"id":6152,"kind":"modifierInvocation","modifierName":{"id":6151,"name":"nonReentrant","nameLocations":["1934:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":2244,"src":"1934:12:21"},"nodeType":"ModifierInvocation","src":"1934:12:21"},{"id":6154,"kind":"modifierInvocation","modifierName":{"id":6153,"name":"whenNotPaused","nameLocations":["1947:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":2136,"src":"1947:13:21"},"nodeType":"ModifierInvocation","src":"1947:13:21"}],"name":"redeem","nameLocation":"1896:6:21","nodeType":"FunctionDefinition","parameters":{"id":6150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6149,"mutability":"mutable","name":"proof","nameLocation":"1920:5:21","nodeType":"VariableDeclaration","scope":6258,"src":"1903:22:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":6147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1903:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6148,"nodeType":"ArrayTypeName","src":"1903:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1902:24:21"},"returnParameters":{"id":6155,"nodeType":"ParameterList","parameters":[],"src":"1961:0:21"},"scope":6363,"src":"1887:827:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6272,"nodeType":"Block","src":"2886:29:21","statements":[{"expression":{"id":6270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6268,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6084,"src":"2896:4:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6269,"name":"_root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6261,"src":"2903:5:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2896:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6271,"nodeType":"ExpressionStatement","src":"2896:12:21"}]},"documentation":{"id":6259,"nodeType":"StructuredDocumentation","src":"2720:92:21","text":"@notice Update merkle root\n @param _root Merkle root of the addresses white list."},"functionSelector":"4783f0ef","id":6273,"implemented":true,"kind":"function","modifiers":[{"id":6264,"kind":"modifierInvocation","modifierName":{"id":6263,"name":"restricted","nameLocations":["2865:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"2865:10:21"},"nodeType":"ModifierInvocation","src":"2865:10:21"},{"id":6266,"kind":"modifierInvocation","modifierName":{"id":6265,"name":"whenPaused","nameLocations":["2876:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"2876:10:21"},"nodeType":"ModifierInvocation","src":"2876:10:21"}],"name":"updateMerkleRoot","nameLocation":"2826:16:21","nodeType":"FunctionDefinition","parameters":{"id":6262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6261,"mutability":"mutable","name":"_root","nameLocation":"2851:5:21","nodeType":"VariableDeclaration","scope":6273,"src":"2843:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2843:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2842:15:21"},"returnParameters":{"id":6267,"nodeType":"ParameterList","parameters":[],"src":"2886:0:21"},"scope":6363,"src":"2817:98:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6302,"nodeType":"Block","src":"3063:134:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6286,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6277,"src":"3085:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}],"id":6285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3077:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6284,"name":"address","nodeType":"ElementaryTypeName","src":"3077:7:21","typeDescriptions":{}}},"id":6287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3077:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3104:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3096:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6288,"name":"address","nodeType":"ElementaryTypeName","src":"3096:7:21","typeDescriptions":{}}},"id":6291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3077:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6297,"nodeType":"IfStatement","src":"3073:94:21","trueBody":{"id":6296,"nodeType":"Block","src":"3108:59:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6293,"name":"CXBTokenAirdropEmptyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6070,"src":"3129:25:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3129:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6295,"nodeType":"RevertStatement","src":"3122:34:21"}]}},{"expression":{"id":6300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6298,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"3176:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6299,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6277,"src":"3184:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"src":"3176:14:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6301,"nodeType":"ExpressionStatement","src":"3176:14:21"}]},"documentation":{"id":6274,"nodeType":"StructuredDocumentation","src":"2921:73:21","text":"@notice Update token address\n @param _token New token address."},"functionSelector":"7ad3def2","id":6303,"implemented":true,"kind":"function","modifiers":[{"id":6280,"kind":"modifierInvocation","modifierName":{"id":6279,"name":"restricted","nameLocations":["3042:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"3042:10:21"},"nodeType":"ModifierInvocation","src":"3042:10:21"},{"id":6282,"kind":"modifierInvocation","modifierName":{"id":6281,"name":"whenPaused","nameLocations":["3053:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"3053:10:21"},"nodeType":"ModifierInvocation","src":"3053:10:21"}],"name":"updateToken","nameLocation":"3008:11:21","nodeType":"FunctionDefinition","parameters":{"id":6278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6277,"mutability":"mutable","name":"_token","nameLocation":"3027:6:21","nodeType":"VariableDeclaration","scope":6303,"src":"3020:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"},"typeName":{"id":6276,"nodeType":"UserDefinedTypeName","pathNode":{"id":6275,"name":"IERC20","nameLocations":["3020:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2038,"src":"3020:6:21"},"referencedDeclaration":2038,"src":"3020:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"3019:15:21"},"returnParameters":{"id":6283,"nodeType":"ParameterList","parameters":[],"src":"3063:0:21"},"scope":6363,"src":"2999:198:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6318,"nodeType":"Block","src":"3357:35:21","statements":[{"expression":{"id":6316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6314,"name":"vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"3367:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6315,"name":"_vesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6307,"src":"3377:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"src":"3367:18:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"id":6317,"nodeType":"ExpressionStatement","src":"3367:18:21"}]},"documentation":{"id":6304,"nodeType":"StructuredDocumentation","src":"3203:79:21","text":"@notice Update vesting address\n @param _vesting New vesting address."},"functionSelector":"e4214471","id":6319,"implemented":true,"kind":"function","modifiers":[{"id":6310,"kind":"modifierInvocation","modifierName":{"id":6309,"name":"restricted","nameLocations":["3336:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"3336:10:21"},"nodeType":"ModifierInvocation","src":"3336:10:21"},{"id":6312,"kind":"modifierInvocation","modifierName":{"id":6311,"name":"whenPaused","nameLocations":["3347:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"3347:10:21"},"nodeType":"ModifierInvocation","src":"3347:10:21"}],"name":"updateVesting","nameLocation":"3296:13:21","nodeType":"FunctionDefinition","parameters":{"id":6308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6307,"mutability":"mutable","name":"_vesting","nameLocation":"3319:8:21","nodeType":"VariableDeclaration","scope":6319,"src":"3310:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"},"typeName":{"id":6306,"nodeType":"UserDefinedTypeName","pathNode":{"id":6305,"name":"IVesting","nameLocations":["3310:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":531,"src":"3310:8:21"},"referencedDeclaration":531,"src":"3310:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_IVesting_$531","typeString":"contract IVesting"}},"visibility":"internal"}],"src":"3309:19:21"},"returnParameters":{"id":6313,"nodeType":"ParameterList","parameters":[],"src":"3357:0:21"},"scope":6363,"src":"3287:105:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6333,"nodeType":"Block","src":"3552:39:21","statements":[{"expression":{"id":6331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6329,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6092,"src":"3562:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6330,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6322,"src":"3577:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3562:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6332,"nodeType":"ExpressionStatement","src":"3562:22:21"}]},"documentation":{"id":6320,"nodeType":"StructuredDocumentation","src":"3398:76:21","text":"@notice Update redeem amount\n @param _amount The redeemed amount."},"functionSelector":"3fc01a0f","id":6334,"implemented":true,"kind":"function","modifiers":[{"id":6325,"kind":"modifierInvocation","modifierName":{"id":6324,"name":"restricted","nameLocations":["3531:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"3531:10:21"},"nodeType":"ModifierInvocation","src":"3531:10:21"},{"id":6327,"kind":"modifierInvocation","modifierName":{"id":6326,"name":"whenPaused","nameLocations":["3542:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"3542:10:21"},"nodeType":"ModifierInvocation","src":"3542:10:21"}],"name":"updateRedeemAmount","nameLocation":"3488:18:21","nodeType":"FunctionDefinition","parameters":{"id":6323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6322,"mutability":"mutable","name":"_amount","nameLocation":"3515:7:21","nodeType":"VariableDeclaration","scope":6334,"src":"3507:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6321,"name":"uint256","nodeType":"ElementaryTypeName","src":"3507:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3506:17:21"},"returnParameters":{"id":6328,"nodeType":"ParameterList","parameters":[],"src":"3552:0:21"},"scope":6363,"src":"3479:112:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6361,"nodeType":"Block","src":"3906:120:21","statements":[{"assignments":[6345],"declarations":[{"constant":false,"id":6345,"mutability":"mutable","name":"contractBalance","nameLocation":"3924:15:21","nodeType":"VariableDeclaration","scope":6361,"src":"3916:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6344,"name":"uint256","nodeType":"ElementaryTypeName","src":"3916:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6353,"initialValue":{"arguments":[{"arguments":[{"id":6350,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3966:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_CXBTokenAirdrop_$6363","typeString":"contract CXBTokenAirdrop"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CXBTokenAirdrop_$6363","typeString":"contract CXBTokenAirdrop"}],"id":6349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3958:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6348,"name":"address","nodeType":"ElementaryTypeName","src":"3958:7:21","typeDescriptions":{}}},"id":6351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3958:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6346,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"3942:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3948:9:21","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1995,"src":"3942:15:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3942:30:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3916:56:21"},{"expression":{"arguments":[{"id":6357,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6337,"src":"3997:3:21","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":6358,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"4002:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6354,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6087,"src":"3982:5:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2038","typeString":"contract IERC20"}},"id":6356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3988:8:21","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2005,"src":"3982:14:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3982:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6360,"nodeType":"ExpressionStatement","src":"3982:36:21"}]},"documentation":{"id":6335,"nodeType":"StructuredDocumentation","src":"3597:231:21","text":"@notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\n @param _to The receiving address.\n @dev Only manager can perform this transaction. It selfdestructs the contract."},"functionSelector":"635a0bee","id":6362,"implemented":true,"kind":"function","modifiers":[{"id":6340,"kind":"modifierInvocation","modifierName":{"id":6339,"name":"restricted","nameLocations":["3884:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"3884:10:21"},"nodeType":"ModifierInvocation","src":"3884:10:21"},{"id":6342,"kind":"modifierInvocation","modifierName":{"id":6341,"name":"whenPaused","nameLocations":["3895:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":2144,"src":"3895:10:21"},"nodeType":"ModifierInvocation","src":"3895:10:21"}],"name":"cancelAirDrop","nameLocation":"3842:13:21","nodeType":"FunctionDefinition","parameters":{"id":6338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6337,"mutability":"mutable","name":"_to","nameLocation":"3872:3:21","nodeType":"VariableDeclaration","scope":6362,"src":"3856:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":6336,"name":"address","nodeType":"ElementaryTypeName","src":"3856:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3855:21:21"},"returnParameters":{"id":6343,"nodeType":"ParameterList","parameters":[],"src":"3906:0:21"},"scope":6363,"src":"3833:193:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":6364,"src":"373:3655:21","usedErrors":[825,831,835,2116,2119,2225,6057,6067,6070],"usedEvents":[821,2108,2113,6076,6082]}],"src":"38:3991:21"},"id":21},"contracts/mocks/MockChainlink.sol":{"ast":{"absolutePath":"contracts/mocks/MockChainlink.sol","exportedSymbols":{"MockChainlink":[6394]},"id":6395,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":6365,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"MockChainlink","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6394,"linearizedBaseContracts":[6394],"name":"MockChainlink","nameLocation":"73:13:22","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":6367,"mutability":"mutable","name":"value","nameLocation":"106:5:22","nodeType":"VariableDeclaration","scope":6394,"src":"91:20:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6366,"name":"int256","nodeType":"ElementaryTypeName","src":"91:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"private"},{"body":{"id":6376,"nodeType":"Block","src":"143:25:22","statements":[{"expression":{"id":6374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"149:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6373,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"157:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"149:14:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":6375,"nodeType":"ExpressionStatement","src":"149:14:22"}]},"id":6377,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6369,"mutability":"mutable","name":"_value","nameLocation":"135:6:22","nodeType":"VariableDeclaration","scope":6377,"src":"128:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6368,"name":"int256","nodeType":"ElementaryTypeName","src":"128:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"127:15:22"},"returnParameters":{"id":6371,"nodeType":"ParameterList","parameters":[],"src":"143:0:22"},"scope":6394,"src":"116:52:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6384,"nodeType":"Block","src":"227:23:22","statements":[{"expression":{"id":6382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"240:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6381,"id":6383,"nodeType":"Return","src":"233:12:22"}]},"functionSelector":"50d25bcd","id":6385,"implemented":true,"kind":"function","modifiers":[],"name":"latestAnswer","nameLocation":"181:12:22","nodeType":"FunctionDefinition","parameters":{"id":6378,"nodeType":"ParameterList","parameters":[],"src":"193:2:22"},"returnParameters":{"id":6381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6385,"src":"219:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6379,"name":"int256","nodeType":"ElementaryTypeName","src":"219:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"218:8:22"},"scope":6394,"src":"172:78:22","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6392,"nodeType":"Block","src":"304:19:22","statements":[{"expression":{"hexValue":"36","id":6390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"317:1:22","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"functionReturnParameters":6389,"id":6391,"nodeType":"Return","src":"310:8:22"}]},"functionSelector":"313ce567","id":6393,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"263:8:22","nodeType":"FunctionDefinition","parameters":{"id":6386,"nodeType":"ParameterList","parameters":[],"src":"271:2:22"},"returnParameters":{"id":6389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6393,"src":"297:5:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":6387,"name":"uint8","nodeType":"ElementaryTypeName","src":"297:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"296:7:22"},"scope":6394,"src":"254:69:22","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":6395,"src":"64:261:22","usedErrors":[],"usedEvents":[]}],"src":"38:288:22"},"id":22},"contracts/mocks/MockERC20.sol":{"ast":{"absolutePath":"contracts/mocks/MockERC20.sol","exportedSymbols":{"Context":[2094],"ERC20":[1960],"IERC20":[2038],"IERC20Errors":[1350],"IERC20Metadata":[2064],"MockERC20":[6421]},"id":6422,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":6396,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":6397,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6422,"sourceUnit":1961,"src":"64:55:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6398,"name":"ERC20","nameLocations":["143:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":1960,"src":"143:5:23"},"id":6399,"nodeType":"InheritanceSpecifier","src":"143:5:23"}],"canonicalName":"MockERC20","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6421,"linearizedBaseContracts":[6421,1960,1350,2064,2038,2094],"name":"MockERC20","nameLocation":"130:9:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":6419,"nodeType":"Block","src":"215:62:23","statements":[{"expression":{"arguments":[{"expression":{"id":6409,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"227:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"231:6:23","memberName":"sender","nodeType":"MemberAccess","src":"227:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6411,"name":"premintAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"239:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":6412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"255:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6413,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"261:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":6414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"261:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"255:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"239:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6408,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"221:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"221:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6418,"nodeType":"ExpressionStatement","src":"221:51:23"}]},"id":6420,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4d6f636b4552433230","id":6404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"194:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_a04369c50c2c5be35c20e48473e254bd44922e8118d2ce4916ec0bf1f27c1a5d","typeString":"literal_string \"MockERC20\""},"value":"MockERC20"},{"hexValue":"4d4f434b","id":6405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"207:6:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_68c517c66587983dacbde85dde74f9eb525b7881b1753cee39b9677a9d863af0","typeString":"literal_string \"MOCK\""},"value":"MOCK"}],"id":6406,"kind":"baseConstructorSpecifier","modifierName":{"id":6403,"name":"ERC20","nameLocations":["188:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":1960,"src":"188:5:23"},"nodeType":"ModifierInvocation","src":"188:26:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6401,"mutability":"mutable","name":"premintAmount","nameLocation":"173:13:23","nodeType":"VariableDeclaration","scope":6420,"src":"165:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6400,"name":"uint256","nodeType":"ElementaryTypeName","src":"165:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"164:23:23"},"returnParameters":{"id":6407,"nodeType":"ParameterList","parameters":[],"src":"215:0:23"},"scope":6421,"src":"153:124:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":6422,"src":"121:159:23","usedErrors":[1320,1325,1330,1339,1344,1349],"usedEvents":[1972,1981]}],"src":"38:243:23"},"id":23}},"contracts":{"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol":{"Airdrop":{"abi":[{"inputs":[],"name":"AirdropIsFinished","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AlreadyRedeemed","type":"error"},{"inputs":[],"name":"CannotReturnFunds","type":"error"},{"inputs":[],"name":"EmptyToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"redeemAmount","type":"uint256"}],"name":"NotEnoughFunds","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"WrongPath","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Vesting","type":"event"},{"inputs":[],"name":"airdropFinished","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"_to","type":"address"}],"name":"cancelAirDrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"redeemAmount","type":"uint256"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"}],"name":"updateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"updateToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vesting","type":"address"}],"name":"updateVesting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AirdropIsFinished()":[{"details":"Indicates an error related to the end of the airdrop"}],"AlreadyRedeemed(address)":[{"details":"Indicates an error related to the already redeemed amount. Used in redeem.","params":{"target":"Address who calls redeem.."}}],"EmptyToken()":[{"details":"Indicates an error when empty token is provided."}],"NotEnoughFunds(uint256)":[{"details":"Indicates an error when no tokens are distributed to the airdrop."}],"WrongPath(address,uint256,bytes32[])":[{"details":"Indicates an error related to the wrong tree validation. Used in redeem.","params":{"amount":"Amount redeemed.","proof":"The proof provided.","target":"Address who calls redeem."}}]},"kind":"dev","methods":{"cancelAirDrop(address)":{"details":"Only manager can perform this transaction. It selfdestructs the contract.","params":{"_to":"The receiving address."}},"redeem(address,bytes32[],uint256)":{"params":{"proof":"Proof path."}},"updateMerkleRoot(bytes32)":{"params":{"_root":"Merkle root of the addresses white list."}},"updateToken(address)":{"params":{"_token":"New token address."}},"updateVesting(address)":{"params":{"_vesting":"New vesting address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"airdropFinished()":"3222ae71","cancelAirDrop(address)":"635a0bee","redeem(address,bytes32[],uint256)":"b714d80a","root()":"ebf0c717","updateMerkleRoot(bytes32)":"4783f0ef","updateToken(address)":"7ad3def2","updateVesting(address)":"e4214471"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AirdropIsFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AlreadyRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReturnFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"WrongPath\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vesting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"updateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AirdropIsFinished()\":[{\"details\":\"Indicates an error related to the end of the airdrop\"}],\"AlreadyRedeemed(address)\":[{\"details\":\"Indicates an error related to the already redeemed amount. Used in redeem.\",\"params\":{\"target\":\"Address who calls redeem..\"}}],\"EmptyToken()\":[{\"details\":\"Indicates an error when empty token is provided.\"}],\"NotEnoughFunds(uint256)\":[{\"details\":\"Indicates an error when no tokens are distributed to the airdrop.\"}],\"WrongPath(address,uint256,bytes32[])\":[{\"details\":\"Indicates an error related to the wrong tree validation. Used in redeem.\",\"params\":{\"amount\":\"Amount redeemed.\",\"proof\":\"The proof provided.\",\"target\":\"Address who calls redeem.\"}}]},\"kind\":\"dev\",\"methods\":{\"cancelAirDrop(address)\":{\"details\":\"Only manager can perform this transaction. It selfdestructs the contract.\",\"params\":{\"_to\":\"The receiving address.\"}},\"redeem(address,bytes32[],uint256)\":{\"params\":{\"proof\":\"Proof path.\"}},\"updateMerkleRoot(bytes32)\":{\"params\":{\"_root\":\"Merkle root of the addresses white list.\"}},\"updateToken(address)\":{\"params\":{\"_token\":\"New token address.\"}},\"updateVesting(address)\":{\"params\":{\"_vesting\":\"New vesting address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAirDrop(address)\":{\"notice\":\"It cancels the Air Drop availability and sends the tokens to the manager provided address.\"},\"redeem(address,bytes32[],uint256)\":{\"notice\":\"Addresses can redeem their tokens.\"},\"updateMerkleRoot(bytes32)\":{\"notice\":\"Update merkle root\"},\"updateToken(address)\":{\"notice\":\"Update token address\"},\"updateVesting(address)\":{\"notice\":\"Update vesting address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol\":\"Airdrop\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/manager/AccessManaged.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAirdrop.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\n\\nabstract contract Airdrop is IAirdrop {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    bytes32 public root;\\n    bool public airdropFinished;\\n    IERC20 private token;\\n    IVesting private vesting;\\n    BitMaps.BitMap private redeemed;\\n\\n    /**\\n     * @dev Modifier to make a function callable only while aidrop working\\n     *\\n     */\\n    modifier notFinished() {\\n        if (airdropFinished) revert AirdropIsFinished();\\n        _;\\n    }\\n\\n    constructor(IERC20 _token, IVesting _vesting, bytes32 _root) {\\n        if (address(_token) == address(0)) {\\n            revert EmptyToken();\\n        }\\n        root = _root;\\n        token = _token;\\n        vesting = _vesting;\\n    }\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function _redeem(\\n        address target,\\n        bytes32[] memory proof,\\n        uint256 redeemAmount\\n    ) internal virtual notFinished {\\n        uint256 redeemPos = uint256(uint160(target));\\n        if (redeemed.get(redeemPos)) {\\n            revert AlreadyRedeemed(target);\\n        }\\n        bytes32 leaf = keccak256(\\n            bytes.concat(keccak256(abi.encode(target, redeemAmount)))\\n        );\\n        if (!MerkleProof.verify(proof, root, leaf)) {\\n            revert WrongPath(target, redeemAmount, proof);\\n        }\\n        redeemed.set(redeemPos);\\n        if (address(vesting) == address(0)) {\\n            if (!token.transfer(target, redeemAmount)) revert NotEnoughFunds(redeemAmount);\\n            emit Redeem(target, redeemAmount);\\n            return;\\n        }\\n        if (!token.transfer(address(vesting), redeemAmount)) revert NotEnoughFunds(redeemAmount);\\n        vesting.distribute(target, redeemAmount);\\n        emit Vesting(target, redeemAmount);\\n    }\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function _updateMerkleRoot(bytes32 _root) internal virtual {\\n        root = _root;\\n    }\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function _updateToken(address _token) internal virtual {\\n        if (address(_token) == address(0)) {\\n            revert EmptyToken();\\n        }\\n        token = IERC20(_token);\\n    }\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function _updateVesting(address _vesting) internal virtual {\\n        vesting = IVesting(_vesting);\\n    }\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function _cancelAirDrop(address payable _to) internal virtual {\\n        uint256 contractBalance = token.balanceOf(address(this));\\n        if (token.transfer(_to, contractBalance)) revert CannotReturnFunds();\\n        airdropFinished = true;\\n    }\\n}\\n\",\"keccak256\":\"0xce3ab87715138e7833809bc749e0315151b3d5b747d6fcfde64323900a911337\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * Defines the contract for the airdrop with the optional attach to the vesting\\n * If the vesting contract address is set, tokens will be transferred to the vesting contract,\\n * othervise to the airdrop target\\n */\\n\\ninterface IAirdrop {\\n    /**\\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\\n     * @param target Address who calls redeem..\\n     */\\n    error AlreadyRedeemed(address target);\\n\\n    /**\\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\\n     * @param target Address who calls redeem.\\n     * @param amount Amount redeemed.\\n     * @param proof The proof provided.\\n     */\\n    error WrongPath(address target, uint256 amount, bytes32[] proof);\\n\\n    /**\\n     * @dev Indicates an error related to the end of the airdrop\\n     */\\n    error AirdropIsFinished();\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error EmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when no tokens are distributed to the airdrop.\\n     */\\n    error NotEnoughFunds(uint256 redeemAmount);\\n\\n    error CannotReturnFunds();\\n\\n    event Redeem(address indexed account, uint256 amount);\\n    event Vesting(address indexed account, uint256 amount);\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function redeem(\\n        address target,\\n        bytes32[] memory proof,\\n        uint256 redeemAmount\\n    ) external;\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function updateMerkleRoot(bytes32 _root) external;\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function updateVesting(address _vesting) external;\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function cancelAirDrop(address payable _to) external;\\n}\\n\",\"keccak256\":\"0x19f2318e3a563dabdd5e064ed7985b95125c8279fde3dd2615a15e4590dd7268\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../structures/KPI.sol\\\"; \\n\\ninterface IVesting {\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error VestingEmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when empty airdrop is provided.\\n     */\\n    error VestingEmptyAirdrop();\\n    /**\\n     * @dev Indicates an error when unathorized person calls airdrop only function\\n     * @param account Address who calls\\n     */\\n    error VestingUnauthorizedAccount(address account);\\n    /**\\n     * @dev Indicates an error when no tokens can be redeemed.\\n     */\\n    error VestingEmptyRedeem();\\n    /**\\n     * @dev Indicates an error when kpi redefines.\\n     * @param code KPI code\\n     */\\n    error VestingKPIAlreadyDefined(bytes32 code);\\n\\n    /**\\n     * @dev Indicates an error when kpi is not defined.\\n     * @param code KPI code\\n     */\\n    error VestingKPINotDefined(bytes32 code);\\n    /**\\n     * @dev Indicates an error when kpi amount value is incorrect.\\n     * @param code KPI code\\n     * @param amount amount provided\\n     */\\n    error VestingIncorrectAmount(bytes32 code, uint16 amount);\\n    /**\\n     * @dev Indicates an error when kpi weight value is incorrect.\\n     * @param code KPI code\\n     * @param amount weight provided\\n     */\\n    error VestingIncorrectWeight(bytes32 code, uint16 amount);\\n    event Redeem(address indexed account, uint256 amount);\\n    event Distribute(address indexed account, uint256 amount);\\n    event KPIAdded(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIModified(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIUpdated(bytes32 indexed code, uint16 amount);\\n\\n    event KPIRemoved(bytes32 indexed code);\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update token address\\n    /// @param _airdrop New token address.\\n    function updateAirdrop(address _airdrop) external;\\n\\n    /// @notice Distribute the new vesting amount\\n    /// @param _to Receiver address.\\n    /// @param _amount Distributed amount.\\n    function distribute(address _to, uint256 _amount) external;\\n\\n    /// @notice Take the current unlocked amount\\n    function redeem(address _to) external returns (uint256);\\n\\n    /// @notice Set the new KPI\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function addKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Modify the KPI properties\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function modifyKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Update the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the current value of KPI\\n    function updateKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Increase the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the added value of KPI\\n    function increaseKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Remove the KPI from the list\\n    /// @param _code The KPI id code\\n    function removeKPI(bytes32 _code) external;\\n\\n    /// @notice Get the KPI from the list\\n    /// @param _code The KPI id code\\n    function getKPI(bytes32 _code) external view returns (KPI memory);\\n}\\n\",\"keccak256\":\"0x2dadc22b1919f75d42fdb580c3d43827fe0e868ec953d274d16ba02fad5e3cf3\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum KPITimeStatus {\\n    // do not use timestamp\\n    Ignore,\\n    // kpi is always zero until the timestamp\\n    NotBefore,\\n    // kpi is always 1000 (1) after the timestamp\\n    AlwaysAfter\\n}\\n/*\\n * KPI allows calculation of vesting value according the different options and time.\\n * All KPI values are calculated in promille (1/1000) and are between 0 & 1000 (1)\\n */\\nstruct KPI {\\n    // the service timestamp for the KPI\\n    uint256 time;\\n    // how the timestamp should to be processed\\n    KPITimeStatus timeStatus;\\n    // current KPI value\\n    uint16 current;\\n    // KPI weight in total KPI\\n    uint16 weight;\\n}\\n\",\"keccak256\":\"0x8b7066fe9d42ba56d6a382f46e87c625910fb579f7e5040c84f38b32300c8fd2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\nimport {AuthorityUtils} from \\\"./AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\\n * permissioned according to an \\\"authority\\\": a contract like {AccessManager} that follows the {IAuthority} interface,\\n * implementing a policy that allows certain callers to access certain functions.\\n *\\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\\n * functions, and ideally only used in `external` functions. See {restricted}.\\n */\\nabstract contract AccessManaged is Context, IAccessManaged {\\n    address private _authority;\\n\\n    bool private _consumingSchedule;\\n\\n    /**\\n     * @dev Initializes the contract connected to an initial authority.\\n     */\\n    constructor(address initialAuthority) {\\n        _setAuthority(initialAuthority);\\n    }\\n\\n    /**\\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\\n     * caller and selector of the function that entered the contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\\n     * ====\\n     *\\n     * [WARNING]\\n     * ====\\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\\n     * if no calldata is provided. (See {_checkCanCall}).\\n     *\\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\\n     * ====\\n     */\\n    modifier restricted() {\\n        _checkCanCall(_msgSender(), _msgData());\\n        _;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function authority() public view virtual returns (address) {\\n        return _authority;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function setAuthority(address newAuthority) public virtual {\\n        address caller = _msgSender();\\n        if (caller != authority()) {\\n            revert AccessManagedUnauthorized(caller);\\n        }\\n        if (newAuthority.code.length == 0) {\\n            revert AccessManagedInvalidAuthority(newAuthority);\\n        }\\n        _setAuthority(newAuthority);\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function isConsumingScheduledOp() public view returns (bytes4) {\\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\\n     * permissions set by the current authority.\\n     */\\n    function _setAuthority(address newAuthority) internal virtual {\\n        _authority = newAuthority;\\n        emit AuthorityUpdated(newAuthority);\\n    }\\n\\n    /**\\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\\n     * is less than 4 bytes long.\\n     */\\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\\n            authority(),\\n            caller,\\n            address(this),\\n            bytes4(data[0:4])\\n        );\\n        if (!immediate) {\\n            if (delay > 0) {\\n                _consumingSchedule = true;\\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\\n                _consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x137a4c22eb762b1580c632f575868d1f3b764291e58702ebe484fa1cef5447dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":15,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"root","offset":0,"slot":"0","type":"t_bytes32"},{"astId":17,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"airdropFinished","offset":0,"slot":"1","type":"t_bool"},{"astId":20,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"token","offset":1,"slot":"1","type":"t_contract(IERC20)2038"},{"astId":23,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"vesting","offset":0,"slot":"2","type":"t_contract(IVesting)531"},{"astId":26,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"redeemed","offset":0,"slot":"3","type":"t_struct(BitMap)5634_storage"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20)2038":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(IVesting)531":{"encoding":"inplace","label":"contract IVesting","numberOfBytes":"20"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(BitMap)5634_storage":{"encoding":"inplace","label":"struct BitMaps.BitMap","members":[{"astId":5633,"contract":"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol:Airdrop","label":"_data","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"cancelAirDrop(address)":{"notice":"It cancels the Air Drop availability and sends the tokens to the manager provided address."},"redeem(address,bytes32[],uint256)":{"notice":"Addresses can redeem their tokens."},"updateMerkleRoot(bytes32)":{"notice":"Update merkle root"},"updateToken(address)":{"notice":"Update token address"},"updateVesting(address)":{"notice":"Update vesting address"}},"version":1}}},"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol":{"IAirdrop":{"abi":[{"inputs":[],"name":"AirdropIsFinished","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AlreadyRedeemed","type":"error"},{"inputs":[],"name":"CannotReturnFunds","type":"error"},{"inputs":[],"name":"EmptyToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"redeemAmount","type":"uint256"}],"name":"NotEnoughFunds","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"WrongPath","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Vesting","type":"event"},{"inputs":[{"internalType":"address payable","name":"_to","type":"address"}],"name":"cancelAirDrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint256","name":"redeemAmount","type":"uint256"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"}],"name":"updateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"updateToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vesting","type":"address"}],"name":"updateVesting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AirdropIsFinished()":[{"details":"Indicates an error related to the end of the airdrop"}],"AlreadyRedeemed(address)":[{"details":"Indicates an error related to the already redeemed amount. Used in redeem.","params":{"target":"Address who calls redeem.."}}],"EmptyToken()":[{"details":"Indicates an error when empty token is provided."}],"NotEnoughFunds(uint256)":[{"details":"Indicates an error when no tokens are distributed to the airdrop."}],"WrongPath(address,uint256,bytes32[])":[{"details":"Indicates an error related to the wrong tree validation. Used in redeem.","params":{"amount":"Amount redeemed.","proof":"The proof provided.","target":"Address who calls redeem."}}]},"kind":"dev","methods":{"cancelAirDrop(address)":{"details":"Only manager can perform this transaction. It selfdestructs the contract.","params":{"_to":"The receiving address."}},"redeem(address,bytes32[],uint256)":{"params":{"proof":"Proof path."}},"updateMerkleRoot(bytes32)":{"params":{"_root":"Merkle root of the addresses white list."}},"updateToken(address)":{"params":{"_token":"New token address."}},"updateVesting(address)":{"params":{"_vesting":"New vesting address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cancelAirDrop(address)":"635a0bee","redeem(address,bytes32[],uint256)":"b714d80a","updateMerkleRoot(bytes32)":"4783f0ef","updateToken(address)":"7ad3def2","updateVesting(address)":"e4214471"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AirdropIsFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AlreadyRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReturnFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"WrongPath\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vesting\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"updateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AirdropIsFinished()\":[{\"details\":\"Indicates an error related to the end of the airdrop\"}],\"AlreadyRedeemed(address)\":[{\"details\":\"Indicates an error related to the already redeemed amount. Used in redeem.\",\"params\":{\"target\":\"Address who calls redeem..\"}}],\"EmptyToken()\":[{\"details\":\"Indicates an error when empty token is provided.\"}],\"NotEnoughFunds(uint256)\":[{\"details\":\"Indicates an error when no tokens are distributed to the airdrop.\"}],\"WrongPath(address,uint256,bytes32[])\":[{\"details\":\"Indicates an error related to the wrong tree validation. Used in redeem.\",\"params\":{\"amount\":\"Amount redeemed.\",\"proof\":\"The proof provided.\",\"target\":\"Address who calls redeem.\"}}]},\"kind\":\"dev\",\"methods\":{\"cancelAirDrop(address)\":{\"details\":\"Only manager can perform this transaction. It selfdestructs the contract.\",\"params\":{\"_to\":\"The receiving address.\"}},\"redeem(address,bytes32[],uint256)\":{\"params\":{\"proof\":\"Proof path.\"}},\"updateMerkleRoot(bytes32)\":{\"params\":{\"_root\":\"Merkle root of the addresses white list.\"}},\"updateToken(address)\":{\"params\":{\"_token\":\"New token address.\"}},\"updateVesting(address)\":{\"params\":{\"_vesting\":\"New vesting address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAirDrop(address)\":{\"notice\":\"It cancels the Air Drop availability and sends the tokens to the manager provided address.\"},\"redeem(address,bytes32[],uint256)\":{\"notice\":\"Addresses can redeem their tokens.\"},\"updateMerkleRoot(bytes32)\":{\"notice\":\"Update merkle root\"},\"updateToken(address)\":{\"notice\":\"Update token address\"},\"updateVesting(address)\":{\"notice\":\"Update vesting address\"}},\"notice\":\"Defines the contract for the airdrop with the optional attach to the vesting If the vesting contract address is set, tokens will be transferred to the vesting contract, othervise to the airdrop target\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol\":\"IAirdrop\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * Defines the contract for the airdrop with the optional attach to the vesting\\n * If the vesting contract address is set, tokens will be transferred to the vesting contract,\\n * othervise to the airdrop target\\n */\\n\\ninterface IAirdrop {\\n    /**\\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\\n     * @param target Address who calls redeem..\\n     */\\n    error AlreadyRedeemed(address target);\\n\\n    /**\\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\\n     * @param target Address who calls redeem.\\n     * @param amount Amount redeemed.\\n     * @param proof The proof provided.\\n     */\\n    error WrongPath(address target, uint256 amount, bytes32[] proof);\\n\\n    /**\\n     * @dev Indicates an error related to the end of the airdrop\\n     */\\n    error AirdropIsFinished();\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error EmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when no tokens are distributed to the airdrop.\\n     */\\n    error NotEnoughFunds(uint256 redeemAmount);\\n\\n    error CannotReturnFunds();\\n\\n    event Redeem(address indexed account, uint256 amount);\\n    event Vesting(address indexed account, uint256 amount);\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function redeem(\\n        address target,\\n        bytes32[] memory proof,\\n        uint256 redeemAmount\\n    ) external;\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function updateMerkleRoot(bytes32 _root) external;\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function updateVesting(address _vesting) external;\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function cancelAirDrop(address payable _to) external;\\n}\\n\",\"keccak256\":\"0x19f2318e3a563dabdd5e064ed7985b95125c8279fde3dd2615a15e4590dd7268\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"cancelAirDrop(address)":{"notice":"It cancels the Air Drop availability and sends the tokens to the manager provided address."},"redeem(address,bytes32[],uint256)":{"notice":"Addresses can redeem their tokens."},"updateMerkleRoot(bytes32)":{"notice":"Update merkle root"},"updateToken(address)":{"notice":"Update token address"},"updateVesting(address)":{"notice":"Update vesting address"}},"notice":"Defines the contract for the airdrop with the optional attach to the vesting If the vesting contract address is set, tokens will be transferred to the vesting contract, othervise to the airdrop target","version":1}}},"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol":{"IVesting":{"abi":[{"inputs":[],"name":"VestingEmptyAirdrop","type":"error"},{"inputs":[],"name":"VestingEmptyRedeem","type":"error"},{"inputs":[],"name":"VestingEmptyToken","type":"error"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"uint16","name":"amount","type":"uint16"}],"name":"VestingIncorrectAmount","type":"error"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"uint16","name":"amount","type":"uint16"}],"name":"VestingIncorrectWeight","type":"error"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"VestingKPIAlreadyDefined","type":"error"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"VestingKPINotDefined","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"VestingUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Distribute","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"code","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"time","type":"uint256"},{"indexed":true,"internalType":"enum KPITimeStatus","name":"timeStatus","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"weight","type":"uint16"}],"name":"KPIAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"code","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"time","type":"uint256"},{"indexed":true,"internalType":"enum KPITimeStatus","name":"timeStatus","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"weight","type":"uint16"}],"name":"KPIModified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"KPIRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"code","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"amount","type":"uint16"}],"name":"KPIUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"},{"internalType":"uint256","name":"_time","type":"uint256"},{"internalType":"enum KPITimeStatus","name":"_timeStatus","type":"uint8"},{"internalType":"uint16","name":"_weight","type":"uint16"}],"name":"addKPI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"distribute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"}],"name":"getKPI","outputs":[{"components":[{"internalType":"uint256","name":"time","type":"uint256"},{"internalType":"enum KPITimeStatus","name":"timeStatus","type":"uint8"},{"internalType":"uint16","name":"current","type":"uint16"},{"internalType":"uint16","name":"weight","type":"uint16"}],"internalType":"struct KPI","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"},{"internalType":"uint16","name":"_amount","type":"uint16"}],"name":"increaseKPI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"},{"internalType":"uint256","name":"_time","type":"uint256"},{"internalType":"enum KPITimeStatus","name":"_timeStatus","type":"uint8"},{"internalType":"uint16","name":"_weight","type":"uint16"}],"name":"modifyKPI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"}],"name":"removeKPI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_airdrop","type":"address"}],"name":"updateAirdrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"},{"internalType":"uint16","name":"_amount","type":"uint16"}],"name":"updateKPI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"updateToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"VestingEmptyAirdrop()":[{"details":"Indicates an error when empty airdrop is provided."}],"VestingEmptyRedeem()":[{"details":"Indicates an error when no tokens can be redeemed."}],"VestingEmptyToken()":[{"details":"Indicates an error when empty token is provided."}],"VestingIncorrectAmount(bytes32,uint16)":[{"details":"Indicates an error when kpi amount value is incorrect.","params":{"amount":"amount provided","code":"KPI code"}}],"VestingIncorrectWeight(bytes32,uint16)":[{"details":"Indicates an error when kpi weight value is incorrect.","params":{"amount":"weight provided","code":"KPI code"}}],"VestingKPIAlreadyDefined(bytes32)":[{"details":"Indicates an error when kpi redefines.","params":{"code":"KPI code"}}],"VestingKPINotDefined(bytes32)":[{"details":"Indicates an error when kpi is not defined.","params":{"code":"KPI code"}}],"VestingUnauthorizedAccount(address)":[{"details":"Indicates an error when unathorized person calls airdrop only function","params":{"account":"Address who calls"}}]},"kind":"dev","methods":{"addKPI(bytes32,uint256,uint8,uint16)":{"params":{"_code":"The KPI id code","_time":"timestamp","_timeStatus":"status of the time","_weight":"weight of the KPI parameter in the total KPI"}},"distribute(address,uint256)":{"params":{"_amount":"Distributed amount.","_to":"Receiver address."}},"getKPI(bytes32)":{"params":{"_code":"The KPI id code"}},"increaseKPI(bytes32,uint16)":{"params":{"_amount":"the added value of KPI","_code":"The KPI id code"}},"modifyKPI(bytes32,uint256,uint8,uint16)":{"params":{"_code":"The KPI id code","_time":"timestamp","_timeStatus":"status of the time","_weight":"weight of the KPI parameter in the total KPI"}},"removeKPI(bytes32)":{"params":{"_code":"The KPI id code"}},"updateAirdrop(address)":{"params":{"_airdrop":"New token address."}},"updateKPI(bytes32,uint16)":{"params":{"_amount":"the current value of KPI","_code":"The KPI id code"}},"updateToken(address)":{"params":{"_token":"New token address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addKPI(bytes32,uint256,uint8,uint16)":"8b37d91e","distribute(address,uint256)":"fb932108","getKPI(bytes32)":"5ef7efbd","increaseKPI(bytes32,uint16)":"82112324","modifyKPI(bytes32,uint256,uint8,uint16)":"9150dbe3","redeem(address)":"95a2251f","removeKPI(bytes32)":"022c4522","updateAirdrop(address)":"c489a649","updateKPI(bytes32,uint16)":"b642b505","updateToken(address)":"7ad3def2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VestingEmptyAirdrop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingEmptyRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingEmptyToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"VestingIncorrectAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"VestingIncorrectWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"VestingKPIAlreadyDefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"VestingKPINotDefined\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VestingUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum KPITimeStatus\",\"name\":\"timeStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"}],\"name\":\"KPIAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum KPITimeStatus\",\"name\":\"timeStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"}],\"name\":\"KPIModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"KPIRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"KPIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"enum KPITimeStatus\",\"name\":\"_timeStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_weight\",\"type\":\"uint16\"}],\"name\":\"addKPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"getKPI\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum KPITimeStatus\",\"name\":\"timeStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"current\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"}],\"internalType\":\"struct KPI\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"increaseKPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"enum KPITimeStatus\",\"name\":\"_timeStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_weight\",\"type\":\"uint16\"}],\"name\":\"modifyKPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"removeKPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdrop\",\"type\":\"address\"}],\"name\":\"updateAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"updateKPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"VestingEmptyAirdrop()\":[{\"details\":\"Indicates an error when empty airdrop is provided.\"}],\"VestingEmptyRedeem()\":[{\"details\":\"Indicates an error when no tokens can be redeemed.\"}],\"VestingEmptyToken()\":[{\"details\":\"Indicates an error when empty token is provided.\"}],\"VestingIncorrectAmount(bytes32,uint16)\":[{\"details\":\"Indicates an error when kpi amount value is incorrect.\",\"params\":{\"amount\":\"amount provided\",\"code\":\"KPI code\"}}],\"VestingIncorrectWeight(bytes32,uint16)\":[{\"details\":\"Indicates an error when kpi weight value is incorrect.\",\"params\":{\"amount\":\"weight provided\",\"code\":\"KPI code\"}}],\"VestingKPIAlreadyDefined(bytes32)\":[{\"details\":\"Indicates an error when kpi redefines.\",\"params\":{\"code\":\"KPI code\"}}],\"VestingKPINotDefined(bytes32)\":[{\"details\":\"Indicates an error when kpi is not defined.\",\"params\":{\"code\":\"KPI code\"}}],\"VestingUnauthorizedAccount(address)\":[{\"details\":\"Indicates an error when unathorized person calls airdrop only function\",\"params\":{\"account\":\"Address who calls\"}}]},\"kind\":\"dev\",\"methods\":{\"addKPI(bytes32,uint256,uint8,uint16)\":{\"params\":{\"_code\":\"The KPI id code\",\"_time\":\"timestamp\",\"_timeStatus\":\"status of the time\",\"_weight\":\"weight of the KPI parameter in the total KPI\"}},\"distribute(address,uint256)\":{\"params\":{\"_amount\":\"Distributed amount.\",\"_to\":\"Receiver address.\"}},\"getKPI(bytes32)\":{\"params\":{\"_code\":\"The KPI id code\"}},\"increaseKPI(bytes32,uint16)\":{\"params\":{\"_amount\":\"the added value of KPI\",\"_code\":\"The KPI id code\"}},\"modifyKPI(bytes32,uint256,uint8,uint16)\":{\"params\":{\"_code\":\"The KPI id code\",\"_time\":\"timestamp\",\"_timeStatus\":\"status of the time\",\"_weight\":\"weight of the KPI parameter in the total KPI\"}},\"removeKPI(bytes32)\":{\"params\":{\"_code\":\"The KPI id code\"}},\"updateAirdrop(address)\":{\"params\":{\"_airdrop\":\"New token address.\"}},\"updateKPI(bytes32,uint16)\":{\"params\":{\"_amount\":\"the current value of KPI\",\"_code\":\"The KPI id code\"}},\"updateToken(address)\":{\"params\":{\"_token\":\"New token address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKPI(bytes32,uint256,uint8,uint16)\":{\"notice\":\"Set the new KPI\"},\"distribute(address,uint256)\":{\"notice\":\"Distribute the new vesting amount\"},\"getKPI(bytes32)\":{\"notice\":\"Get the KPI from the list\"},\"increaseKPI(bytes32,uint16)\":{\"notice\":\"Increase the  KPI value\"},\"modifyKPI(bytes32,uint256,uint8,uint16)\":{\"notice\":\"Modify the KPI properties\"},\"redeem(address)\":{\"notice\":\"Take the current unlocked amount\"},\"removeKPI(bytes32)\":{\"notice\":\"Remove the KPI from the list\"},\"updateAirdrop(address)\":{\"notice\":\"Update token address\"},\"updateKPI(bytes32,uint16)\":{\"notice\":\"Update the  KPI value\"},\"updateToken(address)\":{\"notice\":\"Update token address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\":\"IVesting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../structures/KPI.sol\\\"; \\n\\ninterface IVesting {\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error VestingEmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when empty airdrop is provided.\\n     */\\n    error VestingEmptyAirdrop();\\n    /**\\n     * @dev Indicates an error when unathorized person calls airdrop only function\\n     * @param account Address who calls\\n     */\\n    error VestingUnauthorizedAccount(address account);\\n    /**\\n     * @dev Indicates an error when no tokens can be redeemed.\\n     */\\n    error VestingEmptyRedeem();\\n    /**\\n     * @dev Indicates an error when kpi redefines.\\n     * @param code KPI code\\n     */\\n    error VestingKPIAlreadyDefined(bytes32 code);\\n\\n    /**\\n     * @dev Indicates an error when kpi is not defined.\\n     * @param code KPI code\\n     */\\n    error VestingKPINotDefined(bytes32 code);\\n    /**\\n     * @dev Indicates an error when kpi amount value is incorrect.\\n     * @param code KPI code\\n     * @param amount amount provided\\n     */\\n    error VestingIncorrectAmount(bytes32 code, uint16 amount);\\n    /**\\n     * @dev Indicates an error when kpi weight value is incorrect.\\n     * @param code KPI code\\n     * @param amount weight provided\\n     */\\n    error VestingIncorrectWeight(bytes32 code, uint16 amount);\\n    event Redeem(address indexed account, uint256 amount);\\n    event Distribute(address indexed account, uint256 amount);\\n    event KPIAdded(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIModified(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIUpdated(bytes32 indexed code, uint16 amount);\\n\\n    event KPIRemoved(bytes32 indexed code);\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update token address\\n    /// @param _airdrop New token address.\\n    function updateAirdrop(address _airdrop) external;\\n\\n    /// @notice Distribute the new vesting amount\\n    /// @param _to Receiver address.\\n    /// @param _amount Distributed amount.\\n    function distribute(address _to, uint256 _amount) external;\\n\\n    /// @notice Take the current unlocked amount\\n    function redeem(address _to) external returns (uint256);\\n\\n    /// @notice Set the new KPI\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function addKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Modify the KPI properties\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function modifyKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Update the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the current value of KPI\\n    function updateKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Increase the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the added value of KPI\\n    function increaseKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Remove the KPI from the list\\n    /// @param _code The KPI id code\\n    function removeKPI(bytes32 _code) external;\\n\\n    /// @notice Get the KPI from the list\\n    /// @param _code The KPI id code\\n    function getKPI(bytes32 _code) external view returns (KPI memory);\\n}\\n\",\"keccak256\":\"0x2dadc22b1919f75d42fdb580c3d43827fe0e868ec953d274d16ba02fad5e3cf3\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum KPITimeStatus {\\n    // do not use timestamp\\n    Ignore,\\n    // kpi is always zero until the timestamp\\n    NotBefore,\\n    // kpi is always 1000 (1) after the timestamp\\n    AlwaysAfter\\n}\\n/*\\n * KPI allows calculation of vesting value according the different options and time.\\n * All KPI values are calculated in promille (1/1000) and are between 0 & 1000 (1)\\n */\\nstruct KPI {\\n    // the service timestamp for the KPI\\n    uint256 time;\\n    // how the timestamp should to be processed\\n    KPITimeStatus timeStatus;\\n    // current KPI value\\n    uint16 current;\\n    // KPI weight in total KPI\\n    uint16 weight;\\n}\\n\",\"keccak256\":\"0x8b7066fe9d42ba56d6a382f46e87c625910fb579f7e5040c84f38b32300c8fd2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"addKPI(bytes32,uint256,uint8,uint16)":{"notice":"Set the new KPI"},"distribute(address,uint256)":{"notice":"Distribute the new vesting amount"},"getKPI(bytes32)":{"notice":"Get the KPI from the list"},"increaseKPI(bytes32,uint16)":{"notice":"Increase the  KPI value"},"modifyKPI(bytes32,uint256,uint8,uint16)":{"notice":"Modify the KPI properties"},"redeem(address)":{"notice":"Take the current unlocked amount"},"removeKPI(bytes32)":{"notice":"Remove the KPI from the list"},"updateAirdrop(address)":{"notice":"Update token address"},"updateKPI(bytes32,uint16)":{"notice":"Update the  KPI value"},"updateToken(address)":{"notice":"Update token address"}},"version":1}}},"@openzeppelin/contracts/access/manager/AccessManaged.sol":{"AccessManaged":{"abi":[{"inputs":[{"internalType":"address","name":"authority","type":"address"}],"name":"AccessManagedInvalidAuthority","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"uint32","name":"delay","type":"uint32"}],"name":"AccessManagedRequiredDelay","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"AccessManagedUnauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"authority","type":"address"}],"name":"AuthorityUpdated","type":"event"},{"inputs":[],"name":"authority","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isConsumingScheduledOp","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAuthority","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be permissioned according to an \"authority\": a contract like {AccessManager} that follows the {IAuthority} interface, implementing a policy that allows certain callers to access certain functions. IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public` functions, and ideally only used in `external` functions. See {restricted}.","events":{"AuthorityUpdated(address)":{"details":"Authority that manages this contract was updated."}},"kind":"dev","methods":{"authority()":{"details":"Returns the current authority."},"constructor":{"details":"Initializes the contract connected to an initial authority."},"isConsumingScheduledOp()":{"details":"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls."},"setAuthority(address)":{"details":"Transfers control to a new authority. The caller must be the current authority."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authority()":"bf7e214f","isConsumingScheduledOp()":"8fb36037","setAuthority(address)":"7a9e5e4b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be permissioned according to an \\\"authority\\\": a contract like {AccessManager} that follows the {IAuthority} interface, implementing a policy that allows certain callers to access certain functions. IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public` functions, and ideally only used in `external` functions. See {restricted}.\",\"events\":{\"AuthorityUpdated(address)\":{\"details\":\"Authority that manages this contract was updated.\"}},\"kind\":\"dev\",\"methods\":{\"authority()\":{\"details\":\"Returns the current authority.\"},\"constructor\":{\"details\":\"Initializes the contract connected to an initial authority.\"},\"isConsumingScheduledOp()\":{\"details\":\"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls.\"},\"setAuthority(address)\":{\"details\":\"Transfers control to a new authority. The caller must be the current authority.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/AccessManaged.sol\":\"AccessManaged\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/AccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\nimport {AuthorityUtils} from \\\"./AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\\n * permissioned according to an \\\"authority\\\": a contract like {AccessManager} that follows the {IAuthority} interface,\\n * implementing a policy that allows certain callers to access certain functions.\\n *\\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\\n * functions, and ideally only used in `external` functions. See {restricted}.\\n */\\nabstract contract AccessManaged is Context, IAccessManaged {\\n    address private _authority;\\n\\n    bool private _consumingSchedule;\\n\\n    /**\\n     * @dev Initializes the contract connected to an initial authority.\\n     */\\n    constructor(address initialAuthority) {\\n        _setAuthority(initialAuthority);\\n    }\\n\\n    /**\\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\\n     * caller and selector of the function that entered the contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\\n     * ====\\n     *\\n     * [WARNING]\\n     * ====\\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\\n     * if no calldata is provided. (See {_checkCanCall}).\\n     *\\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\\n     * ====\\n     */\\n    modifier restricted() {\\n        _checkCanCall(_msgSender(), _msgData());\\n        _;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function authority() public view virtual returns (address) {\\n        return _authority;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function setAuthority(address newAuthority) public virtual {\\n        address caller = _msgSender();\\n        if (caller != authority()) {\\n            revert AccessManagedUnauthorized(caller);\\n        }\\n        if (newAuthority.code.length == 0) {\\n            revert AccessManagedInvalidAuthority(newAuthority);\\n        }\\n        _setAuthority(newAuthority);\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function isConsumingScheduledOp() public view returns (bytes4) {\\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\\n     * permissions set by the current authority.\\n     */\\n    function _setAuthority(address newAuthority) internal virtual {\\n        _authority = newAuthority;\\n        emit AuthorityUpdated(newAuthority);\\n    }\\n\\n    /**\\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\\n     * is less than 4 bytes long.\\n     */\\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\\n            authority(),\\n            caller,\\n            address(this),\\n            bytes4(data[0:4])\\n        );\\n        if (!immediate) {\\n            if (delay > 0) {\\n                _consumingSchedule = true;\\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\\n                _consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x137a4c22eb762b1580c632f575868d1f3b764291e58702ebe484fa1cef5447dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":566,"contract":"@openzeppelin/contracts/access/manager/AccessManaged.sol:AccessManaged","label":"_authority","offset":0,"slot":"0","type":"t_address"},{"astId":568,"contract":"@openzeppelin/contracts/access/manager/AccessManaged.sol:AccessManaged","label":"_consumingSchedule","offset":20,"slot":"0","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/AuthorityUtils.sol":{"AuthorityUtils":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"189:1040:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1040:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"189:1040:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"canCallWithDelay(address,address,address,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":\"AuthorityUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/IAccessManaged.sol":{"IAccessManaged":{"abi":[{"inputs":[{"internalType":"address","name":"authority","type":"address"}],"name":"AccessManagedInvalidAuthority","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"uint32","name":"delay","type":"uint32"}],"name":"AccessManagedRequiredDelay","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"AccessManagedUnauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"authority","type":"address"}],"name":"AuthorityUpdated","type":"event"},{"inputs":[],"name":"authority","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isConsumingScheduledOp","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"AuthorityUpdated(address)":{"details":"Authority that manages this contract was updated."}},"kind":"dev","methods":{"authority()":{"details":"Returns the current authority."},"isConsumingScheduledOp()":{"details":"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls."},"setAuthority(address)":{"details":"Transfers control to a new authority. The caller must be the current authority."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authority()":"bf7e214f","isConsumingScheduledOp()":"8fb36037","setAuthority(address)":"7a9e5e4b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorityUpdated(address)\":{\"details\":\"Authority that manages this contract was updated.\"}},\"kind\":\"dev\",\"methods\":{\"authority()\":{\"details\":\"Returns the current authority.\"},\"isConsumingScheduledOp()\":{\"details\":\"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls.\"},\"setAuthority(address)\":{\"details\":\"Transfers control to a new authority. The caller must be the current authority.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":\"IAccessManaged\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/IAccessManager.sol":{"IAccessManager":{"abi":[{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerAlreadyScheduled","type":"error"},{"inputs":[],"name":"AccessManagerBadConfirmation","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerExpired","type":"error"},{"inputs":[{"internalType":"address","name":"initialAdmin","type":"address"}],"name":"AccessManagerInvalidInitialAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AccessManagerLockedAccount","type":"error"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerLockedRole","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotReady","type":"error"},{"inputs":[{"internalType":"bytes32","name":"operationId","type":"bytes32"}],"name":"AccessManagerNotScheduled","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"AccessManagerUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCall","type":"error"},{"inputs":[{"internalType":"address","name":"msgsender","type":"address"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"AccessManagerUnauthorizedCancel","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AccessManagerUnauthorizedConsume","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"}],"name":"OperationExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"operationId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"schedule","type":"uint48"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"OperationScheduled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"admin","type":"uint64"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"RoleGrantDelayChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"},{"indexed":false,"internalType":"bool","name":"newMember","type":"bool"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"RoleGuardianChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":false,"internalType":"string","name":"label","type":"string"}],"name":"RoleLabel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"},{"indexed":false,"internalType":"uint48","name":"since","type":"uint48"}],"name":"TargetAdminDelayUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"closed","type":"bool"}],"name":"TargetClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":true,"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"TargetFunctionRoleUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"canCall","outputs":[{"internalType":"bool","name":"allowed","type":"bool"},{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"cancel","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"consumeScheduledOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"execute","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"expiration","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"getAccess","outputs":[{"internalType":"uint48","name":"","type":"uint48"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getNonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleAdmin","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGrantDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"getRoleGuardian","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getSchedule","outputs":[{"internalType":"uint48","name":"","type":"uint48"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"getTargetAdminDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"getTargetFunctionRole","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"},{"internalType":"uint32","name":"executionDelay","type":"uint32"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"hashOperation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"isTargetClosed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"string","name":"label","type":"string"}],"name":"labelRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minSetback","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint48","name":"when","type":"uint48"}],"name":"schedule","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setGrantDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"admin","type":"uint64"}],"name":"setRoleAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"roleId","type":"uint64"},{"internalType":"uint64","name":"guardian","type":"uint64"}],"name":"setRoleGuardian","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint32","name":"newDelay","type":"uint32"}],"name":"setTargetAdminDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"closed","type":"bool"}],"name":"setTargetClosed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"},{"internalType":"uint64","name":"roleId","type":"uint64"}],"name":"setTargetFunctionRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"address","name":"newAuthority","type":"address"}],"name":"updateAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"OperationCanceled(bytes32,uint32)":{"details":"A scheduled operation was canceled."},"OperationExecuted(bytes32,uint32)":{"details":"A scheduled operation was executed."},"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)":{"details":"A delayed operation was scheduled."},"RoleAdminChanged(uint64,uint64)":{"details":"Role acting as admin over a given `roleId` is updated."},"RoleGrantDelayChanged(uint64,uint32,uint48)":{"details":"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached."},"RoleGranted(uint64,address,uint32,uint48,bool)":{"details":"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated."},"RoleGuardianChanged(uint64,uint64)":{"details":"Role acting as guardian over a given `roleId` is updated."},"RoleLabel(uint64,string)":{"details":"Informational labelling for a roleId."},"RoleRevoked(uint64,address)":{"details":"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous."},"TargetAdminDelayUpdated(address,uint32,uint48)":{"details":"Admin delay for a given `target` will be updated to `delay` when `since` is reached."},"TargetClosed(address,bool)":{"details":"Target mode is updated (true = closed, false = open)."},"TargetFunctionRoleUpdated(address,bytes4,uint64)":{"details":"Role required to invoke `selector` on `target` is updated to `roleId`."}},"kind":"dev","methods":{"canCall(address,address,bytes4)":{"details":"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead."},"cancel(address,address,bytes)":{"details":"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event."},"consumeScheduledOp(address,bytes)":{"details":"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event."},"execute(address,bytes)":{"details":"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed."},"expiration()":{"details":"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage."},"getAccess(uint64,address)":{"details":"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled."},"getNonce(bytes32)":{"details":"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled."},"getRoleAdmin(uint64)":{"details":"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role."},"getRoleGrantDelay(uint64)":{"details":"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event."},"getRoleGuardian(uint64)":{"details":"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role."},"getSchedule(bytes32)":{"details":"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled."},"getTargetAdminDelay(address)":{"details":"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay."},"getTargetFunctionRole(address,bytes4)":{"details":"Get the role required to call a function."},"grantRole(uint64,address,uint32)":{"details":"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event."},"hasRole(uint64,address)":{"details":"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details."},"hashOperation(address,address,bytes)":{"details":"Hashing function for delayed operations."},"isTargetClosed(address)":{"details":"Get whether the contract is closed disabling any access. Otherwise role permissions are applied."},"labelRole(uint64,string)":{"details":"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event."},"minSetback()":{"details":"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days."},"renounceRole(uint64,address)":{"details":"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role."},"revokeRole(uint64,address)":{"details":"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role."},"schedule(address,bytes,uint48)":{"details":"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding."},"setGrantDelay(uint64,uint32)":{"details":"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event."},"setRoleAdmin(uint64,uint64)":{"details":"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event"},"setRoleGuardian(uint64,uint64)":{"details":"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event"},"setTargetAdminDelay(address,uint32)":{"details":"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event."},"setTargetClosed(address,bool)":{"details":"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event."},"setTargetFunctionRole(address,bytes4[],uint64)":{"details":"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector."},"updateAuthority(address,address)":{"details":"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"canCall(address,address,bytes4)":"b7009613","cancel(address,address,bytes)":"d6bb62c6","consumeScheduledOp(address,bytes)":"94c7d7ee","execute(address,bytes)":"1cff79cd","expiration()":"4665096d","getAccess(uint64,address)":"3078f114","getNonce(bytes32)":"4136a33c","getRoleAdmin(uint64)":"530dd456","getRoleGrantDelay(uint64)":"12be8727","getRoleGuardian(uint64)":"0b0a93ba","getSchedule(bytes32)":"3adc277a","getTargetAdminDelay(address)":"4c1da1e2","getTargetFunctionRole(address,bytes4)":"6d5115bd","grantRole(uint64,address,uint32)":"25c471a0","hasRole(uint64,address)":"d1f856ee","hashOperation(address,address,bytes)":"abd9bd2a","isTargetClosed(address)":"a166aa89","labelRole(uint64,string)":"853551b8","minSetback()":"cc1b6c81","renounceRole(uint64,address)":"fe0776f5","revokeRole(uint64,address)":"b7d2b162","schedule(address,bytes,uint48)":"f801a698","setGrantDelay(uint64,uint32)":"a64d95ce","setRoleAdmin(uint64,uint64)":"30cae187","setRoleGuardian(uint64,uint64)":"52962952","setTargetAdminDelay(address,uint32)":"d22b5989","setTargetClosed(address,bool)":"167bd395","setTargetFunctionRole(address,bytes4[],uint64)":"08d6122d","updateAuthority(address,address)":"18ff183c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessManagerBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"name\":\"AccessManagerInvalidInitialAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessManagerLockedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerLockedRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"}],\"name\":\"AccessManagerNotScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"AccessManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AccessManagerUnauthorizedCancel\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AccessManagerUnauthorizedConsume\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"RoleGrantDelayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMember\",\"type\":\"bool\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"RoleGuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"RoleLabel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"since\",\"type\":\"uint48\"}],\"name\":\"TargetAdminDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"TargetClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"TargetFunctionRoleUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"consumeScheduledOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGrantDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"getRoleGuardian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getTargetAdminDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getTargetFunctionRole\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executionDelay\",\"type\":\"uint32\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isTargetClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"labelRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSetback\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"when\",\"type\":\"uint48\"}],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setGrantDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"admin\",\"type\":\"uint64\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"guardian\",\"type\":\"uint64\"}],\"name\":\"setRoleGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"setTargetAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"setTargetClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"roleId\",\"type\":\"uint64\"}],\"name\":\"setTargetFunctionRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"updateAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OperationCanceled(bytes32,uint32)\":{\"details\":\"A scheduled operation was canceled.\"},\"OperationExecuted(bytes32,uint32)\":{\"details\":\"A scheduled operation was executed.\"},\"OperationScheduled(bytes32,uint32,uint48,address,address,bytes)\":{\"details\":\"A delayed operation was scheduled.\"},\"RoleAdminChanged(uint64,uint64)\":{\"details\":\"Role acting as admin over a given `roleId` is updated.\"},\"RoleGrantDelayChanged(uint64,uint32,uint48)\":{\"details\":\"Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\"},\"RoleGranted(uint64,address,uint32,uint48,bool)\":{\"details\":\"Emitted when `account` is granted `roleId`. NOTE: The meaning of the `since` argument depends on the `newMember` argument. If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role, otherwise it indicates the execution delay for this account and roleId is updated.\"},\"RoleGuardianChanged(uint64,uint64)\":{\"details\":\"Role acting as guardian over a given `roleId` is updated.\"},\"RoleLabel(uint64,string)\":{\"details\":\"Informational labelling for a roleId.\"},\"RoleRevoked(uint64,address)\":{\"details\":\"Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\"},\"TargetAdminDelayUpdated(address,uint32,uint48)\":{\"details\":\"Admin delay for a given `target` will be updated to `delay` when `since` is reached.\"},\"TargetClosed(address,bool)\":{\"details\":\"Target mode is updated (true = closed, false = open).\"},\"TargetFunctionRoleUpdated(address,bytes4,uint64)\":{\"details\":\"Role required to invoke `selector` on `target` is updated to `roleId`.\"}},\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Check if an address (`caller`) is authorised to call a given function on a given contract directly (with no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule} & {execute} workflow. This function is usually called by the targeted contract to control immediate execution of restricted functions. Therefore we only return true if the call can be performed without any delay. If the call is subject to a previously set delay (not zero), then the function should return false and the caller should schedule the operation for future execution. If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise the operation can be executed if and only if delay is greater than 0. NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail to identify the indirect workflow, and will consider calls that require a delay to be forbidden. NOTE: This function does not report the permissions of this manager itself. These are defined by the {_canCallSelf} function instead.\"},\"cancel(address,address,bytes)\":{\"details\":\"Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled operation that is cancelled. Requirements: - the caller must be the proposer, a guardian of the targeted function, or a global admin Emits a {OperationCanceled} event.\"},\"consumeScheduledOp(address,bytes)\":{\"details\":\"Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error. This is useful for contract that want to enforce that calls targeting them were scheduled on the manager, with all the verifications that it implies. Emit a {OperationExecuted} event.\"},\"execute(address,bytes)\":{\"details\":\"Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the execution delay is 0. Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the operation wasn't previously scheduled (if the caller doesn't have an execution delay). Emits an {OperationExecuted} event only if the call was scheduled and delayed.\"},\"expiration()\":{\"details\":\"Expiration delay for scheduled proposals. Defaults to 1 week. IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately, disabling any scheduling usage.\"},\"getAccess(uint64,address)\":{\"details\":\"Get the access details for a given account for a given role. These details include the timepoint at which membership becomes active, and the delay applied to all operation by this user that requires this permission level. Returns: [0] Timestamp at which the account membership becomes valid. 0 means role is not granted. [1] Current execution delay for the account. [2] Pending execution delay for the account. [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\"},\"getNonce(bytes32)\":{\"details\":\"Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never been scheduled.\"},\"getRoleAdmin(uint64)\":{\"details\":\"Get the id of the role that acts as an admin for the given role. The admin permission is required to grant the role, revoke the role and update the execution delay to execute an operation that is restricted to this role.\"},\"getRoleGrantDelay(uint64)\":{\"details\":\"Get the role current grant delay. Its value may change at any point without an event emitted following a call to {setGrantDelay}. Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\"},\"getRoleGuardian(uint64)\":{\"details\":\"Get the role that acts as a guardian for a given role. The guardian permission allows canceling operations that have been scheduled under the role.\"},\"getSchedule(bytes32)\":{\"details\":\"Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the operation is not yet scheduled, has expired, was executed, or was canceled.\"},\"getTargetAdminDelay(address)\":{\"details\":\"Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\"},\"getTargetFunctionRole(address,bytes4)\":{\"details\":\"Get the role required to call a function.\"},\"grantRole(uint64,address,uint32)\":{\"details\":\"Add `account` to `roleId`, or change its execution delay. This gives the account the authorization to call any function that is restricted to this role. An optional execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation that is restricted to members of this role. The user will only be able to execute the operation after the delay has passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}). If the account has already been granted this role, the execution delay will be updated. This update is not immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any operation executed in the 3 hours that follows this update was indeed scheduled before this update. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - granted role must not be the `PUBLIC_ROLE` Emits a {RoleGranted} event.\"},\"hasRole(uint64,address)\":{\"details\":\"Check if a given account currently has the permission level corresponding to a given role. Note that this permission might be associated with an execution delay. {getAccess} can provide more details.\"},\"hashOperation(address,address,bytes)\":{\"details\":\"Hashing function for delayed operations.\"},\"isTargetClosed(address)\":{\"details\":\"Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\"},\"labelRole(uint64,string)\":{\"details\":\"Give a label to a role, for improved role discoverability by UIs. Requirements: - the caller must be a global admin Emits a {RoleLabel} event.\"},\"minSetback()\":{\"details\":\"Minimum setback for all delay updates, with the exception of execution delays. It can be increased without setback (and reset via {revokeRole} in the case event of an accidental increase). Defaults to 5 days.\"},\"renounceRole(uint64,address)\":{\"details\":\"Renounce role permissions for the calling account with immediate effect. If the sender is not in the role this call has no effect. Requirements: - the caller must be `callerConfirmation`. Emits a {RoleRevoked} event if the account had the role.\"},\"revokeRole(uint64,address)\":{\"details\":\"Remove an account from a role, with immediate effect. If the account does not have the role, this call has no effect. Requirements: - the caller must be an admin for the role (see {getRoleAdmin}) - revoked role must not be the `PUBLIC_ROLE` Emits a {RoleRevoked} event if the account had the role.\"},\"schedule(address,bytes,uint48)\":{\"details\":\"Schedule a delayed operation for future execution, and return the operation identifier. It is possible to choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays required for the caller. The special value zero will automatically set the earliest possible time. Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}. Emits a {OperationScheduled} event. NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target contract if it is using standard Solidity ABI encoding.\"},\"setGrantDelay(uint64,uint32)\":{\"details\":\"Update the delay for granting a `roleId`. Requirements: - the caller must be a global admin Emits a {RoleGrantDelayChanged} event.\"},\"setRoleAdmin(uint64,uint64)\":{\"details\":\"Change admin role for a given role. Requirements: - the caller must be a global admin Emits a {RoleAdminChanged} event\"},\"setRoleGuardian(uint64,uint64)\":{\"details\":\"Change guardian role for a given role. Requirements: - the caller must be a global admin Emits a {RoleGuardianChanged} event\"},\"setTargetAdminDelay(address,uint32)\":{\"details\":\"Set the delay for changing the configuration of a given target contract. Requirements: - the caller must be a global admin Emits a {TargetAdminDelayUpdated} event.\"},\"setTargetClosed(address,bool)\":{\"details\":\"Set the closed flag for a contract. Requirements: - the caller must be a global admin Emits a {TargetClosed} event.\"},\"setTargetFunctionRole(address,bytes4[],uint64)\":{\"details\":\"Set the role required to call functions identified by the `selectors` in the `target` contract. Requirements: - the caller must be a global admin Emits a {TargetFunctionRoleUpdated} event per selector.\"},\"updateAuthority(address,address)\":{\"details\":\"Changes the authority of a target managed by this manager instance. Requirements: - the caller must be a global admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":\"IAccessManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/manager/IAuthority.sol":{"IAuthority":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"name":"canCall","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Standard interface for permissioning originally defined in Dappsys.","kind":"dev","methods":{"canCall(address,address,bytes4)":{"details":"Returns true if the caller can invoke on a target the function identified by a function selector."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"canCall(address,address,bytes4)":"b7009613"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Standard interface for permissioning originally defined in Dappsys.\",\"kind\":\"dev\",\"methods\":{\"canCall(address,address,bytes4)\":{\"details\":\"Returns true if the caller can invoke on a target the function identified by a function selector.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/manager/IAuthority.sol\":\"IAuthority\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1468,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":1474,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1476,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":1478,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1480,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Pausable.sol":{"Pausable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2103,"contract":"@openzeppelin/contracts/utils/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2222,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box.","errors":{"MerkleProofInvalidMultiproof()":[{"details":"The multiproof provided is not valid."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"803:8956:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;803:8956:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"803:8956:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"203:14914:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"203:14914:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"764:33927:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;764:33927:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"764:33927:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/BitMaps.sol":{"BitMaps":{"abi":[],"devdoc":{"details":"Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential. Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor]. BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type. Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot, unlike the regular `bool` which would consume an entire slot for a single value. This results in gas savings in two ways: - Setting a zero value to non-zero only once every 256 times - Accessing the same warm slot for every 256 _sequential_ indices","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"858:1161:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;858:1161:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"858:1161:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"get(struct BitMaps.BitMap storage pointer,uint256)":"infinite","set(struct BitMaps.BitMap storage pointer,uint256)":"infinite","setTo(struct BitMaps.BitMap storage pointer,uint256,bool)":"infinite","unset(struct BitMaps.BitMap storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential. Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor]. BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type. Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot, unlike the regular `bool` which would consume an entire slot for a single value. This results in gas savings in two ways: - Setting a zero value to non-zero only once every 256 times - Accessing the same warm slot for every 256 _sequential_ indices\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":\"BitMaps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/types/Time.sol":{"Time":{"abi":[],"devdoc":{"details":"This library provides helpers for manipulating time-related objects. It uses the following types: - `uint48` for timepoints - `uint32` for durations While the library doesn't provide specific types for timepoints and duration, it does provide: - a `Delay` type to represent duration that can be programmed to change value automatically at a given point - additional helper functions","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"640:4454:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;640:4454:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000814000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"640:4454:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_getFullAt(Time.Delay,uint48)":"infinite","blockNumber()":"infinite","get(Time.Delay)":"infinite","getFull(Time.Delay)":"infinite","pack(uint32,uint32,uint48)":"infinite","timestamp()":"infinite","toDelay(uint32)":"infinite","unpack(Time.Delay)":"infinite","withUpdate(Time.Delay,uint32,uint32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This library provides helpers for manipulating time-related objects. It uses the following types: - `uint48` for timepoints - `uint32` for durations While the library doesn't provide specific types for timepoints and duration, it does provide: - a `Delay` type to represent duration that can be programmed to change value automatically at a given point - additional helper functions\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/types/Time.sol\":\"Time\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/management/CXBTokenAirdrop.sol":{"CXBTokenAirdrop":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"},{"internalType":"contract IVesting","name":"_vesting","type":"address"},{"internalType":"address","name":"initialAuthority","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_root","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"authority","type":"address"}],"name":"AccessManagedInvalidAuthority","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"uint32","name":"delay","type":"uint32"}],"name":"AccessManagedRequiredDelay","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"AccessManagedUnauthorized","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"CXBTokenAirdropAlreadyRedeemed","type":"error"},{"inputs":[],"name":"CXBTokenAirdropEmptyToken","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"CXBTokenAirdropWrongPath","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"authority","type":"address"}],"name":"AuthorityUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Redeem","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Vesting","type":"event"},{"inputs":[],"name":"authority","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"_to","type":"address"}],"name":"cancelAirDrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isConsumingScheduledOp","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"redeem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"redeemAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAuthority","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"}],"name":"updateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"updateRedeemAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"_token","type":"address"}],"name":"updateToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IVesting","name":"_vesting","type":"address"}],"name":"updateVesting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"CXBTokenAirdropAlreadyRedeemed(address)":[{"details":"Indicates an error related to the already redeemed amount. Used in redeem.","params":{"target":"Address who calls redeem.."}}],"CXBTokenAirdropEmptyToken()":[{"details":"Indicates an error when empty token is provided."}],"CXBTokenAirdropWrongPath(address,uint256,bytes32[])":[{"details":"Indicates an error related to the wrong tree validation. Used in redeem.","params":{"amount":"Amount redeemed.","proof":"The proof provided.","target":"Address who calls redeem."}}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"AuthorityUpdated(address)":{"details":"Authority that manages this contract was updated."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"authority()":{"details":"Returns the current authority."},"cancelAirDrop(address)":{"details":"Only manager can perform this transaction. It selfdestructs the contract.","params":{"_to":"The receiving address."}},"isConsumingScheduledOp()":{"details":"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"redeem(bytes32[])":{"params":{"proof":"Proof path."}},"setAuthority(address)":{"details":"Transfers control to a new authority. The caller must be the current authority."},"updateMerkleRoot(bytes32)":{"params":{"_root":"Merkle root of the addresses white list."}},"updateRedeemAmount(uint256)":{"params":{"_amount":"The redeemed amount."}},"updateToken(address)":{"params":{"_token":"New token address."}},"updateVesting(address)":{"params":{"_vesting":"New vesting address."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2128":{"entryPoint":null,"id":2128,"parameterSlots":0,"returnSlots":0},"@_2233":{"entryPoint":null,"id":2233,"parameterSlots":0,"returnSlots":0},"@_579":{"entryPoint":null,"id":579,"parameterSlots":1,"returnSlots":0},"@_6145":{"entryPoint":null,"id":6145,"parameterSlots":5,"returnSlots":0},"@_setAuthority_669":{"entryPoint":171,"id":669,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$2038t_contract$_IVesting_$531t_addresst_uint256t_bytes32_fromMemory":{"entryPoint":279,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1066:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"67:86:24","statements":[{"body":{"nodeType":"YulBlock","src":"131:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"140:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"143:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"133:6:24"},"nodeType":"YulFunctionCall","src":"133:12:24"},"nodeType":"YulExpressionStatement","src":"133:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"90:5:24"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"101:5:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"116:3:24","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"121:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"112:3:24"},"nodeType":"YulFunctionCall","src":"112:11:24"},{"kind":"number","nodeType":"YulLiteral","src":"125:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"108:3:24"},"nodeType":"YulFunctionCall","src":"108:19:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"97:3:24"},"nodeType":"YulFunctionCall","src":"97:31:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"87:2:24"},"nodeType":"YulFunctionCall","src":"87:42:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"80:6:24"},"nodeType":"YulFunctionCall","src":"80:50:24"},"nodeType":"YulIf","src":"77:70:24"}]},"name":"validator_revert_contract_IERC20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"56:5:24","type":""}],"src":"14:139:24"},{"body":{"nodeType":"YulBlock","src":"338:518:24","statements":[{"body":{"nodeType":"YulBlock","src":"385:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"394:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"397:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"387:6:24"},"nodeType":"YulFunctionCall","src":"387:12:24"},"nodeType":"YulExpressionStatement","src":"387:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"359:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"368:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"355:3:24"},"nodeType":"YulFunctionCall","src":"355:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"380:3:24","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"351:3:24"},"nodeType":"YulFunctionCall","src":"351:33:24"},"nodeType":"YulIf","src":"348:53:24"},{"nodeType":"YulVariableDeclaration","src":"410:29:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"429:9:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"423:5:24"},"nodeType":"YulFunctionCall","src":"423:16:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"414:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"481:5:24"}],"functionName":{"name":"validator_revert_contract_IERC20","nodeType":"YulIdentifier","src":"448:32:24"},"nodeType":"YulFunctionCall","src":"448:39:24"},"nodeType":"YulExpressionStatement","src":"448:39:24"},{"nodeType":"YulAssignment","src":"496:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"506:5:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"496:6:24"}]},{"nodeType":"YulVariableDeclaration","src":"520:40:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"545:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"556:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"541:3:24"},"nodeType":"YulFunctionCall","src":"541:18:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:24"},"nodeType":"YulFunctionCall","src":"535:25:24"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"524:7:24","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"602:7:24"}],"functionName":{"name":"validator_revert_contract_IERC20","nodeType":"YulIdentifier","src":"569:32:24"},"nodeType":"YulFunctionCall","src":"569:41:24"},"nodeType":"YulExpressionStatement","src":"569:41:24"},{"nodeType":"YulAssignment","src":"619:17:24","value":{"name":"value_1","nodeType":"YulIdentifier","src":"629:7:24"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"619:6:24"}]},{"nodeType":"YulVariableDeclaration","src":"645:40:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"670:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"681:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"666:3:24"},"nodeType":"YulFunctionCall","src":"666:18:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"660:5:24"},"nodeType":"YulFunctionCall","src":"660:25:24"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"649:7:24","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"727:7:24"}],"functionName":{"name":"validator_revert_contract_IERC20","nodeType":"YulIdentifier","src":"694:32:24"},"nodeType":"YulFunctionCall","src":"694:41:24"},"nodeType":"YulExpressionStatement","src":"694:41:24"},{"nodeType":"YulAssignment","src":"744:17:24","value":{"name":"value_2","nodeType":"YulIdentifier","src":"754:7:24"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"744:6:24"}]},{"nodeType":"YulAssignment","src":"770:35:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"801:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"786:3:24"},"nodeType":"YulFunctionCall","src":"786:18:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"780:5:24"},"nodeType":"YulFunctionCall","src":"780:25:24"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"770:6:24"}]},{"nodeType":"YulAssignment","src":"814:36:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"834:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"845:3:24","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"830:3:24"},"nodeType":"YulFunctionCall","src":"830:19:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"824:5:24"},"nodeType":"YulFunctionCall","src":"824:26:24"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"814:6:24"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$2038t_contract$_IVesting_$531t_addresst_uint256t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"272:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"283:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"295:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"303:6:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"311:6:24","type":""},{"name":"value3","nodeType":"YulTypedName","src":"319:6:24","type":""},{"name":"value4","nodeType":"YulTypedName","src":"327:6:24","type":""}],"src":"158:698:24"},{"body":{"nodeType":"YulBlock","src":"962:102:24","statements":[{"nodeType":"YulAssignment","src":"972:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"984:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"995:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"980:3:24"},"nodeType":"YulFunctionCall","src":"980:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"972:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1029:6:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1045:3:24","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1050:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1041:3:24"},"nodeType":"YulFunctionCall","src":"1041:11:24"},{"kind":"number","nodeType":"YulLiteral","src":"1054:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1037:3:24"},"nodeType":"YulFunctionCall","src":"1037:19:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1025:3:24"},"nodeType":"YulFunctionCall","src":"1025:32:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1007:6:24"},"nodeType":"YulFunctionCall","src":"1007:51:24"},"nodeType":"YulExpressionStatement","src":"1007:51:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"931:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"942:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"953:4:24","type":""}],"src":"861:203:24"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$2038t_contract$_IVesting_$531t_addresst_uint256t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610f48380380610f4883398101604081905261002f91610117565b82610039816100ab565b50600180556002805460ff191690556001600160a01b03851661006f576040516321961ff560e11b815260040160405180910390fd5b600355600480546001600160a01b039586166001600160a01b031991821617909155600580549490951693169290921790925560065550610175565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6001600160a01b038116811461011457600080fd5b50565b600080600080600060a0868803121561012f57600080fd5b855161013a816100ff565b602087015190955061014b816100ff565b604087015190945061015c816100ff565b6060870151608090970151959894975095949392505050565b610dc4806101846000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80637a9e5e4b11610081578063bf7e214f1161005b578063bf7e214f146101a0578063e4214471146101bb578063ebf0c717146101ce57600080fd5b80637a9e5e4b146101595780637ad3def21461016c5780638fb360371461017f57600080fd5b8063524c2a04116100b2578063524c2a041461011d5780635c975abb14610130578063635a0bee1461014657600080fd5b80630373c909146100d95780633fc01a0f146100f55780634783f0ef1461010a575b600080fd5b6100e260065481565b6040519081526020015b60405180910390f35b610108610103366004610aac565b6101d7565b005b610108610118366004610aac565b6101f1565b61010861012b366004610adb565b610207565b60025460ff1660405190151581526020016100ec565b610108610154366004610bae565b6104da565b610108610167366004610bae565b6105dd565b61010861017a366004610bae565b610657565b6101876106be565b6040516001600160e01b031990911681526020016100ec565b6000546040516001600160a01b0390911681526020016100ec565b6101086101c9366004610bae565b6106e2565b6100e260035481565b6101e4335b600036610722565b6101ec610822565b600655565b6101fa336101dc565b610202610822565b600355565b61020f610847565b610217610871565b3360009081526007602052604090205460ff161561024f57604051634d4b079360e01b81523360048201526024015b60405180910390fd5b600654604080513360208201529081019190915260009060600160408051601f19818403018152828252805160209182012090830152016040516020818303038152906040528051906020012090506102ab8260035483610895565b6102cf57600654604051630bfcdfb560e21b81526102469133918590600401610bcb565b336000908152600760205260409020805460ff191660011790556005546001600160a01b03166103af576004805460065460405163a9059cbb60e01b8152339381019390935260248301526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190610c3e565b5060065460405190815233907f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a69060200160405180910390a2506104ce565b6004805460055460065460405163a9059cbb60e01b81526001600160a01b03928316948101949094526024840152169063a9059cbb906044016020604051808303816000875af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190610c3e565b50600554600654604051631f72642160e31b815233600482015260248101919091526001600160a01b039091169063fb93210890604401600060405180830381600087803b15801561047c57600080fd5b505af1158015610490573d6000803e3d6000fd5b50506006546040519081523392507fd8c062e1121a4d8261df9c04930989855139a33297e0f1598cf7779aa5695b81915060200160405180910390a2505b6104d760018055565b50565b6104e3336101dc565b6104eb610822565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190610c59565b6004805460405163a9059cbb60e01b81526001600160a01b038681169382019390935260248101849052929350169063a9059cbb906044016020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610c3e565b505050565b60005433906001600160a01b031681146106145760405162d1953b60e31b81526001600160a01b0382166004820152602401610246565b816001600160a01b03163b60000361064a576040516361798f2f60e11b81526001600160a01b0383166004820152602401610246565b610653826108ab565b5050565b610660336101dc565b610668610822565b6001600160a01b03811661068f576040516321961ff560e11b815260040160405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008054600160a01b900460ff166106d65750600090565b50638fb3603760e01b90565b6106eb336101dc565b6106f3610822565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008061075861073a6000546001600160a01b031690565b863061074a60046000898b610c72565b61075391610c9c565b61090c565b915091508161081b5763ffffffff8116156107f8576000805460ff60a01b198116600160a01b17909155604051634a63ebf760e11b81526001600160a01b03909116906394c7d7ee906107b390889088908890600401610ccc565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50506000805460ff60a01b191690555061081b9050565b60405162d1953b60e31b81526001600160a01b0386166004820152602401610246565b5050505050565b60025460ff1661084557604051638dfc202b60e01b815260040160405180910390fd5b565b60026001540361086a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff16156108455760405163d93c066560e01b815260040160405180910390fd5b6000826108a28584610a2d565b14949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6040516001600160a01b03848116602483015283811660448301526001600160e01b03198316606483015260009182918291829189169060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663b700961360e01b179052516109909190610d0b565b600060405180830381855afa9150503d80600081146109cb576040519150601f19603f3d011682016040523d82523d6000602084013e6109d0565b606091505b50915091508115610a22576040815110610a0257808060200190518101906109f89190610d3a565b9094509250610a22565b6020815110610a225780806020019051810190610a1f9190610c3e565b93505b505094509492505050565b600081815b8451811015610a7257610a5e82868381518110610a5157610a51610d7a565b6020026020010151610a7a565b915080610a6a81610d90565b915050610a32565b509392505050565b6000818310610a96576000828152602084905260409020610aa5565b60008381526020839052604090205b9392505050565b600060208284031215610abe57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610aee57600080fd5b823567ffffffffffffffff80821115610b0657600080fd5b818501915085601f830112610b1a57600080fd5b813581811115610b2c57610b2c610ac5565b8060051b604051601f19603f83011681018181108582111715610b5157610b51610ac5565b604052918252848201925083810185019188831115610b6f57600080fd5b938501935b82851015610b8d57843584529385019392850192610b74565b98975050505050505050565b6001600160a01b03811681146104d757600080fd5b600060208284031215610bc057600080fd5b8135610aa581610b99565b6000606082016001600160a01b03861683526020858185015260606040850152818551808452608086019150828701935060005b81811015610c1b57845183529383019391830191600101610bff565b509098975050505050505050565b80518015158114610c3957600080fd5b919050565b600060208284031215610c5057600080fd5b610aa582610c29565b600060208284031215610c6b57600080fd5b5051919050565b60008085851115610c8257600080fd5b83861115610c8f57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610cc45780818660040360031b1b83161692505b505092915050565b6001600160a01b038416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000825160005b81811015610d2c5760208186018101518583015201610d12565b506000920191825250919050565b60008060408385031215610d4d57600080fd5b610d5683610c29565b9150602083015163ffffffff81168114610d6f57600080fd5b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201610db057634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xF48 CODESIZE SUB DUP1 PUSH2 0xF48 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x117 JUMP JUMPDEST DUP3 PUSH2 0x39 DUP2 PUSH2 0xAB JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x6F JUMPI PUSH1 0x40 MLOAD PUSH4 0x21961FF5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD SWAP5 SWAP1 SWAP6 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6 SSTORE POP PUSH2 0x175 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x13A DUP2 PUSH2 0xFF JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x14B DUP2 PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x15C DUP2 PUSH2 0xFF JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xDC4 DUP1 PUSH2 0x184 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A9E5E4B GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xBF7E214F GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xE4214471 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xEBF0C717 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x7AD3DEF2 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x8FB36037 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x524C2A04 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x524C2A04 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x635A0BEE EQ PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x373C909 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3FC01A0F EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x4783F0EF EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE2 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x108 PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x207 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH2 0x108 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH2 0x108 PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x5DD JUMP JUMPDEST PUSH2 0x108 PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x657 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH2 0x108 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xE2 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E4 CALLER JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH2 0x722 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x822 JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH2 0x1FA CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x202 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH2 0x20F PUSH2 0x847 JUMP JUMPDEST PUSH2 0x217 PUSH2 0x871 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x24F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4D4B0793 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x2AB DUP3 PUSH1 0x3 SLOAD DUP4 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x2CF JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBFCDFB5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0x246 SWAP2 CALLER SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xBCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3AF JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x370 SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x222838DB2794D11532D940E8DEC38AE307ED0B63CD97C233322E221F998767A6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP5 ADD MSTORE AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x407 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F726421 PUSH1 0xE3 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xFB932108 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x490 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP3 POP PUSH32 0xD8C062E1121A4D8261DF9C04930989855139A33297E0F1598CF7779AA5695B81 SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST PUSH2 0x4D7 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x4E3 CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x4EB PUSH2 0x822 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x539 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x55D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D8 SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x614 JUMPI PUSH1 0x40 MLOAD PUSH3 0xD1953B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x64A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61798F2F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST PUSH2 0x653 DUP3 PUSH2 0x8AB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x660 CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x668 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD PUSH4 0x21961FF5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6D6 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH4 0x8FB36037 PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x6EB CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x6F3 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x758 PUSH2 0x73A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP7 ADDRESS PUSH2 0x74A PUSH1 0x4 PUSH1 0x0 DUP10 DUP12 PUSH2 0xC72 JUMP JUMPDEST PUSH2 0x753 SWAP2 PUSH2 0xC9C JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x81B JUMPI PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP2 AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH4 0x4A63EBF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x94C7D7EE SWAP1 PUSH2 0x7B3 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE POP PUSH2 0x81B SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xD1953B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8A2 DUP6 DUP5 PUSH2 0xA2D JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP10 AND SWAP1 PUSH1 0x84 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB7009613 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x990 SWAP2 SWAP1 PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9CB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x40 DUP2 MLOAD LT PUSH2 0xA02 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9F8 SWAP2 SWAP1 PUSH2 0xD3A JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xA22 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD LT PUSH2 0xA22 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA1F SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA72 JUMPI PUSH2 0xA5E DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA51 JUMPI PUSH2 0xA51 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA7A JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA6A DUP2 PUSH2 0xD90 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA32 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA96 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB2C JUMPI PUSH2 0xB2C PUSH2 0xAC5 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xB51 JUMPI PUSH2 0xB51 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xB8D JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xB74 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA5 DUP2 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC1B JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xBFF JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA5 DUP3 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0xCC4 JUMPI DUP1 DUP2 DUP7 PUSH1 0x4 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD2C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xD12 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD56 DUP4 PUSH2 0xC29 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xDB0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"373:3655:21:-:0;;;1399:398;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1563:16;1190:31:4;1563:16:21;1190:13:4;:31::i;:::-;-1:-1:-1;1713:1:15;1917:21;;1231:7:14;:15;;-1:-1:-1;;1231:15:14;;;-1:-1:-1;;;;;1595:29:21;::::1;1591:94;;1647:27;;-1:-1:-1::0;;;1647:27:21::1;;;;;;;;;;;1591:94;1694:4;:12:::0;1716:5:::1;:14:::0;;-1:-1:-1;;;;;1716:14:21;;::::1;-1:-1:-1::0;;;;;;1716:14:21;;::::1;;::::0;;;1740:7:::1;:18:::0;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;1768:12:::1;:22:::0;-1:-1:-1;373:3655:21;;3803:149:4;3875:10;:25;;-1:-1:-1;;;;;;3875:25:4;-1:-1:-1;;;;;3875:25:4;;;;;;;;3915:30;;1007:51:24;;;3915:30:4;;995:2:24;980:18;3915:30:4;;;;;;;3803:149;:::o;14:139:24:-;-1:-1:-1;;;;;97:31:24;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:698::-;295:6;303;311;319;327;380:3;368:9;359:7;355:23;351:33;348:53;;;397:1;394;387:12;348:53;429:9;423:16;448:39;481:5;448:39;:::i;:::-;556:2;541:18;;535:25;506:5;;-1:-1:-1;569:41:24;535:25;569:41;:::i;:::-;681:2;666:18;;660:25;629:7;;-1:-1:-1;694:41:24;660:25;694:41;:::i;:::-;801:2;786:18;;780:25;845:3;830:19;;;824:26;158:698;;;;-1:-1:-1;754:7:24;780:25;824:26;158:698;-1:-1:-1;;;158:698:24:o;861:203::-;373:3655:21;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkCanCall_731":{"entryPoint":1826,"id":731,"parameterSlots":3,"returnSlots":0},"@_efficientHash_2816":{"entryPoint":null,"id":2816,"parameterSlots":2,"returnSlots":1},"@_hashPair_2804":{"entryPoint":2682,"id":2804,"parameterSlots":2,"returnSlots":1},"@_msgData_2085":{"entryPoint":null,"id":2085,"parameterSlots":0,"returnSlots":2},"@_msgSender_2076":{"entryPoint":null,"id":2076,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_2268":{"entryPoint":null,"id":2268,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_2260":{"entryPoint":2119,"id":2260,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_2165":{"entryPoint":2161,"id":2165,"parameterSlots":0,"returnSlots":0},"@_requirePaused_2178":{"entryPoint":2082,"id":2178,"parameterSlots":0,"returnSlots":0},"@_setAuthority_669":{"entryPoint":2219,"id":669,"parameterSlots":1,"returnSlots":0},"@authority_600":{"entryPoint":null,"id":600,"parameterSlots":0,"returnSlots":1},"@canCallWithDelay_813":{"entryPoint":2316,"id":813,"parameterSlots":4,"returnSlots":2},"@cancelAirDrop_6362":{"entryPoint":1242,"id":6362,"parameterSlots":1,"returnSlots":0},"@isConsumingScheduledOp_654":{"entryPoint":1726,"id":654,"parameterSlots":0,"returnSlots":1},"@paused_2153":{"entryPoint":null,"id":2153,"parameterSlots":0,"returnSlots":1},"@processProof_2368":{"entryPoint":2605,"id":2368,"parameterSlots":2,"returnSlots":1},"@redeemAmount_6092":{"entryPoint":null,"id":6092,"parameterSlots":0,"returnSlots":0},"@redeem_6258":{"entryPoint":519,"id":6258,"parameterSlots":1,"returnSlots":0},"@root_6084":{"entryPoint":null,"id":6084,"parameterSlots":0,"returnSlots":0},"@setAuthority_637":{"entryPoint":1501,"id":637,"parameterSlots":1,"returnSlots":0},"@updateMerkleRoot_6273":{"entryPoint":497,"id":6273,"parameterSlots":1,"returnSlots":0},"@updateRedeemAmount_6334":{"entryPoint":471,"id":6334,"parameterSlots":1,"returnSlots":0},"@updateToken_6303":{"entryPoint":1623,"id":6303,"parameterSlots":1,"returnSlots":0},"@updateVesting_6319":{"entryPoint":1762,"id":6319,"parameterSlots":1,"returnSlots":0},"@verify_2307":{"entryPoint":2197,"id":2307,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":3113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":2990,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":2779,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3134,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_boolt_uint32_fromMemory":{"entryPoint":3386,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$2038":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IVesting_$531":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2732,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3161,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_calldata_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3276,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__to_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3019,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":3186,"id":null,"parameterSlots":4,"returnSlots":2},"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4":{"entryPoint":3228,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3472,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":3450,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2757,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address_payable":{"entryPoint":2969,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8821:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:24","statements":[{"nodeType":"YulAssignment","src":"125:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:24"},"nodeType":"YulFunctionCall","src":"133:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:24"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:24"},"nodeType":"YulFunctionCall","src":"160:25:24"},"nodeType":"YulExpressionStatement","src":"160:25:24"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:24","type":""}],"src":"14:177:24"},{"body":{"nodeType":"YulBlock","src":"266:110:24","statements":[{"body":{"nodeType":"YulBlock","src":"312:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"321:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"324:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"314:6:24"},"nodeType":"YulFunctionCall","src":"314:12:24"},"nodeType":"YulExpressionStatement","src":"314:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"287:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"296:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"283:3:24"},"nodeType":"YulFunctionCall","src":"283:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"308:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"279:3:24"},"nodeType":"YulFunctionCall","src":"279:32:24"},"nodeType":"YulIf","src":"276:52:24"},{"nodeType":"YulAssignment","src":"337:33:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"360:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"347:12:24"},"nodeType":"YulFunctionCall","src":"347:23:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"337:6:24"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"232:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"243:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"255:6:24","type":""}],"src":"196:180:24"},{"body":{"nodeType":"YulBlock","src":"451:110:24","statements":[{"body":{"nodeType":"YulBlock","src":"497:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"506:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"509:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"499:6:24"},"nodeType":"YulFunctionCall","src":"499:12:24"},"nodeType":"YulExpressionStatement","src":"499:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"472:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"481:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"468:3:24"},"nodeType":"YulFunctionCall","src":"468:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"493:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"464:3:24"},"nodeType":"YulFunctionCall","src":"464:32:24"},"nodeType":"YulIf","src":"461:52:24"},{"nodeType":"YulAssignment","src":"522:33:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"545:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"532:12:24"},"nodeType":"YulFunctionCall","src":"532:23:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"522:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"417:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"428:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"440:6:24","type":""}],"src":"381:180:24"},{"body":{"nodeType":"YulBlock","src":"598:95:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"615:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"627:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"618:3:24"},"nodeType":"YulFunctionCall","src":"618:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"608:6:24"},"nodeType":"YulFunctionCall","src":"608:31:24"},"nodeType":"YulExpressionStatement","src":"608:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"655:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"658:4:24","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:24"},"nodeType":"YulFunctionCall","src":"648:15:24"},"nodeType":"YulExpressionStatement","src":"648:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"679:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"682:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"672:6:24"},"nodeType":"YulFunctionCall","src":"672:15:24"},"nodeType":"YulExpressionStatement","src":"672:15:24"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"566:127:24"},{"body":{"nodeType":"YulBlock","src":"793:1020:24","statements":[{"nodeType":"YulVariableDeclaration","src":"803:12:24","value":{"kind":"number","nodeType":"YulLiteral","src":"813:2:24","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"807:2:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"860:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"869:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"872:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"862:6:24"},"nodeType":"YulFunctionCall","src":"862:12:24"},"nodeType":"YulExpressionStatement","src":"862:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"835:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"844:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"831:3:24"},"nodeType":"YulFunctionCall","src":"831:23:24"},{"name":"_1","nodeType":"YulIdentifier","src":"856:2:24"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"827:3:24"},"nodeType":"YulFunctionCall","src":"827:32:24"},"nodeType":"YulIf","src":"824:52:24"},{"nodeType":"YulVariableDeclaration","src":"885:37:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"912:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"899:12:24"},"nodeType":"YulFunctionCall","src":"899:23:24"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"889:6:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"931:28:24","value":{"kind":"number","nodeType":"YulLiteral","src":"941:18:24","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"935:2:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"986:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"995:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"998:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"988:6:24"},"nodeType":"YulFunctionCall","src":"988:12:24"},"nodeType":"YulExpressionStatement","src":"988:12:24"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"974:6:24"},{"name":"_2","nodeType":"YulIdentifier","src":"982:2:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"971:2:24"},"nodeType":"YulFunctionCall","src":"971:14:24"},"nodeType":"YulIf","src":"968:34:24"},{"nodeType":"YulVariableDeclaration","src":"1011:32:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1025:9:24"},{"name":"offset","nodeType":"YulIdentifier","src":"1036:6:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1021:3:24"},"nodeType":"YulFunctionCall","src":"1021:22:24"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1015:2:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1091:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1103:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1093:6:24"},"nodeType":"YulFunctionCall","src":"1093:12:24"},"nodeType":"YulExpressionStatement","src":"1093:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1070:2:24"},{"kind":"number","nodeType":"YulLiteral","src":"1074:4:24","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:24"},"nodeType":"YulFunctionCall","src":"1066:13:24"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1081:7:24"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1062:3:24"},"nodeType":"YulFunctionCall","src":"1062:27:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1055:6:24"},"nodeType":"YulFunctionCall","src":"1055:35:24"},"nodeType":"YulIf","src":"1052:55:24"},{"nodeType":"YulVariableDeclaration","src":"1116:26:24","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1139:2:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1126:12:24"},"nodeType":"YulFunctionCall","src":"1126:16:24"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1120:2:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1167:16:24"},"nodeType":"YulFunctionCall","src":"1167:18:24"},"nodeType":"YulExpressionStatement","src":"1167:18:24"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1157:2:24"},{"name":"_2","nodeType":"YulIdentifier","src":"1161:2:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1154:2:24"},"nodeType":"YulFunctionCall","src":"1154:10:24"},"nodeType":"YulIf","src":"1151:36:24"},{"nodeType":"YulVariableDeclaration","src":"1196:20:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1210:1:24","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"1213:2:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1206:3:24"},"nodeType":"YulFunctionCall","src":"1206:10:24"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1200:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1225:23:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1245:2:24","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1239:5:24"},"nodeType":"YulFunctionCall","src":"1239:9:24"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1229:6:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1257:56:24","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1279:6:24"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"1295:2:24"},{"kind":"number","nodeType":"YulLiteral","src":"1299:2:24","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1291:3:24"},"nodeType":"YulFunctionCall","src":"1291:11:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1308:2:24","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1304:3:24"},"nodeType":"YulFunctionCall","src":"1304:7:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1287:3:24"},"nodeType":"YulFunctionCall","src":"1287:25:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1275:3:24"},"nodeType":"YulFunctionCall","src":"1275:38:24"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1261:10:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1372:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1374:16:24"},"nodeType":"YulFunctionCall","src":"1374:18:24"},"nodeType":"YulExpressionStatement","src":"1374:18:24"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1331:10:24"},{"name":"_2","nodeType":"YulIdentifier","src":"1343:2:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1328:2:24"},"nodeType":"YulFunctionCall","src":"1328:18:24"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1351:10:24"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1363:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1348:2:24"},"nodeType":"YulFunctionCall","src":"1348:22:24"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1325:2:24"},"nodeType":"YulFunctionCall","src":"1325:46:24"},"nodeType":"YulIf","src":"1322:72:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1410:2:24","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1414:10:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1403:6:24"},"nodeType":"YulFunctionCall","src":"1403:22:24"},"nodeType":"YulExpressionStatement","src":"1403:22:24"},{"nodeType":"YulVariableDeclaration","src":"1434:17:24","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:24"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1438:3:24","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1467:6:24"},{"name":"_4","nodeType":"YulIdentifier","src":"1475:2:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1460:6:24"},"nodeType":"YulFunctionCall","src":"1460:18:24"},"nodeType":"YulExpressionStatement","src":"1460:18:24"},{"nodeType":"YulAssignment","src":"1487:22:24","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1498:6:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1506:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:24"},"nodeType":"YulFunctionCall","src":"1494:15:24"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1487:3:24"}]},{"nodeType":"YulVariableDeclaration","src":"1518:34:24","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1540:2:24"},{"name":"_5","nodeType":"YulIdentifier","src":"1544:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1536:3:24"},"nodeType":"YulFunctionCall","src":"1536:11:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1549:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1532:3:24"},"nodeType":"YulFunctionCall","src":"1532:20:24"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1522:6:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1584:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1593:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1596:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1586:6:24"},"nodeType":"YulFunctionCall","src":"1586:12:24"},"nodeType":"YulExpressionStatement","src":"1586:12:24"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1567:6:24"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1575:7:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1564:2:24"},"nodeType":"YulFunctionCall","src":"1564:19:24"},"nodeType":"YulIf","src":"1561:39:24"},{"nodeType":"YulVariableDeclaration","src":"1609:22:24","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1624:2:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1628:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1620:3:24"},"nodeType":"YulFunctionCall","src":"1620:11:24"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1613:3:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1696:86:24","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1717:3:24"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1735:3:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1722:12:24"},"nodeType":"YulFunctionCall","src":"1722:17:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1710:6:24"},"nodeType":"YulFunctionCall","src":"1710:30:24"},"nodeType":"YulExpressionStatement","src":"1710:30:24"},{"nodeType":"YulAssignment","src":"1753:19:24","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1764:3:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1769:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1760:3:24"},"nodeType":"YulFunctionCall","src":"1760:12:24"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1753:3:24"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1651:3:24"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1656:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1648:2:24"},"nodeType":"YulFunctionCall","src":"1648:15:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1664:23:24","statements":[{"nodeType":"YulAssignment","src":"1666:19:24","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1677:3:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1682:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1673:3:24"},"nodeType":"YulFunctionCall","src":"1673:12:24"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1666:3:24"}]}]},"pre":{"nodeType":"YulBlock","src":"1644:3:24","statements":[]},"src":"1640:142:24"},{"nodeType":"YulAssignment","src":"1791:16:24","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1801:6:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1791:6:24"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"759:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"770:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"782:6:24","type":""}],"src":"698:1115:24"},{"body":{"nodeType":"YulBlock","src":"1913:92:24","statements":[{"nodeType":"YulAssignment","src":"1923:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1935:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1946:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1931:3:24"},"nodeType":"YulFunctionCall","src":"1931:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1923:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1965:9:24"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1990:6:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1983:6:24"},"nodeType":"YulFunctionCall","src":"1983:14:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1976:6:24"},"nodeType":"YulFunctionCall","src":"1976:22:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1958:6:24"},"nodeType":"YulFunctionCall","src":"1958:41:24"},"nodeType":"YulExpressionStatement","src":"1958:41:24"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1882:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1893:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1904:4:24","type":""}],"src":"1818:187:24"},{"body":{"nodeType":"YulBlock","src":"2063:109:24","statements":[{"body":{"nodeType":"YulBlock","src":"2150:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2159:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2162:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2152:6:24"},"nodeType":"YulFunctionCall","src":"2152:12:24"},"nodeType":"YulExpressionStatement","src":"2152:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2086:5:24"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2097:5:24"},{"kind":"number","nodeType":"YulLiteral","src":"2104:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2093:3:24"},"nodeType":"YulFunctionCall","src":"2093:54:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2083:2:24"},"nodeType":"YulFunctionCall","src":"2083:65:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2076:6:24"},"nodeType":"YulFunctionCall","src":"2076:73:24"},"nodeType":"YulIf","src":"2073:93:24"}]},"name":"validator_revert_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2052:5:24","type":""}],"src":"2010:162:24"},{"body":{"nodeType":"YulBlock","src":"2255:185:24","statements":[{"body":{"nodeType":"YulBlock","src":"2301:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2310:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2313:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2303:6:24"},"nodeType":"YulFunctionCall","src":"2303:12:24"},"nodeType":"YulExpressionStatement","src":"2303:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2276:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"2285:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2272:3:24"},"nodeType":"YulFunctionCall","src":"2272:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"2297:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2268:3:24"},"nodeType":"YulFunctionCall","src":"2268:32:24"},"nodeType":"YulIf","src":"2265:52:24"},{"nodeType":"YulVariableDeclaration","src":"2326:36:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2352:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2339:12:24"},"nodeType":"YulFunctionCall","src":"2339:23:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2330:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2404:5:24"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"2371:32:24"},"nodeType":"YulFunctionCall","src":"2371:39:24"},"nodeType":"YulExpressionStatement","src":"2371:39:24"},{"nodeType":"YulAssignment","src":"2419:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"2429:5:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2419:6:24"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2221:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2232:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2244:6:24","type":""}],"src":"2177:263:24"},{"body":{"nodeType":"YulBlock","src":"2515:185:24","statements":[{"body":{"nodeType":"YulBlock","src":"2561:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2570:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2573:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2563:6:24"},"nodeType":"YulFunctionCall","src":"2563:12:24"},"nodeType":"YulExpressionStatement","src":"2563:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2536:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"2545:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2532:3:24"},"nodeType":"YulFunctionCall","src":"2532:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"2557:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2528:3:24"},"nodeType":"YulFunctionCall","src":"2528:32:24"},"nodeType":"YulIf","src":"2525:52:24"},{"nodeType":"YulVariableDeclaration","src":"2586:36:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2612:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2599:12:24"},"nodeType":"YulFunctionCall","src":"2599:23:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2590:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2664:5:24"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"2631:32:24"},"nodeType":"YulFunctionCall","src":"2631:39:24"},"nodeType":"YulExpressionStatement","src":"2631:39:24"},{"nodeType":"YulAssignment","src":"2679:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"2689:5:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2679:6:24"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2481:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2492:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2504:6:24","type":""}],"src":"2445:255:24"},{"body":{"nodeType":"YulBlock","src":"2790:185:24","statements":[{"body":{"nodeType":"YulBlock","src":"2836:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2845:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2848:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2838:6:24"},"nodeType":"YulFunctionCall","src":"2838:12:24"},"nodeType":"YulExpressionStatement","src":"2838:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2811:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2807:3:24"},"nodeType":"YulFunctionCall","src":"2807:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"2832:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2803:3:24"},"nodeType":"YulFunctionCall","src":"2803:32:24"},"nodeType":"YulIf","src":"2800:52:24"},{"nodeType":"YulVariableDeclaration","src":"2861:36:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2887:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2874:12:24"},"nodeType":"YulFunctionCall","src":"2874:23:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2865:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2939:5:24"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"2906:32:24"},"nodeType":"YulFunctionCall","src":"2906:39:24"},"nodeType":"YulExpressionStatement","src":"2906:39:24"},{"nodeType":"YulAssignment","src":"2954:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"2964:5:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2954:6:24"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$2038","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2756:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2767:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2779:6:24","type":""}],"src":"2705:270:24"},{"body":{"nodeType":"YulBlock","src":"3079:103:24","statements":[{"nodeType":"YulAssignment","src":"3089:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3101:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3112:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3097:3:24"},"nodeType":"YulFunctionCall","src":"3097:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3089:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3131:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3146:6:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3158:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3163:10:24","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3154:3:24"},"nodeType":"YulFunctionCall","src":"3154:20:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3142:3:24"},"nodeType":"YulFunctionCall","src":"3142:33:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3124:6:24"},"nodeType":"YulFunctionCall","src":"3124:52:24"},"nodeType":"YulExpressionStatement","src":"3124:52:24"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3048:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3059:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3070:4:24","type":""}],"src":"2980:202:24"},{"body":{"nodeType":"YulBlock","src":"3288:125:24","statements":[{"nodeType":"YulAssignment","src":"3298:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3310:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3321:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3306:3:24"},"nodeType":"YulFunctionCall","src":"3306:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3298:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3340:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3355:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"3363:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3351:3:24"},"nodeType":"YulFunctionCall","src":"3351:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3333:6:24"},"nodeType":"YulFunctionCall","src":"3333:74:24"},"nodeType":"YulExpressionStatement","src":"3333:74:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3257:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3268:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3279:4:24","type":""}],"src":"3187:226:24"},{"body":{"nodeType":"YulBlock","src":"3504:185:24","statements":[{"body":{"nodeType":"YulBlock","src":"3550:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3559:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3562:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3552:6:24"},"nodeType":"YulFunctionCall","src":"3552:12:24"},"nodeType":"YulExpressionStatement","src":"3552:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3525:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"3534:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3521:3:24"},"nodeType":"YulFunctionCall","src":"3521:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"3546:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3517:3:24"},"nodeType":"YulFunctionCall","src":"3517:32:24"},"nodeType":"YulIf","src":"3514:52:24"},{"nodeType":"YulVariableDeclaration","src":"3575:36:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3601:9:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3588:12:24"},"nodeType":"YulFunctionCall","src":"3588:23:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3579:5:24","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3653:5:24"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"3620:32:24"},"nodeType":"YulFunctionCall","src":"3620:39:24"},"nodeType":"YulExpressionStatement","src":"3620:39:24"},{"nodeType":"YulAssignment","src":"3668:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"3678:5:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3668:6:24"}]}]},"name":"abi_decode_tuple_t_contract$_IVesting_$531","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3470:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3481:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3493:6:24","type":""}],"src":"3418:271:24"},{"body":{"nodeType":"YulBlock","src":"3795:76:24","statements":[{"nodeType":"YulAssignment","src":"3805:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3817:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3828:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:24"},"nodeType":"YulFunctionCall","src":"3813:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3805:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3847:9:24"},{"name":"value0","nodeType":"YulIdentifier","src":"3858:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:24"},"nodeType":"YulFunctionCall","src":"3840:25:24"},"nodeType":"YulExpressionStatement","src":"3840:25:24"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3764:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3775:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3786:4:24","type":""}],"src":"3694:177:24"},{"body":{"nodeType":"YulBlock","src":"4005:168:24","statements":[{"nodeType":"YulAssignment","src":"4015:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4027:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4038:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4023:3:24"},"nodeType":"YulFunctionCall","src":"4023:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4015:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4057:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4072:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"4080:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4068:3:24"},"nodeType":"YulFunctionCall","src":"4068:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4050:6:24"},"nodeType":"YulFunctionCall","src":"4050:74:24"},"nodeType":"YulExpressionStatement","src":"4050:74:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4144:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4155:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4140:3:24"},"nodeType":"YulFunctionCall","src":"4140:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"4160:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4133:6:24"},"nodeType":"YulFunctionCall","src":"4133:34:24"},"nodeType":"YulExpressionStatement","src":"4133:34:24"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3966:9:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3977:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3985:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3996:4:24","type":""}],"src":"3876:297:24"},{"body":{"nodeType":"YulBlock","src":"4297:63:24","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4314:3:24"},{"name":"value0","nodeType":"YulIdentifier","src":"4319:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4307:6:24"},"nodeType":"YulFunctionCall","src":"4307:19:24"},"nodeType":"YulExpressionStatement","src":"4307:19:24"},{"nodeType":"YulAssignment","src":"4335:19:24","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4346:3:24"},{"kind":"number","nodeType":"YulLiteral","src":"4351:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4342:3:24"},"nodeType":"YulFunctionCall","src":"4342:12:24"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4335:3:24"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4273:3:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4278:6:24","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4289:3:24","type":""}],"src":"4178:182:24"},{"body":{"nodeType":"YulBlock","src":"4572:617:24","statements":[{"nodeType":"YulVariableDeclaration","src":"4582:32:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4600:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4611:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4596:3:24"},"nodeType":"YulFunctionCall","src":"4596:18:24"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4586:6:24","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4630:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4645:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"4653:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4641:3:24"},"nodeType":"YulFunctionCall","src":"4641:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4623:6:24"},"nodeType":"YulFunctionCall","src":"4623:74:24"},"nodeType":"YulExpressionStatement","src":"4623:74:24"},{"nodeType":"YulVariableDeclaration","src":"4706:12:24","value":{"kind":"number","nodeType":"YulLiteral","src":"4716:2:24","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4710:2:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4738:9:24"},{"name":"_1","nodeType":"YulIdentifier","src":"4749:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4734:3:24"},"nodeType":"YulFunctionCall","src":"4734:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"4754:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4727:6:24"},"nodeType":"YulFunctionCall","src":"4727:34:24"},"nodeType":"YulExpressionStatement","src":"4727:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4781:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4792:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4777:3:24"},"nodeType":"YulFunctionCall","src":"4777:18:24"},{"kind":"number","nodeType":"YulLiteral","src":"4797:2:24","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4770:6:24"},"nodeType":"YulFunctionCall","src":"4770:30:24"},"nodeType":"YulExpressionStatement","src":"4770:30:24"},{"nodeType":"YulVariableDeclaration","src":"4809:17:24","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"4820:6:24"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4813:3:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4835:27:24","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4855:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4849:5:24"},"nodeType":"YulFunctionCall","src":"4849:13:24"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4839:6:24","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4878:6:24"},{"name":"length","nodeType":"YulIdentifier","src":"4886:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4871:6:24"},"nodeType":"YulFunctionCall","src":"4871:22:24"},"nodeType":"YulExpressionStatement","src":"4871:22:24"},{"nodeType":"YulAssignment","src":"4902:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4924:3:24","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:24"},"nodeType":"YulFunctionCall","src":"4909:19:24"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4902:3:24"}]},{"nodeType":"YulVariableDeclaration","src":"4937:29:24","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4955:6:24"},{"name":"_1","nodeType":"YulIdentifier","src":"4963:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4951:3:24"},"nodeType":"YulFunctionCall","src":"4951:15:24"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4941:6:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4975:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"4984:1:24","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4979:1:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"5043:120:24","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5064:3:24"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5075:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5069:5:24"},"nodeType":"YulFunctionCall","src":"5069:13:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5057:6:24"},"nodeType":"YulFunctionCall","src":"5057:26:24"},"nodeType":"YulExpressionStatement","src":"5057:26:24"},{"nodeType":"YulAssignment","src":"5096:19:24","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5107:3:24"},{"name":"_1","nodeType":"YulIdentifier","src":"5112:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5103:3:24"},"nodeType":"YulFunctionCall","src":"5103:12:24"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5096:3:24"}]},{"nodeType":"YulAssignment","src":"5128:25:24","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5142:6:24"},{"name":"_1","nodeType":"YulIdentifier","src":"5150:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5138:3:24"},"nodeType":"YulFunctionCall","src":"5138:15:24"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5128:6:24"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5005:1:24"},{"name":"length","nodeType":"YulIdentifier","src":"5008:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5002:2:24"},"nodeType":"YulFunctionCall","src":"5002:13:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5016:18:24","statements":[{"nodeType":"YulAssignment","src":"5018:14:24","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5027:1:24"},{"kind":"number","nodeType":"YulLiteral","src":"5030:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5023:3:24"},"nodeType":"YulFunctionCall","src":"5023:9:24"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5018:1:24"}]}]},"pre":{"nodeType":"YulBlock","src":"4998:3:24","statements":[]},"src":"4994:169:24"},{"nodeType":"YulAssignment","src":"5172:11:24","value":{"name":"pos","nodeType":"YulIdentifier","src":"5180:3:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5172:4:24"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__to_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4525:9:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4536:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4544:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4552:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4563:4:24","type":""}],"src":"4365:824:24"},{"body":{"nodeType":"YulBlock","src":"5251:107:24","statements":[{"nodeType":"YulAssignment","src":"5261:22:24","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5276:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5270:5:24"},"nodeType":"YulFunctionCall","src":"5270:13:24"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5261:5:24"}]},{"body":{"nodeType":"YulBlock","src":"5336:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5345:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5348:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5338:6:24"},"nodeType":"YulFunctionCall","src":"5338:12:24"},"nodeType":"YulExpressionStatement","src":"5338:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5305:5:24"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5326:5:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5319:6:24"},"nodeType":"YulFunctionCall","src":"5319:13:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5312:6:24"},"nodeType":"YulFunctionCall","src":"5312:21:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5302:2:24"},"nodeType":"YulFunctionCall","src":"5302:32:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5295:6:24"},"nodeType":"YulFunctionCall","src":"5295:40:24"},"nodeType":"YulIf","src":"5292:60:24"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5230:6:24","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:24","type":""}],"src":"5194:164:24"},{"body":{"nodeType":"YulBlock","src":"5441:124:24","statements":[{"body":{"nodeType":"YulBlock","src":"5487:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5496:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5499:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5489:6:24"},"nodeType":"YulFunctionCall","src":"5489:12:24"},"nodeType":"YulExpressionStatement","src":"5489:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5462:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5458:3:24"},"nodeType":"YulFunctionCall","src":"5458:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"5483:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5454:3:24"},"nodeType":"YulFunctionCall","src":"5454:32:24"},"nodeType":"YulIf","src":"5451:52:24"},{"nodeType":"YulAssignment","src":"5512:47:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5549:9:24"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"5522:26:24"},"nodeType":"YulFunctionCall","src":"5522:37:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5512:6:24"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5407:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5418:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5430:6:24","type":""}],"src":"5363:202:24"},{"body":{"nodeType":"YulBlock","src":"5651:103:24","statements":[{"body":{"nodeType":"YulBlock","src":"5697:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5706:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5709:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5699:6:24"},"nodeType":"YulFunctionCall","src":"5699:12:24"},"nodeType":"YulExpressionStatement","src":"5699:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5672:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"5681:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5668:3:24"},"nodeType":"YulFunctionCall","src":"5668:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"5693:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5664:3:24"},"nodeType":"YulFunctionCall","src":"5664:32:24"},"nodeType":"YulIf","src":"5661:52:24"},{"nodeType":"YulAssignment","src":"5722:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5738:9:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5732:5:24"},"nodeType":"YulFunctionCall","src":"5732:16:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5722:6:24"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5617:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5628:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5640:6:24","type":""}],"src":"5570:184:24"},{"body":{"nodeType":"YulBlock","src":"5896:168:24","statements":[{"nodeType":"YulAssignment","src":"5906:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5918:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"5929:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5914:3:24"},"nodeType":"YulFunctionCall","src":"5914:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5906:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5948:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5963:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"5971:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5959:3:24"},"nodeType":"YulFunctionCall","src":"5959:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5941:6:24"},"nodeType":"YulFunctionCall","src":"5941:74:24"},"nodeType":"YulExpressionStatement","src":"5941:74:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6035:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"6046:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6031:3:24"},"nodeType":"YulFunctionCall","src":"6031:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"6051:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6024:6:24"},"nodeType":"YulFunctionCall","src":"6024:34:24"},"nodeType":"YulExpressionStatement","src":"6024:34:24"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5857:9:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5868:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5876:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5887:4:24","type":""}],"src":"5759:305:24"},{"body":{"nodeType":"YulBlock","src":"6199:201:24","statements":[{"body":{"nodeType":"YulBlock","src":"6237:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6246:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6249:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6239:6:24"},"nodeType":"YulFunctionCall","src":"6239:12:24"},"nodeType":"YulExpressionStatement","src":"6239:12:24"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6215:10:24"},{"name":"endIndex","nodeType":"YulIdentifier","src":"6227:8:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6212:2:24"},"nodeType":"YulFunctionCall","src":"6212:24:24"},"nodeType":"YulIf","src":"6209:44:24"},{"body":{"nodeType":"YulBlock","src":"6286:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6295:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6298:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6288:6:24"},"nodeType":"YulFunctionCall","src":"6288:12:24"},"nodeType":"YulExpressionStatement","src":"6288:12:24"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"6268:8:24"},{"name":"length","nodeType":"YulIdentifier","src":"6278:6:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6265:2:24"},"nodeType":"YulFunctionCall","src":"6265:20:24"},"nodeType":"YulIf","src":"6262:40:24"},{"nodeType":"YulAssignment","src":"6311:36:24","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6328:6:24"},{"name":"startIndex","nodeType":"YulIdentifier","src":"6336:10:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6324:3:24"},"nodeType":"YulFunctionCall","src":"6324:23:24"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"6311:9:24"}]},{"nodeType":"YulAssignment","src":"6356:38:24","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"6373:8:24"},{"name":"startIndex","nodeType":"YulIdentifier","src":"6383:10:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6369:3:24"},"nodeType":"YulFunctionCall","src":"6369:25:24"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"6356:9:24"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6133:6:24","type":""},{"name":"length","nodeType":"YulTypedName","src":"6141:6:24","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6149:10:24","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"6161:8:24","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"6174:9:24","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"6185:9:24","type":""}],"src":"6069:331:24"},{"body":{"nodeType":"YulBlock","src":"6505:223:24","statements":[{"nodeType":"YulVariableDeclaration","src":"6515:29:24","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6538:5:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6525:12:24"},"nodeType":"YulFunctionCall","src":"6525:19:24"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6519:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6553:30:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6567:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6572:10:24","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6563:3:24"},"nodeType":"YulFunctionCall","src":"6563:20:24"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6557:2:24","type":""}]},{"nodeType":"YulAssignment","src":"6592:20:24","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6605:2:24"},{"name":"_2","nodeType":"YulIdentifier","src":"6609:2:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6601:3:24"},"nodeType":"YulFunctionCall","src":"6601:11:24"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6592:5:24"}]},{"body":{"nodeType":"YulBlock","src":"6643:79:24","statements":[{"nodeType":"YulAssignment","src":"6657:55:24","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6674:2:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6686:1:24","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6693:1:24","type":"","value":"4"},{"name":"len","nodeType":"YulIdentifier","src":"6696:3:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6689:3:24"},"nodeType":"YulFunctionCall","src":"6689:11:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6682:3:24"},"nodeType":"YulFunctionCall","src":"6682:19:24"},{"name":"_2","nodeType":"YulIdentifier","src":"6703:2:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6678:3:24"},"nodeType":"YulFunctionCall","src":"6678:28:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6670:3:24"},"nodeType":"YulFunctionCall","src":"6670:37:24"},{"name":"_2","nodeType":"YulIdentifier","src":"6709:2:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6666:3:24"},"nodeType":"YulFunctionCall","src":"6666:46:24"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6657:5:24"}]}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6627:3:24"},{"kind":"number","nodeType":"YulLiteral","src":"6632:1:24","type":"","value":"4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6624:2:24"},"nodeType":"YulFunctionCall","src":"6624:10:24"},"nodeType":"YulIf","src":"6621:101:24"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6480:5:24","type":""},{"name":"len","nodeType":"YulTypedName","src":"6487:3:24","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6495:5:24","type":""}],"src":"6405:323:24"},{"body":{"nodeType":"YulBlock","src":"6890:351:24","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6907:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6922:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"6930:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6918:3:24"},"nodeType":"YulFunctionCall","src":"6918:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6900:6:24"},"nodeType":"YulFunctionCall","src":"6900:74:24"},"nodeType":"YulExpressionStatement","src":"6900:74:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6994:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7005:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6990:3:24"},"nodeType":"YulFunctionCall","src":"6990:18:24"},{"kind":"number","nodeType":"YulLiteral","src":"7010:2:24","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6983:6:24"},"nodeType":"YulFunctionCall","src":"6983:30:24"},"nodeType":"YulExpressionStatement","src":"6983:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7033:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7044:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7029:3:24"},"nodeType":"YulFunctionCall","src":"7029:18:24"},{"name":"value2","nodeType":"YulIdentifier","src":"7049:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7022:6:24"},"nodeType":"YulFunctionCall","src":"7022:34:24"},"nodeType":"YulExpressionStatement","src":"7022:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7082:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7093:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7078:3:24"},"nodeType":"YulFunctionCall","src":"7078:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"7098:6:24"},{"name":"value2","nodeType":"YulIdentifier","src":"7106:6:24"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7065:12:24"},"nodeType":"YulFunctionCall","src":"7065:48:24"},"nodeType":"YulExpressionStatement","src":"7065:48:24"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7137:9:24"},{"name":"value2","nodeType":"YulIdentifier","src":"7148:6:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7133:3:24"},"nodeType":"YulFunctionCall","src":"7133:22:24"},{"kind":"number","nodeType":"YulLiteral","src":"7157:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7129:3:24"},"nodeType":"YulFunctionCall","src":"7129:31:24"},{"kind":"number","nodeType":"YulLiteral","src":"7162:1:24","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7122:6:24"},"nodeType":"YulFunctionCall","src":"7122:42:24"},"nodeType":"YulExpressionStatement","src":"7122:42:24"},{"nodeType":"YulAssignment","src":"7173:62:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7189:9:24"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7208:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"7216:2:24","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7204:3:24"},"nodeType":"YulFunctionCall","src":"7204:15:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7225:2:24","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7221:3:24"},"nodeType":"YulFunctionCall","src":"7221:7:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7200:3:24"},"nodeType":"YulFunctionCall","src":"7200:29:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7185:3:24"},"nodeType":"YulFunctionCall","src":"7185:45:24"},{"kind":"number","nodeType":"YulLiteral","src":"7232:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7181:3:24"},"nodeType":"YulFunctionCall","src":"7181:54:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7173:4:24"}]}]},"name":"abi_encode_tuple_t_address_t_bytes_calldata_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6843:9:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6854:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6862:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6870:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6881:4:24","type":""}],"src":"6733:508:24"},{"body":{"nodeType":"YulBlock","src":"7401:268:24","statements":[{"nodeType":"YulAssignment","src":"7411:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7423:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7434:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7419:3:24"},"nodeType":"YulFunctionCall","src":"7419:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7411:4:24"}]},{"nodeType":"YulVariableDeclaration","src":"7446:52:24","value":{"kind":"number","nodeType":"YulLiteral","src":"7456:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7450:2:24","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7514:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7529:6:24"},{"name":"_1","nodeType":"YulIdentifier","src":"7537:2:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7525:3:24"},"nodeType":"YulFunctionCall","src":"7525:15:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7507:6:24"},"nodeType":"YulFunctionCall","src":"7507:34:24"},"nodeType":"YulExpressionStatement","src":"7507:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7561:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7572:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7557:3:24"},"nodeType":"YulFunctionCall","src":"7557:18:24"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7581:6:24"},{"name":"_1","nodeType":"YulIdentifier","src":"7589:2:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7577:3:24"},"nodeType":"YulFunctionCall","src":"7577:15:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7550:6:24"},"nodeType":"YulFunctionCall","src":"7550:43:24"},"nodeType":"YulExpressionStatement","src":"7550:43:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7613:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"7624:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7609:3:24"},"nodeType":"YulFunctionCall","src":"7609:18:24"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7633:6:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7645:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7650:10:24","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7641:3:24"},"nodeType":"YulFunctionCall","src":"7641:20:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7629:3:24"},"nodeType":"YulFunctionCall","src":"7629:33:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7602:6:24"},"nodeType":"YulFunctionCall","src":"7602:61:24"},"nodeType":"YulExpressionStatement","src":"7602:61:24"}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7354:9:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7365:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7373:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7381:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7392:4:24","type":""}],"src":"7246:423:24"},{"body":{"nodeType":"YulBlock","src":"7811:275:24","statements":[{"nodeType":"YulVariableDeclaration","src":"7821:27:24","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7841:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7835:5:24"},"nodeType":"YulFunctionCall","src":"7835:13:24"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7825:6:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7857:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"7866:1:24","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7861:1:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"7928:77:24","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7953:3:24"},{"name":"i","nodeType":"YulIdentifier","src":"7958:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7949:3:24"},"nodeType":"YulFunctionCall","src":"7949:11:24"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7976:6:24"},{"name":"i","nodeType":"YulIdentifier","src":"7984:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7972:3:24"},"nodeType":"YulFunctionCall","src":"7972:14:24"},{"kind":"number","nodeType":"YulLiteral","src":"7988:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7968:3:24"},"nodeType":"YulFunctionCall","src":"7968:25:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7962:5:24"},"nodeType":"YulFunctionCall","src":"7962:32:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7942:6:24"},"nodeType":"YulFunctionCall","src":"7942:53:24"},"nodeType":"YulExpressionStatement","src":"7942:53:24"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7887:1:24"},{"name":"length","nodeType":"YulIdentifier","src":"7890:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7884:2:24"},"nodeType":"YulFunctionCall","src":"7884:13:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7898:21:24","statements":[{"nodeType":"YulAssignment","src":"7900:17:24","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7909:1:24"},{"kind":"number","nodeType":"YulLiteral","src":"7912:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7905:3:24"},"nodeType":"YulFunctionCall","src":"7905:12:24"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7900:1:24"}]}]},"pre":{"nodeType":"YulBlock","src":"7880:3:24","statements":[]},"src":"7876:129:24"},{"nodeType":"YulVariableDeclaration","src":"8014:26:24","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8028:3:24"},{"name":"length","nodeType":"YulIdentifier","src":"8033:6:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8024:3:24"},"nodeType":"YulFunctionCall","src":"8024:16:24"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8018:2:24","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8056:2:24"},{"kind":"number","nodeType":"YulLiteral","src":"8060:1:24","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8049:6:24"},"nodeType":"YulFunctionCall","src":"8049:13:24"},"nodeType":"YulExpressionStatement","src":"8049:13:24"},{"nodeType":"YulAssignment","src":"8071:9:24","value":{"name":"_1","nodeType":"YulIdentifier","src":"8078:2:24"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8071:3:24"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7787:3:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7792:6:24","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7803:3:24","type":""}],"src":"7674:412:24"},{"body":{"nodeType":"YulBlock","src":"8185:265:24","statements":[{"body":{"nodeType":"YulBlock","src":"8231:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8240:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8243:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8233:6:24"},"nodeType":"YulFunctionCall","src":"8233:12:24"},"nodeType":"YulExpressionStatement","src":"8233:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8206:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"8215:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8202:3:24"},"nodeType":"YulFunctionCall","src":"8202:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"8227:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8198:3:24"},"nodeType":"YulFunctionCall","src":"8198:32:24"},"nodeType":"YulIf","src":"8195:52:24"},{"nodeType":"YulAssignment","src":"8256:47:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8293:9:24"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"8266:26:24"},"nodeType":"YulFunctionCall","src":"8266:37:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8256:6:24"}]},{"nodeType":"YulVariableDeclaration","src":"8312:38:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8335:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"8346:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8331:3:24"},"nodeType":"YulFunctionCall","src":"8331:18:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8325:5:24"},"nodeType":"YulFunctionCall","src":"8325:25:24"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8316:5:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"8404:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8413:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8416:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8406:6:24"},"nodeType":"YulFunctionCall","src":"8406:12:24"},"nodeType":"YulExpressionStatement","src":"8406:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8372:5:24"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8383:5:24"},{"kind":"number","nodeType":"YulLiteral","src":"8390:10:24","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8379:3:24"},"nodeType":"YulFunctionCall","src":"8379:22:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8369:2:24"},"nodeType":"YulFunctionCall","src":"8369:33:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8362:6:24"},"nodeType":"YulFunctionCall","src":"8362:41:24"},"nodeType":"YulIf","src":"8359:61:24"},{"nodeType":"YulAssignment","src":"8429:15:24","value":{"name":"value","nodeType":"YulIdentifier","src":"8439:5:24"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8429:6:24"}]}]},"name":"abi_decode_tuple_t_boolt_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8143:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8154:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8166:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8174:6:24","type":""}],"src":"8091:359:24"},{"body":{"nodeType":"YulBlock","src":"8487:95:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8504:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8511:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8516:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8507:3:24"},"nodeType":"YulFunctionCall","src":"8507:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8497:6:24"},"nodeType":"YulFunctionCall","src":"8497:31:24"},"nodeType":"YulExpressionStatement","src":"8497:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8544:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8547:4:24","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8537:6:24"},"nodeType":"YulFunctionCall","src":"8537:15:24"},"nodeType":"YulExpressionStatement","src":"8537:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8568:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8571:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8561:6:24"},"nodeType":"YulFunctionCall","src":"8561:15:24"},"nodeType":"YulExpressionStatement","src":"8561:15:24"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8455:127:24"},{"body":{"nodeType":"YulBlock","src":"8634:185:24","statements":[{"body":{"nodeType":"YulBlock","src":"8673:111:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8694:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8701:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8706:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8697:3:24"},"nodeType":"YulFunctionCall","src":"8697:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8687:6:24"},"nodeType":"YulFunctionCall","src":"8687:31:24"},"nodeType":"YulExpressionStatement","src":"8687:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8738:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8741:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8731:6:24"},"nodeType":"YulFunctionCall","src":"8731:15:24"},"nodeType":"YulExpressionStatement","src":"8731:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8766:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8769:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8759:6:24"},"nodeType":"YulFunctionCall","src":"8759:15:24"},"nodeType":"YulExpressionStatement","src":"8759:15:24"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8650:5:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8661:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8657:3:24"},"nodeType":"YulFunctionCall","src":"8657:6:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8647:2:24"},"nodeType":"YulFunctionCall","src":"8647:17:24"},"nodeType":"YulIf","src":"8644:140:24"},{"nodeType":"YulAssignment","src":"8793:20:24","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8804:5:24"},{"kind":"number","nodeType":"YulLiteral","src":"8811:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8800:3:24"},"nodeType":"YulFunctionCall","src":"8800:13:24"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8793:3:24"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8616:5:24","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8626:3:24","type":""}],"src":"8587:232:24"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address_payable(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$2038(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IVesting_$531(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__to_t_address_t_uint256_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        mstore(add(headStart, 64), 96)\n        let pos := tail_1\n        let length := mload(value2)\n        mstore(tail_1, length)\n        pos := add(headStart, 128)\n        let srcPtr := add(value2, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_calldata_ptr_to_t_bytes4(array, len) -> value\n    {\n        let _1 := calldataload(array)\n        let _2 := shl(224, 0xffffffff)\n        value := and(_1, _2)\n        if lt(len, 4)\n        {\n            value := and(and(_1, shl(shl(3, sub(4, len)), _2)), _2)\n        }\n    }\n    function abi_encode_tuple_t_address_t_bytes_calldata_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), value2)\n        calldatacopy(add(headStart, 96), value1, value2)\n        mstore(add(add(headStart, value2), 96), 0)\n        tail := add(add(headStart, and(add(value2, 31), not(31))), 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_bytes4__to_t_address_t_address_t_bytes4__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_decode_tuple_t_boolt_uint32_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100d45760003560e01c80637a9e5e4b11610081578063bf7e214f1161005b578063bf7e214f146101a0578063e4214471146101bb578063ebf0c717146101ce57600080fd5b80637a9e5e4b146101595780637ad3def21461016c5780638fb360371461017f57600080fd5b8063524c2a04116100b2578063524c2a041461011d5780635c975abb14610130578063635a0bee1461014657600080fd5b80630373c909146100d95780633fc01a0f146100f55780634783f0ef1461010a575b600080fd5b6100e260065481565b6040519081526020015b60405180910390f35b610108610103366004610aac565b6101d7565b005b610108610118366004610aac565b6101f1565b61010861012b366004610adb565b610207565b60025460ff1660405190151581526020016100ec565b610108610154366004610bae565b6104da565b610108610167366004610bae565b6105dd565b61010861017a366004610bae565b610657565b6101876106be565b6040516001600160e01b031990911681526020016100ec565b6000546040516001600160a01b0390911681526020016100ec565b6101086101c9366004610bae565b6106e2565b6100e260035481565b6101e4335b600036610722565b6101ec610822565b600655565b6101fa336101dc565b610202610822565b600355565b61020f610847565b610217610871565b3360009081526007602052604090205460ff161561024f57604051634d4b079360e01b81523360048201526024015b60405180910390fd5b600654604080513360208201529081019190915260009060600160408051601f19818403018152828252805160209182012090830152016040516020818303038152906040528051906020012090506102ab8260035483610895565b6102cf57600654604051630bfcdfb560e21b81526102469133918590600401610bcb565b336000908152600760205260409020805460ff191660011790556005546001600160a01b03166103af576004805460065460405163a9059cbb60e01b8152339381019390935260248301526001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190610c3e565b5060065460405190815233907f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a69060200160405180910390a2506104ce565b6004805460055460065460405163a9059cbb60e01b81526001600160a01b03928316948101949094526024840152169063a9059cbb906044016020604051808303816000875af1158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190610c3e565b50600554600654604051631f72642160e31b815233600482015260248101919091526001600160a01b039091169063fb93210890604401600060405180830381600087803b15801561047c57600080fd5b505af1158015610490573d6000803e3d6000fd5b50506006546040519081523392507fd8c062e1121a4d8261df9c04930989855139a33297e0f1598cf7779aa5695b81915060200160405180910390a2505b6104d760018055565b50565b6104e3336101dc565b6104eb610822565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190610c59565b6004805460405163a9059cbb60e01b81526001600160a01b038681169382019390935260248101849052929350169063a9059cbb906044016020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610c3e565b505050565b60005433906001600160a01b031681146106145760405162d1953b60e31b81526001600160a01b0382166004820152602401610246565b816001600160a01b03163b60000361064a576040516361798f2f60e11b81526001600160a01b0383166004820152602401610246565b610653826108ab565b5050565b610660336101dc565b610668610822565b6001600160a01b03811661068f576040516321961ff560e11b815260040160405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008054600160a01b900460ff166106d65750600090565b50638fb3603760e01b90565b6106eb336101dc565b6106f3610822565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008061075861073a6000546001600160a01b031690565b863061074a60046000898b610c72565b61075391610c9c565b61090c565b915091508161081b5763ffffffff8116156107f8576000805460ff60a01b198116600160a01b17909155604051634a63ebf760e11b81526001600160a01b03909116906394c7d7ee906107b390889088908890600401610ccc565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50506000805460ff60a01b191690555061081b9050565b60405162d1953b60e31b81526001600160a01b0386166004820152602401610246565b5050505050565b60025460ff1661084557604051638dfc202b60e01b815260040160405180910390fd5b565b60026001540361086a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff16156108455760405163d93c066560e01b815260040160405180910390fd5b6000826108a28584610a2d565b14949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6040516001600160a01b03848116602483015283811660448301526001600160e01b03198316606483015260009182918291829189169060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663b700961360e01b179052516109909190610d0b565b600060405180830381855afa9150503d80600081146109cb576040519150601f19603f3d011682016040523d82523d6000602084013e6109d0565b606091505b50915091508115610a22576040815110610a0257808060200190518101906109f89190610d3a565b9094509250610a22565b6020815110610a225780806020019051810190610a1f9190610c3e565b93505b505094509492505050565b600081815b8451811015610a7257610a5e82868381518110610a5157610a51610d7a565b6020026020010151610a7a565b915080610a6a81610d90565b915050610a32565b509392505050565b6000818310610a96576000828152602084905260409020610aa5565b60008381526020839052604090205b9392505050565b600060208284031215610abe57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610aee57600080fd5b823567ffffffffffffffff80821115610b0657600080fd5b818501915085601f830112610b1a57600080fd5b813581811115610b2c57610b2c610ac5565b8060051b604051601f19603f83011681018181108582111715610b5157610b51610ac5565b604052918252848201925083810185019188831115610b6f57600080fd5b938501935b82851015610b8d57843584529385019392850192610b74565b98975050505050505050565b6001600160a01b03811681146104d757600080fd5b600060208284031215610bc057600080fd5b8135610aa581610b99565b6000606082016001600160a01b03861683526020858185015260606040850152818551808452608086019150828701935060005b81811015610c1b57845183529383019391830191600101610bff565b509098975050505050505050565b80518015158114610c3957600080fd5b919050565b600060208284031215610c5057600080fd5b610aa582610c29565b600060208284031215610c6b57600080fd5b5051919050565b60008085851115610c8257600080fd5b83861115610c8f57600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610cc45780818660040360031b1b83161692505b505092915050565b6001600160a01b038416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000825160005b81811015610d2c5760208186018101518583015201610d12565b506000920191825250919050565b60008060408385031215610d4d57600080fd5b610d5683610c29565b9150602083015163ffffffff81168114610d6f57600080fd5b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201610db057634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A9E5E4B GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xBF7E214F GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xE4214471 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xEBF0C717 EQ PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x7AD3DEF2 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x8FB36037 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x524C2A04 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x524C2A04 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x635A0BEE EQ PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x373C909 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x3FC01A0F EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0x4783F0EF EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE2 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x108 PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x1F1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x207 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH2 0x108 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x4DA JUMP JUMPDEST PUSH2 0x108 PUSH2 0x167 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x5DD JUMP JUMPDEST PUSH2 0x108 PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x657 JUMP JUMPDEST PUSH2 0x187 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEC JUMP JUMPDEST PUSH2 0x108 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAE JUMP JUMPDEST PUSH2 0x6E2 JUMP JUMPDEST PUSH2 0xE2 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E4 CALLER JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH2 0x722 JUMP JUMPDEST PUSH2 0x1EC PUSH2 0x822 JUMP JUMPDEST PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH2 0x1FA CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x202 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH2 0x20F PUSH2 0x847 JUMP JUMPDEST PUSH2 0x217 PUSH2 0x871 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x24F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4D4B0793 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x2AB DUP3 PUSH1 0x3 SLOAD DUP4 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x2CF JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBFCDFB5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH2 0x246 SWAP2 CALLER SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xBCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3AF JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x370 SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x222838DB2794D11532D940E8DEC38AE307ED0B63CD97C233322E221F998767A6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x24 DUP5 ADD MSTORE AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x407 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1F726421 PUSH1 0xE3 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xFB932108 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x490 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP3 POP PUSH32 0xD8C062E1121A4D8261DF9C04930989855139A33297E0F1598CF7779AA5695B81 SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMPDEST PUSH2 0x4D7 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x4E3 CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x4EB PUSH2 0x822 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x539 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x55D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D8 SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x614 JUMPI PUSH1 0x40 MLOAD PUSH3 0xD1953B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH1 0x0 SUB PUSH2 0x64A JUMPI PUSH1 0x40 MLOAD PUSH4 0x61798F2F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST PUSH2 0x653 DUP3 PUSH2 0x8AB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x660 CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x668 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD PUSH4 0x21961FF5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6D6 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH4 0x8FB36037 PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x6EB CALLER PUSH2 0x1DC JUMP JUMPDEST PUSH2 0x6F3 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x758 PUSH2 0x73A PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP7 ADDRESS PUSH2 0x74A PUSH1 0x4 PUSH1 0x0 DUP10 DUP12 PUSH2 0xC72 JUMP JUMPDEST PUSH2 0x753 SWAP2 PUSH2 0xC9C JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x81B JUMPI PUSH4 0xFFFFFFFF DUP2 AND ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP2 AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH4 0x4A63EBF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x94C7D7EE SWAP1 PUSH2 0x7B3 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE POP PUSH2 0x81B SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xD1953B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x246 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8A2 DUP6 DUP5 PUSH2 0xA2D JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP10 AND SWAP1 PUSH1 0x84 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB7009613 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x990 SWAP2 SWAP1 PUSH2 0xD0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9CB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA22 JUMPI PUSH1 0x40 DUP2 MLOAD LT PUSH2 0xA02 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9F8 SWAP2 SWAP1 PUSH2 0xD3A JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0xA22 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD LT PUSH2 0xA22 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xA1F SWAP2 SWAP1 PUSH2 0xC3E JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA72 JUMPI PUSH2 0xA5E DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA51 JUMPI PUSH2 0xA51 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA7A JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA6A DUP2 PUSH2 0xD90 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA32 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xA96 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB2C JUMPI PUSH2 0xB2C PUSH2 0xAC5 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xB51 JUMPI PUSH2 0xB51 PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0xB6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xB8D JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xB74 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAA5 DUP2 PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC1B JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xBFF JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA5 DUP3 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0xC82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP2 PUSH1 0x4 DUP6 LT ISZERO PUSH2 0xCC4 JUMPI DUP1 DUP2 DUP7 PUSH1 0x4 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD2C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xD12 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD56 DUP4 PUSH2 0xC29 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xDB0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"373:3655:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1318:27;;;;;;;;;160:25:24;;;148:2;133:18;1318:27:21;;;;;;;;3479:112;;;;;;:::i;:::-;;:::i;:::-;;2817:98;;;;;;:::i;:::-;;:::i;1887:827::-;;;;;;:::i;:::-;;:::i;1850:84:14:-;1920:7;;;;1850:84;;1983:14:24;;1976:22;1958:41;;1946:2;1931:18;1850:84:14;1818:187:24;3833:193:21;;;;;;:::i;:::-;;:::i;3056:362:4:-;;;;;;:::i;:::-;;:::i;2999:198:21:-;;;;;;:::i;:::-;;:::i;3459:156:4:-;;;:::i;:::-;;;-1:-1:-1;;;;;;3142:33:24;;;3124:52;;3112:2;3097:18;3459:156:4;2980:202:24;2922:93:4;2972:7;2998:10;2922:93;;-1:-1:-1;;;;;2998:10:4;;;3333:74:24;;3321:2;3306:18;2922:93:4;3187:226:24;3287:105:21;;;;;;:::i;:::-;;:::i;1237:19::-;;;;;;3479:112;2824:39:4;735:10:13;2838:12:4;809:14:13;;2824:13:4;:39::i;:::-;1721:16:14::1;:14;:16::i;:::-;3562:12:21::2;:22:::0;3479:112::o;2817:98::-;2824:39:4;735:10:13;2838:12:4;656:96:13;2824:39:4;1721:16:14::1;:14;:16::i;:::-;2896:4:21::2;:12:::0;2817:98::o;1887:827::-;2356:21:15;:19;:21::i;:::-;1474:19:14::1;:17;:19::i;:::-;1984:10:21::2;1975:20;::::0;;;:8:::2;:20;::::0;;;;;::::2;;1971:100;;;2018:42;::::0;-1:-1:-1;;;2018:42:21;;2049:10:::2;2018:42;::::0;::::2;3333:74:24::0;3306:18;;2018:42:21::2;;;;;;;;1971:100;2164:12;::::0;2141:36:::2;::::0;;2152:10:::2;2141:36;::::0;::::2;4050:74:24::0;4140:18;;;4133:34;;;;2080:12:21::2;::::0;4023:18:24;;2141:36:21::2;::::0;;-1:-1:-1;;2141:36:21;;::::2;::::0;;;;;;2131:47;;2141:36:::2;2131:47:::0;;::::2;::::0;2118:61;;::::2;4307:19:24::0;4342:12;2118:61:21::2;;;;;;;;;;;;2095:94;;;;;;2080:109;;2204:37;2223:5;2230:4;;2236;2204:18;:37::i;:::-;2199:133;;2301:12;::::0;2264:57:::2;::::0;-1:-1:-1;;;2264:57:21;;::::2;::::0;2289:10:::2;::::0;2315:5;;2264:57:::2;;;:::i;2199:133::-;2350:10;2341:20;::::0;;;:8:::2;:20;::::0;;;;:27;;-1:-1:-1;;2341:27:21::2;2364:4;2341:27;::::0;;2390:7:::2;::::0;-1:-1:-1;;;;;2390:7:21::2;2378:172;;2428:5;::::0;;2455:12:::2;::::0;2428:40:::2;::::0;-1:-1:-1;;;2428:40:21;;2443:10:::2;2428:40:::0;;::::2;4050:74:24::0;;;;4140:18;;;4133:34;-1:-1:-1;;;;;2428:5:21::2;::::0;:14:::2;::::0;4023:18:24;;2428:40:21::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;2506:12:21::2;::::0;2487:32:::2;::::0;160:25:24;;;2494:10:21::2;::::0;2487:32:::2;::::0;148:2:24;133:18;2487:32:21::2;;;;;;;2533:7;;;2378:172;2559:5;::::0;;2582:7:::2;::::0;2592:12:::2;::::0;2559:46:::2;::::0;-1:-1:-1;;;2559:46:21;;-1:-1:-1;;;;;2582:7:21;;::::2;2559:46:::0;;::::2;4050:74:24::0;;;;4140:18;;;4133:34;2559:5:21::2;::::0;:14:::2;::::0;4023:18:24;;2559:46:21::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;2615:7:21::2;::::0;2646:12:::2;::::0;2615:44:::2;::::0;-1:-1:-1;;;2615:44:21;;2634:10:::2;2615:44;::::0;::::2;4050:74:24::0;4140:18;;;4133:34;;;;-1:-1:-1;;;;;2615:7:21;;::::2;::::0;:18:::2;::::0;4023::24;;2615:44:21::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;2694:12:21::2;::::0;2674:33:::2;::::0;160:25:24;;;2682:10:21::2;::::0;-1:-1:-1;2674:33:21::2;::::0;-1:-1:-1;148:2:24;133:18;2674:33:21::2;;;;;;;1961:753;1503:1:14;2398:20:15::0;1713:1;2924:21;;2744:208;2398:20;1887:827:21;:::o;3833:193::-;2824:39:4;735:10:13;2838:12:4;656:96:13;2824:39:4;1721:16:14::1;:14;:16::i;:::-;3942:5:21::2;::::0;;:30:::2;::::0;-1:-1:-1;;;3942:30:21;;3966:4:::2;3942:30:::0;;::::2;3333:74:24::0;;;;3916:23:21::2;::::0;-1:-1:-1;;;;;3942:5:21;;::::2;::::0;:15:::2;::::0;3306:18:24;;3942:30:21::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3982:5;::::0;;:36:::2;::::0;-1:-1:-1;;;3982:36:21;;-1:-1:-1;;;;;4068:55:24;;;3982:36:21;;::::2;4050:74:24::0;;;;4140:18;;;4133:34;;;3916:56:21;;-1:-1:-1;3982:5:21::2;::::0;:14:::2;::::0;4023:18:24;;3982:36:21::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3906:120;3833:193:::0;:::o;3056:362:4:-;3125:14;2998:10;735::13;;-1:-1:-1;;;;;2998:10:4;3168:21;;3164:92;;3212:33;;-1:-1:-1;;;3212:33:4;;-1:-1:-1;;;;;3351:55:24;;3212:33:4;;;3333:74:24;3306:18;;3212:33:4;3187:226:24;3164:92:4;3269:12;-1:-1:-1;;;;;3269:24:4;;3297:1;3269:29;3265:110;;3321:43;;-1:-1:-1;;;3321:43:4;;-1:-1:-1;;;;;3351:55:24;;3321:43:4;;;3333:74:24;3306:18;;3321:43:4;3187:226:24;3265:110:4;3384:27;3398:12;3384:13;:27::i;:::-;3115:303;3056:362;:::o;2999:198:21:-;2824:39:4;735:10:13;2838:12:4;656:96:13;2824:39:4;1721:16:14::1;:14;:16::i;:::-;-1:-1:-1::0;;;;;3077:29:21;::::2;3073:94;;3129:27;;-1:-1:-1::0;;;3129:27:21::2;;;;;;;;;;;3073:94;3176:5;:14:::0;;-1:-1:-1;;3176:14:21::2;-1:-1:-1::0;;;;;3176:14:21;;;::::2;::::0;;;::::2;::::0;;2999:198::o;3459:156:4:-;3514:6;3539:18;;-1:-1:-1;;;3539:18:4;;;;:69;;-1:-1:-1;3606:1:4;;3459:156::o;3539:69::-;-1:-1:-1;;;;3560:36:4;3459:156::o;3287:105:21:-;2824:39:4;735:10:13;2838:12:4;656:96:13;2824:39:4;1721:16:14::1;:14;:16::i;:::-;3367:7:21::2;:18:::0;;-1:-1:-1;;3367:18:21::2;-1:-1:-1::0;;;;;3367:18:21;;;::::2;::::0;;;::::2;::::0;;3287:105::o;4127:594:4:-;4215:14;4231:12;4247:144;4292:11;2972:7;2998:10;-1:-1:-1;;;;;2998:10:4;;2922:93;4292:11;4317:6;4345:4;4371:9;4378:1;4376;4371:4;;:9;:::i;:::-;4364:17;;;:::i;:::-;4247:31;:144::i;:::-;4214:177;;;;4406:9;4401:314;;4435:9;;;;4431:274;;4464:18;:25;;-1:-1:-1;;;;4464:25:4;;-1:-1:-1;;;4464:25:4;;;;4507:60;;-1:-1:-1;;;4507:60:4;;-1:-1:-1;;;;;2998:10:4;;;;4507:46;;:60;;4554:6;;4562:4;;;;4507:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4606:5:4;4585:26;;-1:-1:-1;;;;4585:26:4;;;-1:-1:-1;4431:274:4;;-1:-1:-1;4431:274:4;;4657:33;;-1:-1:-1;;;4657:33:4;;-1:-1:-1;;;;;3351:55:24;;4657:33:4;;;3333:74:24;3306:18;;4657:33:4;3187:226:24;4431:274:4;4204:517;;4127:594;;;:::o;2202:126:14:-;1920:7;;;;2260:62;;2296:15;;-1:-1:-1;;;2296:15:14;;;;;;;;;;;2260:62;2202:126::o;2431:307:15:-;1755:1;2558:7;;:18;2554:86;;2599:30;;-1:-1:-1;;;2599:30:15;;;;;;;;;;;2554:86;1755:1;2714:7;:17;2431:307::o;2002:128:14:-;1920:7;;;;2063:61;;;2098:15;;-1:-1:-1;;;2098:15:14;;;;;;;;;;;1265:154:16;1356:4;1408;1379:25;1392:5;1399:4;1379:12;:25::i;:::-;:33;;1265:154;-1:-1:-1;;;;1265:154:16:o;3803:149:4:-;3875:10;:25;;-1:-1:-1;;3875:25:4;-1:-1:-1;;;;;3875:25:4;;;;;;;;3915:30;;3333:74:24;;;3915:30:4;;3321:2:24;3306:18;3915:30:4;;;;;;;3803:149;:::o;591:636:5:-;856:62;;-1:-1:-1;;;;;7525:15:24;;;856:62:5;;;7507:34:24;7577:15;;;7557:18;;;7550:43;-1:-1:-1;;;;;;7629:33:24;;7609:18;;;7602:61;746:14:5;;;;;;;;822:20;;;7419:18:24;;856:62:5;;;-1:-1:-1;;856:62:5;;;;;;;;;;;;;;;;-1:-1:-1;;;856:62:5;;;822:106;;;856:62;822:106;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:142;;;;942:7;938:248;;;984:4;969;:11;:19;965:211;;1040:4;1029:32;;;;;;;;;;;;:::i;:::-;1008:53;;-1:-1:-1;1008:53:5;-1:-1:-1;965:211:5;;;1101:4;1086;:11;:19;1082:94;;1148:4;1137:24;;;;;;;;;;;;:::i;:::-;1125:36;;1082:94;1195:25;;591:636;;;;;;;:::o;1967:290:16:-;2050:7;2092:4;2050:7;2106:116;2130:5;:12;2126:1;:16;2106:116;;;2178:33;2188:12;2202:5;2208:1;2202:8;;;;;;;;:::i;:::-;;;;;;;2178:9;:33::i;:::-;2163:48;-1:-1:-1;2144:3:16;;;;:::i;:::-;;;;2106:116;;;-1:-1:-1;2238:12:16;1967:290;-1:-1:-1;;;1967:290:16:o;9229:147::-;9292:7;9322:1;9318;:5;:51;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9318:51;;;9564:13;9655:15;;;9690:4;9683:15;;;9736:4;9720:21;;9326:20;9311:58;9229:147;-1:-1:-1;;;9229:147:16:o;196:180:24:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:24;;196:180;-1:-1:-1;196:180:24:o;566:127::-;627:10;622:3;618:20;615:1;608:31;658:4;655:1;648:15;682:4;679:1;672:15;698:1115;782:6;813:2;856;844:9;835:7;831:23;827:32;824:52;;;872:1;869;862:12;824:52;912:9;899:23;941:18;982:2;974:6;971:14;968:34;;;998:1;995;988:12;968:34;1036:6;1025:9;1021:22;1011:32;;1081:7;1074:4;1070:2;1066:13;1062:27;1052:55;;1103:1;1100;1093:12;1052:55;1139:2;1126:16;1161:2;1157;1154:10;1151:36;;;1167:18;;:::i;:::-;1213:2;1210:1;1206:10;1245:2;1239:9;1308:2;1304:7;1299:2;1295;1291:11;1287:25;1279:6;1275:38;1363:6;1351:10;1348:22;1343:2;1331:10;1328:18;1325:46;1322:72;;;1374:18;;:::i;:::-;1410:2;1403:22;1460:18;;;1494:15;;;;-1:-1:-1;1536:11:24;;;1532:20;;;1564:19;;;1561:39;;;1596:1;1593;1586:12;1561:39;1620:11;;;;1640:142;1656:6;1651:3;1648:15;1640:142;;;1722:17;;1710:30;;1673:12;;;;1760;;;;1640:142;;;1801:6;698:1115;-1:-1:-1;;;;;;;;698:1115:24:o;2010:162::-;-1:-1:-1;;;;;2097:5:24;2093:54;2086:5;2083:65;2073:93;;2162:1;2159;2152:12;2177:263;2244:6;2297:2;2285:9;2276:7;2272:23;2268:32;2265:52;;;2313:1;2310;2303:12;2265:52;2352:9;2339:23;2371:39;2404:5;2371:39;:::i;4365:824::-;4563:4;4611:2;4600:9;4596:18;-1:-1:-1;;;;;4645:6:24;4641:55;4630:9;4623:74;4716:2;4754:6;4749:2;4738:9;4734:18;4727:34;4797:2;4792;4781:9;4777:18;4770:30;4820:6;4855;4849:13;4886:6;4878;4871:22;4924:3;4913:9;4909:19;4902:26;;4963:2;4955:6;4951:15;4937:29;;4984:1;4994:169;5008:6;5005:1;5002:13;4994:169;;;5069:13;;5057:26;;5138:15;;;;5103:12;;;;5030:1;5023:9;4994:169;;;-1:-1:-1;5180:3:24;;4365:824;-1:-1:-1;;;;;;;;4365:824:24:o;5194:164::-;5270:13;;5319;;5312:21;5302:32;;5292:60;;5348:1;5345;5338:12;5292:60;5194:164;;;:::o;5363:202::-;5430:6;5483:2;5471:9;5462:7;5458:23;5454:32;5451:52;;;5499:1;5496;5489:12;5451:52;5522:37;5549:9;5522:37;:::i;5570:184::-;5640:6;5693:2;5681:9;5672:7;5668:23;5664:32;5661:52;;;5709:1;5706;5699:12;5661:52;-1:-1:-1;5732:16:24;;5570:184;-1:-1:-1;5570:184:24:o;6069:331::-;6174:9;6185;6227:8;6215:10;6212:24;6209:44;;;6249:1;6246;6239:12;6209:44;6278:6;6268:8;6265:20;6262:40;;;6298:1;6295;6288:12;6262:40;-1:-1:-1;;6324:23:24;;;6369:25;;;;;-1:-1:-1;6069:331:24:o;6405:323::-;-1:-1:-1;;;;;;6525:19:24;;6601:11;;;;6632:1;6624:10;;6621:101;;;6709:2;6703;6696:3;6693:1;6689:11;6686:1;6682:19;6678:28;6674:2;6670:37;6666:46;6657:55;;6621:101;;;6405:323;;;;:::o;6733:508::-;-1:-1:-1;;;;;6922:6:24;6918:55;6907:9;6900:74;7010:2;7005;6994:9;6990:18;6983:30;7049:6;7044:2;7033:9;7029:18;7022:34;7106:6;7098;7093:2;7082:9;7078:18;7065:48;7162:1;7133:22;;;7157:2;7129:31;;;7122:42;;;;7225:2;7204:15;;;-1:-1:-1;;7200:29:24;7185:45;7181:54;;6733:508;-1:-1:-1;;6733:508:24:o;7674:412::-;7803:3;7841:6;7835:13;7866:1;7876:129;7890:6;7887:1;7884:13;7876:129;;;7988:4;7972:14;;;7968:25;;7962:32;7949:11;;;7942:53;7905:12;7876:129;;;-1:-1:-1;8060:1:24;8024:16;;8049:13;;;-1:-1:-1;8024:16:24;7674:412;-1:-1:-1;7674:412:24:o;8091:359::-;8166:6;8174;8227:2;8215:9;8206:7;8202:23;8198:32;8195:52;;;8243:1;8240;8233:12;8195:52;8266:37;8293:9;8266:37;:::i;:::-;8256:47;;8346:2;8335:9;8331:18;8325:25;8390:10;8383:5;8379:22;8372:5;8369:33;8359:61;;8416:1;8413;8406:12;8359:61;8439:5;8429:15;;;8091:359;;;;;:::o;8455:127::-;8516:10;8511:3;8507:20;8504:1;8497:31;8547:4;8544:1;8537:15;8571:4;8568:1;8561:15;8587:232;8626:3;8647:17;;;8644:140;;8706:10;8701:3;8697:20;8694:1;8687:31;8741:4;8738:1;8731:15;8769:4;8766:1;8759:15;8644:140;-1:-1:-1;8811:1:24;8800:13;;8587:232::o"},"gasEstimates":{"creation":{"codeDepositCost":"704800","executionCost":"infinite","totalCost":"infinite"},"external":{"authority()":"2323","cancelAirDrop(address)":"infinite","isConsumingScheduledOp()":"2449","paused()":"2337","redeem(bytes32[])":"infinite","redeemAmount()":"2308","root()":"2350","setAuthority(address)":"30447","updateMerkleRoot(bytes32)":"infinite","updateRedeemAmount(uint256)":"infinite","updateToken(address)":"infinite","updateVesting(address)":"infinite"}},"methodIdentifiers":{"authority()":"bf7e214f","cancelAirDrop(address)":"635a0bee","isConsumingScheduledOp()":"8fb36037","paused()":"5c975abb","redeem(bytes32[])":"524c2a04","redeemAmount()":"0373c909","root()":"ebf0c717","setAuthority(address)":"7a9e5e4b","updateMerkleRoot(bytes32)":"4783f0ef","updateRedeemAmount(uint256)":"3fc01a0f","updateToken(address)":"7ad3def2","updateVesting(address)":"e4214471"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IVesting\",\"name\":\"_vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAuthority\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"CXBTokenAirdropAlreadyRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CXBTokenAirdropEmptyToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"CXBTokenAirdropWrongPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vesting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRedeemAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"_vesting\",\"type\":\"address\"}],\"name\":\"updateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CXBTokenAirdropAlreadyRedeemed(address)\":[{\"details\":\"Indicates an error related to the already redeemed amount. Used in redeem.\",\"params\":{\"target\":\"Address who calls redeem..\"}}],\"CXBTokenAirdropEmptyToken()\":[{\"details\":\"Indicates an error when empty token is provided.\"}],\"CXBTokenAirdropWrongPath(address,uint256,bytes32[])\":[{\"details\":\"Indicates an error related to the wrong tree validation. Used in redeem.\",\"params\":{\"amount\":\"Amount redeemed.\",\"proof\":\"The proof provided.\",\"target\":\"Address who calls redeem.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"AuthorityUpdated(address)\":{\"details\":\"Authority that manages this contract was updated.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"authority()\":{\"details\":\"Returns the current authority.\"},\"cancelAirDrop(address)\":{\"details\":\"Only manager can perform this transaction. It selfdestructs the contract.\",\"params\":{\"_to\":\"The receiving address.\"}},\"isConsumingScheduledOp()\":{\"details\":\"Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs attacker controlled calls.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(bytes32[])\":{\"params\":{\"proof\":\"Proof path.\"}},\"setAuthority(address)\":{\"details\":\"Transfers control to a new authority. The caller must be the current authority.\"},\"updateMerkleRoot(bytes32)\":{\"params\":{\"_root\":\"Merkle root of the addresses white list.\"}},\"updateRedeemAmount(uint256)\":{\"params\":{\"_amount\":\"The redeemed amount.\"}},\"updateToken(address)\":{\"params\":{\"_token\":\"New token address.\"}},\"updateVesting(address)\":{\"params\":{\"_vesting\":\"New vesting address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAirDrop(address)\":{\"notice\":\"It cancels the Air Drop availability and sends the tokens to the manager provided address.\"},\"redeem(bytes32[])\":{\"notice\":\"Addresses can redeem their tokens.\"},\"updateMerkleRoot(bytes32)\":{\"notice\":\"Update merkle root\"},\"updateRedeemAmount(uint256)\":{\"notice\":\"Update redeem amount\"},\"updateToken(address)\":{\"notice\":\"Update token address\"},\"updateVesting(address)\":{\"notice\":\"Update vesting address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/management/CXBTokenAirdrop.sol\":\"CXBTokenAirdrop\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/manager/AccessManaged.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAirdrop.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\n\\nabstract contract Airdrop is IAirdrop {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    bytes32 public root;\\n    bool public airdropFinished;\\n    IERC20 private token;\\n    IVesting private vesting;\\n    BitMaps.BitMap private redeemed;\\n\\n    /**\\n     * @dev Modifier to make a function callable only while aidrop working\\n     *\\n     */\\n    modifier notFinished() {\\n        if (airdropFinished) revert AirdropIsFinished();\\n        _;\\n    }\\n\\n    constructor(IERC20 _token, IVesting _vesting, bytes32 _root) {\\n        if (address(_token) == address(0)) {\\n            revert EmptyToken();\\n        }\\n        root = _root;\\n        token = _token;\\n        vesting = _vesting;\\n    }\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function _redeem(\\n        address target,\\n        bytes32[] memory proof,\\n        uint256 redeemAmount\\n    ) internal virtual notFinished {\\n        uint256 redeemPos = uint256(uint160(target));\\n        if (redeemed.get(redeemPos)) {\\n            revert AlreadyRedeemed(target);\\n        }\\n        bytes32 leaf = keccak256(\\n            bytes.concat(keccak256(abi.encode(target, redeemAmount)))\\n        );\\n        if (!MerkleProof.verify(proof, root, leaf)) {\\n            revert WrongPath(target, redeemAmount, proof);\\n        }\\n        redeemed.set(redeemPos);\\n        if (address(vesting) == address(0)) {\\n            if (!token.transfer(target, redeemAmount)) revert NotEnoughFunds(redeemAmount);\\n            emit Redeem(target, redeemAmount);\\n            return;\\n        }\\n        if (!token.transfer(address(vesting), redeemAmount)) revert NotEnoughFunds(redeemAmount);\\n        vesting.distribute(target, redeemAmount);\\n        emit Vesting(target, redeemAmount);\\n    }\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function _updateMerkleRoot(bytes32 _root) internal virtual {\\n        root = _root;\\n    }\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function _updateToken(address _token) internal virtual {\\n        if (address(_token) == address(0)) {\\n            revert EmptyToken();\\n        }\\n        token = IERC20(_token);\\n    }\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function _updateVesting(address _vesting) internal virtual {\\n        vesting = IVesting(_vesting);\\n    }\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function _cancelAirDrop(address payable _to) internal virtual {\\n        uint256 contractBalance = token.balanceOf(address(this));\\n        if (token.transfer(_to, contractBalance)) revert CannotReturnFunds();\\n        airdropFinished = true;\\n    }\\n}\\n\",\"keccak256\":\"0xce3ab87715138e7833809bc749e0315151b3d5b747d6fcfde64323900a911337\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/management/IAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * Defines the contract for the airdrop with the optional attach to the vesting\\n * If the vesting contract address is set, tokens will be transferred to the vesting contract,\\n * othervise to the airdrop target\\n */\\n\\ninterface IAirdrop {\\n    /**\\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\\n     * @param target Address who calls redeem..\\n     */\\n    error AlreadyRedeemed(address target);\\n\\n    /**\\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\\n     * @param target Address who calls redeem.\\n     * @param amount Amount redeemed.\\n     * @param proof The proof provided.\\n     */\\n    error WrongPath(address target, uint256 amount, bytes32[] proof);\\n\\n    /**\\n     * @dev Indicates an error related to the end of the airdrop\\n     */\\n    error AirdropIsFinished();\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error EmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when no tokens are distributed to the airdrop.\\n     */\\n    error NotEnoughFunds(uint256 redeemAmount);\\n\\n    error CannotReturnFunds();\\n\\n    event Redeem(address indexed account, uint256 amount);\\n    event Vesting(address indexed account, uint256 amount);\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function redeem(\\n        address target,\\n        bytes32[] memory proof,\\n        uint256 redeemAmount\\n    ) external;\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function updateMerkleRoot(bytes32 _root) external;\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function updateVesting(address _vesting) external;\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function cancelAirDrop(address payable _to) external;\\n}\\n\",\"keccak256\":\"0x19f2318e3a563dabdd5e064ed7985b95125c8279fde3dd2615a15e4590dd7268\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../structures/KPI.sol\\\"; \\n\\ninterface IVesting {\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error VestingEmptyToken();\\n\\n    /**\\n     * @dev Indicates an error when empty airdrop is provided.\\n     */\\n    error VestingEmptyAirdrop();\\n    /**\\n     * @dev Indicates an error when unathorized person calls airdrop only function\\n     * @param account Address who calls\\n     */\\n    error VestingUnauthorizedAccount(address account);\\n    /**\\n     * @dev Indicates an error when no tokens can be redeemed.\\n     */\\n    error VestingEmptyRedeem();\\n    /**\\n     * @dev Indicates an error when kpi redefines.\\n     * @param code KPI code\\n     */\\n    error VestingKPIAlreadyDefined(bytes32 code);\\n\\n    /**\\n     * @dev Indicates an error when kpi is not defined.\\n     * @param code KPI code\\n     */\\n    error VestingKPINotDefined(bytes32 code);\\n    /**\\n     * @dev Indicates an error when kpi amount value is incorrect.\\n     * @param code KPI code\\n     * @param amount amount provided\\n     */\\n    error VestingIncorrectAmount(bytes32 code, uint16 amount);\\n    /**\\n     * @dev Indicates an error when kpi weight value is incorrect.\\n     * @param code KPI code\\n     * @param amount weight provided\\n     */\\n    error VestingIncorrectWeight(bytes32 code, uint16 amount);\\n    event Redeem(address indexed account, uint256 amount);\\n    event Distribute(address indexed account, uint256 amount);\\n    event KPIAdded(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIModified(\\n        bytes32 indexed code,\\n        uint256 indexed time,\\n        KPITimeStatus indexed timeStatus,\\n        uint16 weight\\n    );\\n    event KPIUpdated(bytes32 indexed code, uint16 amount);\\n\\n    event KPIRemoved(bytes32 indexed code);\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(address _token) external;\\n\\n    /// @notice Update token address\\n    /// @param _airdrop New token address.\\n    function updateAirdrop(address _airdrop) external;\\n\\n    /// @notice Distribute the new vesting amount\\n    /// @param _to Receiver address.\\n    /// @param _amount Distributed amount.\\n    function distribute(address _to, uint256 _amount) external;\\n\\n    /// @notice Take the current unlocked amount\\n    function redeem(address _to) external returns (uint256);\\n\\n    /// @notice Set the new KPI\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function addKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Modify the KPI properties\\n    /// @param _code The KPI id code\\n    /// @param _time timestamp\\n    /// @param _timeStatus status of the time\\n    /// @param _weight weight of the KPI parameter in the total KPI\\n    function modifyKPI(\\n        bytes32 _code,\\n        uint256 _time,\\n        KPITimeStatus _timeStatus,\\n        uint16 _weight\\n    ) external;\\n\\n    /// @notice Update the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the current value of KPI\\n    function updateKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Increase the  KPI value\\n    /// @param _code The KPI id code\\n    /// @param _amount the added value of KPI\\n    function increaseKPI(bytes32 _code, uint16 _amount) external;\\n\\n    /// @notice Remove the KPI from the list\\n    /// @param _code The KPI id code\\n    function removeKPI(bytes32 _code) external;\\n\\n    /// @notice Get the KPI from the list\\n    /// @param _code The KPI id code\\n    function getKPI(bytes32 _code) external view returns (KPI memory);\\n}\\n\",\"keccak256\":\"0x2dadc22b1919f75d42fdb580c3d43827fe0e868ec953d274d16ba02fad5e3cf3\",\"license\":\"MIT\"},\"@bgrusnak/solidity-icoset/contracts/structures/KPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum KPITimeStatus {\\n    // do not use timestamp\\n    Ignore,\\n    // kpi is always zero until the timestamp\\n    NotBefore,\\n    // kpi is always 1000 (1) after the timestamp\\n    AlwaysAfter\\n}\\n/*\\n * KPI allows calculation of vesting value according the different options and time.\\n * All KPI values are calculated in promille (1/1000) and are between 0 & 1000 (1)\\n */\\nstruct KPI {\\n    // the service timestamp for the KPI\\n    uint256 time;\\n    // how the timestamp should to be processed\\n    KPITimeStatus timeStatus;\\n    // current KPI value\\n    uint16 current;\\n    // KPI weight in total KPI\\n    uint16 weight;\\n}\\n\",\"keccak256\":\"0x8b7066fe9d42ba56d6a382f46e87c625910fb579f7e5040c84f38b32300c8fd2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\nimport {AuthorityUtils} from \\\"./AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\\n * permissioned according to an \\\"authority\\\": a contract like {AccessManager} that follows the {IAuthority} interface,\\n * implementing a policy that allows certain callers to access certain functions.\\n *\\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\\n * functions, and ideally only used in `external` functions. See {restricted}.\\n */\\nabstract contract AccessManaged is Context, IAccessManaged {\\n    address private _authority;\\n\\n    bool private _consumingSchedule;\\n\\n    /**\\n     * @dev Initializes the contract connected to an initial authority.\\n     */\\n    constructor(address initialAuthority) {\\n        _setAuthority(initialAuthority);\\n    }\\n\\n    /**\\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\\n     * caller and selector of the function that entered the contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\\n     * ====\\n     *\\n     * [WARNING]\\n     * ====\\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\\n     * if no calldata is provided. (See {_checkCanCall}).\\n     *\\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\\n     * ====\\n     */\\n    modifier restricted() {\\n        _checkCanCall(_msgSender(), _msgData());\\n        _;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function authority() public view virtual returns (address) {\\n        return _authority;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function setAuthority(address newAuthority) public virtual {\\n        address caller = _msgSender();\\n        if (caller != authority()) {\\n            revert AccessManagedUnauthorized(caller);\\n        }\\n        if (newAuthority.code.length == 0) {\\n            revert AccessManagedInvalidAuthority(newAuthority);\\n        }\\n        _setAuthority(newAuthority);\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function isConsumingScheduledOp() public view returns (bytes4) {\\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\\n     * permissions set by the current authority.\\n     */\\n    function _setAuthority(address newAuthority) internal virtual {\\n        _authority = newAuthority;\\n        emit AuthorityUpdated(newAuthority);\\n    }\\n\\n    /**\\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\\n     * is less than 4 bytes long.\\n     */\\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\\n            authority(),\\n            caller,\\n            address(this),\\n            bytes4(data[0:4])\\n        );\\n        if (!immediate) {\\n            if (delay > 0) {\\n                _consumingSchedule = true;\\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\\n                _consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x137a4c22eb762b1580c632f575868d1f3b764291e58702ebe484fa1cef5447dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n *\\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\\n * unlike the regular `bool` which would consume an entire slot for a single value.\\n *\\n * This results in gas savings in two ways:\\n *\\n * - Setting a zero value to non-zero only once every 256 times\\n * - Accessing the same warm slot for every 256 _sequential_ indices\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 bucket => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x3616f1b0d0a9ee1ca8f0953ecaceb9230e36f691c7974d30f964212acff52d2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"contracts/management/CXBTokenAirdrop.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\nimport \\\"@bgrusnak/solidity-icoset/contracts/management/Airdrop.sol\\\";\\nimport \\\"@bgrusnak/solidity-icoset/contracts/management/IVesting.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract CXBTokenAirdrop is AccessManaged, ReentrancyGuard, Pausable {\\n    /**\\n     * @dev Indicates an error related to the already redeemed amount. Used in redeem.\\n     * @param target Address who calls redeem..\\n     */\\n    error CXBTokenAirdropAlreadyRedeemed(address target);\\n\\n    /**\\n     * @dev Indicates an error related to the wrong tree validation. Used in redeem.\\n     * @param target Address who calls redeem.\\n     * @param amount Amount redeemed.\\n     * @param proof The proof provided.\\n     */\\n    error CXBTokenAirdropWrongPath(\\n        address target,\\n        uint256 amount,\\n        bytes32[] proof\\n    );\\n\\n    /**\\n     * @dev Indicates an error when empty token is provided.\\n     */\\n    error CXBTokenAirdropEmptyToken();\\n\\n    event Redeem(address indexed account, uint256 amount);\\n    event Vesting(address indexed account, uint256 amount);\\n\\n    bytes32 public root;\\n    IERC20 private token;\\n    IVesting private vesting;\\n    uint256 public redeemAmount;\\n    mapping(address => bool) private redeemed;\\n\\n    constructor(\\n        IERC20 _token,\\n        IVesting _vesting,\\n        address initialAuthority,\\n        uint256 _amount,\\n        bytes32 _root\\n    ) AccessManaged(initialAuthority) {\\n        if (address(_token) == address(0)) {\\n            revert CXBTokenAirdropEmptyToken();\\n        }\\n        root = _root;\\n        token = _token;\\n        vesting = _vesting;\\n        redeemAmount = _amount;\\n    }\\n\\n    /// @notice Addresses can redeem their tokens.\\n    /// @param proof Proof path.\\n    function redeem(bytes32[] memory proof) public nonReentrant whenNotPaused {\\n        if (redeemed[msg.sender]) {\\n            revert CXBTokenAirdropAlreadyRedeemed(msg.sender);\\n        }\\n        bytes32 leaf = keccak256(\\n            bytes.concat(keccak256(abi.encode(msg.sender, redeemAmount)))\\n        );\\n        if (!MerkleProof.verify(proof, root, leaf)) {\\n            revert CXBTokenAirdropWrongPath(msg.sender, redeemAmount, proof);\\n        }\\n        redeemed[msg.sender] = true;\\n        if (address(vesting) == address(0)) {\\n            token.transfer(msg.sender, redeemAmount);\\n            emit Redeem(msg.sender, redeemAmount);\\n            return;\\n        }\\n        token.transfer(address(vesting), redeemAmount);\\n        vesting.distribute(msg.sender, redeemAmount);\\n        emit Vesting(msg.sender, redeemAmount);\\n    }\\n\\n    /// @notice Update merkle root\\n    /// @param _root Merkle root of the addresses white list.\\n    function updateMerkleRoot(bytes32 _root) public restricted whenPaused{\\n        root = _root;\\n    }\\n\\n    /// @notice Update token address\\n    /// @param _token New token address.\\n    function updateToken(IERC20 _token) public restricted whenPaused{\\n        if (address(_token) == address(0)) {\\n            revert CXBTokenAirdropEmptyToken();\\n        }\\n        token = _token;\\n    }\\n\\n    /// @notice Update vesting address\\n    /// @param _vesting New vesting address.\\n    function updateVesting(IVesting _vesting) public restricted whenPaused{\\n        vesting = _vesting;\\n    }\\n\\n    /// @notice Update redeem amount\\n    /// @param _amount The redeemed amount.\\n    function updateRedeemAmount(uint256 _amount) public restricted whenPaused{\\n        redeemAmount = _amount;\\n    }\\n\\n    /// @notice It cancels the Air Drop availability and sends the tokens to the manager provided address.\\n    /// @param _to The receiving address.\\n    /// @dev Only manager can perform this transaction. It selfdestructs the contract.\\n    function cancelAirDrop(address payable _to) public restricted whenPaused {\\n        uint256 contractBalance = token.balanceOf(address(this));\\n        token.transfer(_to, contractBalance); \\n    }\\n}\\n\",\"keccak256\":\"0xf910067da0ee3a2c3d75cd776635e3945f73ecba78c39abb835f45f7353725d5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":566,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"_authority","offset":0,"slot":"0","type":"t_address"},{"astId":568,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"_consumingSchedule","offset":20,"slot":"0","type":"t_bool"},{"astId":2222,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":2103,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"_paused","offset":0,"slot":"2","type":"t_bool"},{"astId":6084,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"root","offset":0,"slot":"3","type":"t_bytes32"},{"astId":6087,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"token","offset":0,"slot":"4","type":"t_contract(IERC20)2038"},{"astId":6090,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"vesting","offset":0,"slot":"5","type":"t_contract(IVesting)531"},{"astId":6092,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"redeemAmount","offset":0,"slot":"6","type":"t_uint256"},{"astId":6096,"contract":"contracts/management/CXBTokenAirdrop.sol:CXBTokenAirdrop","label":"redeemed","offset":0,"slot":"7","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20)2038":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(IVesting)531":{"encoding":"inplace","label":"contract IVesting","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"cancelAirDrop(address)":{"notice":"It cancels the Air Drop availability and sends the tokens to the manager provided address."},"redeem(bytes32[])":{"notice":"Addresses can redeem their tokens."},"updateMerkleRoot(bytes32)":{"notice":"Update merkle root"},"updateRedeemAmount(uint256)":{"notice":"Update redeem amount"},"updateToken(address)":{"notice":"Update token address"},"updateVesting(address)":{"notice":"Update vesting address"}},"version":1}}},"contracts/mocks/MockChainlink.sol":{"MockChainlink":{"abi":[{"inputs":[{"internalType":"int256","name":"_value","type":"int256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_6377":{"entryPoint":null,"id":6377,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_int256_fromMemory":{"entryPoint":55,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:199:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"94:103:24","statements":[{"body":{"nodeType":"YulBlock","src":"140:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"149:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"152:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"142:6:24"},"nodeType":"YulFunctionCall","src":"142:12:24"},"nodeType":"YulExpressionStatement","src":"142:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"115:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"124:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"111:3:24"},"nodeType":"YulFunctionCall","src":"111:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"136:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"107:3:24"},"nodeType":"YulFunctionCall","src":"107:32:24"},"nodeType":"YulIf","src":"104:52:24"},{"nodeType":"YulAssignment","src":"165:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"181:9:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"175:5:24"},"nodeType":"YulFunctionCall","src":"175:16:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"165:6:24"}]}]},"name":"abi_decode_tuple_t_int256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"60:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"71:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"83:6:24","type":""}],"src":"14:183:24"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_int256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516100c63803806100c683398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60688061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063313ce56714603757806350d25bcd14604b575b600080fd5b604051600681526020015b60405180910390f35b600054604051908152602001604256fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xC6 CODESIZE SUB DUP1 PUSH2 0xC6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x37 JUMP JUMPDEST PUSH1 0x0 SSTORE PUSH2 0x50 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x68 DUP1 PUSH2 0x5E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH1 0x4B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x42 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"64:261:22:-:0;;;116:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;149:5;:14;64:261;;14:183:24;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;-1:-1:-1;175:16:24;;14:183;-1:-1:-1;14:183:24:o;:::-;64:261:22;;;;;;"},"deployedBytecode":{"functionDebugData":{"@decimals_6393":{"entryPoint":null,"id":6393,"parameterSlots":0,"returnSlots":1},"@latestAnswer_6385":{"entryPoint":null,"id":6385,"parameterSlots":0,"returnSlots":1},"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:380:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"111:87:24","statements":[{"nodeType":"YulAssignment","src":"121:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"133:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"144:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"129:3:24"},"nodeType":"YulFunctionCall","src":"129:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"121:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"163:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"178:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"186:4:24","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"174:3:24"},"nodeType":"YulFunctionCall","src":"174:17:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"156:6:24"},"nodeType":"YulFunctionCall","src":"156:36:24"},"nodeType":"YulExpressionStatement","src":"156:36:24"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"80:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"91:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"102:4:24","type":""}],"src":"14:184:24"},{"body":{"nodeType":"YulBlock","src":"302:76:24","statements":[{"nodeType":"YulAssignment","src":"312:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"335:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"320:3:24"},"nodeType":"YulFunctionCall","src":"320:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"312:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"354:9:24"},{"name":"value0","nodeType":"YulIdentifier","src":"365:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"347:6:24"},"nodeType":"YulFunctionCall","src":"347:25:24"},"nodeType":"YulExpressionStatement","src":"347:25:24"}]},"name":"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"271:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"282:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"293:4:24","type":""}],"src":"203:175:24"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060325760003560e01c8063313ce56714603757806350d25bcd14604b575b600080fd5b604051600681526020015b60405180910390f35b600054604051908152602001604256fea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH1 0x4B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x42 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"64:261:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;254:69;;;317:1;156:36:24;;144:2;129:18;254:69:22;;;;;;;;172:78;219:6;240:5;172:78;;347:25:24;;;335:2;320:18;172:78:22;203:175:24"},"gasEstimates":{"creation":{"codeDepositCost":"20800","executionCost":"infinite","totalCost":"infinite"},"external":{"decimals()":"144","latestAnswer()":"2280"}},"methodIdentifiers":{"decimals()":"313ce567","latestAnswer()":"50d25bcd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockChainlink.sol\":\"MockChainlink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/mocks/MockChainlink.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ncontract MockChainlink {\\n  int256 private value;\\n\\n  constructor(int256 _value) {\\n    value = _value;\\n  }\\n\\n  function latestAnswer() external view returns (int256) {\\n    return value;\\n  }\\n\\n  function decimals() external pure returns (uint8) {\\n    return 6;\\n  }\\n}\\n\",\"keccak256\":\"0x12e34c768512dd121fc2cdde7839145f8d7b000808f40da0c66e0890bfeb7b5a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6367,"contract":"contracts/mocks/MockChainlink.sol:MockChainlink","label":"value","offset":0,"slot":"0","type":"t_int256"}],"types":{"t_int256":{"encoding":"inplace","label":"int256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/MockERC20.sol":{"MockERC20":{"abi":[{"inputs":[{"internalType":"uint256","name":"premintAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1497":{"entryPoint":null,"id":1497,"parameterSlots":2,"returnSlots":0},"@_6420":{"entryPoint":null,"id":6420,"parameterSlots":1,"returnSlots":0},"@_mint_1800":{"entryPoint":214,"id":1800,"parameterSlots":2,"returnSlots":0},"@_update_1767":{"entryPoint":280,"id":1767,"parameterSlots":3,"returnSlots":0},"@decimals_1524":{"entryPoint":209,"id":1524,"parameterSlots":0,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1309,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":1004,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":1259,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":1077,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":1283,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":695,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":778,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":982,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":613,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5479:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:103:24","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:24"},"nodeType":"YulFunctionCall","src":"143:12:24"},"nodeType":"YulExpressionStatement","src":"143:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:24"},"nodeType":"YulFunctionCall","src":"112:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:24"},"nodeType":"YulFunctionCall","src":"108:32:24"},"nodeType":"YulIf","src":"105:52:24"},{"nodeType":"YulAssignment","src":"166:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"182:9:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"176:5:24"},"nodeType":"YulFunctionCall","src":"176:16:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"166:6:24"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:24","type":""}],"src":"14:184:24"},{"body":{"nodeType":"YulBlock","src":"235:95:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"252:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"259:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"264:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"255:3:24"},"nodeType":"YulFunctionCall","src":"255:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"245:6:24"},"nodeType":"YulFunctionCall","src":"245:31:24"},"nodeType":"YulExpressionStatement","src":"245:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"295:4:24","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"285:6:24"},"nodeType":"YulFunctionCall","src":"285:15:24"},"nodeType":"YulExpressionStatement","src":"285:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"316:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"319:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"309:6:24"},"nodeType":"YulFunctionCall","src":"309:15:24"},"nodeType":"YulExpressionStatement","src":"309:15:24"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"203:127:24"},{"body":{"nodeType":"YulBlock","src":"390:325:24","statements":[{"nodeType":"YulAssignment","src":"400:22:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"414:1:24","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"417:4:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"410:3:24"},"nodeType":"YulFunctionCall","src":"410:12:24"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"400:6:24"}]},{"nodeType":"YulVariableDeclaration","src":"431:38:24","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"461:4:24"},{"kind":"number","nodeType":"YulLiteral","src":"467:1:24","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"457:3:24"},"nodeType":"YulFunctionCall","src":"457:12:24"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"435:18:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"508:31:24","statements":[{"nodeType":"YulAssignment","src":"510:27:24","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"524:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"532:4:24","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"520:3:24"},"nodeType":"YulFunctionCall","src":"520:17:24"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"510:6:24"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"488:18:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"481:6:24"},"nodeType":"YulFunctionCall","src":"481:26:24"},"nodeType":"YulIf","src":"478:61:24"},{"body":{"nodeType":"YulBlock","src":"598:111:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"619:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"626:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"631:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"622:3:24"},"nodeType":"YulFunctionCall","src":"622:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:24"},"nodeType":"YulFunctionCall","src":"612:31:24"},"nodeType":"YulExpressionStatement","src":"612:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"663:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"666:4:24","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"656:6:24"},"nodeType":"YulFunctionCall","src":"656:15:24"},"nodeType":"YulExpressionStatement","src":"656:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"691:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"694:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"684:6:24"},"nodeType":"YulFunctionCall","src":"684:15:24"},"nodeType":"YulExpressionStatement","src":"684:15:24"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"554:18:24"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"577:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:24","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"574:2:24"},"nodeType":"YulFunctionCall","src":"574:14:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:24"},"nodeType":"YulFunctionCall","src":"551:38:24"},"nodeType":"YulIf","src":"548:161:24"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"370:4:24","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"379:6:24","type":""}],"src":"335:380:24"},{"body":{"nodeType":"YulBlock","src":"776:65:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"793:1:24","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"796:3:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"786:6:24"},"nodeType":"YulFunctionCall","src":"786:14:24"},"nodeType":"YulExpressionStatement","src":"786:14:24"},{"nodeType":"YulAssignment","src":"809:26:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"827:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"830:4:24","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"817:9:24"},"nodeType":"YulFunctionCall","src":"817:18:24"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"809:4:24"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"759:3:24","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"767:4:24","type":""}],"src":"720:121:24"},{"body":{"nodeType":"YulBlock","src":"927:464:24","statements":[{"body":{"nodeType":"YulBlock","src":"960:425:24","statements":[{"nodeType":"YulVariableDeclaration","src":"974:11:24","value":{"kind":"number","nodeType":"YulLiteral","src":"984:1:24","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"978:2:24","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1005:2:24"},{"name":"array","nodeType":"YulIdentifier","src":"1009:5:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"998:6:24"},"nodeType":"YulFunctionCall","src":"998:17:24"},"nodeType":"YulExpressionStatement","src":"998:17:24"},{"nodeType":"YulVariableDeclaration","src":"1028:31:24","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1050:2:24"},{"kind":"number","nodeType":"YulLiteral","src":"1054:4:24","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1040:9:24"},"nodeType":"YulFunctionCall","src":"1040:19:24"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1032:4:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1072:57:24","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1095:4:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1105:1:24","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1112:10:24"},{"kind":"number","nodeType":"YulLiteral","src":"1124:2:24","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1108:3:24"},"nodeType":"YulFunctionCall","src":"1108:19:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1101:3:24"},"nodeType":"YulFunctionCall","src":"1101:27:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1091:3:24"},"nodeType":"YulFunctionCall","src":"1091:38:24"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1076:11:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1166:23:24","statements":[{"nodeType":"YulAssignment","src":"1168:19:24","value":{"name":"data","nodeType":"YulIdentifier","src":"1183:4:24"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"1168:11:24"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1148:10:24"},{"kind":"number","nodeType":"YulLiteral","src":"1160:4:24","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1145:2:24"},"nodeType":"YulFunctionCall","src":"1145:20:24"},"nodeType":"YulIf","src":"1142:47:24"},{"nodeType":"YulVariableDeclaration","src":"1202:41:24","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1216:4:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1226:1:24","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1233:3:24"},{"kind":"number","nodeType":"YulLiteral","src":"1238:2:24","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1229:3:24"},"nodeType":"YulFunctionCall","src":"1229:12:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1222:3:24"},"nodeType":"YulFunctionCall","src":"1222:20:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1212:3:24"},"nodeType":"YulFunctionCall","src":"1212:31:24"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1206:2:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1256:24:24","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1269:11:24"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1260:5:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1354:21:24","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1363:5:24"},{"name":"_1","nodeType":"YulIdentifier","src":"1370:2:24"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1356:6:24"},"nodeType":"YulFunctionCall","src":"1356:17:24"},"nodeType":"YulExpressionStatement","src":"1356:17:24"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1304:5:24"},{"name":"_2","nodeType":"YulIdentifier","src":"1311:2:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1301:2:24"},"nodeType":"YulFunctionCall","src":"1301:13:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1315:26:24","statements":[{"nodeType":"YulAssignment","src":"1317:22:24","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1330:5:24"},{"kind":"number","nodeType":"YulLiteral","src":"1337:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1326:3:24"},"nodeType":"YulFunctionCall","src":"1326:13:24"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1317:5:24"}]}]},"pre":{"nodeType":"YulBlock","src":"1297:3:24","statements":[]},"src":"1293:82:24"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"943:3:24"},{"kind":"number","nodeType":"YulLiteral","src":"948:2:24","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"940:2:24"},"nodeType":"YulFunctionCall","src":"940:11:24"},"nodeType":"YulIf","src":"937:448:24"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"899:5:24","type":""},{"name":"len","nodeType":"YulTypedName","src":"906:3:24","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"911:10:24","type":""}],"src":"846:545:24"},{"body":{"nodeType":"YulBlock","src":"1481:81:24","statements":[{"nodeType":"YulAssignment","src":"1491:65:24","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1506:4:24"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1524:1:24","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1527:3:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1520:3:24"},"nodeType":"YulFunctionCall","src":"1520:11:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1537:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1533:3:24"},"nodeType":"YulFunctionCall","src":"1533:6:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1516:3:24"},"nodeType":"YulFunctionCall","src":"1516:24:24"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1512:3:24"},"nodeType":"YulFunctionCall","src":"1512:29:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1502:3:24"},"nodeType":"YulFunctionCall","src":"1502:40:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1548:1:24","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1551:3:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1544:3:24"},"nodeType":"YulFunctionCall","src":"1544:11:24"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1499:2:24"},"nodeType":"YulFunctionCall","src":"1499:57:24"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1491:4:24"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1458:4:24","type":""},{"name":"len","nodeType":"YulTypedName","src":"1464:3:24","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1472:4:24","type":""}],"src":"1396:166:24"},{"body":{"nodeType":"YulBlock","src":"1663:1256:24","statements":[{"nodeType":"YulVariableDeclaration","src":"1673:24:24","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1693:3:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1687:5:24"},"nodeType":"YulFunctionCall","src":"1687:10:24"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1677:6:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"1740:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1742:16:24"},"nodeType":"YulFunctionCall","src":"1742:18:24"},"nodeType":"YulExpressionStatement","src":"1742:18:24"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1712:6:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1728:2:24","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1732:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1724:3:24"},"nodeType":"YulFunctionCall","src":"1724:10:24"},{"kind":"number","nodeType":"YulLiteral","src":"1736:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1720:3:24"},"nodeType":"YulFunctionCall","src":"1720:18:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1709:2:24"},"nodeType":"YulFunctionCall","src":"1709:30:24"},"nodeType":"YulIf","src":"1706:56:24"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1815:4:24"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1853:4:24"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1847:5:24"},"nodeType":"YulFunctionCall","src":"1847:11:24"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1821:25:24"},"nodeType":"YulFunctionCall","src":"1821:38:24"},{"name":"newLen","nodeType":"YulIdentifier","src":"1861:6:24"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1771:43:24"},"nodeType":"YulFunctionCall","src":"1771:97:24"},"nodeType":"YulExpressionStatement","src":"1771:97:24"},{"nodeType":"YulVariableDeclaration","src":"1877:18:24","value":{"kind":"number","nodeType":"YulLiteral","src":"1894:1:24","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1881:9:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1904:23:24","value":{"kind":"number","nodeType":"YulLiteral","src":"1923:4:24","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1908:11:24","type":""}]},{"nodeType":"YulAssignment","src":"1936:24:24","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1949:11:24"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1936:9:24"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2006:656:24","statements":[{"nodeType":"YulVariableDeclaration","src":"2020:35:24","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2039:6:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2051:2:24","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2047:3:24"},"nodeType":"YulFunctionCall","src":"2047:7:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2035:3:24"},"nodeType":"YulFunctionCall","src":"2035:20:24"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2024:7:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2068:49:24","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2112:4:24"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2082:29:24"},"nodeType":"YulFunctionCall","src":"2082:35:24"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2072:6:24","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2130:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"2139:1:24","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2134:1:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"2217:172:24","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2242:6:24"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2260:3:24"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2265:9:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:24"},"nodeType":"YulFunctionCall","src":"2256:19:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2250:5:24"},"nodeType":"YulFunctionCall","src":"2250:26:24"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2235:6:24"},"nodeType":"YulFunctionCall","src":"2235:42:24"},"nodeType":"YulExpressionStatement","src":"2235:42:24"},{"nodeType":"YulAssignment","src":"2294:24:24","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2308:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"2316:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2304:3:24"},"nodeType":"YulFunctionCall","src":"2304:14:24"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2294:6:24"}]},{"nodeType":"YulAssignment","src":"2335:40:24","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2352:9:24"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2363:11:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2348:3:24"},"nodeType":"YulFunctionCall","src":"2348:27:24"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2335:9:24"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2164:1:24"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"2167:7:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2161:2:24"},"nodeType":"YulFunctionCall","src":"2161:14:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2176:28:24","statements":[{"nodeType":"YulAssignment","src":"2178:24:24","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2187:1:24"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2190:11:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:24"},"nodeType":"YulFunctionCall","src":"2183:19:24"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2178:1:24"}]}]},"pre":{"nodeType":"YulBlock","src":"2157:3:24","statements":[]},"src":"2153:236:24"},{"body":{"nodeType":"YulBlock","src":"2437:166:24","statements":[{"nodeType":"YulVariableDeclaration","src":"2455:43:24","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2482:3:24"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2487:9:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2478:3:24"},"nodeType":"YulFunctionCall","src":"2478:19:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2472:5:24"},"nodeType":"YulFunctionCall","src":"2472:26:24"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2459:9:24","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2522:6:24"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2534:9:24"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2561:1:24","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2564:6:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2557:3:24"},"nodeType":"YulFunctionCall","src":"2557:14:24"},{"kind":"number","nodeType":"YulLiteral","src":"2573:3:24","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2553:3:24"},"nodeType":"YulFunctionCall","src":"2553:24:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2583:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2579:3:24"},"nodeType":"YulFunctionCall","src":"2579:6:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2549:3:24"},"nodeType":"YulFunctionCall","src":"2549:37:24"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2545:3:24"},"nodeType":"YulFunctionCall","src":"2545:42:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2530:3:24"},"nodeType":"YulFunctionCall","src":"2530:58:24"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2515:6:24"},"nodeType":"YulFunctionCall","src":"2515:74:24"},"nodeType":"YulExpressionStatement","src":"2515:74:24"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2408:7:24"},{"name":"newLen","nodeType":"YulIdentifier","src":"2417:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2405:2:24"},"nodeType":"YulFunctionCall","src":"2405:19:24"},"nodeType":"YulIf","src":"2402:201:24"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2623:4:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:24","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2640:6:24"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2633:3:24"},"nodeType":"YulFunctionCall","src":"2633:14:24"},{"kind":"number","nodeType":"YulLiteral","src":"2649:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2629:3:24"},"nodeType":"YulFunctionCall","src":"2629:22:24"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2616:6:24"},"nodeType":"YulFunctionCall","src":"2616:36:24"},"nodeType":"YulExpressionStatement","src":"2616:36:24"}]},"nodeType":"YulCase","src":"1999:663:24","value":{"kind":"number","nodeType":"YulLiteral","src":"2004:1:24","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2679:234:24","statements":[{"nodeType":"YulVariableDeclaration","src":"2693:14:24","value":{"kind":"number","nodeType":"YulLiteral","src":"2706:1:24","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2697:5:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"2742:67:24","statements":[{"nodeType":"YulAssignment","src":"2760:35:24","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2779:3:24"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2784:9:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2775:3:24"},"nodeType":"YulFunctionCall","src":"2775:19:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2769:5:24"},"nodeType":"YulFunctionCall","src":"2769:26:24"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2760:5:24"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2723:6:24"},"nodeType":"YulIf","src":"2720:89:24"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2829:4:24"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2888:5:24"},{"name":"newLen","nodeType":"YulIdentifier","src":"2895:6:24"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2835:52:24"},"nodeType":"YulFunctionCall","src":"2835:67:24"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2822:6:24"},"nodeType":"YulFunctionCall","src":"2822:81:24"},"nodeType":"YulExpressionStatement","src":"2822:81:24"}]},"nodeType":"YulCase","src":"2671:242:24","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1979:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"1987:2:24","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1976:2:24"},"nodeType":"YulFunctionCall","src":"1976:14:24"},"nodeType":"YulSwitch","src":"1969:944:24"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1648:4:24","type":""},{"name":"src","nodeType":"YulTypedName","src":"1654:3:24","type":""}],"src":"1567:1352:24"},{"body":{"nodeType":"YulBlock","src":"2956:95:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2973:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2980:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2985:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2976:3:24"},"nodeType":"YulFunctionCall","src":"2976:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2966:6:24"},"nodeType":"YulFunctionCall","src":"2966:31:24"},"nodeType":"YulExpressionStatement","src":"2966:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3013:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3016:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3006:6:24"},"nodeType":"YulFunctionCall","src":"3006:15:24"},"nodeType":"YulExpressionStatement","src":"3006:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3037:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3040:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3030:6:24"},"nodeType":"YulFunctionCall","src":"3030:15:24"},"nodeType":"YulExpressionStatement","src":"3030:15:24"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2924:127:24"},{"body":{"nodeType":"YulBlock","src":"3120:358:24","statements":[{"nodeType":"YulVariableDeclaration","src":"3130:16:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3145:1:24","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"3134:7:24","type":""}]},{"nodeType":"YulAssignment","src":"3155:16:24","value":{"name":"power_1","nodeType":"YulIdentifier","src":"3164:7:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3155:5:24"}]},{"nodeType":"YulAssignment","src":"3180:13:24","value":{"name":"_base","nodeType":"YulIdentifier","src":"3188:5:24"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3180:4:24"}]},{"body":{"nodeType":"YulBlock","src":"3244:228:24","statements":[{"body":{"nodeType":"YulBlock","src":"3289:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3291:16:24"},"nodeType":"YulFunctionCall","src":"3291:18:24"},"nodeType":"YulExpressionStatement","src":"3291:18:24"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3264:4:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3278:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3274:3:24"},"nodeType":"YulFunctionCall","src":"3274:6:24"},{"name":"base","nodeType":"YulIdentifier","src":"3282:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3270:3:24"},"nodeType":"YulFunctionCall","src":"3270:17:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3261:2:24"},"nodeType":"YulFunctionCall","src":"3261:27:24"},"nodeType":"YulIf","src":"3258:53:24"},{"body":{"nodeType":"YulBlock","src":"3350:29:24","statements":[{"nodeType":"YulAssignment","src":"3352:25:24","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3365:5:24"},{"name":"base","nodeType":"YulIdentifier","src":"3372:4:24"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3361:3:24"},"nodeType":"YulFunctionCall","src":"3361:16:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3352:5:24"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3331:8:24"},{"name":"power_1","nodeType":"YulIdentifier","src":"3341:7:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3327:3:24"},"nodeType":"YulFunctionCall","src":"3327:22:24"},"nodeType":"YulIf","src":"3324:55:24"},{"nodeType":"YulAssignment","src":"3392:23:24","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3404:4:24"},{"name":"base","nodeType":"YulIdentifier","src":"3410:4:24"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3400:3:24"},"nodeType":"YulFunctionCall","src":"3400:15:24"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3392:4:24"}]},{"nodeType":"YulAssignment","src":"3428:34:24","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"3444:7:24"},{"name":"exponent","nodeType":"YulIdentifier","src":"3453:8:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3440:3:24"},"nodeType":"YulFunctionCall","src":"3440:22:24"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"3428:8:24"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3213:8:24"},{"name":"power_1","nodeType":"YulIdentifier","src":"3223:7:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3210:2:24"},"nodeType":"YulFunctionCall","src":"3210:21:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3232:3:24","statements":[]},"pre":{"nodeType":"YulBlock","src":"3206:3:24","statements":[]},"src":"3202:270:24"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"3084:5:24","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"3091:8:24","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"3104:5:24","type":""},{"name":"base","nodeType":"YulTypedName","src":"3111:4:24","type":""}],"src":"3056:422:24"},{"body":{"nodeType":"YulBlock","src":"3542:747:24","statements":[{"body":{"nodeType":"YulBlock","src":"3580:52:24","statements":[{"nodeType":"YulAssignment","src":"3594:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3603:1:24","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3594:5:24"}]},{"nodeType":"YulLeave","src":"3617:5:24"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3562:8:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3555:6:24"},"nodeType":"YulFunctionCall","src":"3555:16:24"},"nodeType":"YulIf","src":"3552:80:24"},{"body":{"nodeType":"YulBlock","src":"3665:52:24","statements":[{"nodeType":"YulAssignment","src":"3679:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3688:1:24","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3679:5:24"}]},{"nodeType":"YulLeave","src":"3702:5:24"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3651:4:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3644:6:24"},"nodeType":"YulFunctionCall","src":"3644:12:24"},"nodeType":"YulIf","src":"3641:76:24"},{"cases":[{"body":{"nodeType":"YulBlock","src":"3753:52:24","statements":[{"nodeType":"YulAssignment","src":"3767:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3776:1:24","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3767:5:24"}]},{"nodeType":"YulLeave","src":"3790:5:24"}]},"nodeType":"YulCase","src":"3746:59:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3751:1:24","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3821:123:24","statements":[{"body":{"nodeType":"YulBlock","src":"3856:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3858:16:24"},"nodeType":"YulFunctionCall","src":"3858:18:24"},"nodeType":"YulExpressionStatement","src":"3858:18:24"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3841:8:24"},{"kind":"number","nodeType":"YulLiteral","src":"3851:3:24","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3838:2:24"},"nodeType":"YulFunctionCall","src":"3838:17:24"},"nodeType":"YulIf","src":"3835:43:24"},{"nodeType":"YulAssignment","src":"3891:25:24","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3904:8:24"},{"kind":"number","nodeType":"YulLiteral","src":"3914:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3900:3:24"},"nodeType":"YulFunctionCall","src":"3900:16:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3891:5:24"}]},{"nodeType":"YulLeave","src":"3929:5:24"}]},"nodeType":"YulCase","src":"3814:130:24","value":{"kind":"number","nodeType":"YulLiteral","src":"3819:1:24","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"3733:4:24"},"nodeType":"YulSwitch","src":"3726:218:24"},{"body":{"nodeType":"YulBlock","src":"4042:70:24","statements":[{"nodeType":"YulAssignment","src":"4056:28:24","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4069:4:24"},{"name":"exponent","nodeType":"YulIdentifier","src":"4075:8:24"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"4065:3:24"},"nodeType":"YulFunctionCall","src":"4065:19:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4056:5:24"}]},{"nodeType":"YulLeave","src":"4097:5:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3966:4:24"},{"kind":"number","nodeType":"YulLiteral","src":"3972:2:24","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3963:2:24"},"nodeType":"YulFunctionCall","src":"3963:12:24"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3980:8:24"},{"kind":"number","nodeType":"YulLiteral","src":"3990:2:24","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3977:2:24"},"nodeType":"YulFunctionCall","src":"3977:16:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3959:3:24"},"nodeType":"YulFunctionCall","src":"3959:35:24"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4003:4:24"},{"kind":"number","nodeType":"YulLiteral","src":"4009:3:24","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4000:2:24"},"nodeType":"YulFunctionCall","src":"4000:13:24"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4018:8:24"},{"kind":"number","nodeType":"YulLiteral","src":"4028:2:24","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4015:2:24"},"nodeType":"YulFunctionCall","src":"4015:16:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3996:3:24"},"nodeType":"YulFunctionCall","src":"3996:36:24"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3956:2:24"},"nodeType":"YulFunctionCall","src":"3956:77:24"},"nodeType":"YulIf","src":"3953:159:24"},{"nodeType":"YulVariableDeclaration","src":"4121:57:24","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4163:4:24"},{"name":"exponent","nodeType":"YulIdentifier","src":"4169:8:24"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"4144:18:24"},"nodeType":"YulFunctionCall","src":"4144:34:24"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"4125:7:24","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"4134:6:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"4223:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4225:16:24"},"nodeType":"YulFunctionCall","src":"4225:18:24"},"nodeType":"YulExpressionStatement","src":"4225:18:24"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"4193:7:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4210:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4206:3:24"},"nodeType":"YulFunctionCall","src":"4206:6:24"},{"name":"base_1","nodeType":"YulIdentifier","src":"4214:6:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4202:3:24"},"nodeType":"YulFunctionCall","src":"4202:19:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:24"},"nodeType":"YulFunctionCall","src":"4190:32:24"},"nodeType":"YulIf","src":"4187:58:24"},{"nodeType":"YulAssignment","src":"4254:29:24","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"4267:7:24"},{"name":"base_1","nodeType":"YulIdentifier","src":"4276:6:24"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4263:3:24"},"nodeType":"YulFunctionCall","src":"4263:20:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4254:5:24"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"3513:4:24","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"3519:8:24","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"3532:5:24","type":""}],"src":"3483:806:24"},{"body":{"nodeType":"YulBlock","src":"4362:72:24","statements":[{"nodeType":"YulAssignment","src":"4372:56:24","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4402:4:24"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4412:8:24"},{"kind":"number","nodeType":"YulLiteral","src":"4422:4:24","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4408:3:24"},"nodeType":"YulFunctionCall","src":"4408:19:24"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"4381:20:24"},"nodeType":"YulFunctionCall","src":"4381:47:24"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4372:5:24"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"4333:4:24","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4339:8:24","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4352:5:24","type":""}],"src":"4294:140:24"},{"body":{"nodeType":"YulBlock","src":"4491:116:24","statements":[{"nodeType":"YulAssignment","src":"4501:20:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4516:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"4519:1:24"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4512:3:24"},"nodeType":"YulFunctionCall","src":"4512:9:24"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"4501:7:24"}]},{"body":{"nodeType":"YulBlock","src":"4579:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4581:16:24"},"nodeType":"YulFunctionCall","src":"4581:18:24"},"nodeType":"YulExpressionStatement","src":"4581:18:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4550:1:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4543:6:24"},"nodeType":"YulFunctionCall","src":"4543:9:24"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4557:1:24"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"4564:7:24"},{"name":"x","nodeType":"YulIdentifier","src":"4573:1:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4560:3:24"},"nodeType":"YulFunctionCall","src":"4560:15:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4554:2:24"},"nodeType":"YulFunctionCall","src":"4554:22:24"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4540:2:24"},"nodeType":"YulFunctionCall","src":"4540:37:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4533:6:24"},"nodeType":"YulFunctionCall","src":"4533:45:24"},"nodeType":"YulIf","src":"4530:71:24"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4470:1:24","type":""},{"name":"y","nodeType":"YulTypedName","src":"4473:1:24","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"4479:7:24","type":""}],"src":"4439:168:24"},{"body":{"nodeType":"YulBlock","src":"4713:102:24","statements":[{"nodeType":"YulAssignment","src":"4723:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4735:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"4746:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4731:3:24"},"nodeType":"YulFunctionCall","src":"4731:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4723:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4765:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4780:6:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4796:3:24","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4801:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4792:3:24"},"nodeType":"YulFunctionCall","src":"4792:11:24"},{"kind":"number","nodeType":"YulLiteral","src":"4805:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4788:3:24"},"nodeType":"YulFunctionCall","src":"4788:19:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4776:3:24"},"nodeType":"YulFunctionCall","src":"4776:32:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4758:6:24"},"nodeType":"YulFunctionCall","src":"4758:51:24"},"nodeType":"YulExpressionStatement","src":"4758:51:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4682:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4693:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4704:4:24","type":""}],"src":"4612:203:24"},{"body":{"nodeType":"YulBlock","src":"4868:77:24","statements":[{"nodeType":"YulAssignment","src":"4878:16:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4889:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"4892:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4885:3:24"},"nodeType":"YulFunctionCall","src":"4885:9:24"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4878:3:24"}]},{"body":{"nodeType":"YulBlock","src":"4917:22:24","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4919:16:24"},"nodeType":"YulFunctionCall","src":"4919:18:24"},"nodeType":"YulExpressionStatement","src":"4919:18:24"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4909:1:24"},{"name":"sum","nodeType":"YulIdentifier","src":"4912:3:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4906:2:24"},"nodeType":"YulFunctionCall","src":"4906:10:24"},"nodeType":"YulIf","src":"4903:36:24"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4851:1:24","type":""},{"name":"y","nodeType":"YulTypedName","src":"4854:1:24","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4860:3:24","type":""}],"src":"4820:125:24"},{"body":{"nodeType":"YulBlock","src":"5107:188:24","statements":[{"nodeType":"YulAssignment","src":"5117:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5129:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"5140:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5125:3:24"},"nodeType":"YulFunctionCall","src":"5125:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5117:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5159:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5174:6:24"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5190:3:24","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5195:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5186:3:24"},"nodeType":"YulFunctionCall","src":"5186:11:24"},{"kind":"number","nodeType":"YulLiteral","src":"5199:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5182:3:24"},"nodeType":"YulFunctionCall","src":"5182:19:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5170:3:24"},"nodeType":"YulFunctionCall","src":"5170:32:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5152:6:24"},"nodeType":"YulFunctionCall","src":"5152:51:24"},"nodeType":"YulExpressionStatement","src":"5152:51:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5223:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"5234:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:24"},"nodeType":"YulFunctionCall","src":"5219:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"5239:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:24"},"nodeType":"YulFunctionCall","src":"5212:34:24"},"nodeType":"YulExpressionStatement","src":"5212:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5266:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"5277:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5262:3:24"},"nodeType":"YulFunctionCall","src":"5262:18:24"},{"name":"value2","nodeType":"YulIdentifier","src":"5282:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5255:6:24"},"nodeType":"YulFunctionCall","src":"5255:34:24"},"nodeType":"YulExpressionStatement","src":"5255:34:24"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5060:9:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5071:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5079:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5087:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5098:4:24","type":""}],"src":"4950:345:24"},{"body":{"nodeType":"YulBlock","src":"5401:76:24","statements":[{"nodeType":"YulAssignment","src":"5411:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5423:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"5434:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5419:3:24"},"nodeType":"YulFunctionCall","src":"5419:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5411:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5453:9:24"},{"name":"value0","nodeType":"YulIdentifier","src":"5464:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5446:6:24"},"nodeType":"YulFunctionCall","src":"5446:25:24"},"nodeType":"YulExpressionStatement","src":"5446:25:24"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5370:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5381:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5392:4:24","type":""}],"src":"5300:177:24"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000c4a38038062000c4a83398101604081905262000034916200024b565b6040518060400160405280600981526020016804d6f636b45524332360bc1b815250604051806040016040528060048152602001634d4f434b60e01b81525081600390816200008491906200030a565b5060046200009382826200030a565b505050620000ca33620000ab620000d160201b60201c565b620000b890600a620004eb565b620000c4908462000503565b620000d6565b5062000533565b601290565b6001600160a01b038216620001065760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620001146000838362000118565b5050565b6001600160a01b038316620001475780600260008282546200013b91906200051d565b90915550620001bb9050565b6001600160a01b038316600090815260208190526040902054818110156200019c5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000fd565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001d957600280548290039055620001f8565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023e91815260200190565b60405180910390a3505050565b6000602082840312156200025e57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200029057607f821691505b602082108103620002b157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030557600081815260208120601f850160051c81016020861015620002e05750805b601f850160051c820191505b818110156200030157828155600101620002ec565b5050505b505050565b81516001600160401b0381111562000326576200032662000265565b6200033e816200033784546200027b565b84620002b7565b602080601f8311600181146200037657600084156200035d5750858301515b600019600386901b1c1916600185901b17855562000301565b600085815260208120601f198616915b82811015620003a75788860151825594840194600190910190840162000386565b5085821015620003c65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200042d578160001904821115620004115762000411620003d6565b808516156200041f57918102915b93841c9390800290620003f1565b509250929050565b6000826200044657506001620004e5565b816200045557506000620004e5565b81600181146200046e5760028114620004795762000499565b6001915050620004e5565b60ff8411156200048d576200048d620003d6565b50506001821b620004e5565b5060208310610133831016604e8410600b8410161715620004be575081810a620004e5565b620004ca8383620003ec565b8060001904821115620004e157620004e1620003d6565b0290505b92915050565b6000620004fc60ff84168362000435565b9392505050565b8082028115828204841417620004e557620004e5620003d6565b80820180821115620004e557620004e5620003d6565b61070780620005436000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b4114610146578063a9059cbb1461014e578063dd62ed3e1461016157600080fd5b8063313ce5671461010e57806370a082311461011d57600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd146100fb575b600080fd5b6100b061019a565b6040516100bd919061057a565b60405180910390f35b6100d96100d43660046105e4565b61022c565b60405190151581526020016100bd565b6002545b6040519081526020016100bd565b6100d961010936600461060e565b610246565b604051601281526020016100bd565b6100ed61012b36600461064a565b6001600160a01b031660009081526020819052604090205490565b6100b061026a565b6100d961015c3660046105e4565b610279565b6100ed61016f36600461066c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101a99061069f565b80601f01602080910402602001604051908101604052809291908181526020018280546101d59061069f565b80156102225780601f106101f757610100808354040283529160200191610222565b820191906000526020600020905b81548152906001019060200180831161020557829003601f168201915b5050505050905090565b60003361023a818585610287565b60019150505b92915050565b600033610254858285610299565b61025f85858561031c565b506001949350505050565b6060600480546101a99061069f565b60003361023a81858561031c565b610294838383600161037b565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610316578181101561030757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103168484848403600061037b565b50505050565b6001600160a01b03831661034657604051634b637e8f60e11b8152600060048201526024016102fe565b6001600160a01b0382166103705760405163ec442f0560e01b8152600060048201526024016102fe565b610294838383610450565b6001600160a01b0384166103a55760405163e602df0560e01b8152600060048201526024016102fe565b6001600160a01b0383166103cf57604051634a1406b160e11b8152600060048201526024016102fe565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561031657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161044291815260200190565b60405180910390a350505050565b6001600160a01b03831661047b57806002600082825461047091906106d9565b909155506104ed9050565b6001600160a01b038316600090815260208190526040902054818110156104ce5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102fe565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661050957600280548290039055610528565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161056d91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105a75785810183015185820160400152820161058b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105df57600080fd5b919050565b600080604083850312156105f757600080fd5b610600836105c8565b946020939093013593505050565b60008060006060848603121561062357600080fd5b61062c846105c8565b925061063a602085016105c8565b9150604084013590509250925092565b60006020828403121561065c57600080fd5b610665826105c8565b9392505050565b6000806040838503121561067f57600080fd5b610688836105c8565b9150610696602084016105c8565b90509250929050565b600181811c908216806106b357607f821691505b6020821081036106d357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024057634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xC4A CODESIZE SUB DUP1 PUSH3 0xC4A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x4D6F636B455243323 PUSH1 0xBC SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x4D4F434B PUSH1 0xE0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x84 SWAP2 SWAP1 PUSH3 0x30A JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x93 DUP3 DUP3 PUSH3 0x30A JUMP JUMPDEST POP POP POP PUSH3 0xCA CALLER PUSH3 0xAB PUSH3 0xD1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB8 SWAP1 PUSH1 0xA PUSH3 0x4EB JUMP JUMPDEST PUSH3 0xC4 SWAP1 DUP5 PUSH3 0x503 JUMP JUMPDEST PUSH3 0xD6 JUMP JUMPDEST POP PUSH3 0x533 JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x106 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x114 PUSH1 0x0 DUP4 DUP4 PUSH3 0x118 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x147 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x13B SWAP2 SWAP1 PUSH3 0x51D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH3 0x1BB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH3 0x19C JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH3 0xFD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x1D9 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH3 0x1F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x23E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x290 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2B1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x305 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2E0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x301 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2EC JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x326 JUMPI PUSH3 0x326 PUSH3 0x265 JUMP JUMPDEST PUSH3 0x33E DUP2 PUSH3 0x337 DUP5 SLOAD PUSH3 0x27B JUMP JUMPDEST DUP5 PUSH3 0x2B7 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x376 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x35D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x301 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3A7 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x386 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x3C6 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x42D JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x411 JUMPI PUSH3 0x411 PUSH3 0x3D6 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x41F JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x3F1 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x446 JUMPI POP PUSH1 0x1 PUSH3 0x4E5 JUMP JUMPDEST DUP2 PUSH3 0x455 JUMPI POP PUSH1 0x0 PUSH3 0x4E5 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x46E JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x479 JUMPI PUSH3 0x499 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x4E5 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x48D JUMPI PUSH3 0x48D PUSH3 0x3D6 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x4E5 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x4BE JUMPI POP DUP2 DUP2 EXP PUSH3 0x4E5 JUMP JUMPDEST PUSH3 0x4CA DUP4 DUP4 PUSH3 0x3EC JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x4E1 JUMPI PUSH3 0x4E1 PUSH3 0x3D6 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4FC PUSH1 0xFF DUP5 AND DUP4 PUSH3 0x435 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x4E5 JUMPI PUSH3 0x4E5 PUSH3 0x3D6 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x4E5 JUMPI PUSH3 0x4E5 PUSH3 0x3D6 JUMP JUMPDEST PUSH2 0x707 DUP1 PUSH3 0x543 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xFB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0 PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x57A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xD9 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x246 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xED PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0x64A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x26A JUMP JUMPDEST PUSH2 0xD9 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0xED PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x66C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A9 SWAP1 PUSH2 0x69F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x69F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x222 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x222 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x205 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x254 DUP6 DUP3 DUP6 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x25F DUP6 DUP6 DUP6 PUSH2 0x31C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A9 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x31C JUMP JUMPDEST PUSH2 0x294 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x37B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x316 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x307 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x316 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x37B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x346 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x370 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH2 0x294 DUP4 DUP4 DUP4 PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x316 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x47B JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x470 SWAP2 SWAP1 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x4ED SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x509 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x528 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x56D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5A7 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x58B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x600 DUP4 PUSH2 0x5C8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62C DUP5 PUSH2 0x5C8 JUMP JUMPDEST SWAP3 POP PUSH2 0x63A PUSH1 0x20 DUP6 ADD PUSH2 0x5C8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x665 DUP3 PUSH2 0x5C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x688 DUP4 PUSH2 0x5C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x696 PUSH1 0x20 DUP5 ADD PUSH2 0x5C8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x6B3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x6D3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x240 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"121:159:23:-:0;;;153:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1896:113:10;;;;;;;;;;;;;-1:-1:-1;;;1896:113:10;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:10;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:10;:17;1995:7;1985;:17;:::i;:::-;;1896:113;;221:51:23::1;227:10;261;:8;;;:10;;:::i;:::-;255:16;::::0;:2:::1;:16;:::i;:::-;239:32;::::0;:13;:32:::1;:::i;:::-;221:5;:51::i;:::-;153:124:::0;121:159;;3002:82:10;3075:2;;3002:82::o;7721:208::-;-1:-1:-1;;;;;7791:21:10;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:10;;7864:1;7835:32;;;4758:51:24;4731:18;;7835:32:10;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:10;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:10;;-1:-1:-1;6356:540:10;;-1:-1:-1;;;;;6570:15:10;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:10;;-1:-1:-1;;;;;5170:32:24;;6649:50:10;;;5152:51:24;5219:18;;;5212:34;;;5262:18;;;5255:34;;;5125:18;;6649:50:10;4950:345:24;6599:115:10;-1:-1:-1;;;;;6834:15:10;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:10;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:10;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:10;7355:4;-1:-1:-1;;;;;7346:25:10;;7365:5;7346:25;;;;5446::24;;5434:2;5419:18;;5300:177;7346:25:10;;;;;;;;6271:1107;;;:::o;14:184:24:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:24;;14:184;-1:-1:-1;14:184:24:o;203:127::-;264:10;259:3;255:20;252:1;245:31;295:4;292:1;285:15;319:4;316:1;309:15;335:380;414:1;410:12;;;;457;;;478:61;;532:4;524:6;520:17;510:27;;478:61;585:2;577:6;574:14;554:18;551:38;548:161;;631:10;626:3;622:20;619:1;612:31;666:4;663:1;656:15;694:4;691:1;684:15;548:161;;335:380;;;:::o;846:545::-;948:2;943:3;940:11;937:448;;;984:1;1009:5;1005:2;998:17;1054:4;1050:2;1040:19;1124:2;1112:10;1108:19;1105:1;1101:27;1095:4;1091:38;1160:4;1148:10;1145:20;1142:47;;;-1:-1:-1;1183:4:24;1142:47;1238:2;1233:3;1229:12;1226:1;1222:20;1216:4;1212:31;1202:41;;1293:82;1311:2;1304:5;1301:13;1293:82;;;1356:17;;;1337:1;1326:13;1293:82;;;1297:3;;;937:448;846:545;;;:::o;1567:1352::-;1687:10;;-1:-1:-1;;;;;1709:30:24;;1706:56;;;1742:18;;:::i;:::-;1771:97;1861:6;1821:38;1853:4;1847:11;1821:38;:::i;:::-;1815:4;1771:97;:::i;:::-;1923:4;;1987:2;1976:14;;2004:1;1999:663;;;;2706:1;2723:6;2720:89;;;-1:-1:-1;2775:19:24;;;2769:26;2720:89;-1:-1:-1;;1524:1:24;1520:11;;;1516:24;1512:29;1502:40;1548:1;1544:11;;;1499:57;2822:81;;1969:944;;1999:663;793:1;786:14;;;830:4;817:18;;-1:-1:-1;;2035:20:24;;;2153:236;2167:7;2164:1;2161:14;2153:236;;;2256:19;;;2250:26;2235:42;;2348:27;;;;2316:1;2304:14;;;;2183:19;;2153:236;;;2157:3;2417:6;2408:7;2405:19;2402:201;;;2478:19;;;2472:26;-1:-1:-1;;2561:1:24;2557:14;;;2573:3;2553:24;2549:37;2545:42;2530:58;2515:74;;2402:201;-1:-1:-1;;;;;2649:1:24;2633:14;;;2629:22;2616:36;;-1:-1:-1;1567:1352:24:o;2924:127::-;2985:10;2980:3;2976:20;2973:1;2966:31;3016:4;3013:1;3006:15;3040:4;3037:1;3030:15;3056:422;3145:1;3188:5;3145:1;3202:270;3223:7;3213:8;3210:21;3202:270;;;3282:4;3278:1;3274:6;3270:17;3264:4;3261:27;3258:53;;;3291:18;;:::i;:::-;3341:7;3331:8;3327:22;3324:55;;;3361:16;;;;3324:55;3440:22;;;;3400:15;;;;3202:270;;;3206:3;3056:422;;;;;:::o;3483:806::-;3532:5;3562:8;3552:80;;-1:-1:-1;3603:1:24;3617:5;;3552:80;3651:4;3641:76;;-1:-1:-1;3688:1:24;3702:5;;3641:76;3733:4;3751:1;3746:59;;;;3819:1;3814:130;;;;3726:218;;3746:59;3776:1;3767:10;;3790:5;;;3814:130;3851:3;3841:8;3838:17;3835:43;;;3858:18;;:::i;:::-;-1:-1:-1;;3914:1:24;3900:16;;3929:5;;3726:218;;4028:2;4018:8;4015:16;4009:3;4003:4;4000:13;3996:36;3990:2;3980:8;3977:16;3972:2;3966:4;3963:12;3959:35;3956:77;3953:159;;;-1:-1:-1;4065:19:24;;;4097:5;;3953:159;4144:34;4169:8;4163:4;4144:34;:::i;:::-;4214:6;4210:1;4206:6;4202:19;4193:7;4190:32;4187:58;;;4225:18;;:::i;:::-;4263:20;;-1:-1:-1;3483:806:24;;;;;:::o;4294:140::-;4352:5;4381:47;4422:4;4412:8;4408:19;4402:4;4381:47;:::i;:::-;4372:56;4294:140;-1:-1:-1;;;4294:140:24:o;4439:168::-;4512:9;;;4543;;4560:15;;;4554:22;;4540:37;4530:71;;4581:18;;:::i;4820:125::-;4885:9;;;4906:10;;;4903:36;;;4919:18;;:::i;5300:177::-;121:159:23;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_1851":{"entryPoint":647,"id":1851,"parameterSlots":3,"returnSlots":0},"@_approve_1911":{"entryPoint":891,"id":1911,"parameterSlots":4,"returnSlots":0},"@_msgSender_2076":{"entryPoint":null,"id":2076,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1959":{"entryPoint":665,"id":1959,"parameterSlots":3,"returnSlots":0},"@_transfer_1690":{"entryPoint":796,"id":1690,"parameterSlots":3,"returnSlots":0},"@_update_1767":{"entryPoint":1104,"id":1767,"parameterSlots":3,"returnSlots":0},"@allowance_1587":{"entryPoint":null,"id":1587,"parameterSlots":2,"returnSlots":1},"@approve_1611":{"entryPoint":556,"id":1611,"parameterSlots":2,"returnSlots":1},"@balanceOf_1546":{"entryPoint":null,"id":1546,"parameterSlots":1,"returnSlots":1},"@decimals_1524":{"entryPoint":null,"id":1524,"parameterSlots":0,"returnSlots":1},"@name_1506":{"entryPoint":410,"id":1506,"parameterSlots":0,"returnSlots":1},"@symbol_1515":{"entryPoint":618,"id":1515,"parameterSlots":0,"returnSlots":1},"@totalSupply_1533":{"entryPoint":null,"id":1533,"parameterSlots":0,"returnSlots":1},"@transferFrom_1643":{"entryPoint":582,"id":1643,"parameterSlots":3,"returnSlots":1},"@transfer_1570":{"entryPoint":633,"id":1570,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":1480,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":1644,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":1550,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1508,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1402,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1753,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1695,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3592:24","statements":[{"nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:427:24","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:24","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:24","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:24","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:24"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:24"},"nodeType":"YulFunctionCall","src":"166:21:24"},"nodeType":"YulExpressionStatement","src":"166:21:24"},{"nodeType":"YulVariableDeclaration","src":"196:27:24","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:24"},"nodeType":"YulFunctionCall","src":"210:13:24"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:24"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:24"},"nodeType":"YulFunctionCall","src":"239:18:24"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:24"},"nodeType":"YulFunctionCall","src":"232:34:24"},"nodeType":"YulExpressionStatement","src":"232:34:24"},{"nodeType":"YulVariableDeclaration","src":"275:10:24","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:24","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:24","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:24"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:24"},"nodeType":"YulFunctionCall","src":"369:17:24"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:24"},"nodeType":"YulFunctionCall","src":"365:26:24"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:24"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:24"},"nodeType":"YulFunctionCall","src":"403:14:24"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:24"},"nodeType":"YulFunctionCall","src":"399:23:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:24"},"nodeType":"YulFunctionCall","src":"393:30:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:24"},"nodeType":"YulFunctionCall","src":"358:66:24"},"nodeType":"YulExpressionStatement","src":"358:66:24"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:24"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:24"},"nodeType":"YulFunctionCall","src":"302:13:24"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:24","statements":[{"nodeType":"YulAssignment","src":"318:15:24","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:24"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:24"},"nodeType":"YulFunctionCall","src":"323:10:24"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:24"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:24","statements":[]},"src":"294:140:24"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"458:9:24"},{"name":"length","nodeType":"YulIdentifier","src":"469:6:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"454:3:24"},"nodeType":"YulFunctionCall","src":"454:22:24"},{"kind":"number","nodeType":"YulLiteral","src":"478:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"450:3:24"},"nodeType":"YulFunctionCall","src":"450:31:24"},{"kind":"number","nodeType":"YulLiteral","src":"483:1:24","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"443:6:24"},"nodeType":"YulFunctionCall","src":"443:42:24"},"nodeType":"YulExpressionStatement","src":"443:42:24"},{"nodeType":"YulAssignment","src":"494:62:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:24"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"529:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"537:2:24","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:24"},"nodeType":"YulFunctionCall","src":"525:15:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:2:24","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"542:3:24"},"nodeType":"YulFunctionCall","src":"542:7:24"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"521:3:24"},"nodeType":"YulFunctionCall","src":"521:29:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:24"},"nodeType":"YulFunctionCall","src":"506:45:24"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:24"},"nodeType":"YulFunctionCall","src":"502:54:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:24"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:24","type":""}],"src":"14:548:24"},{"body":{"nodeType":"YulBlock","src":"616:147:24","statements":[{"nodeType":"YulAssignment","src":"626:29:24","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"648:6:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"635:12:24"},"nodeType":"YulFunctionCall","src":"635:20:24"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"626:5:24"}]},{"body":{"nodeType":"YulBlock","src":"741:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"750:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"753:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"743:6:24"},"nodeType":"YulFunctionCall","src":"743:12:24"},"nodeType":"YulExpressionStatement","src":"743:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"677:5:24"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"688:5:24"},{"kind":"number","nodeType":"YulLiteral","src":"695:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"684:3:24"},"nodeType":"YulFunctionCall","src":"684:54:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"674:2:24"},"nodeType":"YulFunctionCall","src":"674:65:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"667:6:24"},"nodeType":"YulFunctionCall","src":"667:73:24"},"nodeType":"YulIf","src":"664:93:24"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:24","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"606:5:24","type":""}],"src":"567:196:24"},{"body":{"nodeType":"YulBlock","src":"855:167:24","statements":[{"body":{"nodeType":"YulBlock","src":"901:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"910:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"913:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"903:6:24"},"nodeType":"YulFunctionCall","src":"903:12:24"},"nodeType":"YulExpressionStatement","src":"903:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"876:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"872:3:24"},"nodeType":"YulFunctionCall","src":"872:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"897:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"868:3:24"},"nodeType":"YulFunctionCall","src":"868:32:24"},"nodeType":"YulIf","src":"865:52:24"},{"nodeType":"YulAssignment","src":"926:39:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"955:9:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"936:18:24"},"nodeType":"YulFunctionCall","src":"936:29:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"926:6:24"}]},{"nodeType":"YulAssignment","src":"974:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1001:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1012:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:24"},"nodeType":"YulFunctionCall","src":"997:18:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"984:12:24"},"nodeType":"YulFunctionCall","src":"984:32:24"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"974:6:24"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"824:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"836:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"844:6:24","type":""}],"src":"768:254:24"},{"body":{"nodeType":"YulBlock","src":"1122:92:24","statements":[{"nodeType":"YulAssignment","src":"1132:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1144:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1155:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1140:3:24"},"nodeType":"YulFunctionCall","src":"1140:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1132:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:24"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1199:6:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1192:6:24"},"nodeType":"YulFunctionCall","src":"1192:14:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1185:6:24"},"nodeType":"YulFunctionCall","src":"1185:22:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1167:6:24"},"nodeType":"YulFunctionCall","src":"1167:41:24"},"nodeType":"YulExpressionStatement","src":"1167:41:24"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1102:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1113:4:24","type":""}],"src":"1027:187:24"},{"body":{"nodeType":"YulBlock","src":"1320:76:24","statements":[{"nodeType":"YulAssignment","src":"1330:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1353:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:24"},"nodeType":"YulFunctionCall","src":"1338:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1372:9:24"},{"name":"value0","nodeType":"YulIdentifier","src":"1383:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1365:6:24"},"nodeType":"YulFunctionCall","src":"1365:25:24"},"nodeType":"YulExpressionStatement","src":"1365:25:24"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1289:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1300:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1311:4:24","type":""}],"src":"1219:177:24"},{"body":{"nodeType":"YulBlock","src":"1505:224:24","statements":[{"body":{"nodeType":"YulBlock","src":"1551:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1560:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1563:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1553:6:24"},"nodeType":"YulFunctionCall","src":"1553:12:24"},"nodeType":"YulExpressionStatement","src":"1553:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:24"},"nodeType":"YulFunctionCall","src":"1522:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:24","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:24"},"nodeType":"YulFunctionCall","src":"1518:32:24"},"nodeType":"YulIf","src":"1515:52:24"},{"nodeType":"YulAssignment","src":"1576:39:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1605:9:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1586:18:24"},"nodeType":"YulFunctionCall","src":"1586:29:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1576:6:24"}]},{"nodeType":"YulAssignment","src":"1624:48:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1657:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1668:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1653:3:24"},"nodeType":"YulFunctionCall","src":"1653:18:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1634:18:24"},"nodeType":"YulFunctionCall","src":"1634:38:24"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1624:6:24"}]},{"nodeType":"YulAssignment","src":"1681:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1708:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1719:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1704:3:24"},"nodeType":"YulFunctionCall","src":"1704:18:24"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1691:12:24"},"nodeType":"YulFunctionCall","src":"1691:32:24"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1681:6:24"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1455:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1466:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1478:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1486:6:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1494:6:24","type":""}],"src":"1401:328:24"},{"body":{"nodeType":"YulBlock","src":"1831:87:24","statements":[{"nodeType":"YulAssignment","src":"1841:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1853:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"1864:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:24"},"nodeType":"YulFunctionCall","src":"1849:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1841:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1883:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1898:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"1906:4:24","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1894:3:24"},"nodeType":"YulFunctionCall","src":"1894:17:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1876:6:24"},"nodeType":"YulFunctionCall","src":"1876:36:24"},"nodeType":"YulExpressionStatement","src":"1876:36:24"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1800:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1811:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1822:4:24","type":""}],"src":"1734:184:24"},{"body":{"nodeType":"YulBlock","src":"1993:116:24","statements":[{"body":{"nodeType":"YulBlock","src":"2039:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2048:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2051:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2041:6:24"},"nodeType":"YulFunctionCall","src":"2041:12:24"},"nodeType":"YulExpressionStatement","src":"2041:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2014:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2010:3:24"},"nodeType":"YulFunctionCall","src":"2010:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"2035:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2006:3:24"},"nodeType":"YulFunctionCall","src":"2006:32:24"},"nodeType":"YulIf","src":"2003:52:24"},{"nodeType":"YulAssignment","src":"2064:39:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2093:9:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2074:18:24"},"nodeType":"YulFunctionCall","src":"2074:29:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:24"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:24","type":""}],"src":"1923:186:24"},{"body":{"nodeType":"YulBlock","src":"2201:173:24","statements":[{"body":{"nodeType":"YulBlock","src":"2247:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:24"},"nodeType":"YulFunctionCall","src":"2249:12:24"},"nodeType":"YulExpressionStatement","src":"2249:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2222:7:24"},{"name":"headStart","nodeType":"YulIdentifier","src":"2231:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2218:3:24"},"nodeType":"YulFunctionCall","src":"2218:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"2243:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2214:3:24"},"nodeType":"YulFunctionCall","src":"2214:32:24"},"nodeType":"YulIf","src":"2211:52:24"},{"nodeType":"YulAssignment","src":"2272:39:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2282:18:24"},"nodeType":"YulFunctionCall","src":"2282:29:24"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2272:6:24"}]},{"nodeType":"YulAssignment","src":"2320:48:24","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2353:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2349:3:24"},"nodeType":"YulFunctionCall","src":"2349:18:24"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2330:18:24"},"nodeType":"YulFunctionCall","src":"2330:38:24"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2320:6:24"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2159:9:24","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2170:7:24","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2182:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2190:6:24","type":""}],"src":"2114:260:24"},{"body":{"nodeType":"YulBlock","src":"2434:325:24","statements":[{"nodeType":"YulAssignment","src":"2444:22:24","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:24","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2461:4:24"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2454:3:24"},"nodeType":"YulFunctionCall","src":"2454:12:24"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:24"}]},{"nodeType":"YulVariableDeclaration","src":"2475:38:24","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2505:4:24"},{"kind":"number","nodeType":"YulLiteral","src":"2511:1:24","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2501:3:24"},"nodeType":"YulFunctionCall","src":"2501:12:24"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2479:18:24","type":""}]},{"body":{"nodeType":"YulBlock","src":"2552:31:24","statements":[{"nodeType":"YulAssignment","src":"2554:27:24","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2568:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:24","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2564:3:24"},"nodeType":"YulFunctionCall","src":"2564:17:24"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2554:6:24"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2532:18:24"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2525:6:24"},"nodeType":"YulFunctionCall","src":"2525:26:24"},"nodeType":"YulIf","src":"2522:61:24"},{"body":{"nodeType":"YulBlock","src":"2642:111:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2663:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2670:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2675:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2666:3:24"},"nodeType":"YulFunctionCall","src":"2666:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2656:6:24"},"nodeType":"YulFunctionCall","src":"2656:31:24"},"nodeType":"YulExpressionStatement","src":"2656:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2707:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2710:4:24","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2700:6:24"},"nodeType":"YulFunctionCall","src":"2700:15:24"},"nodeType":"YulExpressionStatement","src":"2700:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2735:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2738:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2728:6:24"},"nodeType":"YulFunctionCall","src":"2728:15:24"},"nodeType":"YulExpressionStatement","src":"2728:15:24"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2598:18:24"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2621:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"2629:2:24","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2618:2:24"},"nodeType":"YulFunctionCall","src":"2618:14:24"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2595:2:24"},"nodeType":"YulFunctionCall","src":"2595:38:24"},"nodeType":"YulIf","src":"2592:161:24"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2414:4:24","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2423:6:24","type":""}],"src":"2379:380:24"},{"body":{"nodeType":"YulBlock","src":"2921:211:24","statements":[{"nodeType":"YulAssignment","src":"2931:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2943:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"2954:2:24","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2939:3:24"},"nodeType":"YulFunctionCall","src":"2939:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2931:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2973:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2988:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"2996:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2984:3:24"},"nodeType":"YulFunctionCall","src":"2984:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2966:6:24"},"nodeType":"YulFunctionCall","src":"2966:74:24"},"nodeType":"YulExpressionStatement","src":"2966:74:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3060:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3071:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3056:3:24"},"nodeType":"YulFunctionCall","src":"3056:18:24"},{"name":"value1","nodeType":"YulIdentifier","src":"3076:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3049:6:24"},"nodeType":"YulFunctionCall","src":"3049:34:24"},"nodeType":"YulExpressionStatement","src":"3049:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3103:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3114:2:24","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3099:3:24"},"nodeType":"YulFunctionCall","src":"3099:18:24"},{"name":"value2","nodeType":"YulIdentifier","src":"3119:6:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3092:6:24"},"nodeType":"YulFunctionCall","src":"3092:34:24"},"nodeType":"YulExpressionStatement","src":"3092:34:24"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2874:9:24","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2885:6:24","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2893:6:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2901:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2912:4:24","type":""}],"src":"2764:368:24"},{"body":{"nodeType":"YulBlock","src":"3238:125:24","statements":[{"nodeType":"YulAssignment","src":"3248:26:24","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3260:9:24"},{"kind":"number","nodeType":"YulLiteral","src":"3271:2:24","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3256:3:24"},"nodeType":"YulFunctionCall","src":"3256:18:24"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3248:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3290:9:24"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3305:6:24"},{"kind":"number","nodeType":"YulLiteral","src":"3313:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3301:3:24"},"nodeType":"YulFunctionCall","src":"3301:55:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3283:6:24"},"nodeType":"YulFunctionCall","src":"3283:74:24"},"nodeType":"YulExpressionStatement","src":"3283:74:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3207:9:24","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3218:6:24","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3229:4:24","type":""}],"src":"3137:226:24"},{"body":{"nodeType":"YulBlock","src":"3416:174:24","statements":[{"nodeType":"YulAssignment","src":"3426:16:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3437:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"3440:1:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3433:3:24"},"nodeType":"YulFunctionCall","src":"3433:9:24"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"3426:3:24"}]},{"body":{"nodeType":"YulBlock","src":"3473:111:24","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3494:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3501:3:24","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3506:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3497:3:24"},"nodeType":"YulFunctionCall","src":"3497:20:24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3487:6:24"},"nodeType":"YulFunctionCall","src":"3487:31:24"},"nodeType":"YulExpressionStatement","src":"3487:31:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3538:1:24","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3541:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3531:6:24"},"nodeType":"YulFunctionCall","src":"3531:15:24"},"nodeType":"YulExpressionStatement","src":"3531:15:24"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3566:1:24","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3569:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3559:6:24"},"nodeType":"YulFunctionCall","src":"3559:15:24"},"nodeType":"YulExpressionStatement","src":"3559:15:24"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3457:1:24"},{"name":"sum","nodeType":"YulIdentifier","src":"3460:3:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3454:2:24"},"nodeType":"YulFunctionCall","src":"3454:10:24"},"nodeType":"YulIf","src":"3451:133:24"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3399:1:24","type":""},{"name":"y","nodeType":"YulTypedName","src":"3402:1:24","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"3408:3:24","type":""}],"src":"3368:222:24"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b4114610146578063a9059cbb1461014e578063dd62ed3e1461016157600080fd5b8063313ce5671461010e57806370a082311461011d57600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd146100fb575b600080fd5b6100b061019a565b6040516100bd919061057a565b60405180910390f35b6100d96100d43660046105e4565b61022c565b60405190151581526020016100bd565b6002545b6040519081526020016100bd565b6100d961010936600461060e565b610246565b604051601281526020016100bd565b6100ed61012b36600461064a565b6001600160a01b031660009081526020819052604090205490565b6100b061026a565b6100d961015c3660046105e4565b610279565b6100ed61016f36600461066c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101a99061069f565b80601f01602080910402602001604051908101604052809291908181526020018280546101d59061069f565b80156102225780601f106101f757610100808354040283529160200191610222565b820191906000526020600020905b81548152906001019060200180831161020557829003601f168201915b5050505050905090565b60003361023a818585610287565b60019150505b92915050565b600033610254858285610299565b61025f85858561031c565b506001949350505050565b6060600480546101a99061069f565b60003361023a81858561031c565b610294838383600161037b565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610316578181101561030757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103168484848403600061037b565b50505050565b6001600160a01b03831661034657604051634b637e8f60e11b8152600060048201526024016102fe565b6001600160a01b0382166103705760405163ec442f0560e01b8152600060048201526024016102fe565b610294838383610450565b6001600160a01b0384166103a55760405163e602df0560e01b8152600060048201526024016102fe565b6001600160a01b0383166103cf57604051634a1406b160e11b8152600060048201526024016102fe565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561031657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161044291815260200190565b60405180910390a350505050565b6001600160a01b03831661047b57806002600082825461047091906106d9565b909155506104ed9050565b6001600160a01b038316600090815260208190526040902054818110156104ce5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102fe565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661050957600280548290039055610528565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161056d91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105a75785810183015185820160400152820161058b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105df57600080fd5b919050565b600080604083850312156105f757600080fd5b610600836105c8565b946020939093013593505050565b60008060006060848603121561062357600080fd5b61062c846105c8565b925061063a602085016105c8565b9150604084013590509250925092565b60006020828403121561065c57600080fd5b610665826105c8565b9392505050565b6000806040838503121561067f57600080fd5b610688836105c8565b9150610696602084016105c8565b90509250929050565b600181811c908216806106b357607f821691505b6020821081036106d357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024057634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xFB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB0 PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x57A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xD9 PUSH2 0x109 CALLDATASIZE PUSH1 0x4 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x246 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBD JUMP JUMPDEST PUSH2 0xED PUSH2 0x12B CALLDATASIZE PUSH1 0x4 PUSH2 0x64A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB0 PUSH2 0x26A JUMP JUMPDEST PUSH2 0xD9 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0xED PUSH2 0x16F CALLDATASIZE PUSH1 0x4 PUSH2 0x66C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1A9 SWAP1 PUSH2 0x69F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x69F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x222 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x222 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x205 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x254 DUP6 DUP3 DUP6 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x25F DUP6 DUP6 DUP6 PUSH2 0x31C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1A9 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x31C JUMP JUMPDEST PUSH2 0x294 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x37B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x316 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x307 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x316 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0x37B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x346 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x370 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH2 0x294 DUP4 DUP4 DUP4 PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x316 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x442 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x47B JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x470 SWAP2 SWAP1 PUSH2 0x6D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x4ED SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x509 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x528 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x56D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5A7 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x58B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x600 DUP4 PUSH2 0x5C8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62C DUP5 PUSH2 0x5C8 JUMP JUMPDEST SWAP3 POP PUSH2 0x63A PUSH1 0x20 DUP6 ADD PUSH2 0x5C8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x665 DUP3 PUSH2 0x5C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x688 DUP4 PUSH2 0x5C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x696 PUSH1 0x20 DUP5 ADD PUSH2 0x5C8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x6B3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x6D3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x240 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP EXP ","sourceMap":"121:159:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:10;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:24;;1185:22;1167:41;;1155:2;1140:18;4293:186:10;1027:187:24;3144:97:10;3222:12;;3144:97;;;1365:25:24;;;1353:2;1338:18;3144:97:10;1219:177:24;5039:244:10;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1876:36:24;;1864:2;1849:18;3002:82:10;1734:184:24;3299:116:10;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:10;3364:7;3390:18;;;;;;;;;;;;3299:116;2276:93;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;3846:140::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:10;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2074:89;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:13;4420:31:10;735:10:13;4436:7:10;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:13;5182:37:10;5198:4;735:10:13;5213:5:10;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:10;;5039:244;-1:-1:-1;;;;5039:244:10:o;2276:93::-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:13;3733:27:10;735:10:13;3750:2:10;3754:5;3733:9;:27::i;8989:128::-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:10;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:10;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:10;;-1:-1:-1;;;;;2984:55:24;;10936:60:10;;;2966:74:24;3056:18;;;3049:34;;;3099:18;;;3092:34;;;2939:18;;10936:60:10;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:10;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:10;;5807:1;5780:30;;;3283:74:24;3256:18;;5780:30:10;3137:226:24;5735:86:10;-1:-1:-1;;;;;5834:16:10;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:10;;5902:1;5873:32;;;3283:74:24;3256:18;;5873:32:10;3137:226:24;5830:86:10;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;9949:432::-;-1:-1:-1;;;;;10061:19:10;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:10;;10132:1;10103:32;;;3283:74:24;3256:18;;10103:32:10;3137:226:24;10057:89:10;-1:-1:-1;;;;;10159:21:10;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:10;;10231:1;10203:31;;;3283:74:24;3256:18;;10203:31:10;3137:226:24;10155:90:10;-1:-1:-1;;;;;10254:18:10;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:10;10342:5;-1:-1:-1;;;;;10333:31:10;;10358:5;10333:31;;;;1365:25:24;;1353:2;1338:18;;1219:177;10333:31:10;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:10;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:10;;-1:-1:-1;6356:540:10;;-1:-1:-1;;;;;6570:15:10;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:10;;-1:-1:-1;;;;;2984:55:24;;6649:50:10;;;2966:74:24;3056:18;;;3049:34;;;3099:18;;;3092:34;;;2939:18;;6649:50:10;2764:368:24;6599:115:10;-1:-1:-1;;;;;6834:15:10;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:10;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:10;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:10;7355:4;-1:-1:-1;;;;;7346:25:10;;7365:5;7346:25;;;;1365::24;;1353:2;1338:18;;1219:177;7346:25:10;;;;;;;;6271:1107;;;:::o;14:548:24:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:24;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:24:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:186::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2074:29;2093:9;2074:29;:::i;:::-;2064:39;1923:186;-1:-1:-1;;;1923:186:24:o;2114:260::-;2182:6;2190;2243:2;2231:9;2222:7;2218:23;2214:32;2211:52;;;2259:1;2256;2249:12;2211:52;2282:29;2301:9;2282:29;:::i;:::-;2272:39;;2330:38;2364:2;2353:9;2349:18;2330:38;:::i;:::-;2320:48;;2114:260;;;;;:::o;2379:380::-;2458:1;2454:12;;;;2501;;;2522:61;;2576:4;2568:6;2564:17;2554:27;;2522:61;2629:2;2621:6;2618:14;2598:18;2595:38;2592:161;;2675:10;2670:3;2666:20;2663:1;2656:31;2710:4;2707:1;2700:15;2738:4;2735:1;2728:15;2592:161;;2379:380;;;:::o;3368:222::-;3433:9;;;3454:10;;;3451:133;;;3506:10;3501:3;3497:20;3494:1;3487:31;3541:4;3538:1;3531:15;3569:4;3566:1;3559:15"},"gasEstimates":{"creation":{"codeDepositCost":"359800","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24739","balanceOf(address)":"2585","decimals()":"200","name()":"infinite","symbol()":"infinite","totalSupply()":"2326","transfer(address,uint256)":"51266","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"premintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/mocks/MockERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\ncontract MockERC20 is ERC20 {\\n  constructor(uint256 premintAmount) ERC20('MockERC20', 'MOCK') {\\n    _mint(msg.sender, premintAmount * 10 ** decimals());\\n  }\\n\\n}\\n\",\"keccak256\":\"0x18ee0205086474cf68c0689c75bd7bc7aa0280775383cbf93d2abd8d255a751d\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1468,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":1474,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":1476,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":1478,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1480,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}