/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockChainlink,
  MockChainlinkInterface,
} from "../../../../contracts/mocks/Chainlink.sol/MockChainlink";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "_value",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516100c63803806100c683398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60688061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063313ce56714603757806350d25bcd14604b575b600080fd5b604051600681526020015b60405180910390f35b600054604051908152602001604256fea164736f6c6343000814000a";

type MockChainlinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlink__factory extends ContractFactory {
  constructor(...args: MockChainlinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _value: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_value, overrides || {});
  }
  override deploy(
    _value: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_value, overrides || {}) as Promise<
      MockChainlink & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockChainlink__factory {
    return super.connect(runner) as MockChainlink__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkInterface {
    return new Interface(_abi) as MockChainlinkInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockChainlink {
    return new Contract(address, _abi, runner) as unknown as MockChainlink;
  }
}
