/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type KPIStruct = {
  time: BigNumberish;
  timeStatus: BigNumberish;
  current: BigNumberish;
  weight: BigNumberish;
};

export type KPIStructOutput = [
  time: bigint,
  timeStatus: bigint,
  current: bigint,
  weight: bigint
] & { time: bigint; timeStatus: bigint; current: bigint; weight: bigint };

export interface VestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addKPI"
      | "distribute"
      | "distributed"
      | "getKPI"
      | "increaseKPI"
      | "modifyKPI"
      | "redeem"
      | "removeKPI"
      | "unlocked"
      | "updateAirdrop"
      | "updateKPI"
      | "updateToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Distribute"
      | "KPIAdded"
      | "KPIModified"
      | "KPIRemoved"
      | "KPIUpdated"
      | "Redeem"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addKPI",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getKPI", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "increaseKPI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyKPI",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeKPI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlocked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAirdrop",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKPI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addKPI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKPI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseKPI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modifyKPI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeKPI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateKPI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;
}

export namespace DistributeEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KPIAddedEvent {
  export type InputTuple = [
    code: BytesLike,
    time: BigNumberish,
    timeStatus: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    code: string,
    time: bigint,
    timeStatus: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    code: string;
    time: bigint;
    timeStatus: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KPIModifiedEvent {
  export type InputTuple = [
    code: BytesLike,
    time: BigNumberish,
    timeStatus: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    code: string,
    time: bigint,
    timeStatus: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    code: string;
    time: bigint;
    timeStatus: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KPIRemovedEvent {
  export type InputTuple = [code: BytesLike];
  export type OutputTuple = [code: string];
  export interface OutputObject {
    code: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KPIUpdatedEvent {
  export type InputTuple = [code: BytesLike, amount: BigNumberish];
  export type OutputTuple = [code: string, amount: bigint];
  export interface OutputObject {
    code: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vesting extends BaseContract {
  connect(runner?: ContractRunner | null): Vesting;
  waitForDeployment(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addKPI: TypedContractMethod<
    [
      _code: BytesLike,
      _time: BigNumberish,
      _timeStatus: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  distribute: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributed: TypedContractMethod<[_to: AddressLike], [bigint], "view">;

  getKPI: TypedContractMethod<[_code: BytesLike], [KPIStructOutput], "view">;

  increaseKPI: TypedContractMethod<
    [_code: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  modifyKPI: TypedContractMethod<
    [
      _code: BytesLike,
      _time: BigNumberish,
      _timeStatus: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;

  removeKPI: TypedContractMethod<[_code: BytesLike], [void], "nonpayable">;

  unlocked: TypedContractMethod<[_to: AddressLike], [bigint], "view">;

  updateAirdrop: TypedContractMethod<
    [_airdrop: AddressLike],
    [void],
    "nonpayable"
  >;

  updateKPI: TypedContractMethod<
    [_code: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addKPI"
  ): TypedContractMethod<
    [
      _code: BytesLike,
      _time: BigNumberish,
      _timeStatus: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributed"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getKPI"
  ): TypedContractMethod<[_code: BytesLike], [KPIStructOutput], "view">;
  getFunction(
    nameOrSignature: "increaseKPI"
  ): TypedContractMethod<
    [_code: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyKPI"
  ): TypedContractMethod<
    [
      _code: BytesLike,
      _time: BigNumberish,
      _timeStatus: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "removeKPI"
  ): TypedContractMethod<[_code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlocked"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateAirdrop"
  ): TypedContractMethod<[_airdrop: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateKPI"
  ): TypedContractMethod<
    [_code: BytesLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Distribute"
  ): TypedContractEvent<
    DistributeEvent.InputTuple,
    DistributeEvent.OutputTuple,
    DistributeEvent.OutputObject
  >;
  getEvent(
    key: "KPIAdded"
  ): TypedContractEvent<
    KPIAddedEvent.InputTuple,
    KPIAddedEvent.OutputTuple,
    KPIAddedEvent.OutputObject
  >;
  getEvent(
    key: "KPIModified"
  ): TypedContractEvent<
    KPIModifiedEvent.InputTuple,
    KPIModifiedEvent.OutputTuple,
    KPIModifiedEvent.OutputObject
  >;
  getEvent(
    key: "KPIRemoved"
  ): TypedContractEvent<
    KPIRemovedEvent.InputTuple,
    KPIRemovedEvent.OutputTuple,
    KPIRemovedEvent.OutputObject
  >;
  getEvent(
    key: "KPIUpdated"
  ): TypedContractEvent<
    KPIUpdatedEvent.InputTuple,
    KPIUpdatedEvent.OutputTuple,
    KPIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;

  filters: {
    "Distribute(address,uint256)": TypedContractEvent<
      DistributeEvent.InputTuple,
      DistributeEvent.OutputTuple,
      DistributeEvent.OutputObject
    >;
    Distribute: TypedContractEvent<
      DistributeEvent.InputTuple,
      DistributeEvent.OutputTuple,
      DistributeEvent.OutputObject
    >;

    "KPIAdded(bytes32,uint256,uint8,uint16)": TypedContractEvent<
      KPIAddedEvent.InputTuple,
      KPIAddedEvent.OutputTuple,
      KPIAddedEvent.OutputObject
    >;
    KPIAdded: TypedContractEvent<
      KPIAddedEvent.InputTuple,
      KPIAddedEvent.OutputTuple,
      KPIAddedEvent.OutputObject
    >;

    "KPIModified(bytes32,uint256,uint8,uint16)": TypedContractEvent<
      KPIModifiedEvent.InputTuple,
      KPIModifiedEvent.OutputTuple,
      KPIModifiedEvent.OutputObject
    >;
    KPIModified: TypedContractEvent<
      KPIModifiedEvent.InputTuple,
      KPIModifiedEvent.OutputTuple,
      KPIModifiedEvent.OutputObject
    >;

    "KPIRemoved(bytes32)": TypedContractEvent<
      KPIRemovedEvent.InputTuple,
      KPIRemovedEvent.OutputTuple,
      KPIRemovedEvent.OutputObject
    >;
    KPIRemoved: TypedContractEvent<
      KPIRemovedEvent.InputTuple,
      KPIRemovedEvent.OutputTuple,
      KPIRemovedEvent.OutputObject
    >;

    "KPIUpdated(bytes32,uint16)": TypedContractEvent<
      KPIUpdatedEvent.InputTuple,
      KPIUpdatedEvent.OutputTuple,
      KPIUpdatedEvent.OutputObject
    >;
    KPIUpdated: TypedContractEvent<
      KPIUpdatedEvent.InputTuple,
      KPIUpdatedEvent.OutputTuple,
      KPIUpdatedEvent.OutputObject
    >;

    "Redeem(address,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
  };
}
