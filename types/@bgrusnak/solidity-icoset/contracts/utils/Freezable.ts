/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface FreezableInterface extends Interface {
  getFunction(
    nameOrSignature: "freeze" | "freezed" | "unfreeze"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Freezed" | "Unfreezed"): EventFragment;

  encodeFunctionData(functionFragment: "freeze", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "freezed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreeze",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freezed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
}

export namespace FreezedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfreezedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Freezable extends BaseContract {
  connect(runner?: ContractRunner | null): Freezable;
  waitForDeployment(): Promise<this>;

  interface: FreezableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  freeze: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  freezed: TypedContractMethod<[target: AddressLike], [boolean], "view">;

  unfreeze: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "freeze"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freezed"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unfreeze"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Freezed"
  ): TypedContractEvent<
    FreezedEvent.InputTuple,
    FreezedEvent.OutputTuple,
    FreezedEvent.OutputObject
  >;
  getEvent(
    key: "Unfreezed"
  ): TypedContractEvent<
    UnfreezedEvent.InputTuple,
    UnfreezedEvent.OutputTuple,
    UnfreezedEvent.OutputObject
  >;

  filters: {
    "Freezed(address)": TypedContractEvent<
      FreezedEvent.InputTuple,
      FreezedEvent.OutputTuple,
      FreezedEvent.OutputObject
    >;
    Freezed: TypedContractEvent<
      FreezedEvent.InputTuple,
      FreezedEvent.OutputTuple,
      FreezedEvent.OutputObject
    >;

    "Unfreezed(address)": TypedContractEvent<
      UnfreezedEvent.InputTuple,
      UnfreezedEvent.OutputTuple,
      UnfreezedEvent.OutputObject
    >;
    Unfreezed: TypedContractEvent<
      UnfreezedEvent.InputTuple,
      UnfreezedEvent.OutputTuple,
      UnfreezedEvent.OutputObject
    >;
  };
}
