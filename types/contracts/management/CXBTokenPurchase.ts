/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CXBTokenPurchaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "at"
      | "authority"
      | "balanceOf"
      | "bonus"
      | "buy(address,address,uint256,address)"
      | "buy(address,uint256,address)"
      | "calculateAmount"
      | "cashPercent"
      | "chainLinkInterface"
      | "clean"
      | "deposit()"
      | "deposit(address)"
      | "hasRate"
      | "isConsumingScheduledOp"
      | "length"
      | "nativeRate"
      | "pause"
      | "paused"
      | "rate"
      | "setAuthority"
      | "setBonus"
      | "setCashPercent"
      | "setChainLinkInterface"
      | "setNativeRate"
      | "setRate"
      | "setToken"
      | "setTokenPercent"
      | "setVesting"
      | "token"
      | "tokenPercent"
      | "unpause"
      | "vesting"
      | "withdraw(address)"
      | "withdraw(address,address)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorityUpdated"
      | "BoughtTokens"
      | "Paused"
      | "ReferralsProvided"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "at", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bonus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy(address,address,uint256,address)",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buy(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cashPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainLinkInterface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clean",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsumingScheduledOp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCashPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainLinkInterface",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVesting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vesting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,address)",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buy(address,address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buy(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainLinkInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clean", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConsumingScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCashPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainLinkInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,address)",
    data: BytesLike
  ): Result;
}

export namespace AuthorityUpdatedEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoughtTokensEvent {
  export type InputTuple = [
    sender: AddressLike,
    currency: AddressLike,
    value: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    currency: string,
    value: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    sender: string;
    currency: string;
    value: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralsProvidedEvent {
  export type InputTuple = [
    sender: AddressLike,
    referral: AddressLike,
    currency: AddressLike,
    amount: BigNumberish,
    cashAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    referral: string,
    currency: string,
    amount: bigint,
    cashAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    referral: string;
    currency: string;
    amount: bigint;
    cashAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CXBTokenPurchase extends BaseContract {
  connect(runner?: ContractRunner | null): CXBTokenPurchase;
  waitForDeployment(): Promise<this>;

  interface: CXBTokenPurchaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  at: TypedContractMethod<[ratePos: BigNumberish], [[string, bigint]], "view">;

  authority: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[currency: AddressLike], [bigint], "view">;

  bonus: TypedContractMethod<[], [bigint], "view">;

  "buy(address,address,uint256,address)": TypedContractMethod<
    [
      buyer: AddressLike,
      currency: AddressLike,
      value: BigNumberish,
      referral: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  "buy(address,uint256,address)": TypedContractMethod<
    [currency: AddressLike, value: BigNumberish, referral: AddressLike],
    [boolean],
    "nonpayable"
  >;

  calculateAmount: TypedContractMethod<
    [currency: AddressLike, value: BigNumberish],
    [bigint],
    "view"
  >;

  cashPercent: TypedContractMethod<[], [bigint], "view">;

  chainLinkInterface: TypedContractMethod<[], [string], "view">;

  clean: TypedContractMethod<
    [_to: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "deposit()": TypedContractMethod<[], [void], "payable">;

  "deposit(address)": TypedContractMethod<
    [referral: AddressLike],
    [void],
    "payable"
  >;

  hasRate: TypedContractMethod<[currency: AddressLike], [boolean], "view">;

  isConsumingScheduledOp: TypedContractMethod<[], [string], "view">;

  length: TypedContractMethod<[], [bigint], "view">;

  nativeRate: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rate: TypedContractMethod<[currency: AddressLike], [bigint], "view">;

  setAuthority: TypedContractMethod<
    [newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  setBonus: TypedContractMethod<[_bonus: BigNumberish], [void], "nonpayable">;

  setCashPercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setChainLinkInterface: TypedContractMethod<
    [_chainlink: AddressLike],
    [void],
    "nonpayable"
  >;

  setNativeRate: TypedContractMethod<
    [_native: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRate: TypedContractMethod<
    [currency: AddressLike, _rate: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  setTokenPercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVesting: TypedContractMethod<
    [_vesting: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  tokenPercent: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  vesting: TypedContractMethod<[], [string], "view">;

  "withdraw(address)": TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  "withdraw(address,address)": TypedContractMethod<
    [currency: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "at"
  ): TypedContractMethod<[ratePos: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "authority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[currency: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buy(address,address,uint256,address)"
  ): TypedContractMethod<
    [
      buyer: AddressLike,
      currency: AddressLike,
      value: BigNumberish,
      referral: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buy(address,uint256,address)"
  ): TypedContractMethod<
    [currency: AddressLike, value: BigNumberish, referral: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateAmount"
  ): TypedContractMethod<
    [currency: AddressLike, value: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cashPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainLinkInterface"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clean"
  ): TypedContractMethod<
    [_to: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit()"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "deposit(address)"
  ): TypedContractMethod<[referral: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "hasRate"
  ): TypedContractMethod<[currency: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isConsumingScheduledOp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nativeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[currency: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAuthority"
  ): TypedContractMethod<[newAuthority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBonus"
  ): TypedContractMethod<[_bonus: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCashPercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainLinkInterface"
  ): TypedContractMethod<[_chainlink: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNativeRate"
  ): TypedContractMethod<[_native: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRate"
  ): TypedContractMethod<
    [currency: AddressLike, _rate: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenPercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVesting"
  ): TypedContractMethod<[_vesting: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vesting"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw(address)"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw(address,address)"
  ): TypedContractMethod<
    [currency: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorityUpdated"
  ): TypedContractEvent<
    AuthorityUpdatedEvent.InputTuple,
    AuthorityUpdatedEvent.OutputTuple,
    AuthorityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BoughtTokens"
  ): TypedContractEvent<
    BoughtTokensEvent.InputTuple,
    BoughtTokensEvent.OutputTuple,
    BoughtTokensEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralsProvided"
  ): TypedContractEvent<
    ReferralsProvidedEvent.InputTuple,
    ReferralsProvidedEvent.OutputTuple,
    ReferralsProvidedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AuthorityUpdated(address)": TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;
    AuthorityUpdated: TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;

    "BoughtTokens(address,address,uint256,uint256)": TypedContractEvent<
      BoughtTokensEvent.InputTuple,
      BoughtTokensEvent.OutputTuple,
      BoughtTokensEvent.OutputObject
    >;
    BoughtTokens: TypedContractEvent<
      BoughtTokensEvent.InputTuple,
      BoughtTokensEvent.OutputTuple,
      BoughtTokensEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReferralsProvided(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      ReferralsProvidedEvent.InputTuple,
      ReferralsProvidedEvent.OutputTuple,
      ReferralsProvidedEvent.OutputObject
    >;
    ReferralsProvided: TypedContractEvent<
      ReferralsProvidedEvent.InputTuple,
      ReferralsProvidedEvent.OutputTuple,
      ReferralsProvidedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
